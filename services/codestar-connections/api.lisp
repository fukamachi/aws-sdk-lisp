;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codestar-connections/api
  (:use)
  (:nicknames #:aws/codestar-connections)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codestar-connections/api)
(common-lisp:progn
 (common-lisp:define-condition codestar-connections-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codestar-connections-error))
(common-lisp:progn
 (common-lisp:defclass codestar-connections-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "codestar-connections"
                        :api-version "2019-12-01" :host-prefix
                        "codestar-connections" :signing-name
                        "codestar-connections" :global-host common-lisp:nil
                        :target-prefix
                        "com.amazonaws.codestar.connections.CodeStar_connections_20191201"
                        :json-version "1.0"))
 (common-lisp:export 'codestar-connections-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("ConditionalCheckFailedException" . conditional-check-failed-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceUnavailableException" . resource-unavailable-exception)
    ("RetryLatestCommitFailedException" . retry-latest-commit-failed-exception)
    ("SyncBlockerDoesNotExistException"
     . sync-blocker-does-not-exist-exception)
    ("SyncConfigurationStillExistsException"
     . sync-configuration-still-exists-exception)
    ("ThrottlingException" . throttling-exception)
    ("UnsupportedOperationException" . unsupported-operation-exception)
    ("UnsupportedProviderTypeException" . unsupported-provider-type-exception)
    ("UpdateOutOfSyncException" . update-out-of-sync-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:deftype blocker-status () 'common-lisp:string)
(common-lisp:deftype blocker-type () 'common-lisp:string)
(common-lisp:deftype branch-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conditional-check-failed-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conditional-check-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conditional-check-failed-exception
                    'conditional-check-failed-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass connection common-lisp:nil
                       ((connection-name :initarg :connection-name :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor struct-shape-connection-connection-name
                         :shape "ConnectionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-arn :initarg :connection-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor struct-shape-connection-connection-arn
                         :shape "ConnectionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-type :initarg :provider-type :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor struct-shape-connection-provider-type :shape
                         "ProviderType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-account-id :initarg :owner-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-connection-owner-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connection-status :initarg :connection-status
                         :initform common-lisp:nil :type
                         (common-lisp:or connection-status common-lisp:null)
                         :accessor struct-shape-connection-connection-status
                         :shape "ConnectionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (host-arn :initarg :host-arn :initform common-lisp:nil
                         :type (common-lisp:or host-arn common-lisp:null)
                         :accessor struct-shape-connection-host-arn :shape
                         "HostArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connection
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'connection 'make-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account-id))
      (common-lisp:list
       (common-lisp:cons "OwnerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-arn))
      (common-lisp:list
       (common-lisp:cons "HostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection))
   common-lisp:nil))
(common-lisp:deftype connection-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connection-list ()
   '(trivial-types:proper-list connection))
 (common-lisp:defun make-connection-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connection-name () 'common-lisp:string)
(common-lisp:deftype connection-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-connection-input common-lisp:nil
                       ((provider-type :initarg :provider-type :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor
                         struct-shape-create-connection-input-provider-type
                         :shape "ProviderType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         (common-lisp:error ":connection-name is required")
                         :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor
                         struct-shape-create-connection-input-connection-name
                         :shape "ConnectionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-connection-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (host-arn :initarg :host-arn :initform common-lisp:nil
                         :type (common-lisp:or host-arn common-lisp:null)
                         :accessor
                         struct-shape-create-connection-input-host-arn :shape
                         "HostArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-connection-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-connection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-connection-input 'make-create-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-arn))
      (common-lisp:list
       (common-lisp:cons "HostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-output common-lisp:nil
                       ((connection-arn :initarg :connection-arn :initform
                         (common-lisp:error ":connection-arn is required")
                         :type (common-lisp:or connection-arn common-lisp:null)
                         :accessor
                         struct-shape-create-connection-output-connection-arn
                         :shape "ConnectionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-connection-output-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-connection-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-connection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-connection-output 'make-create-connection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-host-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or host-name common-lisp:null) :accessor
                         struct-shape-create-host-input-name :shape "HostName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider-type :initarg :provider-type :initform
                         (common-lisp:error ":provider-type is required") :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor struct-shape-create-host-input-provider-type
                         :shape "ProviderType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-endpoint :initarg :provider-endpoint
                         :initform
                         (common-lisp:error ":provider-endpoint is required")
                         :type (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-create-host-input-provider-endpoint
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-host-input-vpc-configuration
                         :shape "VpcConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-host-input-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-host-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-host-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-host-input 'make-create-host-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-host-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-host-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-endpoint))
      (common-lisp:list
       (common-lisp:cons "ProviderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-host-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-host-output common-lisp:nil
                       ((host-arn :initarg :host-arn :initform common-lisp:nil
                         :type (common-lisp:or host-arn common-lisp:null)
                         :accessor struct-shape-create-host-output-host-arn
                         :shape "HostArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-host-output-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-host-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-host-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-host-output 'make-create-host-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-host-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-host-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-arn))
      (common-lisp:list
       (common-lisp:cons "HostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-host-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-repository-link-input common-lisp:nil
                       ((connection-arn :initarg :connection-arn :initform
                         (common-lisp:error ":connection-arn is required")
                         :type (common-lisp:or connection-arn common-lisp:null)
                         :accessor
                         struct-shape-create-repository-link-input-connection-arn
                         :shape "ConnectionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-id :initarg :owner-id :initform
                         (common-lisp:error ":owner-id is required") :type
                         (common-lisp:or owner-id common-lisp:null) :accessor
                         struct-shape-create-repository-link-input-owner-id
                         :shape "OwnerId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repository-name is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-create-repository-link-input-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-key-arn :initarg :encryption-key-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-create-repository-link-input-encryption-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-repository-link-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-repository-link-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-repository-link-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-repository-link-input
                    'make-create-repository-link-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-link-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-link-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "RepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-link-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-repository-link-output common-lisp:nil
                       ((repository-link-info :initarg :repository-link-info
                         :initform
                         (common-lisp:error
                          ":repository-link-info is required")
                         :type
                         (common-lisp:or repository-link-info common-lisp:null)
                         :accessor
                         struct-shape-create-repository-link-output-repository-link-info
                         :shape "RepositoryLinkInfo" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-repository-link-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-repository-link-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-repository-link-output
                    'make-create-repository-link-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-link-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-link-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-link-info))
      (common-lisp:list
       (common-lisp:cons "RepositoryLinkInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-link-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sync-configuration-input common-lisp:nil
                       ((branch :initarg :branch :initform
                         (common-lisp:error ":branch is required") :type
                         (common-lisp:or branch-name common-lisp:null)
                         :accessor
                         struct-shape-create-sync-configuration-input-branch
                         :shape "BranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (config-file :initarg :config-file :initform
                         (common-lisp:error ":config-file is required") :type
                         (common-lisp:or deployment-file-path common-lisp:null)
                         :accessor
                         struct-shape-create-sync-configuration-input-config-file
                         :shape "DeploymentFilePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-link-id :initarg :repository-link-id
                         :initform
                         (common-lisp:error ":repository-link-id is required")
                         :type
                         (common-lisp:or repository-link-id common-lisp:null)
                         :accessor
                         struct-shape-create-sync-configuration-input-repository-link-id
                         :shape "RepositoryLinkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-sync-configuration-input-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-sync-configuration-input-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-type :initarg :sync-type :initform
                         (common-lisp:error ":sync-type is required") :type
                         (common-lisp:or sync-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-sync-configuration-input-sync-type
                         :shape "SyncConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-sync-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-sync-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-sync-configuration-input
                    'make-create-sync-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "Branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-file))
      (common-lisp:list
       (common-lisp:cons "ConfigFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-link-id))
      (common-lisp:list
       (common-lisp:cons "RepositoryLinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "SyncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sync-configuration-output common-lisp:nil
                       ((sync-configuration :initarg :sync-configuration
                         :initform
                         (common-lisp:error ":sync-configuration is required")
                         :type
                         (common-lisp:or sync-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-sync-configuration-output-sync-configuration
                         :shape "SyncConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-sync-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-sync-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-sync-configuration-output
                    'make-create-sync-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-configuration))
      (common-lisp:list
       (common-lisp:cons "SyncConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-configuration-output))
   common-lisp:nil))
(common-lisp:deftype created-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-connection-input common-lisp:nil
                       ((connection-arn :initarg :connection-arn :initform
                         (common-lisp:error ":connection-arn is required")
                         :type (common-lisp:or connection-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-connection-input-connection-arn
                         :shape "ConnectionArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-connection-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-connection-input 'make-delete-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connection-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-connection-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-connection-output 'make-delete-connection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-host-input common-lisp:nil
                       ((host-arn :initarg :host-arn :initform
                         (common-lisp:error ":host-arn is required") :type
                         (common-lisp:or host-arn common-lisp:null) :accessor
                         struct-shape-delete-host-input-host-arn :shape
                         "HostArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-host-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-host-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-host-input 'make-delete-host-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-host-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-host-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-arn))
      (common-lisp:list
       (common-lisp:cons "HostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-host-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-host-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-host-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-host-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-host-output 'make-delete-host-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-host-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-host-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-host-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-repository-link-input common-lisp:nil
                       ((repository-link-id :initarg :repository-link-id
                         :initform
                         (common-lisp:error ":repository-link-id is required")
                         :type
                         (common-lisp:or repository-link-id common-lisp:null)
                         :accessor
                         struct-shape-delete-repository-link-input-repository-link-id
                         :shape "RepositoryLinkId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-repository-link-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-repository-link-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-repository-link-input
                    'make-delete-repository-link-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-link-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-link-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-link-id))
      (common-lisp:list
       (common-lisp:cons "RepositoryLinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-link-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-repository-link-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-repository-link-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-repository-link-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-repository-link-output
                    'make-delete-repository-link-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-link-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-link-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-link-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-sync-configuration-input common-lisp:nil
                       ((sync-type :initarg :sync-type :initform
                         (common-lisp:error ":sync-type is required") :type
                         (common-lisp:or sync-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-sync-configuration-input-sync-type
                         :shape "SyncConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-sync-configuration-input-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-sync-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-sync-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-sync-configuration-input
                    'make-delete-sync-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "SyncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-sync-configuration-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-sync-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-sync-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-sync-configuration-output
                    'make-delete-sync-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-configuration-output))
   common-lisp:nil))
(common-lisp:deftype deployment-file-path () 'common-lisp:string)
(common-lisp:deftype directory () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype event () 'common-lisp:string)
(common-lisp:deftype external-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-connection-input common-lisp:nil
                       ((connection-arn :initarg :connection-arn :initform
                         (common-lisp:error ":connection-arn is required")
                         :type (common-lisp:or connection-arn common-lisp:null)
                         :accessor
                         struct-shape-get-connection-input-connection-arn
                         :shape "ConnectionArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connection-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-connection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connection-input 'make-get-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connection-output common-lisp:nil
                       ((connection :initarg :connection :initform
                         common-lisp:nil :type
                         (common-lisp:or connection common-lisp:null) :accessor
                         struct-shape-get-connection-output-connection :shape
                         "Connection" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connection-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-connection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connection-output 'make-get-connection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-host-input common-lisp:nil
                       ((host-arn :initarg :host-arn :initform
                         (common-lisp:error ":host-arn is required") :type
                         (common-lisp:or host-arn common-lisp:null) :accessor
                         struct-shape-get-host-input-host-arn :shape "HostArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-host-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-host-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-host-input 'make-get-host-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-host-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-host-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-arn))
      (common-lisp:list
       (common-lisp:cons "HostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-host-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-host-output common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or host-name common-lisp:null) :accessor
                         struct-shape-get-host-output-name :shape "HostName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or host-status common-lisp:null)
                         :accessor struct-shape-get-host-output-status :shape
                         "HostStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider-type :initarg :provider-type :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor struct-shape-get-host-output-provider-type
                         :shape "ProviderType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-endpoint :initarg :provider-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-get-host-output-provider-endpoint :shape
                         "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor
                         struct-shape-get-host-output-vpc-configuration :shape
                         "VpcConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-host-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-host-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-host-output 'make-get-host-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-host-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-host-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-endpoint))
      (common-lisp:list
       (common-lisp:cons "ProviderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-host-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-link-input common-lisp:nil
                       ((repository-link-id :initarg :repository-link-id
                         :initform
                         (common-lisp:error ":repository-link-id is required")
                         :type
                         (common-lisp:or repository-link-id common-lisp:null)
                         :accessor
                         struct-shape-get-repository-link-input-repository-link-id
                         :shape "RepositoryLinkId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-repository-link-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-repository-link-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-repository-link-input
                    'make-get-repository-link-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-link-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-link-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-link-id))
      (common-lisp:list
       (common-lisp:cons "RepositoryLinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-link-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-link-output common-lisp:nil
                       ((repository-link-info :initarg :repository-link-info
                         :initform
                         (common-lisp:error
                          ":repository-link-info is required")
                         :type
                         (common-lisp:or repository-link-info common-lisp:null)
                         :accessor
                         struct-shape-get-repository-link-output-repository-link-info
                         :shape "RepositoryLinkInfo" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-repository-link-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-repository-link-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-repository-link-output
                    'make-get-repository-link-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-link-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-link-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-link-info))
      (common-lisp:list
       (common-lisp:cons "RepositoryLinkInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-link-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-sync-status-input common-lisp:nil
                       ((branch :initarg :branch :initform
                         (common-lisp:error ":branch is required") :type
                         (common-lisp:or branch-name common-lisp:null)
                         :accessor
                         struct-shape-get-repository-sync-status-input-branch
                         :shape "BranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-link-id :initarg :repository-link-id
                         :initform
                         (common-lisp:error ":repository-link-id is required")
                         :type
                         (common-lisp:or repository-link-id common-lisp:null)
                         :accessor
                         struct-shape-get-repository-sync-status-input-repository-link-id
                         :shape "RepositoryLinkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-type :initarg :sync-type :initform
                         (common-lisp:error ":sync-type is required") :type
                         (common-lisp:or sync-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-repository-sync-status-input-sync-type
                         :shape "SyncConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-repository-sync-status-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-repository-sync-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-repository-sync-status-input
                    'make-get-repository-sync-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "Branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-link-id))
      (common-lisp:list
       (common-lisp:cons "RepositoryLinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "SyncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-sync-status-output common-lisp:nil
                       ((latest-sync :initarg :latest-sync :initform
                         (common-lisp:error ":latest-sync is required") :type
                         (common-lisp:or repository-sync-attempt
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-repository-sync-status-output-latest-sync
                         :shape "RepositorySyncAttempt" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-repository-sync-status-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-repository-sync-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-repository-sync-status-output
                    'make-get-repository-sync-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-sync))
      (common-lisp:list
       (common-lisp:cons "LatestSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-sync-status-input common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-resource-sync-status-input-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-type :initarg :sync-type :initform
                         (common-lisp:error ":sync-type is required") :type
                         (common-lisp:or sync-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-resource-sync-status-input-sync-type
                         :shape "SyncConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-sync-status-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-sync-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-sync-status-input
                    'make-get-resource-sync-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-sync-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-sync-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "SyncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-sync-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-sync-status-output common-lisp:nil
                       ((desired-state :initarg :desired-state :initform
                         common-lisp:nil :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-get-resource-sync-status-output-desired-state
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-successful-sync :initarg
                         :latest-successful-sync :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-sync-attempt
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-resource-sync-status-output-latest-successful-sync
                         :shape "ResourceSyncAttempt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-sync :initarg :latest-sync :initform
                         (common-lisp:error ":latest-sync is required") :type
                         (common-lisp:or resource-sync-attempt
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-resource-sync-status-output-latest-sync
                         :shape "ResourceSyncAttempt" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-sync-status-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-sync-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-sync-status-output
                    'make-get-resource-sync-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-sync-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-sync-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-successful-sync))
      (common-lisp:list
       (common-lisp:cons "LatestSuccessfulSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-sync))
      (common-lisp:list
       (common-lisp:cons "LatestSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-sync-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sync-blocker-summary-input common-lisp:nil
                       ((sync-type :initarg :sync-type :initform
                         (common-lisp:error ":sync-type is required") :type
                         (common-lisp:or sync-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sync-blocker-summary-input-sync-type
                         :shape "SyncConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-sync-blocker-summary-input-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sync-blocker-summary-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sync-blocker-summary-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sync-blocker-summary-input
                    'make-get-sync-blocker-summary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-blocker-summary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-blocker-summary-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "SyncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-blocker-summary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sync-blocker-summary-output common-lisp:nil
                       ((sync-blocker-summary :initarg :sync-blocker-summary
                         :initform
                         (common-lisp:error
                          ":sync-blocker-summary is required")
                         :type
                         (common-lisp:or sync-blocker-summary common-lisp:null)
                         :accessor
                         struct-shape-get-sync-blocker-summary-output-sync-blocker-summary
                         :shape "SyncBlockerSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sync-blocker-summary-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sync-blocker-summary-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sync-blocker-summary-output
                    'make-get-sync-blocker-summary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-blocker-summary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-blocker-summary-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sync-blocker-summary))
      (common-lisp:list
       (common-lisp:cons "SyncBlockerSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-blocker-summary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sync-configuration-input common-lisp:nil
                       ((sync-type :initarg :sync-type :initform
                         (common-lisp:error ":sync-type is required") :type
                         (common-lisp:or sync-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sync-configuration-input-sync-type
                         :shape "SyncConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-sync-configuration-input-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sync-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-sync-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sync-configuration-input
                    'make-get-sync-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "SyncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sync-configuration-output common-lisp:nil
                       ((sync-configuration :initarg :sync-configuration
                         :initform
                         (common-lisp:error ":sync-configuration is required")
                         :type
                         (common-lisp:or sync-configuration common-lisp:null)
                         :accessor
                         struct-shape-get-sync-configuration-output-sync-configuration
                         :shape "SyncConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sync-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sync-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sync-configuration-output
                    'make-get-sync-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-configuration))
      (common-lisp:list
       (common-lisp:cons "SyncConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass host common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or host-name common-lisp:null) :accessor
                         struct-shape-host-name :shape "HostName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (host-arn :initarg :host-arn :initform common-lisp:nil
                         :type (common-lisp:or host-arn common-lisp:null)
                         :accessor struct-shape-host-host-arn :shape "HostArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider-type :initarg :provider-type :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor struct-shape-host-provider-type :shape
                         "ProviderType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-endpoint :initarg :provider-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-host-provider-endpoint :shape "Url"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor struct-shape-host-vpc-configuration :shape
                         "VpcConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or host-status common-lisp:null)
                         :accessor struct-shape-host-status :shape "HostStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or host-status-message common-lisp:null)
                         :accessor struct-shape-host-status-message :shape
                         "HostStatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-host (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'host
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'host 'make-host))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input host))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input host))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-arn))
      (common-lisp:list
       (common-lisp:cons "HostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-endpoint))
      (common-lisp:list
       (common-lisp:cons "ProviderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input host))
   common-lisp:nil))
(common-lisp:deftype host-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype host-list () '(trivial-types:proper-list host))
 (common-lisp:defun make-host-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list host))
   aws-sdk/generator/shape::members))
(common-lisp:deftype host-name () 'common-lisp:string)
(common-lisp:deftype host-status () 'common-lisp:string)
(common-lisp:deftype host-status-message () 'common-lisp:string)
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message)))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype latest-sync-blocker-list ()
   '(trivial-types:proper-list sync-blocker))
 (common-lisp:defun make-latest-sync-blocker-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sync-blocker))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-connections-input common-lisp:nil
                       ((provider-type-filter :initarg :provider-type-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor
                         struct-shape-list-connections-input-provider-type-filter
                         :shape "ProviderType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (host-arn-filter :initarg :host-arn-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or host-arn common-lisp:null) :accessor
                         struct-shape-list-connections-input-host-arn-filter
                         :shape "HostArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-connections-input-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-connections-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-connections-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-connections-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-connections-input 'make-list-connections-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provider-type-filter))
      (common-lisp:list
       (common-lisp:cons "ProviderTypeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-arn-filter))
      (common-lisp:list
       (common-lisp:cons "HostArnFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-connections-output common-lisp:nil
                       ((connections :initarg :connections :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-list common-lisp:null)
                         :accessor
                         struct-shape-list-connections-output-connections
                         :shape "ConnectionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-connections-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-connections-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-connections-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-connections-output 'make-list-connections-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-hosts-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-hosts-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-hosts-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-hosts-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-hosts-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-hosts-input 'make-list-hosts-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-hosts-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-hosts-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-hosts-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-hosts-output common-lisp:nil
                       ((hosts :initarg :hosts :initform common-lisp:nil :type
                         (common-lisp:or host-list common-lisp:null) :accessor
                         struct-shape-list-hosts-output-hosts :shape "HostList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-hosts-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-hosts-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-hosts-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-hosts-output 'make-list-hosts-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-hosts-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-hosts-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosts))
      (common-lisp:list
       (common-lisp:cons "Hosts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-hosts-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-repository-links-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-repository-links-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or sharp-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-repository-links-input-next-token
                         :shape "SharpNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-repository-links-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-repository-links-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-repository-links-input
                    'make-list-repository-links-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-links-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-links-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-links-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-repository-links-output common-lisp:nil
                       ((repository-links :initarg :repository-links :initform
                         (common-lisp:error ":repository-links is required")
                         :type
                         (common-lisp:or repository-link-list common-lisp:null)
                         :accessor
                         struct-shape-list-repository-links-output-repository-links
                         :shape "RepositoryLinkList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or sharp-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-repository-links-output-next-token
                         :shape "SharpNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-repository-links-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-repository-links-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-repository-links-output
                    'make-list-repository-links-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-links-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-links-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-links))
      (common-lisp:list
       (common-lisp:cons "RepositoryLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-links-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-repository-sync-definitions-input common-lisp:nil
                       ((repository-link-id :initarg :repository-link-id
                         :initform
                         (common-lisp:error ":repository-link-id is required")
                         :type
                         (common-lisp:or repository-link-id common-lisp:null)
                         :accessor
                         struct-shape-list-repository-sync-definitions-input-repository-link-id
                         :shape "RepositoryLinkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-type :initarg :sync-type :initform
                         (common-lisp:error ":sync-type is required") :type
                         (common-lisp:or sync-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-repository-sync-definitions-input-sync-type
                         :shape "SyncConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-repository-sync-definitions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-repository-sync-definitions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-repository-sync-definitions-input
                    'make-list-repository-sync-definitions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-link-id))
      (common-lisp:list
       (common-lisp:cons "RepositoryLinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "SyncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-repository-sync-definitions-output common-lisp:nil
                       ((repository-sync-definitions :initarg
                         :repository-sync-definitions :initform
                         (common-lisp:error
                          ":repository-sync-definitions is required")
                         :type
                         (common-lisp:or repository-sync-definition-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-repository-sync-definitions-output-repository-sync-definitions
                         :shape "RepositorySyncDefinitionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or sharp-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-repository-sync-definitions-output-next-token
                         :shape "SharpNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-repository-sync-definitions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-repository-sync-definitions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-repository-sync-definitions-output
                    'make-list-repository-sync-definitions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-sync-definitions))
      (common-lisp:list
       (common-lisp:cons "RepositorySyncDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sync-configurations-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-sync-configurations-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or sharp-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-sync-configurations-input-next-token
                         :shape "SharpNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-link-id :initarg :repository-link-id
                         :initform
                         (common-lisp:error ":repository-link-id is required")
                         :type
                         (common-lisp:or repository-link-id common-lisp:null)
                         :accessor
                         struct-shape-list-sync-configurations-input-repository-link-id
                         :shape "RepositoryLinkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-type :initarg :sync-type :initform
                         (common-lisp:error ":sync-type is required") :type
                         (common-lisp:or sync-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sync-configurations-input-sync-type
                         :shape "SyncConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sync-configurations-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sync-configurations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sync-configurations-input
                    'make-list-sync-configurations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-configurations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-configurations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-link-id))
      (common-lisp:list
       (common-lisp:cons "RepositoryLinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "SyncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-configurations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sync-configurations-output common-lisp:nil
                       ((sync-configurations :initarg :sync-configurations
                         :initform
                         (common-lisp:error ":sync-configurations is required")
                         :type
                         (common-lisp:or sync-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sync-configurations-output-sync-configurations
                         :shape "SyncConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or sharp-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-sync-configurations-output-next-token
                         :shape "SharpNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sync-configurations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sync-configurations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sync-configurations-output
                    'make-list-sync-configurations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-configurations))
      (common-lisp:list
       (common-lisp:cons "SyncConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-input-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-output-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype owner-id () 'common-lisp:string)
(common-lisp:deftype parent () 'common-lisp:string)
(common-lisp:deftype provider-type () 'common-lisp:string)
(common-lisp:deftype repository-link-arn () 'common-lisp:string)
(common-lisp:deftype repository-link-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass repository-link-info common-lisp:nil
                       ((connection-arn :initarg :connection-arn :initform
                         (common-lisp:error ":connection-arn is required")
                         :type (common-lisp:or connection-arn common-lisp:null)
                         :accessor
                         struct-shape-repository-link-info-connection-arn
                         :shape "ConnectionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-key-arn :initarg :encryption-key-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-repository-link-info-encryption-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-id :initarg :owner-id :initform
                         (common-lisp:error ":owner-id is required") :type
                         (common-lisp:or owner-id common-lisp:null) :accessor
                         struct-shape-repository-link-info-owner-id :shape
                         "OwnerId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider-type :initarg :provider-type :initform
                         (common-lisp:error ":provider-type is required") :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor
                         struct-shape-repository-link-info-provider-type :shape
                         "ProviderType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-link-arn :initarg :repository-link-arn
                         :initform
                         (common-lisp:error ":repository-link-arn is required")
                         :type
                         (common-lisp:or repository-link-arn common-lisp:null)
                         :accessor
                         struct-shape-repository-link-info-repository-link-arn
                         :shape "RepositoryLinkArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-link-id :initarg :repository-link-id
                         :initform
                         (common-lisp:error ":repository-link-id is required")
                         :type
                         (common-lisp:or repository-link-id common-lisp:null)
                         :accessor
                         struct-shape-repository-link-info-repository-link-id
                         :shape "RepositoryLinkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repository-name is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-repository-link-info-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository-link-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'repository-link-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'repository-link-info 'make-repository-link-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository-link-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository-link-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-link-arn))
      (common-lisp:list
       (common-lisp:cons "RepositoryLinkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-link-id))
      (common-lisp:list
       (common-lisp:cons "RepositoryLinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "RepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository-link-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-link-list ()
   '(trivial-types:proper-list repository-link-info))
 (common-lisp:defun make-repository-link-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-link-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype repository-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass repository-sync-attempt common-lisp:nil
                       ((started-at :initarg :started-at :initform
                         (common-lisp:error ":started-at is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-repository-sync-attempt-started-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or repository-sync-status
                                         common-lisp:null)
                         :accessor struct-shape-repository-sync-attempt-status
                         :shape "RepositorySyncStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (events :initarg :events :initform
                         (common-lisp:error ":events is required") :type
                         (common-lisp:or repository-sync-event-list
                                         common-lisp:null)
                         :accessor struct-shape-repository-sync-attempt-events
                         :shape "RepositorySyncEventList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository-sync-attempt
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'repository-sync-attempt
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'repository-sync-attempt 'make-repository-sync-attempt))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-attempt))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-attempt))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-attempt))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass repository-sync-definition common-lisp:nil
                       ((branch :initarg :branch :initform
                         (common-lisp:error ":branch is required") :type
                         (common-lisp:or branch-name common-lisp:null)
                         :accessor
                         struct-shape-repository-sync-definition-branch :shape
                         "BranchName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (directory :initarg :directory :initform
                         (common-lisp:error ":directory is required") :type
                         (common-lisp:or directory common-lisp:null) :accessor
                         struct-shape-repository-sync-definition-directory
                         :shape "Directory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parent :initarg :parent :initform
                         (common-lisp:error ":parent is required") :type
                         (common-lisp:or parent common-lisp:null) :accessor
                         struct-shape-repository-sync-definition-parent :shape
                         "Parent" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or target common-lisp:null) :accessor
                         struct-shape-repository-sync-definition-target :shape
                         "Target" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository-sync-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'repository-sync-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'repository-sync-definition
                    'make-repository-sync-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "Branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory))
      (common-lisp:list
       (common-lisp:cons "Directory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent))
      (common-lisp:list
       (common-lisp:cons "Parent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-sync-definition-list ()
   '(trivial-types:proper-list repository-sync-definition))
 (common-lisp:defun make-repository-sync-definition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            repository-sync-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass repository-sync-event common-lisp:nil
                       ((event :initarg :event :initform
                         (common-lisp:error ":event is required") :type
                         (common-lisp:or event common-lisp:null) :accessor
                         struct-shape-repository-sync-event-event :shape
                         "Event" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-repository-sync-event-external-id :shape
                         "ExternalId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (time :initarg :time :initform
                         (common-lisp:error ":time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-repository-sync-event-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-repository-sync-event-type :shape "Type"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository-sync-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'repository-sync-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'repository-sync-event 'make-repository-sync-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-sync-event-list ()
   '(trivial-types:proper-list repository-sync-event))
 (common-lisp:defun make-repository-sync-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-sync-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype repository-sync-status () 'common-lisp:string)
(common-lisp:deftype resolved-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message)))
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass resource-sync-attempt common-lisp:nil
                       ((events :initarg :events :initform
                         (common-lisp:error ":events is required") :type
                         (common-lisp:or resource-sync-event-list
                                         common-lisp:null)
                         :accessor struct-shape-resource-sync-attempt-events
                         :shape "ResourceSyncEventList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (initial-revision :initarg :initial-revision :initform
                         (common-lisp:error ":initial-revision is required")
                         :type (common-lisp:or revision common-lisp:null)
                         :accessor
                         struct-shape-resource-sync-attempt-initial-revision
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-at :initarg :started-at :initform
                         (common-lisp:error ":started-at is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-resource-sync-attempt-started-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or resource-sync-status common-lisp:null)
                         :accessor struct-shape-resource-sync-attempt-status
                         :shape "ResourceSyncStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-revision :initarg :target-revision :initform
                         (common-lisp:error ":target-revision is required")
                         :type (common-lisp:or revision common-lisp:null)
                         :accessor
                         struct-shape-resource-sync-attempt-target-revision
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or target common-lisp:null) :accessor
                         struct-shape-resource-sync-attempt-target :shape
                         "Target" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-sync-attempt
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-sync-attempt
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-sync-attempt 'make-resource-sync-attempt))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-sync-attempt))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-sync-attempt))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-revision))
      (common-lisp:list
       (common-lisp:cons "InitialRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-revision))
      (common-lisp:list
       (common-lisp:cons "TargetRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-sync-attempt))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-sync-event common-lisp:nil
                       ((event :initarg :event :initform
                         (common-lisp:error ":event is required") :type
                         (common-lisp:or event common-lisp:null) :accessor
                         struct-shape-resource-sync-event-event :shape "Event"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor struct-shape-resource-sync-event-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time :initarg :time :initform
                         (common-lisp:error ":time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-resource-sync-event-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-resource-sync-event-type :shape "Type"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-sync-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-sync-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-sync-event 'make-resource-sync-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-sync-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-sync-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-sync-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-sync-event-list ()
   '(trivial-types:proper-list resource-sync-event))
 (common-lisp:defun make-resource-sync-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-sync-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-sync-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-unavailable-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-unavailable-exception
                    'resource-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition retry-latest-commit-failed-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       retry-latest-commit-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'retry-latest-commit-failed-exception
                    'retry-latest-commit-failed-exception-message)))
(common-lisp:progn
 (common-lisp:defclass revision common-lisp:nil
                       ((branch :initarg :branch :initform
                         (common-lisp:error ":branch is required") :type
                         (common-lisp:or branch-name common-lisp:null)
                         :accessor struct-shape-revision-branch :shape
                         "BranchName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (directory :initarg :directory :initform
                         (common-lisp:error ":directory is required") :type
                         (common-lisp:or directory common-lisp:null) :accessor
                         struct-shape-revision-directory :shape "Directory"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owner-id :initarg :owner-id :initform
                         (common-lisp:error ":owner-id is required") :type
                         (common-lisp:or owner-id common-lisp:null) :accessor
                         struct-shape-revision-owner-id :shape "OwnerId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repository-name is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor struct-shape-revision-repository-name :shape
                         "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-type :initarg :provider-type :initform
                         (common-lisp:error ":provider-type is required") :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor struct-shape-revision-provider-type :shape
                         "ProviderType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sha :initarg :sha :initform
                         (common-lisp:error ":sha is required") :type
                         (common-lisp:or sha common-lisp:null) :accessor
                         struct-shape-revision-sha :shape "SHA" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revision
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'revision
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'revision 'make-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "Branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory))
      (common-lisp:list
       (common-lisp:cons "Directory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "RepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sha))
      (common-lisp:list
       (common-lisp:cons "Sha"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input revision))
   common-lisp:nil))
(common-lisp:deftype sha () 'common-lisp:string)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-security-group-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sharp-next-token () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun make-subnet-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sync-blocker common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-sync-blocker-id :shape "Id" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or blocker-type common-lisp:null)
                         :accessor struct-shape-sync-blocker-type :shape
                         "BlockerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or blocker-status common-lisp:null)
                         :accessor struct-shape-sync-blocker-status :shape
                         "BlockerStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-reason :initarg :created-reason :initform
                         (common-lisp:error ":created-reason is required")
                         :type (common-lisp:or created-reason common-lisp:null)
                         :accessor struct-shape-sync-blocker-created-reason
                         :shape "CreatedReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":created-at is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-sync-blocker-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (contexts :initarg :contexts :initform common-lisp:nil
                         :type
                         (common-lisp:or sync-blocker-context-list
                                         common-lisp:null)
                         :accessor struct-shape-sync-blocker-contexts :shape
                         "SyncBlockerContextList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolved-reason :initarg :resolved-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or resolved-reason common-lisp:null)
                         :accessor struct-shape-sync-blocker-resolved-reason
                         :shape "ResolvedReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolved-at :initarg :resolved-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-sync-blocker-resolved-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sync-blocker
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sync-blocker
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sync-blocker 'make-sync-blocker))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-blocker))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-blocker))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-reason))
      (common-lisp:list
       (common-lisp:cons "CreatedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contexts))
      (common-lisp:list
       (common-lisp:cons "Contexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-reason))
      (common-lisp:list
       (common-lisp:cons "ResolvedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-at))
      (common-lisp:list
       (common-lisp:cons "ResolvedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-blocker))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sync-blocker-context common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or sync-blocker-context-key
                                         common-lisp:null)
                         :accessor struct-shape-sync-blocker-context-key :shape
                         "SyncBlockerContextKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or sync-blocker-context-value
                                         common-lisp:null)
                         :accessor struct-shape-sync-blocker-context-value
                         :shape "SyncBlockerContextValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sync-blocker-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sync-blocker-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sync-blocker-context 'make-sync-blocker-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-blocker-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-blocker-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-blocker-context))
   common-lisp:nil))
(common-lisp:deftype sync-blocker-context-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sync-blocker-context-list ()
   '(trivial-types:proper-list sync-blocker-context))
 (common-lisp:defun make-sync-blocker-context-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sync-blocker-context))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sync-blocker-context-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition sync-blocker-does-not-exist-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       sync-blocker-does-not-exist-exception-message)))
 (common-lisp:export
  (common-lisp:list 'sync-blocker-does-not-exist-exception
                    'sync-blocker-does-not-exist-exception-message)))
(common-lisp:progn
 (common-lisp:defclass sync-blocker-summary common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-sync-blocker-summary-resource-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parent-resource-name :initarg :parent-resource-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-sync-blocker-summary-parent-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-blockers :initarg :latest-blockers :initform
                         common-lisp:nil :type
                         (common-lisp:or latest-sync-blocker-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-sync-blocker-summary-latest-blockers
                         :shape "LatestSyncBlockerList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sync-blocker-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sync-blocker-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sync-blocker-summary 'make-sync-blocker-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-blocker-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-blocker-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-resource-name))
      (common-lisp:list
       (common-lisp:cons "ParentResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-blockers))
      (common-lisp:list
       (common-lisp:cons "LatestBlockers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-blocker-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sync-configuration common-lisp:nil
                       ((branch :initarg :branch :initform
                         (common-lisp:error ":branch is required") :type
                         (common-lisp:or branch-name common-lisp:null)
                         :accessor struct-shape-sync-configuration-branch
                         :shape "BranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (config-file :initarg :config-file :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-file-path common-lisp:null)
                         :accessor struct-shape-sync-configuration-config-file
                         :shape "DeploymentFilePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-id :initarg :owner-id :initform
                         (common-lisp:error ":owner-id is required") :type
                         (common-lisp:or owner-id common-lisp:null) :accessor
                         struct-shape-sync-configuration-owner-id :shape
                         "OwnerId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider-type :initarg :provider-type :initform
                         (common-lisp:error ":provider-type is required") :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor
                         struct-shape-sync-configuration-provider-type :shape
                         "ProviderType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-link-id :initarg :repository-link-id
                         :initform
                         (common-lisp:error ":repository-link-id is required")
                         :type
                         (common-lisp:or repository-link-id common-lisp:null)
                         :accessor
                         struct-shape-sync-configuration-repository-link-id
                         :shape "RepositoryLinkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repository-name is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-sync-configuration-repository-name :shape
                         "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-sync-configuration-resource-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor struct-shape-sync-configuration-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-type :initarg :sync-type :initform
                         (common-lisp:error ":sync-type is required") :type
                         (common-lisp:or sync-configuration-type
                                         common-lisp:null)
                         :accessor struct-shape-sync-configuration-sync-type
                         :shape "SyncConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sync-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sync-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sync-configuration 'make-sync-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "Branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-file))
      (common-lisp:list
       (common-lisp:cons "ConfigFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-link-id))
      (common-lisp:list
       (common-lisp:cons "RepositoryLinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "RepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "SyncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sync-configuration-list ()
   '(trivial-types:proper-list sync-configuration))
 (common-lisp:defun make-sync-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sync-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition sync-configuration-still-exists-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       sync-configuration-still-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'sync-configuration-still-exists-exception
                    'sync-configuration-still-exists-exception-message)))
(common-lisp:deftype sync-configuration-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-tag-resource-input-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-input-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype tls-certificate () 'common-lisp:string)
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-operation-exception
                    'unsupported-operation-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-provider-type-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-provider-type-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-provider-type-exception
                    'unsupported-provider-type-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-input-resource-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-input-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-host-input common-lisp:nil
                       ((host-arn :initarg :host-arn :initform
                         (common-lisp:error ":host-arn is required") :type
                         (common-lisp:or host-arn common-lisp:null) :accessor
                         struct-shape-update-host-input-host-arn :shape
                         "HostArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider-endpoint :initarg :provider-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-update-host-input-provider-endpoint
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor
                         struct-shape-update-host-input-vpc-configuration
                         :shape "VpcConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-host-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-host-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-host-input 'make-update-host-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-host-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-host-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-arn))
      (common-lisp:list
       (common-lisp:cons "HostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-endpoint))
      (common-lisp:list
       (common-lisp:cons "ProviderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "VpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-host-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-host-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-host-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-host-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-host-output 'make-update-host-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-host-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-host-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-host-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition update-out-of-sync-exception
     (codestar-connections-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       update-out-of-sync-exception-message)))
 (common-lisp:export
  (common-lisp:list 'update-out-of-sync-exception
                    'update-out-of-sync-exception-message)))
(common-lisp:progn
 (common-lisp:defclass update-repository-link-input common-lisp:nil
                       ((connection-arn :initarg :connection-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor
                         struct-shape-update-repository-link-input-connection-arn
                         :shape "ConnectionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-key-arn :initarg :encryption-key-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-update-repository-link-input-encryption-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-link-id :initarg :repository-link-id
                         :initform
                         (common-lisp:error ":repository-link-id is required")
                         :type
                         (common-lisp:or repository-link-id common-lisp:null)
                         :accessor
                         struct-shape-update-repository-link-input-repository-link-id
                         :shape "RepositoryLinkId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-repository-link-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-repository-link-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-repository-link-input
                    'make-update-repository-link-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-link-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-link-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-link-id))
      (common-lisp:list
       (common-lisp:cons "RepositoryLinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-link-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-repository-link-output common-lisp:nil
                       ((repository-link-info :initarg :repository-link-info
                         :initform
                         (common-lisp:error
                          ":repository-link-info is required")
                         :type
                         (common-lisp:or repository-link-info common-lisp:null)
                         :accessor
                         struct-shape-update-repository-link-output-repository-link-info
                         :shape "RepositoryLinkInfo" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-repository-link-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-repository-link-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-repository-link-output
                    'make-update-repository-link-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-link-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-link-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-link-info))
      (common-lisp:list
       (common-lisp:cons "RepositoryLinkInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-link-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-sync-blocker-input common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-sync-blocker-input-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sync-type :initarg :sync-type :initform
                         (common-lisp:error ":sync-type is required") :type
                         (common-lisp:or sync-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-sync-blocker-input-sync-type
                         :shape "SyncConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-sync-blocker-input-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolved-reason :initarg :resolved-reason :initform
                         (common-lisp:error ":resolved-reason is required")
                         :type
                         (common-lisp:or resolved-reason common-lisp:null)
                         :accessor
                         struct-shape-update-sync-blocker-input-resolved-reason
                         :shape "ResolvedReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-sync-blocker-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-sync-blocker-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-sync-blocker-input
                    'make-update-sync-blocker-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sync-blocker-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sync-blocker-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "SyncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-reason))
      (common-lisp:list
       (common-lisp:cons "ResolvedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sync-blocker-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-sync-blocker-output common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-sync-blocker-output-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parent-resource-name :initarg :parent-resource-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-sync-blocker-output-parent-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-blocker :initarg :sync-blocker :initform
                         (common-lisp:error ":sync-blocker is required") :type
                         (common-lisp:or sync-blocker common-lisp:null)
                         :accessor
                         struct-shape-update-sync-blocker-output-sync-blocker
                         :shape "SyncBlocker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-sync-blocker-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-sync-blocker-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-sync-blocker-output
                    'make-update-sync-blocker-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sync-blocker-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sync-blocker-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-resource-name))
      (common-lisp:list
       (common-lisp:cons "ParentResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-blocker))
      (common-lisp:list
       (common-lisp:cons "SyncBlocker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sync-blocker-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-sync-configuration-input common-lisp:nil
                       ((branch :initarg :branch :initform common-lisp:nil
                         :type (common-lisp:or branch-name common-lisp:null)
                         :accessor
                         struct-shape-update-sync-configuration-input-branch
                         :shape "BranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (config-file :initarg :config-file :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-file-path common-lisp:null)
                         :accessor
                         struct-shape-update-sync-configuration-input-config-file
                         :shape "DeploymentFilePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-link-id :initarg :repository-link-id
                         :initform common-lisp:nil :type
                         (common-lisp:or repository-link-id common-lisp:null)
                         :accessor
                         struct-shape-update-sync-configuration-input-repository-link-id
                         :shape "RepositoryLinkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-sync-configuration-input-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-sync-configuration-input-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-type :initarg :sync-type :initform
                         (common-lisp:error ":sync-type is required") :type
                         (common-lisp:or sync-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-sync-configuration-input-sync-type
                         :shape "SyncConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-sync-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-sync-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-sync-configuration-input
                    'make-update-sync-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sync-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sync-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "Branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-file))
      (common-lisp:list
       (common-lisp:cons "ConfigFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-link-id))
      (common-lisp:list
       (common-lisp:cons "RepositoryLinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "SyncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sync-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-sync-configuration-output common-lisp:nil
                       ((sync-configuration :initarg :sync-configuration
                         :initform
                         (common-lisp:error ":sync-configuration is required")
                         :type
                         (common-lisp:or sync-configuration common-lisp:null)
                         :accessor
                         struct-shape-update-sync-configuration-output-sync-configuration
                         :shape "SyncConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-sync-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-sync-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-sync-configuration-output
                    'make-update-sync-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sync-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sync-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-configuration))
      (common-lisp:list
       (common-lisp:cons "SyncConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sync-configuration-output))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-configuration common-lisp:nil
                       ((vpc-id :initarg :vpc-id :initform
                         (common-lisp:error ":vpc-id is required") :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         struct-shape-vpc-configuration-vpc-id :shape "VpcId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required") :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         struct-shape-vpc-configuration-subnet-ids :shape
                         "SubnetIds" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform
                         (common-lisp:error ":security-group-ids is required")
                         :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor
                         struct-shape-vpc-configuration-security-group-ids
                         :shape "SecurityGroupIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tls-certificate :initarg :tls-certificate :initform
                         common-lisp:nil :type
                         (common-lisp:or tls-certificate common-lisp:null)
                         :accessor
                         struct-shape-vpc-configuration-tls-certificate :shape
                         "TlsCertificate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-configuration 'make-vpc-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-certificate))
      (common-lisp:list
       (common-lisp:cons "TlsCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-configuration))
   common-lisp:nil))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key provider-type connection-name tags
                     host-arn)
   (common-lisp:declare
    (common-lisp:ignorable provider-type connection-name tags host-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connection-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "CreateConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-connection))
(common-lisp:progn
 (common-lisp:defun create-host
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name provider-type provider-endpoint
                     vpc-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable name provider-type provider-endpoint
     vpc-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-host-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "CreateHost"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-host))
(common-lisp:progn
 (common-lisp:defun create-repository-link
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-arn owner-id repository-name
                     encryption-key-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable connection-arn owner-id repository-name
     encryption-key-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-repository-link-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "CreateRepositoryLink"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-repository-link))
(common-lisp:progn
 (common-lisp:defun create-sync-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key branch config-file repository-link-id
                     resource-name role-arn sync-type)
   (common-lisp:declare
    (common-lisp:ignorable branch config-file repository-link-id resource-name
     role-arn sync-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-sync-configuration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "CreateSyncConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-sync-configuration))
(common-lisp:progn
 (common-lisp:defun delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-arn)
   (common-lisp:declare (common-lisp:ignorable connection-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connection-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-connection))
(common-lisp:progn
 (common-lisp:defun delete-host
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key host-arn)
   (common-lisp:declare (common-lisp:ignorable host-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-host-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteHost"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-host))
(common-lisp:progn
 (common-lisp:defun delete-repository-link
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-link-id)
   (common-lisp:declare (common-lisp:ignorable repository-link-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-repository-link-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteRepositoryLink"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-repository-link))
(common-lisp:progn
 (common-lisp:defun delete-sync-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sync-type resource-name)
   (common-lisp:declare (common-lisp:ignorable sync-type resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-sync-configuration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteSyncConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-sync-configuration))
(common-lisp:progn
 (common-lisp:defun get-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-arn)
   (common-lisp:declare (common-lisp:ignorable connection-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connection-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "GetConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-connection))
(common-lisp:progn
 (common-lisp:defun get-host
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key host-arn)
   (common-lisp:declare (common-lisp:ignorable host-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-host-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "GetHost"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-host))
(common-lisp:progn
 (common-lisp:defun get-repository-link
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-link-id)
   (common-lisp:declare (common-lisp:ignorable repository-link-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-repository-link-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "GetRepositoryLink"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-repository-link))
(common-lisp:progn
 (common-lisp:defun get-repository-sync-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key branch repository-link-id sync-type)
   (common-lisp:declare
    (common-lisp:ignorable branch repository-link-id sync-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-repository-sync-status-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "GetRepositorySyncStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-repository-sync-status))
(common-lisp:progn
 (common-lisp:defun get-resource-sync-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name sync-type)
   (common-lisp:declare (common-lisp:ignorable resource-name sync-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-sync-status-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "GetResourceSyncStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resource-sync-status))
(common-lisp:progn
 (common-lisp:defun get-sync-blocker-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sync-type resource-name)
   (common-lisp:declare (common-lisp:ignorable sync-type resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sync-blocker-summary-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "GetSyncBlockerSummary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sync-blocker-summary))
(common-lisp:progn
 (common-lisp:defun get-sync-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sync-type resource-name)
   (common-lisp:declare (common-lisp:ignorable sync-type resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sync-configuration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "GetSyncConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sync-configuration))
(common-lisp:progn
 (common-lisp:defun list-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key provider-type-filter host-arn-filter
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable provider-type-filter host-arn-filter max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-connections-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "ListConnections"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-connections))
(common-lisp:progn
 (common-lisp:defun list-hosts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-hosts-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "ListHosts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-hosts))
(common-lisp:progn
 (common-lisp:defun list-repository-links
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-repository-links-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "ListRepositoryLinks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-repository-links))
(common-lisp:progn
 (common-lisp:defun list-repository-sync-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-link-id sync-type)
   (common-lisp:declare (common-lisp:ignorable repository-link-id sync-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-repository-sync-definitions-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "ListRepositorySyncDefinitions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-repository-sync-definitions))
(common-lisp:progn
 (common-lisp:defun list-sync-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token repository-link-id
                     sync-type)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token repository-link-id
     sync-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sync-configurations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "ListSyncConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-sync-configurations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-host
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key host-arn provider-endpoint
                     vpc-configuration)
   (common-lisp:declare
    (common-lisp:ignorable host-arn provider-endpoint vpc-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-host-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateHost"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-host))
(common-lisp:progn
 (common-lisp:defun update-repository-link
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-arn encryption-key-arn
                     repository-link-id)
   (common-lisp:declare
    (common-lisp:ignorable connection-arn encryption-key-arn
     repository-link-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-repository-link-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateRepositoryLink"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-repository-link))
(common-lisp:progn
 (common-lisp:defun update-sync-blocker
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id sync-type resource-name
                     resolved-reason)
   (common-lisp:declare
    (common-lisp:ignorable id sync-type resource-name resolved-reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-sync-blocker-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateSyncBlocker"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-sync-blocker))
(common-lisp:progn
 (common-lisp:defun update-sync-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key branch config-file repository-link-id
                     resource-name role-arn sync-type)
   (common-lisp:declare
    (common-lisp:ignorable branch config-file repository-link-id resource-name
     role-arn sync-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-sync-configuration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codestar-connections-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateSyncConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-sync-configuration))
