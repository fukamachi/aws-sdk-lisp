;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/auditmanager/api
  (:use)
  (:nicknames #:aws/auditmanager)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/auditmanager/api)
(common-lisp:progn
 (common-lisp:define-condition auditmanager-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'auditmanager-error))
(common-lisp:progn
 (common-lisp:defclass auditmanager-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "auditmanager" :api-version
                        "2017-07-25" :host-prefix "auditmanager" :signing-name
                        "auditmanager" :global-host common-lisp:nil))
 (common-lisp:export 'auditmanager-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass awsaccount common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-awsaccount-id :shape "AccountId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor struct-shape-awsaccount-email-address :shape
                         "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or account-name common-lisp:null)
                         :accessor struct-shape-awsaccount-name :shape
                         "AccountName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-awsaccount
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'awsaccount
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'awsaccount 'make-awsaccount))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input awsaccount))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input awsaccount))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input awsaccount))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype awsaccounts () '(trivial-types:proper-list awsaccount))
 (common-lisp:defun make-awsaccounts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list awsaccount))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass awsservice common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or awsservice-name common-lisp:null)
                         :accessor struct-shape-awsservice-service-name :shape
                         "AWSServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-awsservice
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'awsservice
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'awsservice 'make-awsservice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input awsservice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input awsservice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input awsservice))
   common-lisp:nil))
(common-lisp:deftype awsservice-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype awsservices () '(trivial-types:proper-list awsservice))
 (common-lisp:defun make-awsservices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list awsservice))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (auditmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype account-name () 'common-lisp:string)
(common-lisp:deftype account-status () 'common-lisp:string)
(common-lisp:deftype action-enum () 'common-lisp:string)
(common-lisp:deftype action-plan-instructions () 'common-lisp:string)
(common-lisp:deftype action-plan-title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass assessment common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or audit-manager-arn common-lisp:null)
                         :accessor struct-shape-assessment-arn :shape
                         "AuditManagerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-account :initarg :aws-account :initform
                         common-lisp:nil :type
                         (common-lisp:or awsaccount common-lisp:null) :accessor
                         struct-shape-assessment-aws-account :shape
                         "AWSAccount" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or assessment-metadata common-lisp:null)
                         :accessor struct-shape-assessment-metadata :shape
                         "AssessmentMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (framework :initarg :framework :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-framework common-lisp:null)
                         :accessor struct-shape-assessment-framework :shape
                         "AssessmentFramework" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-assessment-tags :shape "TagMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assessment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'assessment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'assessment 'make-assessment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account))
      (common-lisp:list
       (common-lisp:cons "awsAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assessment-control common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assessment-control-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or control-name common-lisp:null)
                         :accessor struct-shape-assessment-control-name :shape
                         "ControlName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or control-description common-lisp:null)
                         :accessor struct-shape-assessment-control-description
                         :shape "ControlDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or control-status common-lisp:null)
                         :accessor struct-shape-assessment-control-status
                         :shape "ControlStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response :initarg :response :initform common-lisp:nil
                         :type
                         (common-lisp:or control-response common-lisp:null)
                         :accessor struct-shape-assessment-control-response
                         :shape "ControlResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (comments :initarg :comments :initform common-lisp:nil
                         :type
                         (common-lisp:or control-comments common-lisp:null)
                         :accessor struct-shape-assessment-control-comments
                         :shape "ControlComments" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evidence-sources :initarg :evidence-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or evidence-sources common-lisp:null)
                         :accessor
                         struct-shape-assessment-control-evidence-sources
                         :shape "EvidenceSources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evidence-count :initarg :evidence-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-assessment-control-evidence-count :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assessment-report-evidence-count :initarg
                         :assessment-report-evidence-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-assessment-control-assessment-report-evidence-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assessment-control
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-control
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assessment-control 'make-assessment-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response))
      (common-lisp:list
       (common-lisp:cons "response"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comments))
      (common-lisp:list
       (common-lisp:cons "comments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-sources))
      (common-lisp:list
       (common-lisp:cons "evidenceSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-count))
      (common-lisp:list
       (common-lisp:cons "evidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-report-evidence-count))
      (common-lisp:list
       (common-lisp:cons "assessmentReportEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assessment-control-set common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or control-set-id common-lisp:null)
                         :accessor struct-shape-assessment-control-set-id
                         :shape "ControlSetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-assessment-control-set-description :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or control-set-status common-lisp:null)
                         :accessor struct-shape-assessment-control-set-status
                         :shape "ControlSetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (roles :initarg :roles :initform common-lisp:nil :type
                         (common-lisp:or roles common-lisp:null) :accessor
                         struct-shape-assessment-control-set-roles :shape
                         "Roles" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (controls :initarg :controls :initform common-lisp:nil
                         :type
                         (common-lisp:or assessment-controls common-lisp:null)
                         :accessor struct-shape-assessment-control-set-controls
                         :shape "AssessmentControls" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delegations :initarg :delegations :initform
                         common-lisp:nil :type
                         (common-lisp:or delegations common-lisp:null)
                         :accessor
                         struct-shape-assessment-control-set-delegations :shape
                         "Delegations" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (system-evidence-count :initarg :system-evidence-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-assessment-control-set-system-evidence-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manual-evidence-count :initarg :manual-evidence-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-assessment-control-set-manual-evidence-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assessment-control-set
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-control-set
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assessment-control-set 'make-assessment-control-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-control-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-control-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'controls))
      (common-lisp:list
       (common-lisp:cons "controls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegations))
      (common-lisp:list
       (common-lisp:cons "delegations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'system-evidence-count))
      (common-lisp:list
       (common-lisp:cons "systemEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-evidence-count))
      (common-lisp:list
       (common-lisp:cons "manualEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-control-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-control-sets ()
   '(trivial-types:proper-list assessment-control-set))
 (common-lisp:defun make-assessment-control-sets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-control-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype assessment-controls ()
   '(trivial-types:proper-list assessment-control))
 (common-lisp:defun make-assessment-controls
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-control))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assessment-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass assessment-evidence-folder common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or assessment-evidence-folder-name
                                         common-lisp:null)
                         :accessor struct-shape-assessment-evidence-folder-name
                         :shape "AssessmentEvidenceFolderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (date :initarg :date :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assessment-evidence-folder-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assessment-id :initarg :assessment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assessment-evidence-folder-assessment-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (control-set-id :initarg :control-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or control-set-id common-lisp:null)
                         :accessor
                         struct-shape-assessment-evidence-folder-control-set-id
                         :shape "ControlSetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-id :initarg :control-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assessment-evidence-folder-control-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assessment-evidence-folder-id :shape
                         "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-assessment-evidence-folder-data-source
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (author :initarg :author :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-assessment-evidence-folder-author :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-evidence :initarg :total-evidence :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-assessment-evidence-folder-total-evidence
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assessment-report-selection-count :initarg
                         :assessment-report-selection-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-assessment-evidence-folder-assessment-report-selection-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-name :initarg :control-name :initform
                         common-lisp:nil :type
                         (common-lisp:or control-name common-lisp:null)
                         :accessor
                         struct-shape-assessment-evidence-folder-control-name
                         :shape "ControlName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evidence-resources-included-count :initarg
                         :evidence-resources-included-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-assessment-evidence-folder-evidence-resources-included-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evidence-by-type-configuration-data-count :initarg
                         :evidence-by-type-configuration-data-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-assessment-evidence-folder-evidence-by-type-configuration-data-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evidence-by-type-manual-count :initarg
                         :evidence-by-type-manual-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-assessment-evidence-folder-evidence-by-type-manual-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evidence-by-type-compliance-check-count :initarg
                         :evidence-by-type-compliance-check-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-assessment-evidence-folder-evidence-by-type-compliance-check-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evidence-by-type-compliance-check-issues-count
                         :initarg
                         :evidence-by-type-compliance-check-issues-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-assessment-evidence-folder-evidence-by-type-compliance-check-issues-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evidence-by-type-user-activity-count :initarg
                         :evidence-by-type-user-activity-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-assessment-evidence-folder-evidence-by-type-user-activity-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evidence-aws-service-source-count :initarg
                         :evidence-aws-service-source-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-assessment-evidence-folder-evidence-aws-service-source-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assessment-evidence-folder
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-evidence-folder
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assessment-evidence-folder
                    'make-assessment-evidence-folder))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-evidence-folder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-evidence-folder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-id))
      (common-lisp:list
       (common-lisp:cons "assessmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-set-id))
      (common-lisp:list
       (common-lisp:cons "controlSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-id))
      (common-lisp:list
       (common-lisp:cons "controlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-evidence))
      (common-lisp:list
       (common-lisp:cons "totalEvidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-report-selection-count))
      (common-lisp:list
       (common-lisp:cons "assessmentReportSelectionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-name))
      (common-lisp:list
       (common-lisp:cons "controlName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-resources-included-count))
      (common-lisp:list
       (common-lisp:cons "evidenceResourcesIncludedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-by-type-configuration-data-count))
      (common-lisp:list
       (common-lisp:cons "evidenceByTypeConfigurationDataCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-by-type-manual-count))
      (common-lisp:list
       (common-lisp:cons "evidenceByTypeManualCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-by-type-compliance-check-count))
      (common-lisp:list
       (common-lisp:cons "evidenceByTypeComplianceCheckCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-by-type-compliance-check-issues-count))
      (common-lisp:list
       (common-lisp:cons "evidenceByTypeComplianceCheckIssuesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-by-type-user-activity-count))
      (common-lisp:list
       (common-lisp:cons "evidenceByTypeUserActivityCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-aws-service-source-count))
      (common-lisp:list
       (common-lisp:cons "evidenceAwsServiceSourceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-evidence-folder))
   common-lisp:nil))
(common-lisp:deftype assessment-evidence-folder-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype assessment-evidence-folders ()
   '(trivial-types:proper-list assessment-evidence-folder))
 (common-lisp:defun make-assessment-evidence-folders
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assessment-evidence-folder))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass assessment-framework common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assessment-framework-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or audit-manager-arn common-lisp:null)
                         :accessor struct-shape-assessment-framework-arn :shape
                         "AuditManagerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or framework-metadata common-lisp:null)
                         :accessor struct-shape-assessment-framework-metadata
                         :shape "FrameworkMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-sets :initarg :control-sets :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-control-sets
                                         common-lisp:null)
                         :accessor
                         struct-shape-assessment-framework-control-sets :shape
                         "AssessmentControlSets" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assessment-framework
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-framework
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assessment-framework 'make-assessment-framework))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-framework))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-framework))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-sets))
      (common-lisp:list
       (common-lisp:cons "controlSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-framework))
   common-lisp:nil))
(common-lisp:deftype assessment-framework-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass assessment-framework-metadata common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or audit-manager-arn common-lisp:null)
                         :accessor
                         struct-shape-assessment-framework-metadata-arn :shape
                         "AuditManagerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assessment-framework-metadata-id :shape
                         "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or framework-type common-lisp:null)
                         :accessor
                         struct-shape-assessment-framework-metadata-type :shape
                         "FrameworkType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or framework-name common-lisp:null)
                         :accessor
                         struct-shape-assessment-framework-metadata-name :shape
                         "FrameworkName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or framework-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-assessment-framework-metadata-description
                         :shape "FrameworkDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (logo :initarg :logo :initform common-lisp:nil :type
                         (common-lisp:or filename common-lisp:null) :accessor
                         struct-shape-assessment-framework-metadata-logo :shape
                         "Filename" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-type common-lisp:null)
                         :accessor
                         struct-shape-assessment-framework-metadata-compliance-type
                         :shape "ComplianceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (controls-count :initarg :controls-count :initform
                         common-lisp:nil :type
                         (common-lisp:or controls-count common-lisp:null)
                         :accessor
                         struct-shape-assessment-framework-metadata-controls-count
                         :shape "ControlsCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-sets-count :initarg :control-sets-count
                         :initform common-lisp:nil :type
                         (common-lisp:or control-sets-count common-lisp:null)
                         :accessor
                         struct-shape-assessment-framework-metadata-control-sets-count
                         :shape "ControlSetsCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assessment-framework-metadata-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assessment-framework-metadata-last-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assessment-framework-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'assessment-framework-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assessment-framework-metadata
                    'make-assessment-framework-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-framework-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-framework-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo))
      (common-lisp:list
       (common-lisp:cons "logo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "complianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'controls-count))
      (common-lisp:list
       (common-lisp:cons "controlsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-sets-count))
      (common-lisp:list
       (common-lisp:cons "controlSetsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-framework-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assessment-framework-share-request common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assessment-framework-share-request-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (framework-id :initarg :framework-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assessment-framework-share-request-framework-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (framework-name :initarg :framework-name :initform
                         common-lisp:nil :type
                         (common-lisp:or framework-name common-lisp:null)
                         :accessor
                         struct-shape-assessment-framework-share-request-framework-name
                         :shape "FrameworkName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (framework-description :initarg :framework-description
                         :initform common-lisp:nil :type
                         (common-lisp:or framework-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-assessment-framework-share-request-framework-description
                         :shape "FrameworkDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or share-request-status common-lisp:null)
                         :accessor
                         struct-shape-assessment-framework-share-request-status
                         :shape "ShareRequestStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-account :initarg :source-account :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-assessment-framework-share-request-source-account
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-account :initarg :destination-account
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-assessment-framework-share-request-destination-account
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-region :initarg :destination-region
                         :initform common-lisp:nil :type
                         (common-lisp:or region common-lisp:null) :accessor
                         struct-shape-assessment-framework-share-request-destination-region
                         :shape "Region" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration-time :initarg :expiration-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assessment-framework-share-request-expiration-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assessment-framework-share-request-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assessment-framework-share-request-last-updated
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type
                         (common-lisp:or share-request-comment
                                         common-lisp:null)
                         :accessor
                         struct-shape-assessment-framework-share-request-comment
                         :shape "ShareRequestComment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (standard-controls-count :initarg
                         :standard-controls-count :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-assessment-framework-share-request-standard-controls-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-controls-count :initarg :custom-controls-count
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-assessment-framework-share-request-custom-controls-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-type common-lisp:null)
                         :accessor
                         struct-shape-assessment-framework-share-request-compliance-type
                         :shape "ComplianceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assessment-framework-share-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'assessment-framework-share-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assessment-framework-share-request
                    'make-assessment-framework-share-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-framework-share-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-framework-share-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-id))
      (common-lisp:list
       (common-lisp:cons "frameworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-name))
      (common-lisp:list
       (common-lisp:cons "frameworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-description))
      (common-lisp:list
       (common-lisp:cons "frameworkDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-account))
      (common-lisp:list
       (common-lisp:cons "sourceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-account))
      (common-lisp:list
       (common-lisp:cons "destinationAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-region))
      (common-lisp:list
       (common-lisp:cons "destinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "expirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standard-controls-count))
      (common-lisp:list
       (common-lisp:cons "standardControlsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-controls-count))
      (common-lisp:list
       (common-lisp:cons "customControlsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "complianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-framework-share-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-framework-share-request-list ()
   '(trivial-types:proper-list assessment-framework-share-request))
 (common-lisp:defun make-assessment-framework-share-request-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assessment-framework-share-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass assessment-metadata common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or assessment-name common-lisp:null)
                         :accessor struct-shape-assessment-metadata-name :shape
                         "AssessmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assessment-metadata-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-description
                                         common-lisp:null)
                         :accessor struct-shape-assessment-metadata-description
                         :shape "AssessmentDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-type common-lisp:null)
                         :accessor
                         struct-shape-assessment-metadata-compliance-type
                         :shape "ComplianceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or assessment-status common-lisp:null)
                         :accessor struct-shape-assessment-metadata-status
                         :shape "AssessmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assessment-reports-destination :initarg
                         :assessment-reports-destination :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-reports-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-assessment-metadata-assessment-reports-destination
                         :shape "AssessmentReportsDestination" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scope :initarg :scope :initform common-lisp:nil :type
                         (common-lisp:or scope common-lisp:null) :accessor
                         struct-shape-assessment-metadata-scope :shape "Scope"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (roles :initarg :roles :initform common-lisp:nil :type
                         (common-lisp:or roles common-lisp:null) :accessor
                         struct-shape-assessment-metadata-roles :shape "Roles"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (delegations :initarg :delegations :initform
                         common-lisp:nil :type
                         (common-lisp:or delegations common-lisp:null)
                         :accessor struct-shape-assessment-metadata-delegations
                         :shape "Delegations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assessment-metadata-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assessment-metadata-last-updated :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assessment-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assessment-metadata 'make-assessment-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "complianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-reports-destination))
      (common-lisp:list
       (common-lisp:cons "assessmentReportsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegations))
      (common-lisp:list
       (common-lisp:cons "delegations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assessment-metadata-item common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or assessment-name common-lisp:null)
                         :accessor struct-shape-assessment-metadata-item-name
                         :shape "AssessmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assessment-metadata-item-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-type common-lisp:null)
                         :accessor
                         struct-shape-assessment-metadata-item-compliance-type
                         :shape "ComplianceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or assessment-status common-lisp:null)
                         :accessor struct-shape-assessment-metadata-item-status
                         :shape "AssessmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (roles :initarg :roles :initform common-lisp:nil :type
                         (common-lisp:or roles common-lisp:null) :accessor
                         struct-shape-assessment-metadata-item-roles :shape
                         "Roles" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (delegations :initarg :delegations :initform
                         common-lisp:nil :type
                         (common-lisp:or delegations common-lisp:null)
                         :accessor
                         struct-shape-assessment-metadata-item-delegations
                         :shape "Delegations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assessment-metadata-item-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assessment-metadata-item-last-updated
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assessment-metadata-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-metadata-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assessment-metadata-item 'make-assessment-metadata-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-metadata-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-metadata-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "complianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegations))
      (common-lisp:list
       (common-lisp:cons "delegations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-metadata-item))
   common-lisp:nil))
(common-lisp:deftype assessment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass assessment-report common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assessment-report-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or assessment-report-name
                                         common-lisp:null)
                         :accessor struct-shape-assessment-report-name :shape
                         "AssessmentReportName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-report-description
                                         common-lisp:null)
                         :accessor struct-shape-assessment-report-description
                         :shape "AssessmentReportDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-assessment-report-aws-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assessment-id :initarg :assessment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assessment-report-assessment-id :shape
                         "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assessment-name :initarg :assessment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-name common-lisp:null)
                         :accessor
                         struct-shape-assessment-report-assessment-name :shape
                         "AssessmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (author :initarg :author :initform common-lisp:nil
                         :type (common-lisp:or username common-lisp:null)
                         :accessor struct-shape-assessment-report-author :shape
                         "Username" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or assessment-report-status
                                         common-lisp:null)
                         :accessor struct-shape-assessment-report-status :shape
                         "AssessmentReportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assessment-report-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assessment-report
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-report
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assessment-report 'make-assessment-report))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-report))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-report))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-id))
      (common-lisp:list
       (common-lisp:cons "assessmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-name))
      (common-lisp:list
       (common-lisp:cons "assessmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-report))
   common-lisp:nil))
(common-lisp:deftype assessment-report-description () 'common-lisp:string)
(common-lisp:deftype assessment-report-destination-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass assessment-report-evidence-error common-lisp:nil
                       ((evidence-id :initarg :evidence-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assessment-report-evidence-error-evidence-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-assessment-report-evidence-error-error-code
                         :shape "ErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-assessment-report-evidence-error-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assessment-report-evidence-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'assessment-report-evidence-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assessment-report-evidence-error
                    'make-assessment-report-evidence-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-report-evidence-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-report-evidence-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-id))
      (common-lisp:list
       (common-lisp:cons "evidenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-report-evidence-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-report-evidence-errors ()
   '(trivial-types:proper-list assessment-report-evidence-error))
 (common-lisp:defun make-assessment-report-evidence-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assessment-report-evidence-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass assessment-report-metadata common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assessment-report-metadata-id :shape
                         "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or assessment-report-name
                                         common-lisp:null)
                         :accessor struct-shape-assessment-report-metadata-name
                         :shape "AssessmentReportName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-report-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-assessment-report-metadata-description
                         :shape "AssessmentReportDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (assessment-id :initarg :assessment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-assessment-report-metadata-assessment-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assessment-name :initarg :assessment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-name common-lisp:null)
                         :accessor
                         struct-shape-assessment-report-metadata-assessment-name
                         :shape "AssessmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (author :initarg :author :initform common-lisp:nil
                         :type (common-lisp:or username common-lisp:null)
                         :accessor
                         struct-shape-assessment-report-metadata-author :shape
                         "Username" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or assessment-report-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-assessment-report-metadata-status :shape
                         "AssessmentReportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-assessment-report-metadata-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assessment-report-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-report-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assessment-report-metadata
                    'make-assessment-report-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-report-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-report-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-id))
      (common-lisp:list
       (common-lisp:cons "assessmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-name))
      (common-lisp:list
       (common-lisp:cons "assessmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-report-metadata))
   common-lisp:nil))
(common-lisp:deftype assessment-report-name () 'common-lisp:string)
(common-lisp:deftype assessment-report-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass assessment-reports-destination common-lisp:nil
                       ((destination-type :initarg :destination-type :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-report-destination-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-assessment-reports-destination-destination-type
                         :shape "AssessmentReportDestinationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         struct-shape-assessment-reports-destination-destination
                         :shape "S3Url" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assessment-reports-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'assessment-reports-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assessment-reports-destination
                    'make-assessment-reports-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-reports-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-reports-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "destinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-reports-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-reports-metadata ()
   '(trivial-types:proper-list assessment-report-metadata))
 (common-lisp:defun make-assessment-reports-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assessment-report-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assessment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-assessment-report-evidence-folder-request
                       common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-associate-assessment-report-evidence-folder-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId")
                        (evidence-folder-id :initarg :evidence-folder-id
                         :initform
                         (common-lisp:error ":evidencefolderid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-associate-assessment-report-evidence-folder-request-evidence-folder-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-assessment-report-evidence-folder-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-assessment-report-evidence-folder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-assessment-report-evidence-folder-request
                    'make-associate-assessment-report-evidence-folder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-assessment-report-evidence-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-assessment-report-evidence-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-folder-id))
      (common-lisp:list
       (common-lisp:cons "evidenceFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-assessment-report-evidence-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-assessment-report-evidence-folder-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-assessment-report-evidence-folder-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-assessment-report-evidence-folder-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-assessment-report-evidence-folder-response
                    'make-associate-assessment-report-evidence-folder-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-assessment-report-evidence-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-assessment-report-evidence-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-assessment-report-evidence-folder-response))
   common-lisp:nil))
(common-lisp:deftype audit-manager-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-associate-assessment-report-evidence-request
                       common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-batch-associate-assessment-report-evidence-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId")
                        (evidence-folder-id :initarg :evidence-folder-id
                         :initform
                         (common-lisp:error ":evidencefolderid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-batch-associate-assessment-report-evidence-request-evidence-folder-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (evidence-ids :initarg :evidence-ids :initform
                         (common-lisp:error ":evidenceids is required") :type
                         (common-lisp:or evidence-ids common-lisp:null)
                         :accessor
                         struct-shape-batch-associate-assessment-report-evidence-request-evidence-ids
                         :shape "EvidenceIds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-associate-assessment-report-evidence-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-associate-assessment-report-evidence-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-associate-assessment-report-evidence-request
                    'make-batch-associate-assessment-report-evidence-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-assessment-report-evidence-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-assessment-report-evidence-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-folder-id))
      (common-lisp:list
       (common-lisp:cons "evidenceFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-ids))
      (common-lisp:list
       (common-lisp:cons "evidenceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-assessment-report-evidence-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-associate-assessment-report-evidence-response
                       common-lisp:nil
                       ((evidence-ids :initarg :evidence-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or evidence-ids common-lisp:null)
                         :accessor
                         struct-shape-batch-associate-assessment-report-evidence-response-evidence-ids
                         :shape "EvidenceIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or assessment-report-evidence-errors
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-associate-assessment-report-evidence-response-errors
                         :shape "AssessmentReportEvidenceErrors" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-associate-assessment-report-evidence-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-associate-assessment-report-evidence-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-associate-assessment-report-evidence-response
                    'make-batch-associate-assessment-report-evidence-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-assessment-report-evidence-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-assessment-report-evidence-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-ids))
      (common-lisp:list
       (common-lisp:cons "evidenceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-assessment-report-evidence-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-create-delegation-by-assessment-error
                       common-lisp:nil
                       ((create-delegation-request :initarg
                         :create-delegation-request :initform common-lisp:nil
                         :type
                         (common-lisp:or create-delegation-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-create-delegation-by-assessment-error-create-delegation-request
                         :shape "CreateDelegationRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-batch-create-delegation-by-assessment-error-error-code
                         :shape "ErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-batch-create-delegation-by-assessment-error-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-create-delegation-by-assessment-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-delegation-by-assessment-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-create-delegation-by-assessment-error
                    'make-batch-create-delegation-by-assessment-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-delegation-request))
      (common-lisp:list
       (common-lisp:cons "createDelegationRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-create-delegation-by-assessment-errors ()
   '(trivial-types:proper-list batch-create-delegation-by-assessment-error))
 (common-lisp:defun make-batch-create-delegation-by-assessment-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-create-delegation-by-assessment-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-create-delegation-by-assessment-request
                       common-lisp:nil
                       ((create-delegation-requests :initarg
                         :create-delegation-requests :initform
                         (common-lisp:error
                          ":createdelegationrequests is required")
                         :type
                         (common-lisp:or create-delegation-requests
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-create-delegation-by-assessment-request-create-delegation-requests
                         :shape "CreateDelegationRequests" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-batch-create-delegation-by-assessment-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-create-delegation-by-assessment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-delegation-by-assessment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-create-delegation-by-assessment-request
                    'make-batch-create-delegation-by-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-delegation-requests))
      (common-lisp:list
       (common-lisp:cons "createDelegationRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-create-delegation-by-assessment-response
                       common-lisp:nil
                       ((delegations :initarg :delegations :initform
                         common-lisp:nil :type
                         (common-lisp:or delegations common-lisp:null)
                         :accessor
                         struct-shape-batch-create-delegation-by-assessment-response-delegations
                         :shape "Delegations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          batch-create-delegation-by-assessment-errors
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-create-delegation-by-assessment-response-errors
                         :shape "BatchCreateDelegationByAssessmentErrors"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-create-delegation-by-assessment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-delegation-by-assessment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-create-delegation-by-assessment-response
                    'make-batch-create-delegation-by-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegations))
      (common-lisp:list
       (common-lisp:cons "delegations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-delegation-by-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-delegation-by-assessment-error
                       common-lisp:nil
                       ((delegation-id :initarg :delegation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-batch-delete-delegation-by-assessment-error-delegation-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-batch-delete-delegation-by-assessment-error-error-code
                         :shape "ErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-delegation-by-assessment-error-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-delegation-by-assessment-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-delegation-by-assessment-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-delegation-by-assessment-error
                    'make-batch-delete-delegation-by-assessment-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegation-id))
      (common-lisp:list
       (common-lisp:cons "delegationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-delete-delegation-by-assessment-errors ()
   '(trivial-types:proper-list batch-delete-delegation-by-assessment-error))
 (common-lisp:defun make-batch-delete-delegation-by-assessment-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-delete-delegation-by-assessment-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-delete-delegation-by-assessment-request
                       common-lisp:nil
                       ((delegation-ids :initarg :delegation-ids :initform
                         (common-lisp:error ":delegationids is required") :type
                         (common-lisp:or delegation-ids common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-delegation-by-assessment-request-delegation-ids
                         :shape "DelegationIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-batch-delete-delegation-by-assessment-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-delegation-by-assessment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-delegation-by-assessment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-delegation-by-assessment-request
                    'make-batch-delete-delegation-by-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegation-ids))
      (common-lisp:list
       (common-lisp:cons "delegationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-delegation-by-assessment-response
                       common-lisp:nil
                       ((errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          batch-delete-delegation-by-assessment-errors
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-delegation-by-assessment-response-errors
                         :shape "BatchDeleteDelegationByAssessmentErrors"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-delegation-by-assessment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-delegation-by-assessment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-delegation-by-assessment-response
                    'make-batch-delete-delegation-by-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-delegation-by-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-disassociate-assessment-report-evidence-request
                       common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-batch-disassociate-assessment-report-evidence-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId")
                        (evidence-folder-id :initarg :evidence-folder-id
                         :initform
                         (common-lisp:error ":evidencefolderid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-batch-disassociate-assessment-report-evidence-request-evidence-folder-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (evidence-ids :initarg :evidence-ids :initform
                         (common-lisp:error ":evidenceids is required") :type
                         (common-lisp:or evidence-ids common-lisp:null)
                         :accessor
                         struct-shape-batch-disassociate-assessment-report-evidence-request-evidence-ids
                         :shape "EvidenceIds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-disassociate-assessment-report-evidence-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-disassociate-assessment-report-evidence-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-assessment-report-evidence-request
                    'make-batch-disassociate-assessment-report-evidence-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-assessment-report-evidence-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-assessment-report-evidence-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-folder-id))
      (common-lisp:list
       (common-lisp:cons "evidenceFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-ids))
      (common-lisp:list
       (common-lisp:cons "evidenceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-assessment-report-evidence-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-disassociate-assessment-report-evidence-response
                       common-lisp:nil
                       ((evidence-ids :initarg :evidence-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or evidence-ids common-lisp:null)
                         :accessor
                         struct-shape-batch-disassociate-assessment-report-evidence-response-evidence-ids
                         :shape "EvidenceIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or assessment-report-evidence-errors
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-disassociate-assessment-report-evidence-response-errors
                         :shape "AssessmentReportEvidenceErrors" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-disassociate-assessment-report-evidence-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-disassociate-assessment-report-evidence-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-assessment-report-evidence-response
                    'make-batch-disassociate-assessment-report-evidence-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-assessment-report-evidence-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-assessment-report-evidence-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-ids))
      (common-lisp:list
       (common-lisp:cons "evidenceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-assessment-report-evidence-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-import-evidence-to-assessment-control-error
                       common-lisp:nil
                       ((manual-evidence :initarg :manual-evidence :initform
                         common-lisp:nil :type
                         (common-lisp:or manual-evidence common-lisp:null)
                         :accessor
                         struct-shape-batch-import-evidence-to-assessment-control-error-manual-evidence
                         :shape "ManualEvidence" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-batch-import-evidence-to-assessment-control-error-error-code
                         :shape "ErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-batch-import-evidence-to-assessment-control-error-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-import-evidence-to-assessment-control-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-import-evidence-to-assessment-control-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-import-evidence-to-assessment-control-error
                    'make-batch-import-evidence-to-assessment-control-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manual-evidence))
      (common-lisp:list
       (common-lisp:cons "manualEvidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-import-evidence-to-assessment-control-errors ()
   '(trivial-types:proper-list
     batch-import-evidence-to-assessment-control-error))
 (common-lisp:defun make-batch-import-evidence-to-assessment-control-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-import-evidence-to-assessment-control-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-import-evidence-to-assessment-control-request
                       common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-batch-import-evidence-to-assessment-control-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId")
                        (control-set-id :initarg :control-set-id :initform
                         (common-lisp:error ":controlsetid is required") :type
                         (common-lisp:or control-set-id common-lisp:null)
                         :accessor
                         struct-shape-batch-import-evidence-to-assessment-control-request-control-set-id
                         :shape "ControlSetId" :location "uri" :location-name
                         "controlSetId")
                        (control-id :initarg :control-id :initform
                         (common-lisp:error ":controlid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-batch-import-evidence-to-assessment-control-request-control-id
                         :shape "UUID" :location "uri" :location-name
                         "controlId")
                        (manual-evidence :initarg :manual-evidence :initform
                         (common-lisp:error ":manualevidence is required")
                         :type
                         (common-lisp:or manual-evidence-list common-lisp:null)
                         :accessor
                         struct-shape-batch-import-evidence-to-assessment-control-request-manual-evidence
                         :shape "ManualEvidenceList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-import-evidence-to-assessment-control-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-import-evidence-to-assessment-control-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-import-evidence-to-assessment-control-request
                    'make-batch-import-evidence-to-assessment-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manual-evidence))
      (common-lisp:list
       (common-lisp:cons "manualEvidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-import-evidence-to-assessment-control-response
                       common-lisp:nil
                       ((errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          batch-import-evidence-to-assessment-control-errors
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-import-evidence-to-assessment-control-response-errors
                         :shape "BatchImportEvidenceToAssessmentControlErrors"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-import-evidence-to-assessment-control-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-import-evidence-to-assessment-control-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-import-evidence-to-assessment-control-response
                    'make-batch-import-evidence-to-assessment-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-evidence-to-assessment-control-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass change-log common-lisp:nil
                       ((object-type :initarg :object-type :initform
                         common-lisp:nil :type
                         (common-lisp:or object-type-enum common-lisp:null)
                         :accessor struct-shape-change-log-object-type :shape
                         "ObjectTypeEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-name :initarg :object-name :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-change-log-object-name :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or action-enum common-lisp:null)
                         :accessor struct-shape-change-log-action :shape
                         "ActionEnum" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-change-log-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or iam-arn common-lisp:null) :accessor
                         struct-shape-change-log-created-by :shape "IamArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-change-log
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'change-log
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'change-log 'make-change-log))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type))
      (common-lisp:list
       (common-lisp:cons "objectType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-name))
      (common-lisp:list
       (common-lisp:cons "objectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change-log))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype change-logs () '(trivial-types:proper-list change-log))
 (common-lisp:defun make-change-logs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change-log))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cloud-trail-arn () 'common-lisp:string)
(common-lisp:deftype compliance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass control common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or audit-manager-arn common-lisp:null)
                         :accessor struct-shape-control-arn :shape
                         "AuditManagerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-control-id :shape "UUID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or control-type common-lisp:null)
                         :accessor struct-shape-control-type :shape
                         "ControlType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or control-name common-lisp:null)
                         :accessor struct-shape-control-name :shape
                         "ControlName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or control-description common-lisp:null)
                         :accessor struct-shape-control-description :shape
                         "ControlDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (testing-information :initarg :testing-information
                         :initform common-lisp:nil :type
                         (common-lisp:or testing-information common-lisp:null)
                         :accessor struct-shape-control-testing-information
                         :shape "TestingInformation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-plan-title :initarg :action-plan-title
                         :initform common-lisp:nil :type
                         (common-lisp:or action-plan-title common-lisp:null)
                         :accessor struct-shape-control-action-plan-title
                         :shape "ActionPlanTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-plan-instructions :initarg
                         :action-plan-instructions :initform common-lisp:nil
                         :type
                         (common-lisp:or action-plan-instructions
                                         common-lisp:null)
                         :accessor
                         struct-shape-control-action-plan-instructions :shape
                         "ActionPlanInstructions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-sources :initarg :control-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or control-sources common-lisp:null)
                         :accessor struct-shape-control-control-sources :shape
                         "ControlSources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-mapping-sources :initarg
                         :control-mapping-sources :initform common-lisp:nil
                         :type
                         (common-lisp:or control-mapping-sources
                                         common-lisp:null)
                         :accessor struct-shape-control-control-mapping-sources
                         :shape "ControlMappingSources" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-control-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-control-last-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-control-created-by :shape "CreatedBy"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-by :initarg :last-updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or last-updated-by common-lisp:null)
                         :accessor struct-shape-control-last-updated-by :shape
                         "LastUpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-control-tags :shape "TagMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-control
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'control
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'control 'make-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'testing-information))
      (common-lisp:list
       (common-lisp:cons "testingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-plan-title))
      (common-lisp:list
       (common-lisp:cons "actionPlanTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-plan-instructions))
      (common-lisp:list
       (common-lisp:cons "actionPlanInstructions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-sources))
      (common-lisp:list
       (common-lisp:cons "controlSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-mapping-sources))
      (common-lisp:list
       (common-lisp:cons "controlMappingSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-by))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass control-comment common-lisp:nil
                       ((author-name :initarg :author-name :initform
                         common-lisp:nil :type
                         (common-lisp:or username common-lisp:null) :accessor
                         struct-shape-control-comment-author-name :shape
                         "Username" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (comment-body :initarg :comment-body :initform
                         common-lisp:nil :type
                         (common-lisp:or control-comment-body common-lisp:null)
                         :accessor struct-shape-control-comment-comment-body
                         :shape "ControlCommentBody" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (posted-date :initarg :posted-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-control-comment-posted-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-control-comment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'control-comment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'control-comment 'make-control-comment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input control-comment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input control-comment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author-name))
      (common-lisp:list
       (common-lisp:cons "authorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment-body))
      (common-lisp:list
       (common-lisp:cons "commentBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posted-date))
      (common-lisp:list
       (common-lisp:cons "postedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input control-comment))
   common-lisp:nil))
(common-lisp:deftype control-comment-body () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype control-comments ()
   '(trivial-types:proper-list control-comment))
 (common-lisp:defun make-control-comments
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list control-comment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype control-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass control-domain-insights common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-control-domain-insights-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-control-domain-insights-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (controls-count-by-noncompliant-evidence :initarg
                         :controls-count-by-noncompliant-evidence :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-control-domain-insights-controls-count-by-noncompliant-evidence
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-controls-count :initarg :total-controls-count
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-control-domain-insights-total-controls-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evidence-insights :initarg :evidence-insights
                         :initform common-lisp:nil :type
                         (common-lisp:or evidence-insights common-lisp:null)
                         :accessor
                         struct-shape-control-domain-insights-evidence-insights
                         :shape "EvidenceInsights" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-control-domain-insights-last-updated
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-control-domain-insights
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'control-domain-insights
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'control-domain-insights 'make-control-domain-insights))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          control-domain-insights))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          control-domain-insights))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'controls-count-by-noncompliant-evidence))
      (common-lisp:list
       (common-lisp:cons "controlsCountByNoncompliantEvidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-controls-count))
      (common-lisp:list
       (common-lisp:cons "totalControlsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-insights))
      (common-lisp:list
       (common-lisp:cons "evidenceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          control-domain-insights))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype control-domain-insights-list ()
   '(trivial-types:proper-list control-domain-insights))
 (common-lisp:defun make-control-domain-insights-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list control-domain-insights))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype control-insights-metadata ()
   '(trivial-types:proper-list control-insights-metadata-item))
 (common-lisp:defun make-control-insights-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            control-insights-metadata-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype control-insights-metadata-by-assessment ()
   '(trivial-types:proper-list control-insights-metadata-by-assessment-item))
 (common-lisp:defun make-control-insights-metadata-by-assessment
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            control-insights-metadata-by-assessment-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass control-insights-metadata-by-assessment-item
                       common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-control-insights-metadata-by-assessment-item-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-control-insights-metadata-by-assessment-item-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (evidence-insights :initarg :evidence-insights
                         :initform common-lisp:nil :type
                         (common-lisp:or evidence-insights common-lisp:null)
                         :accessor
                         struct-shape-control-insights-metadata-by-assessment-item-evidence-insights
                         :shape "EvidenceInsights" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-set-name :initarg :control-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-control-insights-metadata-by-assessment-item-control-set-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-control-insights-metadata-by-assessment-item-last-updated
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-control-insights-metadata-by-assessment-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'control-insights-metadata-by-assessment-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'control-insights-metadata-by-assessment-item
                    'make-control-insights-metadata-by-assessment-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          control-insights-metadata-by-assessment-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          control-insights-metadata-by-assessment-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-insights))
      (common-lisp:list
       (common-lisp:cons "evidenceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-set-name))
      (common-lisp:list
       (common-lisp:cons "controlSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          control-insights-metadata-by-assessment-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass control-insights-metadata-item common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-control-insights-metadata-item-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-control-insights-metadata-item-id :shape
                         "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (evidence-insights :initarg :evidence-insights
                         :initform common-lisp:nil :type
                         (common-lisp:or evidence-insights common-lisp:null)
                         :accessor
                         struct-shape-control-insights-metadata-item-evidence-insights
                         :shape "EvidenceInsights" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-control-insights-metadata-item-last-updated
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-control-insights-metadata-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'control-insights-metadata-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'control-insights-metadata-item
                    'make-control-insights-metadata-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          control-insights-metadata-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          control-insights-metadata-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-insights))
      (common-lisp:list
       (common-lisp:cons "evidenceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          control-insights-metadata-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass control-mapping-source common-lisp:nil
                       ((source-id :initarg :source-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-control-mapping-source-source-id :shape
                         "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-name :initarg :source-name :initform
                         common-lisp:nil :type
                         (common-lisp:or source-name common-lisp:null)
                         :accessor
                         struct-shape-control-mapping-source-source-name :shape
                         "SourceName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-description :initarg :source-description
                         :initform common-lisp:nil :type
                         (common-lisp:or source-description common-lisp:null)
                         :accessor
                         struct-shape-control-mapping-source-source-description
                         :shape "SourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-set-up-option :initarg :source-set-up-option
                         :initform common-lisp:nil :type
                         (common-lisp:or source-set-up-option common-lisp:null)
                         :accessor
                         struct-shape-control-mapping-source-source-set-up-option
                         :shape "SourceSetUpOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor
                         struct-shape-control-mapping-source-source-type :shape
                         "SourceType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-keyword :initarg :source-keyword :initform
                         common-lisp:nil :type
                         (common-lisp:or source-keyword common-lisp:null)
                         :accessor
                         struct-shape-control-mapping-source-source-keyword
                         :shape "SourceKeyword" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-frequency :initarg :source-frequency :initform
                         common-lisp:nil :type
                         (common-lisp:or source-frequency common-lisp:null)
                         :accessor
                         struct-shape-control-mapping-source-source-frequency
                         :shape "SourceFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (troubleshooting-text :initarg :troubleshooting-text
                         :initform common-lisp:nil :type
                         (common-lisp:or troubleshooting-text common-lisp:null)
                         :accessor
                         struct-shape-control-mapping-source-troubleshooting-text
                         :shape "TroubleshootingText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-control-mapping-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'control-mapping-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'control-mapping-source 'make-control-mapping-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          control-mapping-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          control-mapping-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "sourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "sourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-description))
      (common-lisp:list
       (common-lisp:cons "sourceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-set-up-option))
      (common-lisp:list
       (common-lisp:cons "sourceSetUpOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "sourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-keyword))
      (common-lisp:list
       (common-lisp:cons "sourceKeyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-frequency))
      (common-lisp:list
       (common-lisp:cons "sourceFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'troubleshooting-text))
      (common-lisp:list
       (common-lisp:cons "troubleshootingText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          control-mapping-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype control-mapping-sources ()
   '(trivial-types:proper-list control-mapping-source))
 (common-lisp:defun make-control-mapping-sources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list control-mapping-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass control-metadata common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or audit-manager-arn common-lisp:null)
                         :accessor struct-shape-control-metadata-arn :shape
                         "AuditManagerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-control-metadata-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or control-name common-lisp:null)
                         :accessor struct-shape-control-metadata-name :shape
                         "ControlName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (control-sources :initarg :control-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or control-sources common-lisp:null)
                         :accessor
                         struct-shape-control-metadata-control-sources :shape
                         "ControlSources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-control-metadata-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-control-metadata-last-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-control-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'control-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'control-metadata 'make-control-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input control-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input control-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-sources))
      (common-lisp:list
       (common-lisp:cons "controlSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input control-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype control-metadata-list ()
   '(trivial-types:proper-list control-metadata))
 (common-lisp:defun make-control-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list control-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype control-name () 'common-lisp:string)
(common-lisp:deftype control-response () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass control-set common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-control-set-id :shape "UUID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or control-set-name common-lisp:null)
                         :accessor struct-shape-control-set-name :shape
                         "ControlSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (controls :initarg :controls :initform common-lisp:nil
                         :type (common-lisp:or controls common-lisp:null)
                         :accessor struct-shape-control-set-controls :shape
                         "Controls" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-control-set
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'control-set
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'control-set 'make-control-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input control-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input control-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'controls))
      (common-lisp:list
       (common-lisp:cons "controls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input control-set))
   common-lisp:nil))
(common-lisp:deftype control-set-id () 'common-lisp:string)
(common-lisp:deftype control-set-name () 'common-lisp:string)
(common-lisp:deftype control-set-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype control-sets () '(trivial-types:proper-list control-set))
 (common-lisp:defun make-control-sets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list control-set))
   aws-sdk/generator/shape::members))
(common-lisp:deftype control-sets-count () 'common-lisp:integer)
(common-lisp:deftype control-sources () 'common-lisp:string)
(common-lisp:deftype control-status () 'common-lisp:string)
(common-lisp:deftype control-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype controls () '(trivial-types:proper-list control))
 (common-lisp:defun make-controls
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list control))
   aws-sdk/generator/shape::members))
(common-lisp:deftype controls-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-assessment-framework-control common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-create-assessment-framework-control-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-assessment-framework-control
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-assessment-framework-control
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-assessment-framework-control
                    'make-create-assessment-framework-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-assessment-framework-control-set common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or control-set-name common-lisp:null)
                         :accessor
                         struct-shape-create-assessment-framework-control-set-name
                         :shape "ControlSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (controls :initarg :controls :initform common-lisp:nil
                         :type
                         (common-lisp:or create-assessment-framework-controls
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-assessment-framework-control-set-controls
                         :shape "CreateAssessmentFrameworkControls" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-assessment-framework-control-set
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-assessment-framework-control-set
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-assessment-framework-control-set
                    'make-create-assessment-framework-control-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-control-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-control-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'controls))
      (common-lisp:list
       (common-lisp:cons "controls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-control-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-assessment-framework-control-sets ()
   '(trivial-types:proper-list create-assessment-framework-control-set))
 (common-lisp:defun make-create-assessment-framework-control-sets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-assessment-framework-control-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype create-assessment-framework-controls ()
   '(trivial-types:proper-list create-assessment-framework-control))
 (common-lisp:defun make-create-assessment-framework-controls
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-assessment-framework-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-assessment-framework-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or framework-name common-lisp:null)
                         :accessor
                         struct-shape-create-assessment-framework-request-name
                         :shape "FrameworkName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or framework-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-assessment-framework-request-description
                         :shape "FrameworkDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-type common-lisp:null)
                         :accessor
                         struct-shape-create-assessment-framework-request-compliance-type
                         :shape "ComplianceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-sets :initarg :control-sets :initform
                         (common-lisp:error ":controlsets is required") :type
                         (common-lisp:or
                          create-assessment-framework-control-sets
                          common-lisp:null)
                         :accessor
                         struct-shape-create-assessment-framework-request-control-sets
                         :shape "CreateAssessmentFrameworkControlSets"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-assessment-framework-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-assessment-framework-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-assessment-framework-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-assessment-framework-request
                    'make-create-assessment-framework-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "complianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-sets))
      (common-lisp:list
       (common-lisp:cons "controlSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-assessment-framework-response common-lisp:nil
                       ((framework :initarg :framework :initform
                         common-lisp:nil :type
                         (common-lisp:or framework common-lisp:null) :accessor
                         struct-shape-create-assessment-framework-response-framework
                         :shape "Framework" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-assessment-framework-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-assessment-framework-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-assessment-framework-response
                    'make-create-assessment-framework-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-framework-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-assessment-report-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or assessment-report-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-assessment-report-request-name
                         :shape "AssessmentReportName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-report-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-assessment-report-request-description
                         :shape "AssessmentReportDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-create-assessment-report-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId")
                        (query-statement :initarg :query-statement :initform
                         common-lisp:nil :type
                         (common-lisp:or query-statement common-lisp:null)
                         :accessor
                         struct-shape-create-assessment-report-request-query-statement
                         :shape "QueryStatement" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-assessment-report-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-assessment-report-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-assessment-report-request
                    'make-create-assessment-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-report-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-statement))
      (common-lisp:list
       (common-lisp:cons "queryStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-assessment-report-response common-lisp:nil
                       ((assessment-report :initarg :assessment-report
                         :initform common-lisp:nil :type
                         (common-lisp:or assessment-report common-lisp:null)
                         :accessor
                         struct-shape-create-assessment-report-response-assessment-report
                         :shape "AssessmentReport" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-assessment-report-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-assessment-report-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-assessment-report-response
                    'make-create-assessment-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-report))
      (common-lisp:list
       (common-lisp:cons "assessmentReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-assessment-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or assessment-name common-lisp:null)
                         :accessor struct-shape-create-assessment-request-name
                         :shape "AssessmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-assessment-request-description
                         :shape "AssessmentDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (assessment-reports-destination :initarg
                         :assessment-reports-destination :initform
                         (common-lisp:error
                          ":assessmentreportsdestination is required")
                         :type
                         (common-lisp:or assessment-reports-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-assessment-request-assessment-reports-destination
                         :shape "AssessmentReportsDestination" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scope :initarg :scope :initform
                         (common-lisp:error ":scope is required") :type
                         (common-lisp:or scope common-lisp:null) :accessor
                         struct-shape-create-assessment-request-scope :shape
                         "Scope" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (roles :initarg :roles :initform
                         (common-lisp:error ":roles is required") :type
                         (common-lisp:or roles common-lisp:null) :accessor
                         struct-shape-create-assessment-request-roles :shape
                         "Roles" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (framework-id :initarg :framework-id :initform
                         (common-lisp:error ":frameworkid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-create-assessment-request-framework-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-assessment-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-assessment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-assessment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-assessment-request
                    'make-create-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-reports-destination))
      (common-lisp:list
       (common-lisp:cons "assessmentReportsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-id))
      (common-lisp:list
       (common-lisp:cons "frameworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-assessment-response common-lisp:nil
                       ((assessment :initarg :assessment :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment common-lisp:null) :accessor
                         struct-shape-create-assessment-response-assessment
                         :shape "Assessment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-assessment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-assessment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-assessment-response
                    'make-create-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment))
      (common-lisp:list
       (common-lisp:cons "assessment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-control-mapping-source common-lisp:nil
                       ((source-name :initarg :source-name :initform
                         common-lisp:nil :type
                         (common-lisp:or source-name common-lisp:null)
                         :accessor
                         struct-shape-create-control-mapping-source-source-name
                         :shape "SourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-description :initarg :source-description
                         :initform common-lisp:nil :type
                         (common-lisp:or source-description common-lisp:null)
                         :accessor
                         struct-shape-create-control-mapping-source-source-description
                         :shape "SourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-set-up-option :initarg :source-set-up-option
                         :initform common-lisp:nil :type
                         (common-lisp:or source-set-up-option common-lisp:null)
                         :accessor
                         struct-shape-create-control-mapping-source-source-set-up-option
                         :shape "SourceSetUpOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor
                         struct-shape-create-control-mapping-source-source-type
                         :shape "SourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-keyword :initarg :source-keyword :initform
                         common-lisp:nil :type
                         (common-lisp:or source-keyword common-lisp:null)
                         :accessor
                         struct-shape-create-control-mapping-source-source-keyword
                         :shape "SourceKeyword" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-frequency :initarg :source-frequency :initform
                         common-lisp:nil :type
                         (common-lisp:or source-frequency common-lisp:null)
                         :accessor
                         struct-shape-create-control-mapping-source-source-frequency
                         :shape "SourceFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (troubleshooting-text :initarg :troubleshooting-text
                         :initform common-lisp:nil :type
                         (common-lisp:or troubleshooting-text common-lisp:null)
                         :accessor
                         struct-shape-create-control-mapping-source-troubleshooting-text
                         :shape "TroubleshootingText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-control-mapping-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-control-mapping-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-control-mapping-source
                    'make-create-control-mapping-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-control-mapping-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-control-mapping-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "sourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-description))
      (common-lisp:list
       (common-lisp:cons "sourceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-set-up-option))
      (common-lisp:list
       (common-lisp:cons "sourceSetUpOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "sourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-keyword))
      (common-lisp:list
       (common-lisp:cons "sourceKeyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-frequency))
      (common-lisp:list
       (common-lisp:cons "sourceFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'troubleshooting-text))
      (common-lisp:list
       (common-lisp:cons "troubleshootingText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-control-mapping-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-control-mapping-sources ()
   '(trivial-types:proper-list create-control-mapping-source))
 (common-lisp:defun make-create-control-mapping-sources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-control-mapping-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-control-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or control-name common-lisp:null)
                         :accessor struct-shape-create-control-request-name
                         :shape "ControlName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or control-description common-lisp:null)
                         :accessor
                         struct-shape-create-control-request-description :shape
                         "ControlDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (testing-information :initarg :testing-information
                         :initform common-lisp:nil :type
                         (common-lisp:or testing-information common-lisp:null)
                         :accessor
                         struct-shape-create-control-request-testing-information
                         :shape "TestingInformation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-plan-title :initarg :action-plan-title
                         :initform common-lisp:nil :type
                         (common-lisp:or action-plan-title common-lisp:null)
                         :accessor
                         struct-shape-create-control-request-action-plan-title
                         :shape "ActionPlanTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-plan-instructions :initarg
                         :action-plan-instructions :initform common-lisp:nil
                         :type
                         (common-lisp:or action-plan-instructions
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-control-request-action-plan-instructions
                         :shape "ActionPlanInstructions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (control-mapping-sources :initarg
                         :control-mapping-sources :initform
                         (common-lisp:error
                          ":controlmappingsources is required")
                         :type
                         (common-lisp:or create-control-mapping-sources
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-control-request-control-mapping-sources
                         :shape "CreateControlMappingSources" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-control-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-control-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-control-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-control-request 'make-create-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-control-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'testing-information))
      (common-lisp:list
       (common-lisp:cons "testingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-plan-title))
      (common-lisp:list
       (common-lisp:cons "actionPlanTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-plan-instructions))
      (common-lisp:list
       (common-lisp:cons "actionPlanInstructions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-mapping-sources))
      (common-lisp:list
       (common-lisp:cons "controlMappingSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-control-response common-lisp:nil
                       ((control :initarg :control :initform common-lisp:nil
                         :type (common-lisp:or control common-lisp:null)
                         :accessor struct-shape-create-control-response-control
                         :shape "Control" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-control-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-control-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-control-response 'make-create-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-control-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-control-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-delegation-request common-lisp:nil
                       ((comment :initarg :comment :initform common-lisp:nil
                         :type
                         (common-lisp:or delegation-comment common-lisp:null)
                         :accessor
                         struct-shape-create-delegation-request-comment :shape
                         "DelegationComment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-set-id :initarg :control-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or control-set-id common-lisp:null)
                         :accessor
                         struct-shape-create-delegation-request-control-set-id
                         :shape "ControlSetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or iam-arn common-lisp:null)
                         :accessor
                         struct-shape-create-delegation-request-role-arn :shape
                         "IamArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-type :initarg :role-type :initform
                         common-lisp:nil :type
                         (common-lisp:or role-type common-lisp:null) :accessor
                         struct-shape-create-delegation-request-role-type
                         :shape "RoleType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-delegation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-delegation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-delegation-request
                    'make-create-delegation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-delegation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-delegation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-set-id))
      (common-lisp:list
       (common-lisp:cons "controlSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-type))
      (common-lisp:list
       (common-lisp:cons "roleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-delegation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-delegation-requests ()
   '(trivial-types:proper-list create-delegation-request))
 (common-lisp:defun make-create-delegation-requests
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-delegation-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype created-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass default-export-destination common-lisp:nil
                       ((destination-type :initarg :destination-type :initform
                         common-lisp:nil :type
                         (common-lisp:or export-destination-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-default-export-destination-destination-type
                         :shape "ExportDestinationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         struct-shape-default-export-destination-destination
                         :shape "S3Url" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-default-export-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'default-export-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'default-export-destination
                    'make-default-export-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-export-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-export-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "destinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-export-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delegation common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-delegation-id :shape "UUID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (assessment-name :initarg :assessment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-name common-lisp:null)
                         :accessor struct-shape-delegation-assessment-name
                         :shape "AssessmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assessment-id :initarg :assessment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-delegation-assessment-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or delegation-status common-lisp:null)
                         :accessor struct-shape-delegation-status :shape
                         "DelegationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or iam-arn common-lisp:null)
                         :accessor struct-shape-delegation-role-arn :shape
                         "IamArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-type :initarg :role-type :initform
                         common-lisp:nil :type
                         (common-lisp:or role-type common-lisp:null) :accessor
                         struct-shape-delegation-role-type :shape "RoleType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-delegation-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-delegation-last-updated :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (control-set-id :initarg :control-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or control-set-id common-lisp:null)
                         :accessor struct-shape-delegation-control-set-id
                         :shape "ControlSetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type
                         (common-lisp:or delegation-comment common-lisp:null)
                         :accessor struct-shape-delegation-comment :shape
                         "DelegationComment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-delegation-created-by :shape "CreatedBy"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delegation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delegation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'delegation 'make-delegation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delegation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delegation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-name))
      (common-lisp:list
       (common-lisp:cons "assessmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-id))
      (common-lisp:list
       (common-lisp:cons "assessmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-type))
      (common-lisp:list
       (common-lisp:cons "roleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-set-id))
      (common-lisp:list
       (common-lisp:cons "controlSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delegation))
   common-lisp:nil))
(common-lisp:deftype delegation-comment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype delegation-ids () '(trivial-types:proper-list uuid))
 (common-lisp:defun make-delegation-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list uuid))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delegation-metadata common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-delegation-metadata-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assessment-name :initarg :assessment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-name common-lisp:null)
                         :accessor
                         struct-shape-delegation-metadata-assessment-name
                         :shape "AssessmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assessment-id :initarg :assessment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-delegation-metadata-assessment-id :shape
                         "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or delegation-status common-lisp:null)
                         :accessor struct-shape-delegation-metadata-status
                         :shape "DelegationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or iam-arn common-lisp:null)
                         :accessor struct-shape-delegation-metadata-role-arn
                         :shape "IamArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-delegation-metadata-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (control-set-name :initarg :control-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-delegation-metadata-control-set-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delegation-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delegation-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delegation-metadata 'make-delegation-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delegation-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delegation-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-name))
      (common-lisp:list
       (common-lisp:cons "assessmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-id))
      (common-lisp:list
       (common-lisp:cons "assessmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-set-name))
      (common-lisp:list
       (common-lisp:cons "controlSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delegation-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype delegation-metadata-list ()
   '(trivial-types:proper-list delegation-metadata))
 (common-lisp:defun make-delegation-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delegation-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype delegation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype delegations () '(trivial-types:proper-list delegation))
 (common-lisp:defun make-delegations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delegation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-assessment-framework-request common-lisp:nil
                       ((framework-id :initarg :framework-id :initform
                         (common-lisp:error ":frameworkid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-delete-assessment-framework-request-framework-id
                         :shape "UUID" :location "uri" :location-name
                         "frameworkId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-assessment-framework-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-assessment-framework-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-framework-request
                    'make-delete-assessment-framework-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-assessment-framework-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-assessment-framework-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-assessment-framework-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-framework-response
                    'make-delete-assessment-framework-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-assessment-framework-share-request
                       common-lisp:nil
                       ((request-id :initarg :request-id :initform
                         (common-lisp:error ":requestid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-delete-assessment-framework-share-request-request-id
                         :shape "UUID" :location "uri" :location-name
                         "requestId")
                        (request-type :initarg :request-type :initform
                         (common-lisp:error ":requesttype is required") :type
                         (common-lisp:or share-request-type common-lisp:null)
                         :accessor
                         struct-shape-delete-assessment-framework-share-request-request-type
                         :shape "ShareRequestType" :location "querystring"
                         :location-name "requestType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-assessment-framework-share-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-assessment-framework-share-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-framework-share-request
                    'make-delete-assessment-framework-share-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-share-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-share-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-share-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-assessment-framework-share-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-assessment-framework-share-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-assessment-framework-share-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-framework-share-response
                    'make-delete-assessment-framework-share-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-share-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-share-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-framework-share-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-assessment-report-request common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-delete-assessment-report-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId")
                        (assessment-report-id :initarg :assessment-report-id
                         :initform
                         (common-lisp:error ":assessmentreportid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-delete-assessment-report-request-assessment-report-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentReportId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-assessment-report-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-assessment-report-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-report-request
                    'make-delete-assessment-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-assessment-report-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-assessment-report-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-assessment-report-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-report-response
                    'make-delete-assessment-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-assessment-request common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-delete-assessment-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-assessment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-assessment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-request
                    'make-delete-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-assessment-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-assessment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-assessment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-response
                    'make-delete-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-control-request common-lisp:nil
                       ((control-id :initarg :control-id :initform
                         (common-lisp:error ":controlid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-delete-control-request-control-id :shape
                         "UUID" :location "uri" :location-name "controlId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-control-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-control-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-control-request 'make-delete-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-control-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-control-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-control-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-control-response 'make-delete-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-control-response))
   common-lisp:nil))
(common-lisp:deftype delete-resources () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass deregister-account-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-account-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-account-request
                    'make-deregister-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-account-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or account-status common-lisp:null)
                         :accessor
                         struct-shape-deregister-account-response-status :shape
                         "AccountStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-account-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-account-response
                    'make-deregister-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-organization-admin-account-request
                       common-lisp:nil
                       ((admin-account-id :initarg :admin-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-deregister-organization-admin-account-request-admin-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-organization-admin-account-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-organization-admin-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-organization-admin-account-request
                    'make-deregister-organization-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "adminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-organization-admin-account-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-organization-admin-account-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-organization-admin-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-organization-admin-account-response
                    'make-deregister-organization-admin-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregistration-policy common-lisp:nil
                       ((delete-resources :initarg :delete-resources :initform
                         common-lisp:nil :type
                         (common-lisp:or delete-resources common-lisp:null)
                         :accessor
                         struct-shape-deregistration-policy-delete-resources
                         :shape "DeleteResources" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregistration-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deregistration-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregistration-policy 'make-deregistration-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregistration-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregistration-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-resources))
      (common-lisp:list
       (common-lisp:cons "deleteResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregistration-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-assessment-report-evidence-folder-request
                       common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-disassociate-assessment-report-evidence-folder-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId")
                        (evidence-folder-id :initarg :evidence-folder-id
                         :initform
                         (common-lisp:error ":evidencefolderid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-disassociate-assessment-report-evidence-folder-request-evidence-folder-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-assessment-report-evidence-folder-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-assessment-report-evidence-folder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-assessment-report-evidence-folder-request
                    'make-disassociate-assessment-report-evidence-folder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assessment-report-evidence-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assessment-report-evidence-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-folder-id))
      (common-lisp:list
       (common-lisp:cons "evidenceFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assessment-report-evidence-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-assessment-report-evidence-folder-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-assessment-report-evidence-folder-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-assessment-report-evidence-folder-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-assessment-report-evidence-folder-response
                    'make-disassociate-assessment-report-evidence-folder-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assessment-report-evidence-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assessment-report-evidence-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assessment-report-evidence-folder-response))
   common-lisp:nil))
(common-lisp:deftype email-address () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype event-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass evidence common-lisp:nil
                       ((data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-evidence-data-source :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (evidence-aws-account-id :initarg
                         :evidence-aws-account-id :initform common-lisp:nil
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-evidence-evidence-aws-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (time :initarg :time :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-evidence-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-source :initarg :event-source :initform
                         common-lisp:nil :type
                         (common-lisp:or awsservice-name common-lisp:null)
                         :accessor struct-shape-evidence-event-source :shape
                         "AWSServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-name :initarg :event-name :initform
                         common-lisp:nil :type
                         (common-lisp:or event-name common-lisp:null) :accessor
                         struct-shape-evidence-event-name :shape "EventName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (evidence-by-type :initarg :evidence-by-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-evidence-evidence-by-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resources-included :initarg :resources-included
                         :initform common-lisp:nil :type
                         (common-lisp:or resources common-lisp:null) :accessor
                         struct-shape-evidence-resources-included :shape
                         "Resources" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or evidence-attributes common-lisp:null)
                         :accessor struct-shape-evidence-attributes :shape
                         "EvidenceAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-id :initarg :iam-id :initform common-lisp:nil
                         :type (common-lisp:or iam-arn common-lisp:null)
                         :accessor struct-shape-evidence-iam-id :shape "IamArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (compliance-check :initarg :compliance-check :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-evidence-compliance-check :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-organization :initarg :aws-organization :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-evidence-aws-organization :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-evidence-aws-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (evidence-folder-id :initarg :evidence-folder-id
                         :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-evidence-evidence-folder-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-evidence-id :shape "UUID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (assessment-report-selection :initarg
                         :assessment-report-selection :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-evidence-assessment-report-selection
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evidence
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evidence
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'evidence 'make-evidence))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evidence))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evidence))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-aws-account-id))
      (common-lisp:list
       (common-lisp:cons "evidenceAwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source))
      (common-lisp:list
       (common-lisp:cons "eventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-name))
      (common-lisp:list
       (common-lisp:cons "eventName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-by-type))
      (common-lisp:list
       (common-lisp:cons "evidenceByType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources-included))
      (common-lisp:list
       (common-lisp:cons "resourcesIncluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-id))
      (common-lisp:list
       (common-lisp:cons "iamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-check))
      (common-lisp:list
       (common-lisp:cons "complianceCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-organization))
      (common-lisp:list
       (common-lisp:cons "awsOrganization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-folder-id))
      (common-lisp:list
       (common-lisp:cons "evidenceFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-report-selection))
      (common-lisp:list
       (common-lisp:cons "assessmentReportSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evidence))
   common-lisp:nil))
(common-lisp:deftype evidence-attribute-key () 'common-lisp:string)
(common-lisp:deftype evidence-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype evidence-attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-evidence-attributes
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype evidence-finder-backfill-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass evidence-finder-enablement common-lisp:nil
                       ((event-data-store-arn :initarg :event-data-store-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or cloud-trail-arn common-lisp:null)
                         :accessor
                         struct-shape-evidence-finder-enablement-event-data-store-arn
                         :shape "CloudTrailArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enablement-status :initarg :enablement-status
                         :initform common-lisp:nil :type
                         (common-lisp:or evidence-finder-enablement-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-evidence-finder-enablement-enablement-status
                         :shape "EvidenceFinderEnablementStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (backfill-status :initarg :backfill-status :initform
                         common-lisp:nil :type
                         (common-lisp:or evidence-finder-backfill-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-evidence-finder-enablement-backfill-status
                         :shape "EvidenceFinderBackfillStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-evidence-finder-enablement-error :shape
                         "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evidence-finder-enablement
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evidence-finder-enablement
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evidence-finder-enablement
                    'make-evidence-finder-enablement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evidence-finder-enablement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evidence-finder-enablement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-data-store-arn))
      (common-lisp:list
       (common-lisp:cons "eventDataStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enablement-status))
      (common-lisp:list
       (common-lisp:cons "enablementStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backfill-status))
      (common-lisp:list
       (common-lisp:cons "backfillStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evidence-finder-enablement))
   common-lisp:nil))
(common-lisp:deftype evidence-finder-enablement-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype evidence-ids () '(trivial-types:proper-list uuid))
 (common-lisp:defun make-evidence-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list uuid))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass evidence-insights common-lisp:nil
                       ((noncompliant-evidence-count :initarg
                         :noncompliant-evidence-count :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-evidence-insights-noncompliant-evidence-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliant-evidence-count :initarg
                         :compliant-evidence-count :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-evidence-insights-compliant-evidence-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inconclusive-evidence-count :initarg
                         :inconclusive-evidence-count :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-evidence-insights-inconclusive-evidence-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evidence-insights
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evidence-insights
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evidence-insights 'make-evidence-insights))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evidence-insights))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evidence-insights))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncompliant-evidence-count))
      (common-lisp:list
       (common-lisp:cons "noncompliantEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-evidence-count))
      (common-lisp:list
       (common-lisp:cons "compliantEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inconclusive-evidence-count))
      (common-lisp:list
       (common-lisp:cons "inconclusiveEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evidence-insights))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evidence-list () '(trivial-types:proper-list evidence))
 (common-lisp:defun make-evidence-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evidence))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype evidence-sources ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-evidence-sources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype export-destination-type () 'common-lisp:string)
(common-lisp:deftype filename () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass framework common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or audit-manager-arn common-lisp:null)
                         :accessor struct-shape-framework-arn :shape
                         "AuditManagerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-framework-id :shape "UUID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or framework-name common-lisp:null)
                         :accessor struct-shape-framework-name :shape
                         "FrameworkName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or framework-type common-lisp:null)
                         :accessor struct-shape-framework-type :shape
                         "FrameworkType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-type common-lisp:null)
                         :accessor struct-shape-framework-compliance-type
                         :shape "ComplianceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or framework-description
                                         common-lisp:null)
                         :accessor struct-shape-framework-description :shape
                         "FrameworkDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (logo :initarg :logo :initform common-lisp:nil :type
                         (common-lisp:or filename common-lisp:null) :accessor
                         struct-shape-framework-logo :shape "Filename"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (control-sources :initarg :control-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or control-sources common-lisp:null)
                         :accessor struct-shape-framework-control-sources
                         :shape "ControlSources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-sets :initarg :control-sets :initform
                         common-lisp:nil :type
                         (common-lisp:or control-sets common-lisp:null)
                         :accessor struct-shape-framework-control-sets :shape
                         "ControlSets" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-framework-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-framework-last-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-framework-created-by :shape "CreatedBy"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-by :initarg :last-updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or last-updated-by common-lisp:null)
                         :accessor struct-shape-framework-last-updated-by
                         :shape "LastUpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-framework-tags :shape "TagMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-framework
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'framework
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'framework 'make-framework))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input framework))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input framework))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "complianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo))
      (common-lisp:list
       (common-lisp:cons "logo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-sources))
      (common-lisp:list
       (common-lisp:cons "controlSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-sets))
      (common-lisp:list
       (common-lisp:cons "controlSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-by))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input framework))
   common-lisp:nil))
(common-lisp:deftype framework-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass framework-metadata common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or assessment-name common-lisp:null)
                         :accessor struct-shape-framework-metadata-name :shape
                         "AssessmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-framework-description
                                         common-lisp:null)
                         :accessor struct-shape-framework-metadata-description
                         :shape "AssessmentFrameworkDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (logo :initarg :logo :initform common-lisp:nil :type
                         (common-lisp:or filename common-lisp:null) :accessor
                         struct-shape-framework-metadata-logo :shape "Filename"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-type common-lisp:null)
                         :accessor
                         struct-shape-framework-metadata-compliance-type :shape
                         "ComplianceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-framework-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'framework-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'framework-metadata 'make-framework-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input framework-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input framework-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo))
      (common-lisp:list
       (common-lisp:cons "logo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "complianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input framework-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype framework-metadata-list ()
   '(trivial-types:proper-list assessment-framework-metadata))
 (common-lisp:defun make-framework-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assessment-framework-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype framework-name () 'common-lisp:string)
(common-lisp:deftype framework-type () 'common-lisp:string)
(common-lisp:deftype generic-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-account-status-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-account-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-account-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-account-status-request
                    'make-get-account-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-account-status-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or account-status common-lisp:null)
                         :accessor
                         struct-shape-get-account-status-response-status :shape
                         "AccountStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-account-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-account-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-account-status-response
                    'make-get-account-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-assessment-framework-request common-lisp:nil
                       ((framework-id :initarg :framework-id :initform
                         (common-lisp:error ":frameworkid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-assessment-framework-request-framework-id
                         :shape "UUID" :location "uri" :location-name
                         "frameworkId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-assessment-framework-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-assessment-framework-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-assessment-framework-request
                    'make-get-assessment-framework-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-framework-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-framework-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-framework-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-assessment-framework-response common-lisp:nil
                       ((framework :initarg :framework :initform
                         common-lisp:nil :type
                         (common-lisp:or framework common-lisp:null) :accessor
                         struct-shape-get-assessment-framework-response-framework
                         :shape "Framework" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-assessment-framework-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-assessment-framework-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-assessment-framework-response
                    'make-get-assessment-framework-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-framework-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-framework-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-framework-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-assessment-report-url-request common-lisp:nil
                       ((assessment-report-id :initarg :assessment-report-id
                         :initform
                         (common-lisp:error ":assessmentreportid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-assessment-report-url-request-assessment-report-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentReportId")
                        (assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-assessment-report-url-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-assessment-report-url-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-assessment-report-url-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-assessment-report-url-request
                    'make-get-assessment-report-url-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-assessment-report-url-response common-lisp:nil
                       ((pre-signed-url :initarg :pre-signed-url :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-get-assessment-report-url-response-pre-signed-url
                         :shape "URL" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-assessment-report-url-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-assessment-report-url-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-assessment-report-url-response
                    'make-get-assessment-report-url-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-url-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-url-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "preSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-url-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-assessment-request common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-assessment-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-assessment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-assessment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-assessment-request 'make-get-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-assessment-response common-lisp:nil
                       ((assessment :initarg :assessment :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment common-lisp:null) :accessor
                         struct-shape-get-assessment-response-assessment :shape
                         "Assessment" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-role :initarg :user-role :initform
                         common-lisp:nil :type
                         (common-lisp:or role common-lisp:null) :accessor
                         struct-shape-get-assessment-response-user-role :shape
                         "Role" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-assessment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-assessment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-assessment-response 'make-get-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment))
      (common-lisp:list
       (common-lisp:cons "assessment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role))
      (common-lisp:list
       (common-lisp:cons "userRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-change-logs-request common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-change-logs-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId")
                        (control-set-id :initarg :control-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or control-set-id common-lisp:null)
                         :accessor
                         struct-shape-get-change-logs-request-control-set-id
                         :shape "ControlSetId" :location "querystring"
                         :location-name "controlSetId")
                        (control-id :initarg :control-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-change-logs-request-control-id :shape
                         "UUID" :location "querystring" :location-name
                         "controlId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-change-logs-request-next-token :shape
                         "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-change-logs-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-change-logs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-change-logs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-change-logs-request 'make-get-change-logs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-change-logs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-change-logs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-change-logs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-change-logs-response common-lisp:nil
                       ((change-logs :initarg :change-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or change-logs common-lisp:null)
                         :accessor
                         struct-shape-get-change-logs-response-change-logs
                         :shape "ChangeLogs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-change-logs-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-change-logs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-change-logs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-change-logs-response 'make-get-change-logs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-change-logs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-change-logs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-logs))
      (common-lisp:list
       (common-lisp:cons "changeLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-change-logs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-control-request common-lisp:nil
                       ((control-id :initarg :control-id :initform
                         (common-lisp:error ":controlid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-control-request-control-id :shape
                         "UUID" :location "uri" :location-name "controlId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-control-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-control-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-control-request 'make-get-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-control-response common-lisp:nil
                       ((control :initarg :control :initform common-lisp:nil
                         :type (common-lisp:or control common-lisp:null)
                         :accessor struct-shape-get-control-response-control
                         :shape "Control" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-control-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-control-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-control-response 'make-get-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-control-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-control-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-delegations-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-delegations-request-next-token :shape
                         "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-delegations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-delegations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-delegations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-delegations-request 'make-get-delegations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delegations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delegations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delegations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-delegations-response common-lisp:nil
                       ((delegations :initarg :delegations :initform
                         common-lisp:nil :type
                         (common-lisp:or delegation-metadata-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-delegations-response-delegations
                         :shape "DelegationMetadataList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-delegations-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-delegations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-delegations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-delegations-response 'make-get-delegations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-delegations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-delegations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegations))
      (common-lisp:list
       (common-lisp:cons "delegations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-delegations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-evidence-by-evidence-folder-request common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-evidence-by-evidence-folder-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId")
                        (control-set-id :initarg :control-set-id :initform
                         (common-lisp:error ":controlsetid is required") :type
                         (common-lisp:or control-set-id common-lisp:null)
                         :accessor
                         struct-shape-get-evidence-by-evidence-folder-request-control-set-id
                         :shape "ControlSetId" :location "uri" :location-name
                         "controlSetId")
                        (evidence-folder-id :initarg :evidence-folder-id
                         :initform
                         (common-lisp:error ":evidencefolderid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-evidence-by-evidence-folder-request-evidence-folder-id
                         :shape "UUID" :location "uri" :location-name
                         "evidenceFolderId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-evidence-by-evidence-folder-request-next-token
                         :shape "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-evidence-by-evidence-folder-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-evidence-by-evidence-folder-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-evidence-by-evidence-folder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-evidence-by-evidence-folder-request
                    'make-get-evidence-by-evidence-folder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-by-evidence-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-by-evidence-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-by-evidence-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-evidence-by-evidence-folder-response common-lisp:nil
                       ((evidence :initarg :evidence :initform common-lisp:nil
                         :type (common-lisp:or evidence-list common-lisp:null)
                         :accessor
                         struct-shape-get-evidence-by-evidence-folder-response-evidence
                         :shape "EvidenceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-evidence-by-evidence-folder-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-evidence-by-evidence-folder-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-evidence-by-evidence-folder-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-evidence-by-evidence-folder-response
                    'make-get-evidence-by-evidence-folder-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-by-evidence-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-by-evidence-folder-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence))
      (common-lisp:list
       (common-lisp:cons "evidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-by-evidence-folder-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-evidence-file-upload-url-request common-lisp:nil
                       ((file-name :initarg :file-name :initform
                         (common-lisp:error ":filename is required") :type
                         (common-lisp:or manual-evidence-local-file-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-evidence-file-upload-url-request-file-name
                         :shape "ManualEvidenceLocalFileName" :location
                         "querystring" :location-name "fileName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-evidence-file-upload-url-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-evidence-file-upload-url-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-evidence-file-upload-url-request
                    'make-get-evidence-file-upload-url-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-file-upload-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-file-upload-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-file-upload-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-evidence-file-upload-url-response common-lisp:nil
                       ((evidence-file-name :initarg :evidence-file-name
                         :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-get-evidence-file-upload-url-response-evidence-file-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-url :initarg :upload-url :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-get-evidence-file-upload-url-response-upload-url
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-evidence-file-upload-url-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-evidence-file-upload-url-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-evidence-file-upload-url-response
                    'make-get-evidence-file-upload-url-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-file-upload-url-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-file-upload-url-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-file-name))
      (common-lisp:list
       (common-lisp:cons "evidenceFileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-url))
      (common-lisp:list
       (common-lisp:cons "uploadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-file-upload-url-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-evidence-folder-request common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-evidence-folder-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId")
                        (control-set-id :initarg :control-set-id :initform
                         (common-lisp:error ":controlsetid is required") :type
                         (common-lisp:or control-set-id common-lisp:null)
                         :accessor
                         struct-shape-get-evidence-folder-request-control-set-id
                         :shape "ControlSetId" :location "uri" :location-name
                         "controlSetId")
                        (evidence-folder-id :initarg :evidence-folder-id
                         :initform
                         (common-lisp:error ":evidencefolderid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-evidence-folder-request-evidence-folder-id
                         :shape "UUID" :location "uri" :location-name
                         "evidenceFolderId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-evidence-folder-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-evidence-folder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-evidence-folder-request
                    'make-get-evidence-folder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-evidence-folder-response common-lisp:nil
                       ((evidence-folder :initarg :evidence-folder :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-evidence-folder
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-evidence-folder-response-evidence-folder
                         :shape "AssessmentEvidenceFolder" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-evidence-folder-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-evidence-folder-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-evidence-folder-response
                    'make-get-evidence-folder-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folder-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-folder))
      (common-lisp:list
       (common-lisp:cons "evidenceFolder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folder-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-evidence-folders-by-assessment-control-request
                       common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-evidence-folders-by-assessment-control-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId")
                        (control-set-id :initarg :control-set-id :initform
                         (common-lisp:error ":controlsetid is required") :type
                         (common-lisp:or control-set-id common-lisp:null)
                         :accessor
                         struct-shape-get-evidence-folders-by-assessment-control-request-control-set-id
                         :shape "ControlSetId" :location "uri" :location-name
                         "controlSetId")
                        (control-id :initarg :control-id :initform
                         (common-lisp:error ":controlid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-evidence-folders-by-assessment-control-request-control-id
                         :shape "UUID" :location "uri" :location-name
                         "controlId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-evidence-folders-by-assessment-control-request-next-token
                         :shape "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-evidence-folders-by-assessment-control-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-evidence-folders-by-assessment-control-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-evidence-folders-by-assessment-control-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-evidence-folders-by-assessment-control-request
                    'make-get-evidence-folders-by-assessment-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-evidence-folders-by-assessment-control-response
                       common-lisp:nil
                       ((evidence-folders :initarg :evidence-folders :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-evidence-folders
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-evidence-folders-by-assessment-control-response-evidence-folders
                         :shape "AssessmentEvidenceFolders" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-evidence-folders-by-assessment-control-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-evidence-folders-by-assessment-control-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-evidence-folders-by-assessment-control-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-evidence-folders-by-assessment-control-response
                    'make-get-evidence-folders-by-assessment-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-control-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-folders))
      (common-lisp:list
       (common-lisp:cons "evidenceFolders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-control-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-evidence-folders-by-assessment-request
                       common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-evidence-folders-by-assessment-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-evidence-folders-by-assessment-request-next-token
                         :shape "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-evidence-folders-by-assessment-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-evidence-folders-by-assessment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-evidence-folders-by-assessment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-evidence-folders-by-assessment-request
                    'make-get-evidence-folders-by-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-evidence-folders-by-assessment-response
                       common-lisp:nil
                       ((evidence-folders :initarg :evidence-folders :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-evidence-folders
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-evidence-folders-by-assessment-response-evidence-folders
                         :shape "AssessmentEvidenceFolders" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-evidence-folders-by-assessment-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-evidence-folders-by-assessment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-evidence-folders-by-assessment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-evidence-folders-by-assessment-response
                    'make-get-evidence-folders-by-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-folders))
      (common-lisp:list
       (common-lisp:cons "evidenceFolders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-folders-by-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-evidence-request common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-evidence-request-assessment-id :shape
                         "UUID" :location "uri" :location-name "assessmentId")
                        (control-set-id :initarg :control-set-id :initform
                         (common-lisp:error ":controlsetid is required") :type
                         (common-lisp:or control-set-id common-lisp:null)
                         :accessor
                         struct-shape-get-evidence-request-control-set-id
                         :shape "ControlSetId" :location "uri" :location-name
                         "controlSetId")
                        (evidence-folder-id :initarg :evidence-folder-id
                         :initform
                         (common-lisp:error ":evidencefolderid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-evidence-request-evidence-folder-id
                         :shape "UUID" :location "uri" :location-name
                         "evidenceFolderId")
                        (evidence-id :initarg :evidence-id :initform
                         (common-lisp:error ":evidenceid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-evidence-request-evidence-id :shape
                         "UUID" :location "uri" :location-name "evidenceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-evidence-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-evidence-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-evidence-request 'make-get-evidence-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-evidence-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-evidence-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-evidence-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-evidence-response common-lisp:nil
                       ((evidence :initarg :evidence :initform common-lisp:nil
                         :type (common-lisp:or evidence common-lisp:null)
                         :accessor struct-shape-get-evidence-response-evidence
                         :shape "Evidence" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-evidence-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-evidence-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-evidence-response 'make-get-evidence-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence))
      (common-lisp:list
       (common-lisp:cons "evidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-evidence-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-insights-by-assessment-request common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-insights-by-assessment-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-insights-by-assessment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-insights-by-assessment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-insights-by-assessment-request
                    'make-get-insights-by-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-by-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-by-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-by-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-insights-by-assessment-response common-lisp:nil
                       ((insights :initarg :insights :initform common-lisp:nil
                         :type
                         (common-lisp:or insights-by-assessment
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-insights-by-assessment-response-insights
                         :shape "InsightsByAssessment" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-insights-by-assessment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-insights-by-assessment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-insights-by-assessment-response
                    'make-get-insights-by-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-by-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-by-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insights))
      (common-lisp:list
       (common-lisp:cons "insights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-by-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-insights-request common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-insights-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-insights-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-insights-request 'make-get-insights-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-insights-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-insights-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-insights-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-insights-response common-lisp:nil
                       ((insights :initarg :insights :initform common-lisp:nil
                         :type (common-lisp:or insights common-lisp:null)
                         :accessor struct-shape-get-insights-response-insights
                         :shape "Insights" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-insights-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-insights-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-insights-response 'make-get-insights-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insights))
      (common-lisp:list
       (common-lisp:cons "insights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-organization-admin-account-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-organization-admin-account-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-organization-admin-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-organization-admin-account-request
                    'make-get-organization-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-organization-admin-account-response common-lisp:nil
                       ((admin-account-id :initarg :admin-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-organization-admin-account-response-admin-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (organization-id :initarg :organization-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |organizationId| common-lisp:null)
                         :accessor
                         struct-shape-get-organization-admin-account-response-organization-id
                         :shape "organizationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-organization-admin-account-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-organization-admin-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-organization-admin-account-response
                    'make-get-organization-admin-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-admin-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "adminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "organizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-services-in-scope-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-services-in-scope-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-services-in-scope-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-services-in-scope-request
                    'make-get-services-in-scope-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-services-in-scope-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-services-in-scope-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-services-in-scope-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-services-in-scope-response common-lisp:nil
                       ((service-metadata :initarg :service-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or service-metadata-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-services-in-scope-response-service-metadata
                         :shape "ServiceMetadataList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-services-in-scope-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-services-in-scope-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-services-in-scope-response
                    'make-get-services-in-scope-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-services-in-scope-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-services-in-scope-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-metadata))
      (common-lisp:list
       (common-lisp:cons "serviceMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-services-in-scope-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-settings-request common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or setting-attribute common-lisp:null)
                         :accessor struct-shape-get-settings-request-attribute
                         :shape "SettingAttribute" :location "uri"
                         :location-name "attribute"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-settings-request 'make-get-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-settings-response common-lisp:nil
                       ((settings :initarg :settings :initform common-lisp:nil
                         :type (common-lisp:or settings common-lisp:null)
                         :accessor struct-shape-get-settings-response-settings
                         :shape "Settings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-settings-response 'make-get-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-settings-response))
   common-lisp:nil))
(common-lisp:deftype hyperlink-name () 'common-lisp:string)
(common-lisp:deftype iam-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass insights common-lisp:nil
                       ((active-assessments-count :initarg
                         :active-assessments-count :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-insights-active-assessments-count :shape
                         "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (noncompliant-evidence-count :initarg
                         :noncompliant-evidence-count :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-insights-noncompliant-evidence-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliant-evidence-count :initarg
                         :compliant-evidence-count :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-insights-compliant-evidence-count :shape
                         "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inconclusive-evidence-count :initarg
                         :inconclusive-evidence-count :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-insights-inconclusive-evidence-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assessment-controls-count-by-noncompliant-evidence
                         :initarg
                         :assessment-controls-count-by-noncompliant-evidence
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-insights-assessment-controls-count-by-noncompliant-evidence
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-assessment-controls-count :initarg
                         :total-assessment-controls-count :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-insights-total-assessment-controls-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-insights-last-updated :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-insights
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'insights
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'insights 'make-insights))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insights))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insights))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-assessments-count))
      (common-lisp:list
       (common-lisp:cons "activeAssessmentsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncompliant-evidence-count))
      (common-lisp:list
       (common-lisp:cons "noncompliantEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-evidence-count))
      (common-lisp:list
       (common-lisp:cons "compliantEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inconclusive-evidence-count))
      (common-lisp:list
       (common-lisp:cons "inconclusiveEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-controls-count-by-noncompliant-evidence))
      (common-lisp:list
       (common-lisp:cons "assessmentControlsCountByNoncompliantEvidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-assessment-controls-count))
      (common-lisp:list
       (common-lisp:cons "totalAssessmentControlsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insights))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass insights-by-assessment common-lisp:nil
                       ((noncompliant-evidence-count :initarg
                         :noncompliant-evidence-count :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-insights-by-assessment-noncompliant-evidence-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliant-evidence-count :initarg
                         :compliant-evidence-count :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-insights-by-assessment-compliant-evidence-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inconclusive-evidence-count :initarg
                         :inconclusive-evidence-count :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-insights-by-assessment-inconclusive-evidence-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assessment-controls-count-by-noncompliant-evidence
                         :initarg
                         :assessment-controls-count-by-noncompliant-evidence
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-insights-by-assessment-assessment-controls-count-by-noncompliant-evidence
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-assessment-controls-count :initarg
                         :total-assessment-controls-count :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-insights-by-assessment-total-assessment-controls-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-insights-by-assessment-last-updated
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-insights-by-assessment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'insights-by-assessment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'insights-by-assessment 'make-insights-by-assessment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          insights-by-assessment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          insights-by-assessment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncompliant-evidence-count))
      (common-lisp:list
       (common-lisp:cons "noncompliantEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-evidence-count))
      (common-lisp:list
       (common-lisp:cons "compliantEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inconclusive-evidence-count))
      (common-lisp:list
       (common-lisp:cons "inconclusiveEvidenceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-controls-count-by-noncompliant-evidence))
      (common-lisp:list
       (common-lisp:cons "assessmentControlsCountByNoncompliantEvidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-assessment-controls-count))
      (common-lisp:list
       (common-lisp:cons "totalAssessmentControlsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          insights-by-assessment))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (auditmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype keyword-input-type () 'common-lisp:string)
(common-lisp:deftype keyword-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype keywords () '(trivial-types:proper-list keyword-value))
 (common-lisp:defun make-keywords
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list keyword-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kms-key () 'common-lisp:string)
(common-lisp:deftype last-updated-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass
  list-assessment-control-insights-by-control-domain-request common-lisp:nil
  ((control-domain-id :initarg :control-domain-id :initform
    (common-lisp:error ":controldomainid is required") :type
    (common-lisp:or uuid common-lisp:null) :accessor
    struct-shape-list-assessment-control-insights-by-control-domain-request-control-domain-id
    :shape "UUID" :location "querystring" :location-name "controlDomainId")
   (assessment-id :initarg :assessment-id :initform
    (common-lisp:error ":assessmentid is required") :type
    (common-lisp:or uuid common-lisp:null) :accessor
    struct-shape-list-assessment-control-insights-by-control-domain-request-assessment-id
    :shape "UUID" :location "querystring" :location-name "assessmentId")
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or token common-lisp:null) :accessor
    struct-shape-list-assessment-control-insights-by-control-domain-request-next-token
    :shape "Token" :location "querystring" :location-name "nextToken")
   (max-results :initarg :max-results :initform common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null) :accessor
    struct-shape-list-assessment-control-insights-by-control-domain-request-max-results
    :shape "MaxResults" :location "querystring" :location-name "maxResults"))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assessment-control-insights-by-control-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assessment-control-insights-by-control-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assessment-control-insights-by-control-domain-request
                    'make-list-assessment-control-insights-by-control-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-control-insights-by-control-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-control-insights-by-control-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-control-insights-by-control-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  list-assessment-control-insights-by-control-domain-response common-lisp:nil
  ((control-insights-by-assessment :initarg :control-insights-by-assessment
    :initform common-lisp:nil :type
    (common-lisp:or control-insights-metadata-by-assessment common-lisp:null)
    :accessor
    struct-shape-list-assessment-control-insights-by-control-domain-response-control-insights-by-assessment
    :shape "ControlInsightsMetadataByAssessment" :location common-lisp:nil
    :location-name common-lisp:nil)
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or token common-lisp:null) :accessor
    struct-shape-list-assessment-control-insights-by-control-domain-response-next-token
    :shape "Token" :location common-lisp:nil :location-name common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assessment-control-insights-by-control-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assessment-control-insights-by-control-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'list-assessment-control-insights-by-control-domain-response
   'make-list-assessment-control-insights-by-control-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-control-insights-by-control-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-control-insights-by-control-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-insights-by-assessment))
      (common-lisp:list
       (common-lisp:cons "controlInsightsByAssessment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-control-insights-by-control-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assessment-framework-share-requests-request
                       common-lisp:nil
                       ((request-type :initarg :request-type :initform
                         (common-lisp:error ":requesttype is required") :type
                         (common-lisp:or share-request-type common-lisp:null)
                         :accessor
                         struct-shape-list-assessment-framework-share-requests-request-request-type
                         :shape "ShareRequestType" :location "querystring"
                         :location-name "requestType")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-assessment-framework-share-requests-request-next-token
                         :shape "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-assessment-framework-share-requests-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assessment-framework-share-requests-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assessment-framework-share-requests-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assessment-framework-share-requests-request
                    'make-list-assessment-framework-share-requests-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-framework-share-requests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-framework-share-requests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-framework-share-requests-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assessment-framework-share-requests-response
                       common-lisp:nil
                       ((assessment-framework-share-requests :initarg
                         :assessment-framework-share-requests :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          assessment-framework-share-request-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-assessment-framework-share-requests-response-assessment-framework-share-requests
                         :shape "AssessmentFrameworkShareRequestList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-assessment-framework-share-requests-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assessment-framework-share-requests-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assessment-framework-share-requests-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assessment-framework-share-requests-response
                    'make-list-assessment-framework-share-requests-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-framework-share-requests-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-framework-share-requests-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-framework-share-requests))
      (common-lisp:list
       (common-lisp:cons "assessmentFrameworkShareRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-framework-share-requests-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assessment-frameworks-request common-lisp:nil
                       ((framework-type :initarg :framework-type :initform
                         (common-lisp:error ":frameworktype is required") :type
                         (common-lisp:or framework-type common-lisp:null)
                         :accessor
                         struct-shape-list-assessment-frameworks-request-framework-type
                         :shape "FrameworkType" :location "querystring"
                         :location-name "frameworkType")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-assessment-frameworks-request-next-token
                         :shape "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-assessment-frameworks-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assessment-frameworks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assessment-frameworks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assessment-frameworks-request
                    'make-list-assessment-frameworks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-frameworks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-frameworks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-frameworks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assessment-frameworks-response common-lisp:nil
                       ((framework-metadata-list :initarg
                         :framework-metadata-list :initform common-lisp:nil
                         :type
                         (common-lisp:or framework-metadata-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-assessment-frameworks-response-framework-metadata-list
                         :shape "FrameworkMetadataList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-assessment-frameworks-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assessment-frameworks-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assessment-frameworks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assessment-frameworks-response
                    'make-list-assessment-frameworks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-frameworks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-frameworks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-metadata-list))
      (common-lisp:list
       (common-lisp:cons "frameworkMetadataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-frameworks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-assessment-metadata ()
   '(trivial-types:proper-list assessment-metadata-item))
 (common-lisp:defun make-list-assessment-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assessment-metadata-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-assessment-reports-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-assessment-reports-request-next-token
                         :shape "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-assessment-reports-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assessment-reports-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assessment-reports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assessment-reports-request
                    'make-list-assessment-reports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-reports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-reports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-reports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assessment-reports-response common-lisp:nil
                       ((assessment-reports :initarg :assessment-reports
                         :initform common-lisp:nil :type
                         (common-lisp:or assessment-reports-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-assessment-reports-response-assessment-reports
                         :shape "AssessmentReportsMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-assessment-reports-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assessment-reports-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assessment-reports-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assessment-reports-response
                    'make-list-assessment-reports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-reports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-reports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-reports))
      (common-lisp:list
       (common-lisp:cons "assessmentReports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-reports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assessments-request common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or assessment-status common-lisp:null)
                         :accessor struct-shape-list-assessments-request-status
                         :shape "AssessmentStatus" :location "querystring"
                         :location-name "status")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-assessments-request-next-token
                         :shape "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-assessments-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assessments-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-assessments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assessments-request 'make-list-assessments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assessments-response common-lisp:nil
                       ((assessment-metadata :initarg :assessment-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or list-assessment-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-assessments-response-assessment-metadata
                         :shape "ListAssessmentMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-assessments-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assessments-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-assessments-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assessments-response
                    'make-list-assessments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-metadata))
      (common-lisp:list
       (common-lisp:cons "assessmentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-control-domain-insights-by-assessment-request
                       common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-list-control-domain-insights-by-assessment-request-assessment-id
                         :shape "UUID" :location "querystring" :location-name
                         "assessmentId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-control-domain-insights-by-assessment-request-next-token
                         :shape "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-control-domain-insights-by-assessment-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-control-domain-insights-by-assessment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-control-domain-insights-by-assessment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-control-domain-insights-by-assessment-request
                    'make-list-control-domain-insights-by-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-by-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-by-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-by-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-control-domain-insights-by-assessment-response
                       common-lisp:nil
                       ((control-domain-insights :initarg
                         :control-domain-insights :initform common-lisp:nil
                         :type
                         (common-lisp:or control-domain-insights-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-control-domain-insights-by-assessment-response-control-domain-insights
                         :shape "ControlDomainInsightsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-control-domain-insights-by-assessment-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-control-domain-insights-by-assessment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-control-domain-insights-by-assessment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-control-domain-insights-by-assessment-response
                    'make-list-control-domain-insights-by-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-by-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-by-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-domain-insights))
      (common-lisp:list
       (common-lisp:cons "controlDomainInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-by-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-control-domain-insights-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-control-domain-insights-request-next-token
                         :shape "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-control-domain-insights-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-control-domain-insights-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-control-domain-insights-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-control-domain-insights-request
                    'make-list-control-domain-insights-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-control-domain-insights-response common-lisp:nil
                       ((control-domain-insights :initarg
                         :control-domain-insights :initform common-lisp:nil
                         :type
                         (common-lisp:or control-domain-insights-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-control-domain-insights-response-control-domain-insights
                         :shape "ControlDomainInsightsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-control-domain-insights-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-control-domain-insights-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-control-domain-insights-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-control-domain-insights-response
                    'make-list-control-domain-insights-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-domain-insights))
      (common-lisp:list
       (common-lisp:cons "controlDomainInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-domain-insights-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-control-insights-by-control-domain-request
                       common-lisp:nil
                       ((control-domain-id :initarg :control-domain-id
                         :initform
                         (common-lisp:error ":controldomainid is required")
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-list-control-insights-by-control-domain-request-control-domain-id
                         :shape "UUID" :location "querystring" :location-name
                         "controlDomainId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-control-insights-by-control-domain-request-next-token
                         :shape "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-control-insights-by-control-domain-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-control-insights-by-control-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-control-insights-by-control-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-control-insights-by-control-domain-request
                    'make-list-control-insights-by-control-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-insights-by-control-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-insights-by-control-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-insights-by-control-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-control-insights-by-control-domain-response
                       common-lisp:nil
                       ((control-insights-metadata :initarg
                         :control-insights-metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or control-insights-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-control-insights-by-control-domain-response-control-insights-metadata
                         :shape "ControlInsightsMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-control-insights-by-control-domain-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-control-insights-by-control-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-control-insights-by-control-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-control-insights-by-control-domain-response
                    'make-list-control-insights-by-control-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-control-insights-by-control-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-control-insights-by-control-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-insights-metadata))
      (common-lisp:list
       (common-lisp:cons "controlInsightsMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-control-insights-by-control-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-controls-request common-lisp:nil
                       ((control-type :initarg :control-type :initform
                         (common-lisp:error ":controltype is required") :type
                         (common-lisp:or control-type common-lisp:null)
                         :accessor
                         struct-shape-list-controls-request-control-type :shape
                         "ControlType" :location "querystring" :location-name
                         "controlType")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-controls-request-next-token :shape
                         "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-controls-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-controls-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-controls-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-controls-request 'make-list-controls-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-controls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-controls-response common-lisp:nil
                       ((control-metadata-list :initarg :control-metadata-list
                         :initform common-lisp:nil :type
                         (common-lisp:or control-metadata-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-controls-response-control-metadata-list
                         :shape "ControlMetadataList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-controls-response-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-controls-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-controls-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-controls-response 'make-list-controls-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-controls-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-controls-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-metadata-list))
      (common-lisp:list
       (common-lisp:cons "controlMetadataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-controls-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-keywords-for-data-source-request common-lisp:nil
                       ((source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor
                         struct-shape-list-keywords-for-data-source-request-source
                         :shape "SourceType" :location "querystring"
                         :location-name "source")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-keywords-for-data-source-request-next-token
                         :shape "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-keywords-for-data-source-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-keywords-for-data-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-keywords-for-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-keywords-for-data-source-request
                    'make-list-keywords-for-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-keywords-for-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-keywords-for-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-keywords-for-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-keywords-for-data-source-response common-lisp:nil
                       ((keywords :initarg :keywords :initform common-lisp:nil
                         :type (common-lisp:or keywords common-lisp:null)
                         :accessor
                         struct-shape-list-keywords-for-data-source-response-keywords
                         :shape "Keywords" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-keywords-for-data-source-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-keywords-for-data-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-keywords-for-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-keywords-for-data-source-response
                    'make-list-keywords-for-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-keywords-for-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-keywords-for-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-keywords-for-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notifications-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-notifications-request-next-token
                         :shape "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-notifications-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-notifications-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-notifications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-notifications-request
                    'make-list-notifications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notifications-response common-lisp:nil
                       ((notifications :initarg :notifications :initform
                         common-lisp:nil :type
                         (common-lisp:or notifications common-lisp:null)
                         :accessor
                         struct-shape-list-notifications-response-notifications
                         :shape "Notifications" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-notifications-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-notifications-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-notifications-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-notifications-response
                    'make-list-notifications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notifications))
      (common-lisp:list
       (common-lisp:cons "notifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or audit-manager-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "AuditManagerArn" :location "uri"
                         :location-name "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass manual-evidence common-lisp:nil
                       ((s3resource-path :initarg :s3resource-path :initform
                         common-lisp:nil :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         struct-shape-manual-evidence-s3resource-path :shape
                         "S3Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (text-response :initarg :text-response :initform
                         common-lisp:nil :type
                         (common-lisp:or manual-evidence-text-response
                                         common-lisp:null)
                         :accessor struct-shape-manual-evidence-text-response
                         :shape "ManualEvidenceTextResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (evidence-file-name :initarg :evidence-file-name
                         :initform common-lisp:nil :type
                         (common-lisp:or manual-evidence-local-file-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-manual-evidence-evidence-file-name :shape
                         "ManualEvidenceLocalFileName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-manual-evidence
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'manual-evidence
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'manual-evidence 'make-manual-evidence))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input manual-evidence))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input manual-evidence))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3resource-path))
      (common-lisp:list
       (common-lisp:cons "s3ResourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-response))
      (common-lisp:list
       (common-lisp:cons "textResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence-file-name))
      (common-lisp:list
       (common-lisp:cons "evidenceFileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input manual-evidence))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype manual-evidence-list ()
   '(trivial-types:proper-list manual-evidence))
 (common-lisp:defun make-manual-evidence-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list manual-evidence))
   aws-sdk/generator/shape::members))
(common-lisp:deftype manual-evidence-local-file-name () 'common-lisp:string)
(common-lisp:deftype manual-evidence-text-response () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notification common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or timestamp-uuid common-lisp:null)
                         :accessor struct-shape-notification-id :shape
                         "TimestampUUID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assessment-id :initarg :assessment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-notification-assessment-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assessment-name :initarg :assessment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-name common-lisp:null)
                         :accessor struct-shape-notification-assessment-name
                         :shape "AssessmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-set-id :initarg :control-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or control-set-id common-lisp:null)
                         :accessor struct-shape-notification-control-set-id
                         :shape "ControlSetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-set-name :initarg :control-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-notification-control-set-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-notification-description :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-time :initarg :event-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-notification-event-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-notification-source :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notification
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'notification 'make-notification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-id))
      (common-lisp:list
       (common-lisp:cons "assessmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-name))
      (common-lisp:list
       (common-lisp:cons "assessmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-set-id))
      (common-lisp:list
       (common-lisp:cons "controlSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-set-name))
      (common-lisp:list
       (common-lisp:cons "controlSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-time))
      (common-lisp:list
       (common-lisp:cons "eventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notifications ()
   '(trivial-types:proper-list notification))
 (common-lisp:defun make-notifications
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list notification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype nullable-integer () 'common-lisp:integer)
(common-lisp:deftype object-type-enum () 'common-lisp:string)
(common-lisp:deftype query-statement () 'common-lisp:string)
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-account-request common-lisp:nil
                       ((kms-key :initarg :kms-key :initform common-lisp:nil
                         :type (common-lisp:or kms-key common-lisp:null)
                         :accessor
                         struct-shape-register-account-request-kms-key :shape
                         "KmsKey" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (delegated-admin-account :initarg
                         :delegated-admin-account :initform common-lisp:nil
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-register-account-request-delegated-admin-account
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-account-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-account-request 'make-register-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "kmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delegated-admin-account))
      (common-lisp:list
       (common-lisp:cons "delegatedAdminAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-account-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or account-status common-lisp:null)
                         :accessor
                         struct-shape-register-account-response-status :shape
                         "AccountStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-account-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-account-response
                    'make-register-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-organization-admin-account-request
                       common-lisp:nil
                       ((admin-account-id :initarg :admin-account-id :initform
                         (common-lisp:error ":adminaccountid is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-register-organization-admin-account-request-admin-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-organization-admin-account-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-organization-admin-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-organization-admin-account-request
                    'make-register-organization-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "adminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-organization-admin-account-response
                       common-lisp:nil
                       ((admin-account-id :initarg :admin-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-register-organization-admin-account-response-admin-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (organization-id :initarg :organization-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |organizationId| common-lisp:null)
                         :accessor
                         struct-shape-register-organization-admin-account-response-organization-id
                         :shape "organizationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-organization-admin-account-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-organization-admin-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-organization-admin-account-response
                    'make-register-organization-admin-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-admin-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "adminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "organizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or generic-arn common-lisp:null)
                         :accessor struct-shape-resource-arn :shape
                         "GenericArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-value :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliance-check :initarg :compliance-check :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-compliance-check :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-check))
      (common-lisp:list
       (common-lisp:cons "complianceCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (auditmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:deftype resources () '(trivial-types:proper-list resource))
 (common-lisp:defun make-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass role common-lisp:nil
                       ((role-type :initarg :role-type :initform
                         (common-lisp:error ":roletype is required") :type
                         (common-lisp:or role-type common-lisp:null) :accessor
                         struct-shape-role-role-type :shape "RoleType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or iam-arn common-lisp:null) :accessor
                         struct-shape-role-role-arn :shape "IamArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-role (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'role
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'role 'make-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-type))
      (common-lisp:list
       (common-lisp:cons "roleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input role))
   common-lisp:nil))
(common-lisp:deftype role-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype roles () '(trivial-types:proper-list role))
 (common-lisp:defun make-roles
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list role))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3url () 'common-lisp:string)
(common-lisp:deftype snstopic () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scope common-lisp:nil
                       ((aws-accounts :initarg :aws-accounts :initform
                         common-lisp:nil :type
                         (common-lisp:or awsaccounts common-lisp:null)
                         :accessor struct-shape-scope-aws-accounts :shape
                         "AWSAccounts" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-services :initarg :aws-services :initform
                         common-lisp:nil :type
                         (common-lisp:or awsservices common-lisp:null)
                         :accessor struct-shape-scope-aws-services :shape
                         "AWSServices" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scope
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scope
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scope 'make-scope))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-accounts))
      (common-lisp:list
       (common-lisp:cons "awsAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-services))
      (common-lisp:list
       (common-lisp:cons "awsServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scope))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-metadata common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or awsservice-name common-lisp:null)
                         :accessor struct-shape-service-metadata-name :shape
                         "AWSServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-service-metadata-display-name
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-service-metadata-description
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-service-metadata-category
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-metadata 'make-service-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-metadata-list ()
   '(trivial-types:proper-list service-metadata))
 (common-lisp:defun make-service-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (auditmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype setting-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass settings common-lisp:nil
                       ((is-aws-org-enabled :initarg :is-aws-org-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-settings-is-aws-org-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sns-topic :initarg :sns-topic :initform
                         common-lisp:nil :type
                         (common-lisp:or snstopic common-lisp:null) :accessor
                         struct-shape-settings-sns-topic :shape "SNSTopic"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-assessment-reports-destination :initarg
                         :default-assessment-reports-destination :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-reports-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-settings-default-assessment-reports-destination
                         :shape "AssessmentReportsDestination" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-process-owners :initarg
                         :default-process-owners :initform common-lisp:nil
                         :type (common-lisp:or roles common-lisp:null)
                         :accessor struct-shape-settings-default-process-owners
                         :shape "Roles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key :initarg :kms-key :initform common-lisp:nil
                         :type (common-lisp:or kms-key common-lisp:null)
                         :accessor struct-shape-settings-kms-key :shape
                         "KmsKey" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (evidence-finder-enablement :initarg
                         :evidence-finder-enablement :initform common-lisp:nil
                         :type
                         (common-lisp:or evidence-finder-enablement
                                         common-lisp:null)
                         :accessor
                         struct-shape-settings-evidence-finder-enablement
                         :shape "EvidenceFinderEnablement" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (deregistration-policy :initarg :deregistration-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or deregistration-policy
                                         common-lisp:null)
                         :accessor struct-shape-settings-deregistration-policy
                         :shape "DeregistrationPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-export-destination :initarg
                         :default-export-destination :initform common-lisp:nil
                         :type
                         (common-lisp:or default-export-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-settings-default-export-destination
                         :shape "DefaultExportDestination" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'settings 'make-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-aws-org-enabled))
      (common-lisp:list
       (common-lisp:cons "isAwsOrgEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic))
      (common-lisp:list
       (common-lisp:cons "snsTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-assessment-reports-destination))
      (common-lisp:list
       (common-lisp:cons "defaultAssessmentReportsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-process-owners))
      (common-lisp:list
       (common-lisp:cons "defaultProcessOwners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "kmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-finder-enablement))
      (common-lisp:list
       (common-lisp:cons "evidenceFinderEnablement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deregistration-policy))
      (common-lisp:list
       (common-lisp:cons "deregistrationPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-export-destination))
      (common-lisp:list
       (common-lisp:cons "defaultExportDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input settings))
   common-lisp:nil))
(common-lisp:deftype share-request-action () 'common-lisp:string)
(common-lisp:deftype share-request-comment () 'common-lisp:string)
(common-lisp:deftype share-request-status () 'common-lisp:string)
(common-lisp:deftype share-request-type () 'common-lisp:string)
(common-lisp:deftype sns-arn () 'common-lisp:string)
(common-lisp:deftype source-description () 'common-lisp:string)
(common-lisp:deftype source-frequency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass source-keyword common-lisp:nil
                       ((keyword-input-type :initarg :keyword-input-type
                         :initform common-lisp:nil :type
                         (common-lisp:or keyword-input-type common-lisp:null)
                         :accessor
                         struct-shape-source-keyword-keyword-input-type :shape
                         "KeywordInputType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (keyword-value :initarg :keyword-value :initform
                         common-lisp:nil :type
                         (common-lisp:or keyword-value common-lisp:null)
                         :accessor struct-shape-source-keyword-keyword-value
                         :shape "KeywordValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-keyword
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-keyword
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'source-keyword 'make-source-keyword))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-keyword))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-keyword))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-input-type))
      (common-lisp:list
       (common-lisp:cons "keywordInputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword-value))
      (common-lisp:list
       (common-lisp:cons "keywordValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-keyword))
   common-lisp:nil))
(common-lisp:deftype source-name () 'common-lisp:string)
(common-lisp:deftype source-set-up-option () 'common-lisp:string)
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-assessment-framework-share-request common-lisp:nil
                       ((framework-id :initarg :framework-id :initform
                         (common-lisp:error ":frameworkid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-start-assessment-framework-share-request-framework-id
                         :shape "UUID" :location "uri" :location-name
                         "frameworkId")
                        (destination-account :initarg :destination-account
                         :initform
                         (common-lisp:error ":destinationaccount is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-start-assessment-framework-share-request-destination-account
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-region :initarg :destination-region
                         :initform
                         (common-lisp:error ":destinationregion is required")
                         :type (common-lisp:or region common-lisp:null)
                         :accessor
                         struct-shape-start-assessment-framework-share-request-destination-region
                         :shape "Region" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type
                         (common-lisp:or share-request-comment
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-assessment-framework-share-request-comment
                         :shape "ShareRequestComment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-assessment-framework-share-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-assessment-framework-share-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-assessment-framework-share-request
                    'make-start-assessment-framework-share-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-framework-share-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-framework-share-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-account))
      (common-lisp:list
       (common-lisp:cons "destinationAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-region))
      (common-lisp:list
       (common-lisp:cons "destinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-framework-share-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-assessment-framework-share-response
                       common-lisp:nil
                       ((assessment-framework-share-request :initarg
                         :assessment-framework-share-request :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-framework-share-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-assessment-framework-share-response-assessment-framework-share-request
                         :shape "AssessmentFrameworkShareRequest" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-assessment-framework-share-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-assessment-framework-share-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-assessment-framework-share-response
                    'make-start-assessment-framework-share-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-framework-share-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-framework-share-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-framework-share-request))
      (common-lisp:list
       (common-lisp:cons "assessmentFrameworkShareRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-framework-share-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or audit-manager-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "AuditManagerArn" :location "uri" :location-name
                         "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype testing-information () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (auditmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype timestamp-uuid () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype troubleshooting-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass url common-lisp:nil
                       ((hyperlink-name :initarg :hyperlink-name :initform
                         common-lisp:nil :type
                         (common-lisp:or hyperlink-name common-lisp:null)
                         :accessor struct-shape-url-hyperlink-name :shape
                         "HyperlinkName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (link :initarg :link :initform common-lisp:nil :type
                         (common-lisp:or url-link common-lisp:null) :accessor
                         struct-shape-url-link :shape "UrlLink" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-url (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'url
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'url 'make-url))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input url))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input url))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hyperlink-name))
      (common-lisp:list
       (common-lisp:cons "hyperlinkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link))
      (common-lisp:list
       (common-lisp:cons "link"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input url))
   common-lisp:nil))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or audit-manager-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "AuditManagerArn" :location "uri"
                         :location-name "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-assessment-control-request common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-update-assessment-control-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId")
                        (control-set-id :initarg :control-set-id :initform
                         (common-lisp:error ":controlsetid is required") :type
                         (common-lisp:or control-set-id common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-control-request-control-set-id
                         :shape "ControlSetId" :location "uri" :location-name
                         "controlSetId")
                        (control-id :initarg :control-id :initform
                         (common-lisp:error ":controlid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-update-assessment-control-request-control-id
                         :shape "UUID" :location "uri" :location-name
                         "controlId")
                        (control-status :initarg :control-status :initform
                         common-lisp:nil :type
                         (common-lisp:or control-status common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-control-request-control-status
                         :shape "ControlStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (comment-body :initarg :comment-body :initform
                         common-lisp:nil :type
                         (common-lisp:or control-comment-body common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-control-request-comment-body
                         :shape "ControlCommentBody" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-assessment-control-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-assessment-control-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-assessment-control-request
                    'make-update-assessment-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-status))
      (common-lisp:list
       (common-lisp:cons "controlStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment-body))
      (common-lisp:list
       (common-lisp:cons "commentBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-assessment-control-response common-lisp:nil
                       ((control :initarg :control :initform common-lisp:nil
                         :type
                         (common-lisp:or assessment-control common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-control-response-control
                         :shape "AssessmentControl" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-assessment-control-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-assessment-control-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-assessment-control-response
                    'make-update-assessment-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-assessment-control-set-status-request
                       common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-update-assessment-control-set-status-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId")
                        (control-set-id :initarg :control-set-id :initform
                         (common-lisp:error ":controlsetid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-assessment-control-set-status-request-control-set-id
                         :shape "String" :location "uri" :location-name
                         "controlSetId")
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or control-set-status common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-control-set-status-request-status
                         :shape "ControlSetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (comment :initarg :comment :initform
                         (common-lisp:error ":comment is required") :type
                         (common-lisp:or delegation-comment common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-control-set-status-request-comment
                         :shape "DelegationComment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-assessment-control-set-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-assessment-control-set-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-assessment-control-set-status-request
                    'make-update-assessment-control-set-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-set-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-set-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-set-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-assessment-control-set-status-response
                       common-lisp:nil
                       ((control-set :initarg :control-set :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-control-set
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-control-set-status-response-control-set
                         :shape "AssessmentControlSet" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-assessment-control-set-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-assessment-control-set-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-assessment-control-set-status-response
                    'make-update-assessment-control-set-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-set-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-set-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-set))
      (common-lisp:list
       (common-lisp:cons "controlSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-control-set-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-assessment-framework-control-set common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or control-set-name common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-framework-control-set-id
                         :shape "ControlSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or control-set-name common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-framework-control-set-name
                         :shape "ControlSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (controls :initarg :controls :initform
                         (common-lisp:error ":controls is required") :type
                         (common-lisp:or create-assessment-framework-controls
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-framework-control-set-controls
                         :shape "CreateAssessmentFrameworkControls" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-assessment-framework-control-set
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-assessment-framework-control-set
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-assessment-framework-control-set
                    'make-update-assessment-framework-control-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-control-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-control-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'controls))
      (common-lisp:list
       (common-lisp:cons "controls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-control-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-assessment-framework-control-sets ()
   '(trivial-types:proper-list update-assessment-framework-control-set))
 (common-lisp:defun make-update-assessment-framework-control-sets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            update-assessment-framework-control-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-assessment-framework-request common-lisp:nil
                       ((framework-id :initarg :framework-id :initform
                         (common-lisp:error ":frameworkid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-update-assessment-framework-request-framework-id
                         :shape "UUID" :location "uri" :location-name
                         "frameworkId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or framework-name common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-framework-request-name
                         :shape "FrameworkName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or framework-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-framework-request-description
                         :shape "FrameworkDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-type common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-framework-request-compliance-type
                         :shape "ComplianceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-sets :initarg :control-sets :initform
                         (common-lisp:error ":controlsets is required") :type
                         (common-lisp:or
                          update-assessment-framework-control-sets
                          common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-framework-request-control-sets
                         :shape "UpdateAssessmentFrameworkControlSets"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-assessment-framework-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-assessment-framework-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-assessment-framework-request
                    'make-update-assessment-framework-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "complianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-sets))
      (common-lisp:list
       (common-lisp:cons "controlSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-assessment-framework-response common-lisp:nil
                       ((framework :initarg :framework :initform
                         common-lisp:nil :type
                         (common-lisp:or framework common-lisp:null) :accessor
                         struct-shape-update-assessment-framework-response-framework
                         :shape "Framework" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-assessment-framework-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-assessment-framework-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-assessment-framework-response
                    'make-update-assessment-framework-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-assessment-framework-share-request
                       common-lisp:nil
                       ((request-id :initarg :request-id :initform
                         (common-lisp:error ":requestid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-update-assessment-framework-share-request-request-id
                         :shape "UUID" :location "uri" :location-name
                         "requestId")
                        (request-type :initarg :request-type :initform
                         (common-lisp:error ":requesttype is required") :type
                         (common-lisp:or share-request-type common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-framework-share-request-request-type
                         :shape "ShareRequestType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or share-request-action common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-framework-share-request-action
                         :shape "ShareRequestAction" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-assessment-framework-share-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-assessment-framework-share-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-assessment-framework-share-request
                    'make-update-assessment-framework-share-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-share-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-share-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-type))
      (common-lisp:list
       (common-lisp:cons "requestType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-share-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-assessment-framework-share-response
                       common-lisp:nil
                       ((assessment-framework-share-request :initarg
                         :assessment-framework-share-request :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-framework-share-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-framework-share-response-assessment-framework-share-request
                         :shape "AssessmentFrameworkShareRequest" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-assessment-framework-share-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-assessment-framework-share-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-assessment-framework-share-response
                    'make-update-assessment-framework-share-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-share-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-share-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-framework-share-request))
      (common-lisp:list
       (common-lisp:cons "assessmentFrameworkShareRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-framework-share-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-assessment-request common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-update-assessment-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId")
                        (assessment-name :initarg :assessment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-name common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-request-assessment-name
                         :shape "AssessmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assessment-description :initarg
                         :assessment-description :initform common-lisp:nil
                         :type
                         (common-lisp:or assessment-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-request-assessment-description
                         :shape "AssessmentDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scope :initarg :scope :initform
                         (common-lisp:error ":scope is required") :type
                         (common-lisp:or scope common-lisp:null) :accessor
                         struct-shape-update-assessment-request-scope :shape
                         "Scope" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assessment-reports-destination :initarg
                         :assessment-reports-destination :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-reports-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-request-assessment-reports-destination
                         :shape "AssessmentReportsDestination" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (roles :initarg :roles :initform common-lisp:nil :type
                         (common-lisp:or roles common-lisp:null) :accessor
                         struct-shape-update-assessment-request-roles :shape
                         "Roles" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-assessment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-assessment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-assessment-request
                    'make-update-assessment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-name))
      (common-lisp:list
       (common-lisp:cons "assessmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-description))
      (common-lisp:list
       (common-lisp:cons "assessmentDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-reports-destination))
      (common-lisp:list
       (common-lisp:cons "assessmentReportsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-assessment-response common-lisp:nil
                       ((assessment :initarg :assessment :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment common-lisp:null) :accessor
                         struct-shape-update-assessment-response-assessment
                         :shape "Assessment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-assessment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-assessment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-assessment-response
                    'make-update-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment))
      (common-lisp:list
       (common-lisp:cons "assessment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-assessment-status-request common-lisp:nil
                       ((assessment-id :initarg :assessment-id :initform
                         (common-lisp:error ":assessmentid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-update-assessment-status-request-assessment-id
                         :shape "UUID" :location "uri" :location-name
                         "assessmentId")
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or assessment-status common-lisp:null)
                         :accessor
                         struct-shape-update-assessment-status-request-status
                         :shape "AssessmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-assessment-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-assessment-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-assessment-status-request
                    'make-update-assessment-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-assessment-status-response common-lisp:nil
                       ((assessment :initarg :assessment :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment common-lisp:null) :accessor
                         struct-shape-update-assessment-status-response-assessment
                         :shape "Assessment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-assessment-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-assessment-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-assessment-status-response
                    'make-update-assessment-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment))
      (common-lisp:list
       (common-lisp:cons "assessment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-control-request common-lisp:nil
                       ((control-id :initarg :control-id :initform
                         (common-lisp:error ":controlid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-update-control-request-control-id :shape
                         "UUID" :location "uri" :location-name "controlId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or control-name common-lisp:null)
                         :accessor struct-shape-update-control-request-name
                         :shape "ControlName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or control-description common-lisp:null)
                         :accessor
                         struct-shape-update-control-request-description :shape
                         "ControlDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (testing-information :initarg :testing-information
                         :initform common-lisp:nil :type
                         (common-lisp:or testing-information common-lisp:null)
                         :accessor
                         struct-shape-update-control-request-testing-information
                         :shape "TestingInformation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-plan-title :initarg :action-plan-title
                         :initform common-lisp:nil :type
                         (common-lisp:or action-plan-title common-lisp:null)
                         :accessor
                         struct-shape-update-control-request-action-plan-title
                         :shape "ActionPlanTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-plan-instructions :initarg
                         :action-plan-instructions :initform common-lisp:nil
                         :type
                         (common-lisp:or action-plan-instructions
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-control-request-action-plan-instructions
                         :shape "ActionPlanInstructions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (control-mapping-sources :initarg
                         :control-mapping-sources :initform
                         (common-lisp:error
                          ":controlmappingsources is required")
                         :type
                         (common-lisp:or control-mapping-sources
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-control-request-control-mapping-sources
                         :shape "ControlMappingSources" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-control-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-control-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-control-request 'make-update-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-control-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'testing-information))
      (common-lisp:list
       (common-lisp:cons "testingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-plan-title))
      (common-lisp:list
       (common-lisp:cons "actionPlanTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-plan-instructions))
      (common-lisp:list
       (common-lisp:cons "actionPlanInstructions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-mapping-sources))
      (common-lisp:list
       (common-lisp:cons "controlMappingSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-control-response common-lisp:nil
                       ((control :initarg :control :initform common-lisp:nil
                         :type (common-lisp:or control common-lisp:null)
                         :accessor struct-shape-update-control-response-control
                         :shape "Control" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-control-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-control-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-control-response 'make-update-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-control-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-control-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-settings-request common-lisp:nil
                       ((sns-topic :initarg :sns-topic :initform
                         common-lisp:nil :type
                         (common-lisp:or sns-arn common-lisp:null) :accessor
                         struct-shape-update-settings-request-sns-topic :shape
                         "SnsArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-assessment-reports-destination :initarg
                         :default-assessment-reports-destination :initform
                         common-lisp:nil :type
                         (common-lisp:or assessment-reports-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-settings-request-default-assessment-reports-destination
                         :shape "AssessmentReportsDestination" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-process-owners :initarg
                         :default-process-owners :initform common-lisp:nil
                         :type (common-lisp:or roles common-lisp:null)
                         :accessor
                         struct-shape-update-settings-request-default-process-owners
                         :shape "Roles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key :initarg :kms-key :initform common-lisp:nil
                         :type (common-lisp:or kms-key common-lisp:null)
                         :accessor struct-shape-update-settings-request-kms-key
                         :shape "KmsKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evidence-finder-enabled :initarg
                         :evidence-finder-enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-settings-request-evidence-finder-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deregistration-policy :initarg :deregistration-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or deregistration-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-settings-request-deregistration-policy
                         :shape "DeregistrationPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-export-destination :initarg
                         :default-export-destination :initform common-lisp:nil
                         :type
                         (common-lisp:or default-export-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-settings-request-default-export-destination
                         :shape "DefaultExportDestination" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-settings-request 'make-update-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic))
      (common-lisp:list
       (common-lisp:cons "snsTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-assessment-reports-destination))
      (common-lisp:list
       (common-lisp:cons "defaultAssessmentReportsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-process-owners))
      (common-lisp:list
       (common-lisp:cons "defaultProcessOwners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "kmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evidence-finder-enabled))
      (common-lisp:list
       (common-lisp:cons "evidenceFinderEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deregistration-policy))
      (common-lisp:list
       (common-lisp:cons "deregistrationPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-export-destination))
      (common-lisp:list
       (common-lisp:cons "defaultExportDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-settings-response common-lisp:nil
                       ((settings :initarg :settings :initform common-lisp:nil
                         :type (common-lisp:or settings common-lisp:null)
                         :accessor
                         struct-shape-update-settings-response-settings :shape
                         "Settings" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-settings-response 'make-update-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-response))
   common-lisp:nil))
(common-lisp:deftype url-link () 'common-lisp:string)
(common-lisp:deftype username () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass validate-assessment-report-integrity-request
                       common-lisp:nil
                       ((s3relative-path :initarg :s3relative-path :initform
                         (common-lisp:error ":s3relativepath is required")
                         :type (common-lisp:or s3url common-lisp:null)
                         :accessor
                         struct-shape-validate-assessment-report-integrity-request-s3relative-path
                         :shape "S3Url" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validate-assessment-report-integrity-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-assessment-report-integrity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validate-assessment-report-integrity-request
                    'make-validate-assessment-report-integrity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-assessment-report-integrity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-assessment-report-integrity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3relative-path))
      (common-lisp:list
       (common-lisp:cons "s3RelativePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-assessment-report-integrity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validate-assessment-report-integrity-response
                       common-lisp:nil
                       ((signature-valid :initarg :signature-valid :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-validate-assessment-report-integrity-response-signature-valid
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signature-algorithm :initarg :signature-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validate-assessment-report-integrity-response-signature-algorithm
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signature-date-time :initarg :signature-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validate-assessment-report-integrity-response-signature-date-time
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signature-key-id :initarg :signature-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validate-assessment-report-integrity-response-signature-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validation-errors :initarg :validation-errors
                         :initform common-lisp:nil :type
                         (common-lisp:or validation-errors common-lisp:null)
                         :accessor
                         struct-shape-validate-assessment-report-integrity-response-validation-errors
                         :shape "ValidationErrors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validate-assessment-report-integrity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-assessment-report-integrity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validate-assessment-report-integrity-response
                    'make-validate-assessment-report-integrity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-assessment-report-integrity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-assessment-report-integrity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-valid))
      (common-lisp:list
       (common-lisp:cons "signatureValid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-algorithm))
      (common-lisp:list
       (common-lisp:cons "signatureAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-date-time))
      (common-lisp:list
       (common-lisp:cons "signatureDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-key-id))
      (common-lisp:list
       (common-lisp:cons "signatureKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-errors))
      (common-lisp:list
       (common-lisp:cons "validationErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-assessment-report-integrity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-errors ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-validation-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (auditmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason 'validation-exception-fields)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-field-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-field-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-exception-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype |organizationId| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-assessment-report-evidence-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id evidence-folder-id)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id evidence-folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-assessment-report-evidence-folder-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/associateToAssessmentReport"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "AssociateAssessmentReportEvidenceFolder"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-assessment-report-evidence-folder))
(common-lisp:progn
 (common-lisp:defun batch-associate-assessment-report-evidence
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id evidence-folder-id
                     evidence-ids)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id evidence-folder-id evidence-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-associate-assessment-report-evidence-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/batchAssociateToAssessmentReport"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "BatchAssociateAssessmentReportEvidence"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-associate-assessment-report-evidence))
(common-lisp:progn
 (common-lisp:defun batch-create-delegation-by-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key create-delegation-requests assessment-id)
   (common-lisp:declare
    (common-lisp:ignorable create-delegation-requests assessment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-create-delegation-by-assessment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/delegations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "BatchCreateDelegationByAssessment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-create-delegation-by-assessment))
(common-lisp:progn
 (common-lisp:defun batch-delete-delegation-by-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delegation-ids assessment-id)
   (common-lisp:declare (common-lisp:ignorable delegation-ids assessment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-delete-delegation-by-assessment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/delegations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "BatchDeleteDelegationByAssessment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-delete-delegation-by-assessment))
(common-lisp:progn
 (common-lisp:defun batch-disassociate-assessment-report-evidence
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id evidence-folder-id
                     evidence-ids)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id evidence-folder-id evidence-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-disassociate-assessment-report-evidence-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/batchDisassociateFromAssessmentReport"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "BatchDisassociateAssessmentReportEvidence"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-disassociate-assessment-report-evidence))
(common-lisp:progn
 (common-lisp:defun batch-import-evidence-to-assessment-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id control-set-id control-id
                     manual-evidence)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id control-set-id control-id
     manual-evidence))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-import-evidence-to-assessment-control-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/controlSets/~A/controls/~A/evidence"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-id))))
                                                        "BatchImportEvidenceToAssessmentControl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-import-evidence-to-assessment-control))
(common-lisp:progn
 (common-lisp:defun create-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description
                     assessment-reports-destination scope roles framework-id
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name description assessment-reports-destination
     scope roles framework-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/assessments"
                                                        "CreateAssessment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-assessment))
(common-lisp:progn
 (common-lisp:defun create-assessment-framework
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description compliance-type
                     control-sets tags)
   (common-lisp:declare
    (common-lisp:ignorable name description compliance-type control-sets tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-assessment-framework-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/assessmentFrameworks"
                                                        "CreateAssessmentFramework"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-assessment-framework))
(common-lisp:progn
 (common-lisp:defun create-assessment-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description assessment-id
                     query-statement)
   (common-lisp:declare
    (common-lisp:ignorable name description assessment-id query-statement))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-assessment-report-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/reports"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "CreateAssessmentReport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-assessment-report))
(common-lisp:progn
 (common-lisp:defun create-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description testing-information
                     action-plan-title action-plan-instructions
                     control-mapping-sources tags)
   (common-lisp:declare
    (common-lisp:ignorable name description testing-information
     action-plan-title action-plan-instructions control-mapping-sources tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-control-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/controls"
                                                        "CreateControl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-control))
(common-lisp:progn
 (common-lisp:defun delete-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id)
   (common-lisp:declare (common-lisp:ignorable assessment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "DeleteAssessment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-assessment))
(common-lisp:progn
 (common-lisp:defun delete-assessment-framework
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key framework-id)
   (common-lisp:declare (common-lisp:ignorable framework-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-assessment-framework-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessmentFrameworks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'framework-id))))
                                                        "DeleteAssessmentFramework"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-assessment-framework))
(common-lisp:progn
 (common-lisp:defun delete-assessment-framework-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key request-id request-type)
   (common-lisp:declare (common-lisp:ignorable request-id request-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-assessment-framework-share-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessmentFrameworkShareRequests/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'request-id))))
                                                        "DeleteAssessmentFrameworkShare"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-assessment-framework-share))
(common-lisp:progn
 (common-lisp:defun delete-assessment-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id assessment-report-id)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id assessment-report-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-assessment-report-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/reports/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-report-id))))
                                                        "DeleteAssessmentReport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-assessment-report))
(common-lisp:progn
 (common-lisp:defun delete-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key control-id)
   (common-lisp:declare (common-lisp:ignorable control-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-control-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/controls/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-id))))
                                                        "DeleteControl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-control))
(common-lisp:progn
 (common-lisp:defun deregister-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'auditmanager-request :method "POST" :path
                                "/account/deregisterAccount" :operation
                                "DeregisterAccount"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'deregister-account))
(common-lisp:progn
 (common-lisp:defun deregister-organization-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account-id)
   (common-lisp:declare (common-lisp:ignorable admin-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-organization-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/account/deregisterOrganizationAdminAccount"
                                                        "DeregisterOrganizationAdminAccount"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun disassociate-assessment-report-evidence-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id evidence-folder-id)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id evidence-folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-assessment-report-evidence-folder-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/disassociateFromAssessmentReport"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "DisassociateAssessmentReportEvidenceFolder"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-assessment-report-evidence-folder))
(common-lisp:progn
 (common-lisp:defun get-account-status ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'auditmanager-request :method "GET" :path
                                "/account/status" :operation
                                "GetAccountStatus"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-account-status))
(common-lisp:progn
 (common-lisp:defun get-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id)
   (common-lisp:declare (common-lisp:ignorable assessment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "GetAssessment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-assessment))
(common-lisp:progn
 (common-lisp:defun get-assessment-framework
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key framework-id)
   (common-lisp:declare (common-lisp:ignorable framework-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-assessment-framework-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessmentFrameworks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'framework-id))))
                                                        "GetAssessmentFramework"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-assessment-framework))
(common-lisp:progn
 (common-lisp:defun get-assessment-report-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-report-id assessment-id)
   (common-lisp:declare
    (common-lisp:ignorable assessment-report-id assessment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-assessment-report-url-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/reports/~A/url"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-report-id))))
                                                        "GetAssessmentReportUrl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-assessment-report-url))
(common-lisp:progn
 (common-lisp:defun get-change-logs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id control-set-id control-id
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id control-set-id control-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-change-logs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/changelogs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "GetChangeLogs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-change-logs))
(common-lisp:progn
 (common-lisp:defun get-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key control-id)
   (common-lisp:declare (common-lisp:ignorable control-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-control-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/controls/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-id))))
                                                        "GetControl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-control))
(common-lisp:progn
 (common-lisp:defun get-delegations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-delegations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/delegations"
                                                        "GetDelegations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-delegations))
(common-lisp:progn
 (common-lisp:defun get-evidence
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id control-set-id
                     evidence-folder-id evidence-id)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id control-set-id evidence-folder-id
     evidence-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-evidence-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/controlSets/~A/evidenceFolders/~A/evidence/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evidence-folder-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evidence-id))))
                                                        "GetEvidence"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-evidence))
(common-lisp:progn
 (common-lisp:defun get-evidence-by-evidence-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id control-set-id
                     evidence-folder-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id control-set-id evidence-folder-id
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-evidence-by-evidence-folder-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/controlSets/~A/evidenceFolders/~A/evidence"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evidence-folder-id))))
                                                        "GetEvidenceByEvidenceFolder"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-evidence-by-evidence-folder))
(common-lisp:progn
 (common-lisp:defun get-evidence-file-upload-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-name)
   (common-lisp:declare (common-lisp:ignorable file-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-evidence-file-upload-url-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/evidenceFileUploadUrl"
                                                        "GetEvidenceFileUploadUrl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-evidence-file-upload-url))
(common-lisp:progn
 (common-lisp:defun get-evidence-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id control-set-id
                     evidence-folder-id)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id control-set-id evidence-folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-evidence-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/controlSets/~A/evidenceFolders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evidence-folder-id))))
                                                        "GetEvidenceFolder"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-evidence-folder))
(common-lisp:progn
 (common-lisp:defun get-evidence-folders-by-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-evidence-folders-by-assessment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/evidenceFolders"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "GetEvidenceFoldersByAssessment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-evidence-folders-by-assessment))
(common-lisp:progn
 (common-lisp:defun get-evidence-folders-by-assessment-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id control-set-id control-id
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id control-set-id control-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-evidence-folders-by-assessment-control-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/evidenceFolders-by-assessment-control/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-id))))
                                                        "GetEvidenceFoldersByAssessmentControl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-evidence-folders-by-assessment-control))
(common-lisp:progn
 (common-lisp:defun get-insights ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'auditmanager-request :method "GET" :path
                                "/insights" :operation "GetInsights"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-insights))
(common-lisp:progn
 (common-lisp:defun get-insights-by-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id)
   (common-lisp:declare (common-lisp:ignorable assessment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-insights-by-assessment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/insights/assessments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "GetInsightsByAssessment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-insights-by-assessment))
(common-lisp:progn
 (common-lisp:defun get-organization-admin-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'auditmanager-request :method "GET" :path
                                "/account/organizationAdminAccount" :operation
                                "GetOrganizationAdminAccount"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun get-services-in-scope ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'auditmanager-request :method "GET" :path
                                "/services" :operation "GetServicesInScope"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-services-in-scope))
(common-lisp:progn
 (common-lisp:defun get-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute)
   (common-lisp:declare (common-lisp:ignorable attribute))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/settings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'attribute))))
                                                        "GetSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-settings))
(common-lisp:progn
 (common-lisp:defun list-assessment-control-insights-by-control-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key control-domain-id assessment-id
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable control-domain-id assessment-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-assessment-control-insights-by-control-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/insights/controls-by-assessment"
                                                        "ListAssessmentControlInsightsByControlDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-assessment-control-insights-by-control-domain))
(common-lisp:progn
 (common-lisp:defun list-assessment-framework-share-requests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key request-type next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable request-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-assessment-framework-share-requests-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/assessmentFrameworkShareRequests"
                                                        "ListAssessmentFrameworkShareRequests"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-assessment-framework-share-requests))
(common-lisp:progn
 (common-lisp:defun list-assessment-frameworks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key framework-type next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable framework-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-assessment-frameworks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/assessmentFrameworks"
                                                        "ListAssessmentFrameworks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-assessment-frameworks))
(common-lisp:progn
 (common-lisp:defun list-assessment-reports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-assessment-reports-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/assessmentReports"
                                                        "ListAssessmentReports"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-assessment-reports))
(common-lisp:progn
 (common-lisp:defun list-assessments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status next-token max-results)
   (common-lisp:declare (common-lisp:ignorable status next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-assessments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/assessments"
                                                        "ListAssessments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-assessments))
(common-lisp:progn
 (common-lisp:defun list-control-domain-insights
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-control-domain-insights-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/insights/control-domains"
                                                        "ListControlDomainInsights"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-control-domain-insights))
(common-lisp:progn
 (common-lisp:defun list-control-domain-insights-by-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-control-domain-insights-by-assessment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/insights/control-domains-by-assessment"
                                                        "ListControlDomainInsightsByAssessment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-control-domain-insights-by-assessment))
(common-lisp:progn
 (common-lisp:defun list-control-insights-by-control-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key control-domain-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable control-domain-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-control-insights-by-control-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/insights/controls"
                                                        "ListControlInsightsByControlDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-control-insights-by-control-domain))
(common-lisp:progn
 (common-lisp:defun list-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key control-type next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable control-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-controls-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/controls"
                                                        "ListControls"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-controls))
(common-lisp:progn
 (common-lisp:defun list-keywords-for-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source next-token max-results)
   (common-lisp:declare (common-lisp:ignorable source next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-keywords-for-data-source-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/dataSourceKeywords"
                                                        "ListKeywordsForDataSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-keywords-for-data-source))
(common-lisp:progn
 (common-lisp:defun list-notifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-notifications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/notifications"
                                                        "ListNotifications"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-notifications))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun register-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key kms-key delegated-admin-account)
   (common-lisp:declare
    (common-lisp:ignorable kms-key delegated-admin-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/account/registerAccount"
                                                        "RegisterAccount"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-account))
(common-lisp:progn
 (common-lisp:defun register-organization-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account-id)
   (common-lisp:declare (common-lisp:ignorable admin-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-organization-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/account/registerOrganizationAdminAccount"
                                                        "RegisterOrganizationAdminAccount"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun start-assessment-framework-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key framework-id destination-account
                     destination-region comment)
   (common-lisp:declare
    (common-lisp:ignorable framework-id destination-account destination-region
     comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-assessment-framework-share-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessmentFrameworks/~A/shareRequests"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'framework-id))))
                                                        "StartAssessmentFrameworkShare"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-assessment-framework-share))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id assessment-name
                     assessment-description scope
                     assessment-reports-destination roles)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id assessment-name assessment-description
     scope assessment-reports-destination roles))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-assessment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "UpdateAssessment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-assessment))
(common-lisp:progn
 (common-lisp:defun update-assessment-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id control-set-id control-id
                     control-status comment-body)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id control-set-id control-id
     control-status comment-body))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-assessment-control-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/controlSets/~A/controls/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-set-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-id))))
                                                        "UpdateAssessmentControl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-assessment-control))
(common-lisp:progn
 (common-lisp:defun update-assessment-control-set-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id control-set-id status
                     comment)
   (common-lisp:declare
    (common-lisp:ignorable assessment-id control-set-id status comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-assessment-control-set-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/controlSets/~A/status"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-set-id))))
                                                        "UpdateAssessmentControlSetStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-assessment-control-set-status))
(common-lisp:progn
 (common-lisp:defun update-assessment-framework
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key framework-id name description
                     compliance-type control-sets)
   (common-lisp:declare
    (common-lisp:ignorable framework-id name description compliance-type
     control-sets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-assessment-framework-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessmentFrameworks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'framework-id))))
                                                        "UpdateAssessmentFramework"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-assessment-framework))
(common-lisp:progn
 (common-lisp:defun update-assessment-framework-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key request-id request-type action)
   (common-lisp:declare (common-lisp:ignorable request-id request-type action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-assessment-framework-share-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessmentFrameworkShareRequests/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'request-id))))
                                                        "UpdateAssessmentFrameworkShare"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-assessment-framework-share))
(common-lisp:progn
 (common-lisp:defun update-assessment-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-id status)
   (common-lisp:declare (common-lisp:ignorable assessment-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-assessment-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assessments/~A/status"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assessment-id))))
                                                        "UpdateAssessmentStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-assessment-status))
(common-lisp:progn
 (common-lisp:defun update-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key control-id name description
                     testing-information action-plan-title
                     action-plan-instructions control-mapping-sources)
   (common-lisp:declare
    (common-lisp:ignorable control-id name description testing-information
     action-plan-title action-plan-instructions control-mapping-sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-control-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/controls/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'control-id))))
                                                        "UpdateControl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-control))
(common-lisp:progn
 (common-lisp:defun update-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sns-topic
                     default-assessment-reports-destination
                     default-process-owners kms-key evidence-finder-enabled
                     deregistration-policy default-export-destination)
   (common-lisp:declare
    (common-lisp:ignorable sns-topic default-assessment-reports-destination
     default-process-owners kms-key evidence-finder-enabled
     deregistration-policy default-export-destination))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/settings"
                                                        "UpdateSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-settings))
(common-lisp:progn
 (common-lisp:defun validate-assessment-report-integrity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key s3relative-path)
   (common-lisp:declare (common-lisp:ignorable s3relative-path))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-validate-assessment-report-integrity-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'auditmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/assessmentReports/integrity"
                                                        "ValidateAssessmentReportIntegrity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'validate-assessment-report-integrity))
