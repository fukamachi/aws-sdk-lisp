;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/workmail/api (:use)
                             (:nicknames #:aws/workmail)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/workmail/api)
(common-lisp:progn
 (common-lisp:define-condition workmail-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'workmail-error))
(common-lisp:progn
 (common-lisp:defclass workmail-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "workmail" :api-version
                        "2017-10-01" :host-prefix "workmail" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "WorkMailService" :json-version "1.1"))
 (common-lisp:export 'workmail-request))
(common-lisp:defvar *error-map*
  '(("DirectoryInUseException" . directory-in-use-exception)
    ("DirectoryServiceAuthenticationFailedException"
     . directory-service-authentication-failed-exception)
    ("DirectoryUnavailableException" . directory-unavailable-exception)
    ("EmailAddressInUseException" . email-address-in-use-exception)
    ("EntityAlreadyRegisteredException" . entity-already-registered-exception)
    ("EntityNotFoundException" . entity-not-found-exception)
    ("EntityStateException" . entity-state-exception)
    ("InvalidConfigurationException" . invalid-configuration-exception)
    ("InvalidCustomSesConfigurationException"
     . invalid-custom-ses-configuration-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidPasswordException" . invalid-password-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MailDomainInUseException" . mail-domain-in-use-exception)
    ("MailDomainNotFoundException" . mail-domain-not-found-exception)
    ("MailDomainStateException" . mail-domain-state-exception)
    ("NameAvailabilityException" . name-availability-exception)
    ("OrganizationNotFoundException" . organization-not-found-exception)
    ("OrganizationStateException" . organization-state-exception)
    ("ReservedNameException" . reserved-name-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("UnsupportedOperationException" . unsupported-operation-exception)))
(common-lisp:progn
 (common-lisp:defclass access-control-rule common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or access-control-rule-name
                                         common-lisp:null)
                         :accessor struct-shape-access-control-rule-name :shape
                         "AccessControlRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (effect :initarg :effect :initform common-lisp:nil
                         :type
                         (common-lisp:or access-control-rule-effect
                                         common-lisp:null)
                         :accessor struct-shape-access-control-rule-effect
                         :shape "AccessControlRuleEffect" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or access-control-rule-description
                                         common-lisp:null)
                         :accessor struct-shape-access-control-rule-description
                         :shape "AccessControlRuleDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ip-ranges :initarg :ip-ranges :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-range-list common-lisp:null)
                         :accessor struct-shape-access-control-rule-ip-ranges
                         :shape "IpRangeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-ip-ranges :initarg :not-ip-ranges :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-range-list common-lisp:null)
                         :accessor
                         struct-shape-access-control-rule-not-ip-ranges :shape
                         "IpRangeList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (actions :initarg :actions :initform common-lisp:nil
                         :type (common-lisp:or actions-list common-lisp:null)
                         :accessor struct-shape-access-control-rule-actions
                         :shape "ActionsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-actions :initarg :not-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or actions-list common-lisp:null)
                         :accessor struct-shape-access-control-rule-not-actions
                         :shape "ActionsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-ids :initarg :user-ids :initform common-lisp:nil
                         :type (common-lisp:or user-id-list common-lisp:null)
                         :accessor struct-shape-access-control-rule-user-ids
                         :shape "UserIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-user-ids :initarg :not-user-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or user-id-list common-lisp:null)
                         :accessor
                         struct-shape-access-control-rule-not-user-ids :shape
                         "UserIdList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (date-created :initarg :date-created :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-access-control-rule-date-created :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (date-modified :initarg :date-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-access-control-rule-date-modified :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (impersonation-role-ids :initarg
                         :impersonation-role-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or impersonation-role-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-access-control-rule-impersonation-role-ids
                         :shape "ImpersonationRoleIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (not-impersonation-role-ids :initarg
                         :not-impersonation-role-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or impersonation-role-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-access-control-rule-not-impersonation-role-ids
                         :shape "ImpersonationRoleIdList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-control-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-control-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-control-rule 'make-access-control-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-control-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-control-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-ranges))
      (common-lisp:list
       (common-lisp:cons "IpRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-ip-ranges))
      (common-lisp:list
       (common-lisp:cons "NotIpRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-actions))
      (common-lisp:list
       (common-lisp:cons "NotActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "UserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-user-ids))
      (common-lisp:list
       (common-lisp:cons "NotUserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-ids))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-impersonation-role-ids))
      (common-lisp:list
       (common-lisp:cons "NotImpersonationRoleIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-control-rule))
   common-lisp:nil))
(common-lisp:deftype access-control-rule-action () 'common-lisp:string)
(common-lisp:deftype access-control-rule-description () 'common-lisp:string)
(common-lisp:deftype access-control-rule-effect () 'common-lisp:string)
(common-lisp:deftype access-control-rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype access-control-rule-name-list ()
   '(trivial-types:proper-list access-control-rule-name))
 (common-lisp:defun make-access-control-rule-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            access-control-rule-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype access-control-rules-list ()
   '(trivial-types:proper-list access-control-rule))
 (common-lisp:defun make-access-control-rules-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-control-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype access-effect () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype actions-list ()
   '(trivial-types:proper-list access-control-rule-action))
 (common-lisp:defun make-actions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            access-control-rule-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aliases () '(trivial-types:proper-list email-address))
 (common-lisp:defun make-aliases
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list email-address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-delegate-to-resource-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-associate-delegate-to-resource-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-associate-delegate-to-resource-request-resource-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entity-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-associate-delegate-to-resource-request-entity-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-delegate-to-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-delegate-to-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-delegate-to-resource-request
                    'make-associate-delegate-to-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegate-to-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegate-to-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegate-to-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-delegate-to-resource-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-delegate-to-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-delegate-to-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-delegate-to-resource-response
                    'make-associate-delegate-to-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegate-to-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegate-to-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegate-to-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-member-to-group-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-associate-member-to-group-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-id :initarg :group-id :initform
                         (common-lisp:error ":group-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-associate-member-to-group-request-group-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (member-id :initarg :member-id :initform
                         (common-lisp:error ":member-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-associate-member-to-group-request-member-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-member-to-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-member-to-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-member-to-group-request
                    'make-associate-member-to-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-to-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-to-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-to-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-member-to-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-member-to-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-member-to-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-member-to-group-response
                    'make-associate-member-to-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-to-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-to-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-to-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assume-impersonation-role-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-assume-impersonation-role-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (impersonation-role-id :initarg :impersonation-role-id
                         :initform
                         (common-lisp:error
                          ":impersonation-role-id is required")
                         :type
                         (common-lisp:or impersonation-role-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-assume-impersonation-role-request-impersonation-role-id
                         :shape "ImpersonationRoleId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assume-impersonation-role-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'assume-impersonation-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assume-impersonation-role-request
                    'make-assume-impersonation-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-impersonation-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-impersonation-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-impersonation-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assume-impersonation-role-response common-lisp:nil
                       ((token :initarg :token :initform common-lisp:nil :type
                         (common-lisp:or impersonation-token common-lisp:null)
                         :accessor
                         struct-shape-assume-impersonation-role-response-token
                         :shape "ImpersonationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expires-in :initarg :expires-in :initform
                         common-lisp:nil :type
                         (common-lisp:or expires-in common-lisp:null) :accessor
                         struct-shape-assume-impersonation-role-response-expires-in
                         :shape "ExpiresIn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assume-impersonation-role-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'assume-impersonation-role-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assume-impersonation-role-response
                    'make-assume-impersonation-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-impersonation-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-impersonation-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "Token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in))
      (common-lisp:list
       (common-lisp:cons "ExpiresIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-impersonation-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass availability-configuration common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-availability-configuration-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-type :initarg :provider-type :initform
                         common-lisp:nil :type
                         (common-lisp:or availability-provider-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-availability-configuration-provider-type
                         :shape "AvailabilityProviderType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ews-provider :initarg :ews-provider :initform
                         common-lisp:nil :type
                         (common-lisp:or redacted-ews-availability-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-availability-configuration-ews-provider
                         :shape "RedactedEwsAvailabilityProvider" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-provider :initarg :lambda-provider :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-availability-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-availability-configuration-lambda-provider
                         :shape "LambdaAvailabilityProvider" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (date-created :initarg :date-created :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-availability-configuration-date-created
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-modified :initarg :date-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-availability-configuration-date-modified
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-availability-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'availability-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'availability-configuration
                    'make-availability-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          availability-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          availability-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-provider))
      (common-lisp:list
       (common-lisp:cons "EwsProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-provider))
      (common-lisp:list
       (common-lisp:cons "LambdaProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          availability-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-configuration-list ()
   '(trivial-types:proper-list availability-configuration))
 (common-lisp:defun make-availability-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            availability-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype availability-provider-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass booking-options common-lisp:nil
                       ((auto-accept-requests :initarg :auto-accept-requests
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-booking-options-auto-accept-requests
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-decline-recurring-requests :initarg
                         :auto-decline-recurring-requests :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-booking-options-auto-decline-recurring-requests
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-decline-conflicting-requests :initarg
                         :auto-decline-conflicting-requests :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-booking-options-auto-decline-conflicting-requests
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-booking-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'booking-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'booking-options 'make-booking-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input booking-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input booking-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-accept-requests))
      (common-lisp:list
       (common-lisp:cons "AutoAcceptRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-decline-recurring-requests))
      (common-lisp:list
       (common-lisp:cons "AutoDeclineRecurringRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-decline-conflicting-requests))
      (common-lisp:list
       (common-lisp:cons "AutoDeclineConflictingRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input booking-options))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-object () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-mailbox-export-job-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         (common-lisp:error ":client-token is required") :type
                         (common-lisp:or idempotency-client-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-cancel-mailbox-export-job-request-client-token
                         :shape "IdempotencyClientToken" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or mailbox-export-job-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-cancel-mailbox-export-job-request-job-id
                         :shape "MailboxExportJobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-cancel-mailbox-export-job-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-mailbox-export-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-mailbox-export-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-mailbox-export-job-request
                    'make-cancel-mailbox-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mailbox-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mailbox-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mailbox-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-mailbox-export-job-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-mailbox-export-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-mailbox-export-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-mailbox-export-job-response
                    'make-cancel-mailbox-export-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mailbox-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mailbox-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mailbox-export-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-alias-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-create-alias-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entity-id is required") :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor struct-shape-create-alias-request-entity-id
                         :shape "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alias :initarg :alias :initform
                         (common-lisp:error ":alias is required") :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor struct-shape-create-alias-request-alias
                         :shape "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-alias-request 'make-create-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-alias-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-alias-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-alias-response 'make-create-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-availability-configuration-request
                       common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-client-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-availability-configuration-request-client-token
                         :shape "IdempotencyClientToken" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-create-availability-configuration-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-create-availability-configuration-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ews-provider :initarg :ews-provider :initform
                         common-lisp:nil :type
                         (common-lisp:or ews-availability-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-availability-configuration-request-ews-provider
                         :shape "EwsAvailabilityProvider" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-provider :initarg :lambda-provider :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-availability-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-availability-configuration-request-lambda-provider
                         :shape "LambdaAvailabilityProvider" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-availability-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-availability-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-availability-configuration-request
                    'make-create-availability-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-availability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-availability-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-provider))
      (common-lisp:list
       (common-lisp:cons "EwsProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-provider))
      (common-lisp:list
       (common-lisp:cons "LambdaProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-availability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-availability-configuration-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-availability-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-availability-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-availability-configuration-response
                    'make-create-availability-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-availability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-availability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-availability-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-group-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-create-group-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-create-group-request-name :shape
                         "GroupName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hidden-from-global-address-list :initarg
                         :hidden-from-global-address-list :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-group-request-hidden-from-global-address-list
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-group-request 'make-create-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hidden-from-global-address-list))
      (common-lisp:list
       (common-lisp:cons "HiddenFromGlobalAddressList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-group-response common-lisp:nil
                       ((group-id :initarg :group-id :initform common-lisp:nil
                         :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor struct-shape-create-group-response-group-id
                         :shape "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-group-response 'make-create-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-impersonation-role-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-client-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-impersonation-role-request-client-token
                         :shape "IdempotencyClientToken" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-create-impersonation-role-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or impersonation-role-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-impersonation-role-request-name
                         :shape "ImpersonationRoleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or impersonation-role-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-impersonation-role-request-type
                         :shape "ImpersonationRoleType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or impersonation-role-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-impersonation-role-request-description
                         :shape "ImpersonationRoleDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or impersonation-rule-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-impersonation-role-request-rules
                         :shape "ImpersonationRuleList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-impersonation-role-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-impersonation-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-impersonation-role-request
                    'make-create-impersonation-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-impersonation-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-impersonation-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-impersonation-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-impersonation-role-response common-lisp:nil
                       ((impersonation-role-id :initarg :impersonation-role-id
                         :initform common-lisp:nil :type
                         (common-lisp:or impersonation-role-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-impersonation-role-response-impersonation-role-id
                         :shape "ImpersonationRoleId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-impersonation-role-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-impersonation-role-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-impersonation-role-response
                    'make-create-impersonation-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-impersonation-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-impersonation-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-impersonation-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-mobile-device-access-rule-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-create-mobile-device-access-rule-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-client-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-mobile-device-access-rule-request-client-token
                         :shape "IdempotencyClientToken" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or mobile-device-access-rule-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-mobile-device-access-rule-request-name
                         :shape "MobileDeviceAccessRuleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or mobile-device-access-rule-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-mobile-device-access-rule-request-description
                         :shape "MobileDeviceAccessRuleDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (effect :initarg :effect :initform
                         (common-lisp:error ":effect is required") :type
                         (common-lisp:or mobile-device-access-rule-effect
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-mobile-device-access-rule-request-effect
                         :shape "MobileDeviceAccessRuleEffect" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-types :initarg :device-types :initform
                         common-lisp:nil :type
                         (common-lisp:or device-type-list common-lisp:null)
                         :accessor
                         struct-shape-create-mobile-device-access-rule-request-device-types
                         :shape "DeviceTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-device-types :initarg :not-device-types :initform
                         common-lisp:nil :type
                         (common-lisp:or device-type-list common-lisp:null)
                         :accessor
                         struct-shape-create-mobile-device-access-rule-request-not-device-types
                         :shape "DeviceTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-models :initarg :device-models :initform
                         common-lisp:nil :type
                         (common-lisp:or device-model-list common-lisp:null)
                         :accessor
                         struct-shape-create-mobile-device-access-rule-request-device-models
                         :shape "DeviceModelList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-device-models :initarg :not-device-models
                         :initform common-lisp:nil :type
                         (common-lisp:or device-model-list common-lisp:null)
                         :accessor
                         struct-shape-create-mobile-device-access-rule-request-not-device-models
                         :shape "DeviceModelList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-operating-systems :initarg
                         :device-operating-systems :initform common-lisp:nil
                         :type
                         (common-lisp:or device-operating-system-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-mobile-device-access-rule-request-device-operating-systems
                         :shape "DeviceOperatingSystemList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (not-device-operating-systems :initarg
                         :not-device-operating-systems :initform
                         common-lisp:nil :type
                         (common-lisp:or device-operating-system-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-mobile-device-access-rule-request-not-device-operating-systems
                         :shape "DeviceOperatingSystemList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-user-agents :initarg :device-user-agents
                         :initform common-lisp:nil :type
                         (common-lisp:or device-user-agent-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-mobile-device-access-rule-request-device-user-agents
                         :shape "DeviceUserAgentList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-device-user-agents :initarg
                         :not-device-user-agents :initform common-lisp:nil
                         :type
                         (common-lisp:or device-user-agent-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-mobile-device-access-rule-request-not-device-user-agents
                         :shape "DeviceUserAgentList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-mobile-device-access-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-mobile-device-access-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-mobile-device-access-rule-request
                    'make-create-mobile-device-access-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mobile-device-access-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mobile-device-access-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-types))
      (common-lisp:list
       (common-lisp:cons "DeviceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-device-types))
      (common-lisp:list
       (common-lisp:cons "NotDeviceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-models))
      (common-lisp:list
       (common-lisp:cons "DeviceModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-device-models))
      (common-lisp:list
       (common-lisp:cons "NotDeviceModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-operating-systems))
      (common-lisp:list
       (common-lisp:cons "DeviceOperatingSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-device-operating-systems))
      (common-lisp:list
       (common-lisp:cons "NotDeviceOperatingSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-user-agents))
      (common-lisp:list
       (common-lisp:cons "DeviceUserAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-device-user-agents))
      (common-lisp:list
       (common-lisp:cons "NotDeviceUserAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mobile-device-access-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-mobile-device-access-rule-response
                       common-lisp:nil
                       ((mobile-device-access-rule-id :initarg
                         :mobile-device-access-rule-id :initform
                         common-lisp:nil :type
                         (common-lisp:or mobile-device-access-rule-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-mobile-device-access-rule-response-mobile-device-access-rule-id
                         :shape "MobileDeviceAccessRuleId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-mobile-device-access-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-mobile-device-access-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-mobile-device-access-rule-response
                    'make-create-mobile-device-access-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mobile-device-access-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mobile-device-access-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mobile-device-access-rule-id))
      (common-lisp:list
       (common-lisp:cons "MobileDeviceAccessRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mobile-device-access-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-organization-request common-lisp:nil
                       ((directory-id :initarg :directory-id :initform
                         common-lisp:nil :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         struct-shape-create-organization-request-directory-id
                         :shape "DirectoryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alias :initarg :alias :initform
                         (common-lisp:error ":alias is required") :type
                         (common-lisp:or organization-name common-lisp:null)
                         :accessor
                         struct-shape-create-organization-request-alias :shape
                         "OrganizationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-client-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-organization-request-client-token
                         :shape "IdempotencyClientToken" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domains :initarg :domains :initform common-lisp:nil
                         :type (common-lisp:or domains common-lisp:null)
                         :accessor
                         struct-shape-create-organization-request-domains
                         :shape "Domains" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-create-organization-request-kms-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-interoperability :initarg
                         :enable-interoperability :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-organization-request-enable-interoperability
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-organization-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-organization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-organization-request
                    'make-create-organization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "Domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-interoperability))
      (common-lisp:list
       (common-lisp:cons "EnableInteroperability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-organization-response common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-create-organization-response-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-organization-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-organization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-organization-response
                    'make-create-organization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resource-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-create-resource-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-create-resource-request-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-create-resource-request-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-create-resource-request-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hidden-from-global-address-list :initarg
                         :hidden-from-global-address-list :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-resource-request-hidden-from-global-address-list
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-resource-request 'make-create-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hidden-from-global-address-list))
      (common-lisp:list
       (common-lisp:cons "HiddenFromGlobalAddressList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resource-response common-lisp:nil
                       ((resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-create-resource-response-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-resource-response 'make-create-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-create-user-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         struct-shape-create-user-request-name :shape
                         "UserName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         (common-lisp:error ":display-name is required") :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor
                         struct-shape-create-user-request-display-name :shape
                         "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or password common-lisp:null)
                         :accessor struct-shape-create-user-request-password
                         :shape "Password" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or user-role common-lisp:null) :accessor
                         struct-shape-create-user-request-role :shape
                         "UserRole" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-create-user-request-first-name
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-create-user-request-last-name
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hidden-from-global-address-list :initarg
                         :hidden-from-global-address-list :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-user-request-hidden-from-global-address-list
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hidden-from-global-address-list))
      (common-lisp:list
       (common-lisp:cons "HiddenFromGlobalAddressList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-response common-lisp:nil
                       ((user-id :initarg :user-id :initform common-lisp:nil
                         :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor struct-shape-create-user-response-user-id
                         :shape "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delegate common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delegate-id :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or member-type common-lisp:null)
                         :accessor struct-shape-delegate-type :shape
                         "MemberType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delegate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delegate
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'delegate 'make-delegate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delegate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delegate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delegate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-access-control-rule-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-delete-access-control-rule-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or access-control-rule-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-access-control-rule-request-name
                         :shape "AccessControlRuleName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-access-control-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-access-control-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-access-control-rule-request
                    'make-delete-access-control-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-access-control-rule-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-access-control-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-access-control-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-access-control-rule-response
                    'make-delete-access-control-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-alias-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-delete-alias-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entity-id is required") :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor struct-shape-delete-alias-request-entity-id
                         :shape "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alias :initarg :alias :initform
                         (common-lisp:error ":alias is required") :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor struct-shape-delete-alias-request-alias
                         :shape "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-alias-request 'make-delete-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-alias-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-alias-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-alias-response 'make-delete-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-availability-configuration-request
                       common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-delete-availability-configuration-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-delete-availability-configuration-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-availability-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-availability-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-availability-configuration-request
                    'make-delete-availability-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-availability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-availability-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-availability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-availability-configuration-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-availability-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-availability-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-availability-configuration-response
                    'make-delete-availability-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-availability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-availability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-availability-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-email-monitoring-configuration-request
                       common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-delete-email-monitoring-configuration-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-email-monitoring-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-email-monitoring-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-email-monitoring-configuration-request
                    'make-delete-email-monitoring-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-monitoring-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-monitoring-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-monitoring-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-email-monitoring-configuration-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-email-monitoring-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-email-monitoring-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-email-monitoring-configuration-response
                    'make-delete-email-monitoring-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-monitoring-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-monitoring-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-monitoring-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-group-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-delete-group-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-id :initarg :group-id :initform
                         (common-lisp:error ":group-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor struct-shape-delete-group-request-group-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-group-request 'make-delete-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-group-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-group-response 'make-delete-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-impersonation-role-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-delete-impersonation-role-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (impersonation-role-id :initarg :impersonation-role-id
                         :initform
                         (common-lisp:error
                          ":impersonation-role-id is required")
                         :type
                         (common-lisp:or impersonation-role-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-impersonation-role-request-impersonation-role-id
                         :shape "ImpersonationRoleId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-impersonation-role-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-impersonation-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-impersonation-role-request
                    'make-delete-impersonation-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-impersonation-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-impersonation-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-impersonation-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-impersonation-role-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-impersonation-role-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-impersonation-role-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-impersonation-role-response
                    'make-delete-impersonation-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-impersonation-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-impersonation-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-impersonation-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mailbox-permissions-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-delete-mailbox-permissions-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entity-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-delete-mailbox-permissions-request-entity-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grantee-id :initarg :grantee-id :initform
                         (common-lisp:error ":grantee-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-delete-mailbox-permissions-request-grantee-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-mailbox-permissions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-mailbox-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-mailbox-permissions-request
                    'make-delete-mailbox-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mailbox-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mailbox-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-id))
      (common-lisp:list
       (common-lisp:cons "GranteeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mailbox-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mailbox-permissions-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-mailbox-permissions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-mailbox-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-mailbox-permissions-response
                    'make-delete-mailbox-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mailbox-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mailbox-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mailbox-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mobile-device-access-override-request
                       common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-delete-mobile-device-access-override-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-delete-mobile-device-access-override-request-user-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-id :initarg :device-id :initform
                         (common-lisp:error ":device-id is required") :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-delete-mobile-device-access-override-request-device-id
                         :shape "DeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-mobile-device-access-override-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-mobile-device-access-override-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-mobile-device-access-override-request
                    'make-delete-mobile-device-access-override-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-override-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mobile-device-access-override-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-mobile-device-access-override-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-mobile-device-access-override-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-mobile-device-access-override-response
                    'make-delete-mobile-device-access-override-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-override-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-override-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-override-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mobile-device-access-rule-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-delete-mobile-device-access-rule-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mobile-device-access-rule-id :initarg
                         :mobile-device-access-rule-id :initform
                         (common-lisp:error
                          ":mobile-device-access-rule-id is required")
                         :type
                         (common-lisp:or mobile-device-access-rule-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-mobile-device-access-rule-request-mobile-device-access-rule-id
                         :shape "MobileDeviceAccessRuleId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-mobile-device-access-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-mobile-device-access-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-mobile-device-access-rule-request
                    'make-delete-mobile-device-access-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mobile-device-access-rule-id))
      (common-lisp:list
       (common-lisp:cons "MobileDeviceAccessRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mobile-device-access-rule-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-mobile-device-access-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-mobile-device-access-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-mobile-device-access-rule-response
                    'make-delete-mobile-device-access-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-organization-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-client-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-organization-request-client-token
                         :shape "IdempotencyClientToken" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-delete-organization-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-directory :initarg :delete-directory :initform
                         (common-lisp:error ":delete-directory is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-delete-organization-request-delete-directory
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force-delete :initarg :force-delete :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-delete-organization-request-force-delete
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-organization-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-organization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-organization-request
                    'make-delete-organization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-directory))
      (common-lisp:list
       (common-lisp:cons "DeleteDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-delete))
      (common-lisp:list
       (common-lisp:cons "ForceDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-organization-response common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-delete-organization-response-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-organization-response-state :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-organization-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-organization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-organization-response
                    'make-delete-organization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-request-resource-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-request 'make-delete-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-response 'make-delete-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-retention-policy-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-delete-retention-policy-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or short-string common-lisp:null)
                         :accessor
                         struct-shape-delete-retention-policy-request-id :shape
                         "ShortString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-retention-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-retention-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-retention-policy-request
                    'make-delete-retention-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-retention-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-retention-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-retention-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-retention-policy-response
                    'make-delete-retention-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-delete-user-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor struct-shape-delete-user-request-user-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-response 'make-delete-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-from-work-mail-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-deregister-from-work-mail-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entity-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-deregister-from-work-mail-request-entity-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-from-work-mail-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-from-work-mail-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-from-work-mail-request
                    'make-deregister-from-work-mail-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-from-work-mail-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-from-work-mail-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-from-work-mail-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-from-work-mail-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-from-work-mail-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-from-work-mail-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-from-work-mail-response
                    'make-deregister-from-work-mail-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-from-work-mail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-from-work-mail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-from-work-mail-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-mail-domain-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-deregister-mail-domain-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or work-mail-domain-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-deregister-mail-domain-request-domain-name
                         :shape "WorkMailDomainName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-mail-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-mail-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-mail-domain-request
                    'make-deregister-mail-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-mail-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-mail-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-mail-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-mail-domain-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-mail-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-mail-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-mail-domain-response
                    'make-deregister-mail-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-mail-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-mail-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-mail-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-email-monitoring-configuration-request
                       common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-describe-email-monitoring-configuration-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-email-monitoring-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-email-monitoring-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-email-monitoring-configuration-request
                    'make-describe-email-monitoring-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-email-monitoring-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-email-monitoring-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-email-monitoring-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-email-monitoring-configuration-response
                       common-lisp:nil
                       ((role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-email-monitoring-configuration-response-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-arn :initarg :log-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-email-monitoring-configuration-response-log-group-arn
                         :shape "LogGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-email-monitoring-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-email-monitoring-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-email-monitoring-configuration-response
                    'make-describe-email-monitoring-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-email-monitoring-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-email-monitoring-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "LogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-email-monitoring-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-entity-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-describe-entity-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email :initarg :email :initform
                         (common-lisp:error ":email is required") :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor struct-shape-describe-entity-request-email
                         :shape "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-entity-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-entity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-entity-request 'make-describe-entity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-entity-response common-lisp:nil
                       ((entity-id :initarg :entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor
                         struct-shape-describe-entity-response-entity-id :shape
                         "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-entity-response-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or entity-type common-lisp:null)
                         :accessor struct-shape-describe-entity-response-type
                         :shape "EntityType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-entity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-entity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-entity-response 'make-describe-entity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-group-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-describe-group-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-id :initarg :group-id :initform
                         (common-lisp:error ":group-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor struct-shape-describe-group-request-group-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-group-request 'make-describe-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-group-response common-lisp:nil
                       ((group-id :initarg :group-id :initform common-lisp:nil
                         :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor
                         struct-shape-describe-group-response-group-id :shape
                         "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-describe-group-response-name :shape
                         "GroupName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (email :initarg :email :initform common-lisp:nil :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor struct-shape-describe-group-response-email
                         :shape "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or entity-state common-lisp:null)
                         :accessor struct-shape-describe-group-response-state
                         :shape "EntityState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled-date :initarg :enabled-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-group-response-enabled-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disabled-date :initarg :disabled-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-group-response-disabled-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hidden-from-global-address-list :initarg
                         :hidden-from-global-address-list :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-group-response-hidden-from-global-address-list
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-group-response 'make-describe-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-date))
      (common-lisp:list
       (common-lisp:cons "EnabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-date))
      (common-lisp:list
       (common-lisp:cons "DisabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hidden-from-global-address-list))
      (common-lisp:list
       (common-lisp:cons "HiddenFromGlobalAddressList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-inbound-dmarc-settings-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-describe-inbound-dmarc-settings-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-inbound-dmarc-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-inbound-dmarc-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-inbound-dmarc-settings-request
                    'make-describe-inbound-dmarc-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-dmarc-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-dmarc-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-dmarc-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-inbound-dmarc-settings-response common-lisp:nil
                       ((enforced :initarg :enforced :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-describe-inbound-dmarc-settings-response-enforced
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-inbound-dmarc-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-inbound-dmarc-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-inbound-dmarc-settings-response
                    'make-describe-inbound-dmarc-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-dmarc-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-dmarc-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforced))
      (common-lisp:list
       (common-lisp:cons "Enforced"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-dmarc-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-mailbox-export-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or mailbox-export-job-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-mailbox-export-job-request-job-id
                         :shape "MailboxExportJobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-describe-mailbox-export-job-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-mailbox-export-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-mailbox-export-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-mailbox-export-job-request
                    'make-describe-mailbox-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-mailbox-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-mailbox-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-mailbox-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-mailbox-export-job-response common-lisp:nil
                       ((entity-id :initarg :entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor
                         struct-shape-describe-mailbox-export-job-response-entity-id
                         :shape "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-mailbox-export-job-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-mailbox-export-job-response-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-mailbox-export-job-response-kms-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         struct-shape-describe-mailbox-export-job-response-s3bucket-name
                         :shape "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3prefix :initarg :s3prefix :initform common-lisp:nil
                         :type (common-lisp:or s3object-key common-lisp:null)
                         :accessor
                         struct-shape-describe-mailbox-export-job-response-s3prefix
                         :shape "S3ObjectKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3path :initarg :s3path :initform common-lisp:nil
                         :type (common-lisp:or s3object-key common-lisp:null)
                         :accessor
                         struct-shape-describe-mailbox-export-job-response-s3path
                         :shape "S3ObjectKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-progress :initarg :estimated-progress
                         :initform common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-describe-mailbox-export-job-response-estimated-progress
                         :shape "Percentage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or mailbox-export-job-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-mailbox-export-job-response-state
                         :shape "MailboxExportJobState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-info :initarg :error-info :initform
                         common-lisp:nil :type
                         (common-lisp:or mailbox-export-error-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-mailbox-export-job-response-error-info
                         :shape "MailboxExportErrorInfo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-mailbox-export-job-response-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-mailbox-export-job-response-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-mailbox-export-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-mailbox-export-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-mailbox-export-job-response
                    'make-describe-mailbox-export-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-mailbox-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-mailbox-export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "S3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3path))
      (common-lisp:list
       (common-lisp:cons "S3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-progress))
      (common-lisp:list
       (common-lisp:cons "EstimatedProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "ErrorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-mailbox-export-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-organization-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-organization-request
                    'make-describe-organization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-response common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-response-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or organization-name common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-response-alias
                         :shape "OrganizationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-organization-response-state
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (directory-id :initarg :directory-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-organization-response-directory-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (directory-type :initarg :directory-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-organization-response-directory-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-mail-domain :initarg :default-mail-domain
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-organization-response-default-mail-domain
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completed-date :initarg :completed-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-organization-response-completed-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-organization-response-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-response-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (migration-admin :initarg :migration-admin :initform
                         common-lisp:nil :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-response-migration-admin
                         :shape "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interoperability-enabled :initarg
                         :interoperability-enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-response-interoperability-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-organization-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-organization-response
                    'make-describe-organization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-type))
      (common-lisp:list
       (common-lisp:cons "DirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-mail-domain))
      (common-lisp:list
       (common-lisp:cons "DefaultMailDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-date))
      (common-lisp:list
       (common-lisp:cons "CompletedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-admin))
      (common-lisp:list
       (common-lisp:cons "MigrationAdmin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'interoperability-enabled))
      (common-lisp:list
       (common-lisp:cons "InteroperabilityEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-describe-resource-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-describe-resource-request-resource-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-resource-request
                    'make-describe-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-response common-lisp:nil
                       ((resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-describe-resource-response-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email :initarg :email :initform common-lisp:nil :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor
                         struct-shape-describe-resource-response-email :shape
                         "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-describe-resource-response-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-describe-resource-response-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (booking-options :initarg :booking-options :initform
                         common-lisp:nil :type
                         (common-lisp:or booking-options common-lisp:null)
                         :accessor
                         struct-shape-describe-resource-response-booking-options
                         :shape "BookingOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or entity-state common-lisp:null)
                         :accessor
                         struct-shape-describe-resource-response-state :shape
                         "EntityState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enabled-date :initarg :enabled-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-resource-response-enabled-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disabled-date :initarg :disabled-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-resource-response-disabled-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-describe-resource-response-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hidden-from-global-address-list :initarg
                         :hidden-from-global-address-list :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-resource-response-hidden-from-global-address-list
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-resource-response
                    'make-describe-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'booking-options))
      (common-lisp:list
       (common-lisp:cons "BookingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-date))
      (common-lisp:list
       (common-lisp:cons "EnabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-date))
      (common-lisp:list
       (common-lisp:cons "DisabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hidden-from-global-address-list))
      (common-lisp:list
       (common-lisp:cons "HiddenFromGlobalAddressList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-describe-user-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor struct-shape-describe-user-request-user-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-user-request 'make-describe-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-response common-lisp:nil
                       ((user-id :initarg :user-id :initform common-lisp:nil
                         :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor struct-shape-describe-user-response-user-id
                         :shape "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         struct-shape-describe-user-response-name :shape
                         "UserName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (email :initarg :email :initform common-lisp:nil :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor struct-shape-describe-user-response-email
                         :shape "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor
                         struct-shape-describe-user-response-display-name
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or entity-state common-lisp:null)
                         :accessor struct-shape-describe-user-response-state
                         :shape "EntityState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-role :initarg :user-role :initform
                         common-lisp:nil :type
                         (common-lisp:or user-role common-lisp:null) :accessor
                         struct-shape-describe-user-response-user-role :shape
                         "UserRole" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enabled-date :initarg :enabled-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-user-response-enabled-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disabled-date :initarg :disabled-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-user-response-disabled-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mailbox-provisioned-date :initarg
                         :mailbox-provisioned-date :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-user-response-mailbox-provisioned-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mailbox-deprovisioned-date :initarg
                         :mailbox-deprovisioned-date :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-user-response-mailbox-deprovisioned-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor
                         struct-shape-describe-user-response-first-name :shape
                         "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor
                         struct-shape-describe-user-response-last-name :shape
                         "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hidden-from-global-address-list :initarg
                         :hidden-from-global-address-list :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-user-response-hidden-from-global-address-list
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (initials :initarg :initials :initform common-lisp:nil
                         :type (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-describe-user-response-initials
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (telephone :initarg :telephone :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor
                         struct-shape-describe-user-response-telephone :shape
                         "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (street :initarg :street :initform common-lisp:nil
                         :type (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-describe-user-response-street
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-title :initarg :job-title :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor
                         struct-shape-describe-user-response-job-title :shape
                         "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (city :initarg :city :initform common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-describe-user-response-city
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (company :initarg :company :initform common-lisp:nil
                         :type (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-describe-user-response-company
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (zip-code :initarg :zip-code :initform common-lisp:nil
                         :type (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-describe-user-response-zip-code
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (department :initarg :department :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor
                         struct-shape-describe-user-response-department :shape
                         "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (country :initarg :country :initform common-lisp:nil
                         :type (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-describe-user-response-country
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (office :initarg :office :initform common-lisp:nil
                         :type (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-describe-user-response-office
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-user-response 'make-describe-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role))
      (common-lisp:list
       (common-lisp:cons "UserRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-date))
      (common-lisp:list
       (common-lisp:cons "EnabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-date))
      (common-lisp:list
       (common-lisp:cons "DisabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mailbox-provisioned-date))
      (common-lisp:list
       (common-lisp:cons "MailboxProvisionedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mailbox-deprovisioned-date))
      (common-lisp:list
       (common-lisp:cons "MailboxDeprovisionedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hidden-from-global-address-list))
      (common-lisp:list
       (common-lisp:cons "HiddenFromGlobalAddressList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initials))
      (common-lisp:list
       (common-lisp:cons "Initials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telephone))
      (common-lisp:list
       (common-lisp:cons "Telephone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street))
      (common-lisp:list
       (common-lisp:cons "Street"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-title))
      (common-lisp:list
       (common-lisp:cons "JobTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'company))
      (common-lisp:list
       (common-lisp:cons "Company"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zip-code))
      (common-lisp:list
       (common-lisp:cons "ZipCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'department))
      (common-lisp:list
       (common-lisp:cons "Department"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'office))
      (common-lisp:list
       (common-lisp:cons "Office"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype device-id () 'common-lisp:string)
(common-lisp:deftype device-model () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-model-list ()
   '(trivial-types:proper-list device-model))
 (common-lisp:defun make-device-model-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-model))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-operating-system () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-operating-system-list ()
   '(trivial-types:proper-list device-operating-system))
 (common-lisp:defun make-device-operating-system-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-operating-system))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-type-list ()
   '(trivial-types:proper-list device-type))
 (common-lisp:defun make-device-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-user-agent () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-user-agent-list ()
   '(trivial-types:proper-list device-user-agent))
 (common-lisp:defun make-device-user-agent-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-user-agent))
   aws-sdk/generator/shape::members))
(common-lisp:deftype directory-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition directory-in-use-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'directory-in-use-exception
                    'directory-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition directory-service-authentication-failed-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-service-authentication-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'directory-service-authentication-failed-exception
                    'directory-service-authentication-failed-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition directory-unavailable-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'directory-unavailable-exception
                    'directory-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defclass disassociate-delegate-from-resource-request
                       common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-delegate-from-resource-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-disassociate-delegate-from-resource-request-resource-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entity-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-disassociate-delegate-from-resource-request-entity-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-delegate-from-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-delegate-from-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-delegate-from-resource-request
                    'make-disassociate-delegate-from-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegate-from-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegate-from-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegate-from-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-delegate-from-resource-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-delegate-from-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-delegate-from-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-delegate-from-resource-response
                    'make-disassociate-delegate-from-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegate-from-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegate-from-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegate-from-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-member-from-group-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-member-from-group-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-id :initarg :group-id :initform
                         (common-lisp:error ":group-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-disassociate-member-from-group-request-group-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (member-id :initarg :member-id :initform
                         (common-lisp:error ":member-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-disassociate-member-from-group-request-member-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-member-from-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-member-from-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-member-from-group-request
                    'make-disassociate-member-from-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-from-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-from-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-from-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-member-from-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-member-from-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-member-from-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-member-from-group-response
                    'make-disassociate-member-from-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-from-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-from-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-from-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dns-record common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dns-record-type :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (hostname :initarg :hostname :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dns-record-hostname :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dns-record-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dns-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dns-record
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dns-record 'make-dns-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dns-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dns-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "Hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dns-record))
   common-lisp:nil))
(common-lisp:deftype dns-record-verification-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dns-records () '(trivial-types:proper-list dns-record))
 (common-lisp:defun make-dns-records
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dns-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass domain common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor struct-shape-domain-domain-name :shape
                         "DomainName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hosted-zone-id :initarg :hosted-zone-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hosted-zone-id common-lisp:null)
                         :accessor struct-shape-domain-hosted-zone-id :shape
                         "HostedZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'domain 'make-domain))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain))
   common-lisp:nil))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domains () '(trivial-types:proper-list domain))
 (common-lisp:defun make-domains
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain))
   aws-sdk/generator/shape::members))
(common-lisp:deftype email-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition email-address-in-use-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       email-address-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'email-address-in-use-exception
                    'email-address-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition entity-already-registered-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-already-registered-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entity-already-registered-exception
                    'entity-already-registered-exception-message)))
(common-lisp:deftype entity-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition entity-not-found-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entity-not-found-exception
                    'entity-not-found-exception-message)))
(common-lisp:deftype entity-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition entity-state-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entity-state-exception 'entity-state-exception-message)))
(common-lisp:deftype entity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ews-availability-provider common-lisp:nil
                       ((ews-endpoint :initarg :ews-endpoint :initform
                         (common-lisp:error ":ews-endpoint is required") :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-ews-availability-provider-ews-endpoint
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ews-username :initarg :ews-username :initform
                         (common-lisp:error ":ews-username is required") :type
                         (common-lisp:or external-user-name common-lisp:null)
                         :accessor
                         struct-shape-ews-availability-provider-ews-username
                         :shape "ExternalUserName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ews-password :initarg :ews-password :initform
                         (common-lisp:error ":ews-password is required") :type
                         (common-lisp:or password common-lisp:null) :accessor
                         struct-shape-ews-availability-provider-ews-password
                         :shape "Password" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ews-availability-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ews-availability-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ews-availability-provider
                    'make-ews-availability-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ews-availability-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ews-availability-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-endpoint))
      (common-lisp:list
       (common-lisp:cons "EwsEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-username))
      (common-lisp:list
       (common-lisp:cons "EwsUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-password))
      (common-lisp:list
       (common-lisp:cons "EwsPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ews-availability-provider))
   common-lisp:nil))
(common-lisp:deftype expires-in () 'common-lisp:integer)
(common-lisp:deftype external-user-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass folder-configuration common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or folder-name common-lisp:null)
                         :accessor struct-shape-folder-configuration-name
                         :shape "FolderName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or retention-action common-lisp:null)
                         :accessor struct-shape-folder-configuration-action
                         :shape "RetentionAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (period :initarg :period :initform common-lisp:nil
                         :type
                         (common-lisp:or retention-period common-lisp:null)
                         :accessor struct-shape-folder-configuration-period
                         :shape "RetentionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-folder-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'folder-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'folder-configuration 'make-folder-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input folder-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input folder-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input folder-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype folder-configurations ()
   '(trivial-types:proper-list folder-configuration))
 (common-lisp:defun make-folder-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list folder-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype folder-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-access-control-effect-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-get-access-control-effect-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address :initarg :ip-address :initform
                         (common-lisp:error ":ip-address is required") :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         struct-shape-get-access-control-effect-request-ip-address
                         :shape "IpAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or access-control-rule-action
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-access-control-effect-request-action
                         :shape "AccessControlRuleAction" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform common-lisp:nil
                         :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor
                         struct-shape-get-access-control-effect-request-user-id
                         :shape "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (impersonation-role-id :initarg :impersonation-role-id
                         :initform common-lisp:nil :type
                         (common-lisp:or impersonation-role-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-access-control-effect-request-impersonation-role-id
                         :shape "ImpersonationRoleId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-access-control-effect-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-access-control-effect-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-access-control-effect-request
                    'make-get-access-control-effect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-control-effect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-control-effect-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-control-effect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-control-effect-response common-lisp:nil
                       ((effect :initarg :effect :initform common-lisp:nil
                         :type
                         (common-lisp:or access-control-rule-effect
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-access-control-effect-response-effect
                         :shape "AccessControlRuleEffect" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (matched-rules :initarg :matched-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or access-control-rule-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-access-control-effect-response-matched-rules
                         :shape "AccessControlRuleNameList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-access-control-effect-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-access-control-effect-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-access-control-effect-response
                    'make-get-access-control-effect-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-control-effect-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-control-effect-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched-rules))
      (common-lisp:list
       (common-lisp:cons "MatchedRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-control-effect-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-default-retention-policy-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-get-default-retention-policy-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-default-retention-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-default-retention-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-default-retention-policy-request
                    'make-get-default-retention-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-default-retention-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-default-retention-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-default-retention-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-default-retention-policy-response common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or short-string common-lisp:null)
                         :accessor
                         struct-shape-get-default-retention-policy-response-id
                         :shape "ShortString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or short-string common-lisp:null)
                         :accessor
                         struct-shape-get-default-retention-policy-response-name
                         :shape "ShortString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-default-retention-policy-response-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (folder-configurations :initarg :folder-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or folder-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-default-retention-policy-response-folder-configurations
                         :shape "FolderConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-default-retention-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-default-retention-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-default-retention-policy-response
                    'make-get-default-retention-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-default-retention-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-default-retention-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'folder-configurations))
      (common-lisp:list
       (common-lisp:cons "FolderConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-default-retention-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-impersonation-role-effect-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-get-impersonation-role-effect-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (impersonation-role-id :initarg :impersonation-role-id
                         :initform
                         (common-lisp:error
                          ":impersonation-role-id is required")
                         :type
                         (common-lisp:or impersonation-role-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-impersonation-role-effect-request-impersonation-role-id
                         :shape "ImpersonationRoleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-user :initarg :target-user :initform
                         (common-lisp:error ":target-user is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-get-impersonation-role-effect-request-target-user
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-impersonation-role-effect-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-impersonation-role-effect-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-impersonation-role-effect-request
                    'make-get-impersonation-role-effect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-effect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-effect-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-user))
      (common-lisp:list
       (common-lisp:cons "TargetUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-effect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-impersonation-role-effect-response common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or impersonation-role-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-impersonation-role-effect-response-type
                         :shape "ImpersonationRoleType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (effect :initarg :effect :initform common-lisp:nil
                         :type (common-lisp:or access-effect common-lisp:null)
                         :accessor
                         struct-shape-get-impersonation-role-effect-response-effect
                         :shape "AccessEffect" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (matched-rules :initarg :matched-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or impersonation-matched-rule-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-impersonation-role-effect-response-matched-rules
                         :shape "ImpersonationMatchedRuleList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-impersonation-role-effect-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-impersonation-role-effect-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-impersonation-role-effect-response
                    'make-get-impersonation-role-effect-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-effect-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-effect-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched-rules))
      (common-lisp:list
       (common-lisp:cons "MatchedRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-effect-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-impersonation-role-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-get-impersonation-role-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (impersonation-role-id :initarg :impersonation-role-id
                         :initform
                         (common-lisp:error
                          ":impersonation-role-id is required")
                         :type
                         (common-lisp:or impersonation-role-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-impersonation-role-request-impersonation-role-id
                         :shape "ImpersonationRoleId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-impersonation-role-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-impersonation-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-impersonation-role-request
                    'make-get-impersonation-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-impersonation-role-response common-lisp:nil
                       ((impersonation-role-id :initarg :impersonation-role-id
                         :initform common-lisp:nil :type
                         (common-lisp:or impersonation-role-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-impersonation-role-response-impersonation-role-id
                         :shape "ImpersonationRoleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or impersonation-role-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-impersonation-role-response-name
                         :shape "ImpersonationRoleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or impersonation-role-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-impersonation-role-response-type
                         :shape "ImpersonationRoleType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or impersonation-role-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-impersonation-role-response-description
                         :shape "ImpersonationRoleDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or impersonation-rule-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-impersonation-role-response-rules
                         :shape "ImpersonationRuleList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (date-created :initarg :date-created :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-impersonation-role-response-date-created
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-modified :initarg :date-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-impersonation-role-response-date-modified
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-impersonation-role-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-impersonation-role-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-impersonation-role-response
                    'make-get-impersonation-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mail-domain-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-get-mail-domain-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or work-mail-domain-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-mail-domain-request-domain-name
                         :shape "WorkMailDomainName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mail-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mail-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mail-domain-request 'make-get-mail-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mail-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mail-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mail-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mail-domain-response common-lisp:nil
                       ((records :initarg :records :initform common-lisp:nil
                         :type (common-lisp:or dns-records common-lisp:null)
                         :accessor
                         struct-shape-get-mail-domain-response-records :shape
                         "DnsRecords" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-test-domain :initarg :is-test-domain :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-mail-domain-response-is-test-domain
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-default :initarg :is-default :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-mail-domain-response-is-default
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ownership-verification-status :initarg
                         :ownership-verification-status :initform
                         common-lisp:nil :type
                         (common-lisp:or dns-record-verification-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-mail-domain-response-ownership-verification-status
                         :shape "DnsRecordVerificationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dkim-verification-status :initarg
                         :dkim-verification-status :initform common-lisp:nil
                         :type
                         (common-lisp:or dns-record-verification-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-mail-domain-response-dkim-verification-status
                         :shape "DnsRecordVerificationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mail-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mail-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mail-domain-response 'make-get-mail-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mail-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mail-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "Records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-test-domain))
      (common-lisp:list
       (common-lisp:cons "IsTestDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ownership-verification-status))
      (common-lisp:list
       (common-lisp:cons "OwnershipVerificationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dkim-verification-status))
      (common-lisp:list
       (common-lisp:cons "DkimVerificationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mail-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mailbox-details-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-get-mailbox-details-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-get-mailbox-details-request-user-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mailbox-details-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mailbox-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mailbox-details-request
                    'make-get-mailbox-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mailbox-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mailbox-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mailbox-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mailbox-details-response common-lisp:nil
                       ((mailbox-quota :initarg :mailbox-quota :initform
                         common-lisp:nil :type
                         (common-lisp:or mailbox-quota common-lisp:null)
                         :accessor
                         struct-shape-get-mailbox-details-response-mailbox-quota
                         :shape "MailboxQuota" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mailbox-size :initarg :mailbox-size :initform
                         common-lisp:nil :type
                         (common-lisp:or mailbox-size common-lisp:null)
                         :accessor
                         struct-shape-get-mailbox-details-response-mailbox-size
                         :shape "MailboxSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mailbox-details-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mailbox-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mailbox-details-response
                    'make-get-mailbox-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mailbox-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mailbox-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mailbox-quota))
      (common-lisp:list
       (common-lisp:cons "MailboxQuota"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mailbox-size))
      (common-lisp:list
       (common-lisp:cons "MailboxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mailbox-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mobile-device-access-effect-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-get-mobile-device-access-effect-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-type :initarg :device-type :initform
                         common-lisp:nil :type
                         (common-lisp:or device-type common-lisp:null)
                         :accessor
                         struct-shape-get-mobile-device-access-effect-request-device-type
                         :shape "DeviceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-model :initarg :device-model :initform
                         common-lisp:nil :type
                         (common-lisp:or device-model common-lisp:null)
                         :accessor
                         struct-shape-get-mobile-device-access-effect-request-device-model
                         :shape "DeviceModel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-operating-system :initarg
                         :device-operating-system :initform common-lisp:nil
                         :type
                         (common-lisp:or device-operating-system
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-mobile-device-access-effect-request-device-operating-system
                         :shape "DeviceOperatingSystem" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-user-agent :initarg :device-user-agent
                         :initform common-lisp:nil :type
                         (common-lisp:or device-user-agent common-lisp:null)
                         :accessor
                         struct-shape-get-mobile-device-access-effect-request-device-user-agent
                         :shape "DeviceUserAgent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mobile-device-access-effect-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-mobile-device-access-effect-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mobile-device-access-effect-request
                    'make-get-mobile-device-access-effect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-effect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-effect-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "DeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-model))
      (common-lisp:list
       (common-lisp:cons "DeviceModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-operating-system))
      (common-lisp:list
       (common-lisp:cons "DeviceOperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-user-agent))
      (common-lisp:list
       (common-lisp:cons "DeviceUserAgent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-effect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mobile-device-access-effect-response common-lisp:nil
                       ((effect :initarg :effect :initform common-lisp:nil
                         :type
                         (common-lisp:or mobile-device-access-rule-effect
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-mobile-device-access-effect-response-effect
                         :shape "MobileDeviceAccessRuleEffect" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (matched-rules :initarg :matched-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or mobile-device-access-matched-rule-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-mobile-device-access-effect-response-matched-rules
                         :shape "MobileDeviceAccessMatchedRuleList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mobile-device-access-effect-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-mobile-device-access-effect-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mobile-device-access-effect-response
                    'make-get-mobile-device-access-effect-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-effect-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-effect-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched-rules))
      (common-lisp:list
       (common-lisp:cons "MatchedRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-effect-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mobile-device-access-override-request
                       common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-get-mobile-device-access-override-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-get-mobile-device-access-override-request-user-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-id :initarg :device-id :initform
                         (common-lisp:error ":device-id is required") :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-get-mobile-device-access-override-request-device-id
                         :shape "DeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mobile-device-access-override-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-mobile-device-access-override-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mobile-device-access-override-request
                    'make-get-mobile-device-access-override-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-override-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mobile-device-access-override-response
                       common-lisp:nil
                       ((user-id :initarg :user-id :initform common-lisp:nil
                         :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor
                         struct-shape-get-mobile-device-access-override-response-user-id
                         :shape "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-id :initarg :device-id :initform
                         common-lisp:nil :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-get-mobile-device-access-override-response-device-id
                         :shape "DeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (effect :initarg :effect :initform common-lisp:nil
                         :type
                         (common-lisp:or mobile-device-access-rule-effect
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-mobile-device-access-override-response-effect
                         :shape "MobileDeviceAccessRuleEffect" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or mobile-device-access-rule-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-mobile-device-access-override-response-description
                         :shape "MobileDeviceAccessRuleDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (date-created :initarg :date-created :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-mobile-device-access-override-response-date-created
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-modified :initarg :date-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-mobile-device-access-override-response-date-modified
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mobile-device-access-override-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-mobile-device-access-override-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mobile-device-access-override-response
                    'make-get-mobile-device-access-override-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-override-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-override-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-override-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass group common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor struct-shape-group-id :shape
                         "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email :initarg :email :initform common-lisp:nil :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor struct-shape-group-email :shape
                         "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-group-name :shape "GroupName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or entity-state common-lisp:null)
                         :accessor struct-shape-group-state :shape
                         "EntityState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enabled-date :initarg :enabled-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-group-enabled-date :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (disabled-date :initarg :disabled-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-group-disabled-date :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'group 'make-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-date))
      (common-lisp:list
       (common-lisp:cons "EnabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-date))
      (common-lisp:list
       (common-lisp:cons "DisabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass group-identifier common-lisp:nil
                       ((group-id :initarg :group-id :initform common-lisp:nil
                         :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor struct-shape-group-identifier-group-id
                         :shape "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-group-identifier-group-name :shape
                         "GroupName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-group-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'group-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'group-identifier 'make-group-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-identifiers ()
   '(trivial-types:proper-list group-identifier))
 (common-lisp:defun make-group-identifiers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype groups () '(trivial-types:proper-list group))
 (common-lisp:defun make-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype hosted-zone-id () 'common-lisp:string)
(common-lisp:deftype idempotency-client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass impersonation-matched-rule common-lisp:nil
                       ((impersonation-rule-id :initarg :impersonation-rule-id
                         :initform common-lisp:nil :type
                         (common-lisp:or impersonation-rule-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-impersonation-matched-rule-impersonation-rule-id
                         :shape "ImpersonationRuleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or impersonation-rule-name
                                         common-lisp:null)
                         :accessor struct-shape-impersonation-matched-rule-name
                         :shape "ImpersonationRuleName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-impersonation-matched-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'impersonation-matched-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'impersonation-matched-rule
                    'make-impersonation-matched-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          impersonation-matched-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          impersonation-matched-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-rule-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          impersonation-matched-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype impersonation-matched-rule-list ()
   '(trivial-types:proper-list impersonation-matched-rule))
 (common-lisp:defun make-impersonation-matched-rule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            impersonation-matched-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass impersonation-role common-lisp:nil
                       ((impersonation-role-id :initarg :impersonation-role-id
                         :initform common-lisp:nil :type
                         (common-lisp:or impersonation-role-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-impersonation-role-impersonation-role-id
                         :shape "ImpersonationRoleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or impersonation-role-name
                                         common-lisp:null)
                         :accessor struct-shape-impersonation-role-name :shape
                         "ImpersonationRoleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or impersonation-role-type
                                         common-lisp:null)
                         :accessor struct-shape-impersonation-role-type :shape
                         "ImpersonationRoleType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-created :initarg :date-created :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-impersonation-role-date-created :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (date-modified :initarg :date-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-impersonation-role-date-modified :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-impersonation-role
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'impersonation-role
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'impersonation-role 'make-impersonation-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input impersonation-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input impersonation-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input impersonation-role))
   common-lisp:nil))
(common-lisp:deftype impersonation-role-description () 'common-lisp:string)
(common-lisp:deftype impersonation-role-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype impersonation-role-id-list ()
   '(trivial-types:proper-list impersonation-role-id))
 (common-lisp:defun make-impersonation-role-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list impersonation-role-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype impersonation-role-list ()
   '(trivial-types:proper-list impersonation-role))
 (common-lisp:defun make-impersonation-role-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list impersonation-role))
   aws-sdk/generator/shape::members))
(common-lisp:deftype impersonation-role-name () 'common-lisp:string)
(common-lisp:deftype impersonation-role-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass impersonation-rule common-lisp:nil
                       ((impersonation-rule-id :initarg :impersonation-rule-id
                         :initform
                         (common-lisp:error
                          ":impersonation-rule-id is required")
                         :type
                         (common-lisp:or impersonation-rule-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-impersonation-rule-impersonation-rule-id
                         :shape "ImpersonationRuleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or impersonation-rule-name
                                         common-lisp:null)
                         :accessor struct-shape-impersonation-rule-name :shape
                         "ImpersonationRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or impersonation-rule-description
                                         common-lisp:null)
                         :accessor struct-shape-impersonation-rule-description
                         :shape "ImpersonationRuleDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (effect :initarg :effect :initform
                         (common-lisp:error ":effect is required") :type
                         (common-lisp:or access-effect common-lisp:null)
                         :accessor struct-shape-impersonation-rule-effect
                         :shape "AccessEffect" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-users :initarg :target-users :initform
                         common-lisp:nil :type
                         (common-lisp:or target-users common-lisp:null)
                         :accessor struct-shape-impersonation-rule-target-users
                         :shape "TargetUsers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-target-users :initarg :not-target-users :initform
                         common-lisp:nil :type
                         (common-lisp:or target-users common-lisp:null)
                         :accessor
                         struct-shape-impersonation-rule-not-target-users
                         :shape "TargetUsers" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-impersonation-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'impersonation-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'impersonation-rule 'make-impersonation-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input impersonation-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input impersonation-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-rule-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-users))
      (common-lisp:list
       (common-lisp:cons "TargetUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-target-users))
      (common-lisp:list
       (common-lisp:cons "NotTargetUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input impersonation-rule))
   common-lisp:nil))
(common-lisp:deftype impersonation-rule-description () 'common-lisp:string)
(common-lisp:deftype impersonation-rule-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype impersonation-rule-list ()
   '(trivial-types:proper-list impersonation-rule))
 (common-lisp:defun make-impersonation-rule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list impersonation-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype impersonation-rule-name () 'common-lisp:string)
(common-lisp:deftype impersonation-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-configuration-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-configuration-exception
                    'invalid-configuration-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-custom-ses-configuration-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-custom-ses-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-custom-ses-configuration-exception
                    'invalid-custom-ses-configuration-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-password-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-password-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-password-exception
                    'invalid-password-exception-message)))
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:deftype ip-range () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ip-range-list () '(trivial-types:proper-list ip-range))
 (common-lisp:defun make-ip-range-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype jobs () '(trivial-types:proper-list mailbox-export-job))
 (common-lisp:defun make-jobs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mailbox-export-job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:deftype lambda-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lambda-availability-provider common-lisp:nil
                       ((lambda-arn :initarg :lambda-arn :initform
                         (common-lisp:error ":lambda-arn is required") :type
                         (common-lisp:or lambda-arn common-lisp:null) :accessor
                         struct-shape-lambda-availability-provider-lambda-arn
                         :shape "LambdaArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-availability-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-availability-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lambda-availability-provider
                    'make-lambda-availability-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-availability-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-availability-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-arn))
      (common-lisp:list
       (common-lisp:cons "LambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-availability-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-access-control-rules-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-list-access-control-rules-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-access-control-rules-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-access-control-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-access-control-rules-request
                    'make-list-access-control-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-access-control-rules-response common-lisp:nil
                       ((rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or access-control-rules-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-access-control-rules-response-rules
                         :shape "AccessControlRulesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-access-control-rules-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-access-control-rules-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-access-control-rules-response
                    'make-list-access-control-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-aliases-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-list-aliases-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entity-id is required") :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor struct-shape-list-aliases-request-entity-id
                         :shape "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-aliases-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-aliases-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-aliases-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-aliases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-aliases-request 'make-list-aliases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-aliases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-aliases-response common-lisp:nil
                       ((aliases :initarg :aliases :initform common-lisp:nil
                         :type (common-lisp:or aliases common-lisp:null)
                         :accessor struct-shape-list-aliases-response-aliases
                         :shape "Aliases" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-aliases-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-aliases-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-aliases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-aliases-response 'make-list-aliases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-availability-configurations-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-list-availability-configurations-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-availability-configurations-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-availability-configurations-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-availability-configurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-availability-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-availability-configurations-request
                    'make-list-availability-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-availability-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-availability-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-availability-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-availability-configurations-response
                       common-lisp:nil
                       ((availability-configurations :initarg
                         :availability-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or availability-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-availability-configurations-response-availability-configurations
                         :shape "AvailabilityConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-availability-configurations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-availability-configurations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-availability-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-availability-configurations-response
                    'make-list-availability-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-availability-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-availability-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-configurations))
      (common-lisp:list
       (common-lisp:cons "AvailabilityConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-availability-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-group-members-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-list-group-members-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-id :initarg :group-id :initform
                         (common-lisp:error ":group-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-list-group-members-request-group-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-group-members-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-group-members-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-group-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-group-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-group-members-request
                    'make-list-group-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-group-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-group-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-group-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-group-members-response common-lisp:nil
                       ((members :initarg :members :initform common-lisp:nil
                         :type (common-lisp:or members common-lisp:null)
                         :accessor
                         struct-shape-list-group-members-response-members
                         :shape "Members" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-group-members-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-group-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-group-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-group-members-response
                    'make-list-group-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-group-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-group-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "Members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-group-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-groups-filters common-lisp:nil
                       ((name-prefix :initarg :name-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-groups-filters-name-prefix :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (primary-email-prefix :initarg :primary-email-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-groups-filters-primary-email-prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or entity-state common-lisp:null)
                         :accessor struct-shape-list-groups-filters-state
                         :shape "EntityState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-groups-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-groups-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-groups-filters 'make-list-groups-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-email-prefix))
      (common-lisp:list
       (common-lisp:cons "PrimaryEmailPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-groups-for-entity-filters common-lisp:nil
                       ((group-name-prefix :initarg :group-name-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-groups-for-entity-filters-group-name-prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-groups-for-entity-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-groups-for-entity-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-groups-for-entity-filters
                    'make-list-groups-for-entity-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-entity-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-entity-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name-prefix))
      (common-lisp:list
       (common-lisp:cons "GroupNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-entity-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-groups-for-entity-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-list-groups-for-entity-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entity-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-list-groups-for-entity-request-entity-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or list-groups-for-entity-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-groups-for-entity-request-filters
                         :shape "ListGroupsForEntityFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-groups-for-entity-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-groups-for-entity-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-groups-for-entity-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-groups-for-entity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-groups-for-entity-request
                    'make-list-groups-for-entity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-entity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-entity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-groups-for-entity-response common-lisp:nil
                       ((groups :initarg :groups :initform common-lisp:nil
                         :type
                         (common-lisp:or group-identifiers common-lisp:null)
                         :accessor
                         struct-shape-list-groups-for-entity-response-groups
                         :shape "GroupIdentifiers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-groups-for-entity-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-groups-for-entity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-groups-for-entity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-groups-for-entity-response
                    'make-list-groups-for-entity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-entity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-entity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-entity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-groups-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-list-groups-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-groups-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-groups-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or list-groups-filters common-lisp:null)
                         :accessor struct-shape-list-groups-request-filters
                         :shape "ListGroupsFilters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-groups-request 'make-list-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-groups-response common-lisp:nil
                       ((groups :initarg :groups :initform common-lisp:nil
                         :type (common-lisp:or groups common-lisp:null)
                         :accessor struct-shape-list-groups-response-groups
                         :shape "Groups" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-groups-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-groups-response 'make-list-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-impersonation-roles-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-list-impersonation-roles-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-impersonation-roles-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-impersonation-roles-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-impersonation-roles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-impersonation-roles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-impersonation-roles-request
                    'make-list-impersonation-roles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-impersonation-roles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-impersonation-roles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-impersonation-roles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-impersonation-roles-response common-lisp:nil
                       ((roles :initarg :roles :initform common-lisp:nil :type
                         (common-lisp:or impersonation-role-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-impersonation-roles-response-roles
                         :shape "ImpersonationRoleList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-impersonation-roles-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-impersonation-roles-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-impersonation-roles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-impersonation-roles-response
                    'make-list-impersonation-roles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-impersonation-roles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-impersonation-roles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "Roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-impersonation-roles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mail-domains-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-list-mail-domains-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-mail-domains-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-mail-domains-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mail-domains-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-mail-domains-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mail-domains-request
                    'make-list-mail-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mail-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mail-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mail-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mail-domains-response common-lisp:nil
                       ((mail-domains :initarg :mail-domains :initform
                         common-lisp:nil :type
                         (common-lisp:or mail-domains common-lisp:null)
                         :accessor
                         struct-shape-list-mail-domains-response-mail-domains
                         :shape "MailDomains" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-mail-domains-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mail-domains-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-mail-domains-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mail-domains-response
                    'make-list-mail-domains-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mail-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mail-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mail-domains))
      (common-lisp:list
       (common-lisp:cons "MailDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mail-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mailbox-export-jobs-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-list-mailbox-export-jobs-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-mailbox-export-jobs-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-mailbox-export-jobs-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mailbox-export-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mailbox-export-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mailbox-export-jobs-request
                    'make-list-mailbox-export-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-export-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-export-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-export-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mailbox-export-jobs-response common-lisp:nil
                       ((jobs :initarg :jobs :initform common-lisp:nil :type
                         (common-lisp:or jobs common-lisp:null) :accessor
                         struct-shape-list-mailbox-export-jobs-response-jobs
                         :shape "Jobs" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-mailbox-export-jobs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mailbox-export-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mailbox-export-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mailbox-export-jobs-response
                    'make-list-mailbox-export-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-export-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-export-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-export-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mailbox-permissions-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-list-mailbox-permissions-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entity-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-list-mailbox-permissions-request-entity-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-mailbox-permissions-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-mailbox-permissions-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mailbox-permissions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mailbox-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mailbox-permissions-request
                    'make-list-mailbox-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mailbox-permissions-response common-lisp:nil
                       ((permissions :initarg :permissions :initform
                         common-lisp:nil :type
                         (common-lisp:or permissions common-lisp:null)
                         :accessor
                         struct-shape-list-mailbox-permissions-response-permissions
                         :shape "Permissions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-mailbox-permissions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mailbox-permissions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mailbox-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mailbox-permissions-response
                    'make-list-mailbox-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mobile-device-access-overrides-request
                       common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-list-mobile-device-access-overrides-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform common-lisp:nil
                         :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-list-mobile-device-access-overrides-request-user-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-id :initarg :device-id :initform
                         common-lisp:nil :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-list-mobile-device-access-overrides-request-device-id
                         :shape "DeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-mobile-device-access-overrides-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-mobile-device-access-overrides-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mobile-device-access-overrides-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mobile-device-access-overrides-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mobile-device-access-overrides-request
                    'make-list-mobile-device-access-overrides-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-overrides-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-overrides-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-overrides-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mobile-device-access-overrides-response
                       common-lisp:nil
                       ((overrides :initarg :overrides :initform
                         common-lisp:nil :type
                         (common-lisp:or mobile-device-access-overrides-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-mobile-device-access-overrides-response-overrides
                         :shape "MobileDeviceAccessOverridesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-mobile-device-access-overrides-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mobile-device-access-overrides-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mobile-device-access-overrides-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mobile-device-access-overrides-response
                    'make-list-mobile-device-access-overrides-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-overrides-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-overrides-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "Overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-overrides-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mobile-device-access-rules-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-list-mobile-device-access-rules-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mobile-device-access-rules-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mobile-device-access-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mobile-device-access-rules-request
                    'make-list-mobile-device-access-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mobile-device-access-rules-response common-lisp:nil
                       ((rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or mobile-device-access-rules-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-mobile-device-access-rules-response-rules
                         :shape "MobileDeviceAccessRulesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mobile-device-access-rules-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mobile-device-access-rules-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mobile-device-access-rules-response
                    'make-list-mobile-device-access-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-organizations-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-organizations-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-organizations-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-organizations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-organizations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-organizations-request
                    'make-list-organizations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organizations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organizations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organizations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-organizations-response common-lisp:nil
                       ((organization-summaries :initarg
                         :organization-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or organization-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-organizations-response-organization-summaries
                         :shape "OrganizationSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-organizations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-organizations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-organizations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-organizations-response
                    'make-list-organizations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organizations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organizations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-summaries))
      (common-lisp:list
       (common-lisp:cons "OrganizationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organizations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-delegates-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-list-resource-delegates-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-list-resource-delegates-request-resource-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resource-delegates-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-resource-delegates-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resource-delegates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-delegates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resource-delegates-request
                    'make-list-resource-delegates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-delegates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-delegates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-delegates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-delegates-response common-lisp:nil
                       ((delegates :initarg :delegates :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-delegates common-lisp:null)
                         :accessor
                         struct-shape-list-resource-delegates-response-delegates
                         :shape "ResourceDelegates" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resource-delegates-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resource-delegates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-delegates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resource-delegates-response
                    'make-list-resource-delegates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-delegates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-delegates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegates))
      (common-lisp:list
       (common-lisp:cons "Delegates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-delegates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resources-filters common-lisp:nil
                       ((name-prefix :initarg :name-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-resources-filters-name-prefix :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (primary-email-prefix :initarg :primary-email-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-resources-filters-primary-email-prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or entity-state common-lisp:null)
                         :accessor struct-shape-list-resources-filters-state
                         :shape "EntityState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resources-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-resources-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resources-filters 'make-list-resources-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-email-prefix))
      (common-lisp:list
       (common-lisp:cons "PrimaryEmailPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resources-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-list-resources-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resources-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-resources-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or list-resources-filters
                                         common-lisp:null)
                         :accessor struct-shape-list-resources-request-filters
                         :shape "ListResourcesFilters" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resources-request 'make-list-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resources-response common-lisp:nil
                       ((resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or resources common-lisp:null) :accessor
                         struct-shape-list-resources-response-resources :shape
                         "Resources" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resources-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resources-response 'make-list-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-filters common-lisp:nil
                       ((username-prefix :initarg :username-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-users-filters-username-prefix :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name-prefix :initarg :display-name-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor
                         struct-shape-list-users-filters-display-name-prefix
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (primary-email-prefix :initarg :primary-email-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-users-filters-primary-email-prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or entity-state common-lisp:null)
                         :accessor struct-shape-list-users-filters-state :shape
                         "EntityState" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-users-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-users-filters 'make-list-users-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-prefix))
      (common-lisp:list
       (common-lisp:cons "UsernamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name-prefix))
      (common-lisp:list
       (common-lisp:cons "DisplayNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-email-prefix))
      (common-lisp:list
       (common-lisp:cons "PrimaryEmailPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-list-users-request-organization-id :shape
                         "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-users-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-users-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or list-users-filters common-lisp:null)
                         :accessor struct-shape-list-users-request-filters
                         :shape "ListUsersFilters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-users-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-users-request 'make-list-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-response common-lisp:nil
                       ((users :initarg :users :initform common-lisp:nil :type
                         (common-lisp:or users common-lisp:null) :accessor
                         struct-shape-list-users-response-users :shape "Users"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-users-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-users-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-users-response 'make-list-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-response))
   common-lisp:nil))
(common-lisp:deftype log-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition mail-domain-in-use-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       mail-domain-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'mail-domain-in-use-exception
                    'mail-domain-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition mail-domain-not-found-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       mail-domain-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'mail-domain-not-found-exception
                    'mail-domain-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition mail-domain-state-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       mail-domain-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'mail-domain-state-exception
                    'mail-domain-state-exception-message)))
(common-lisp:progn
 (common-lisp:defclass mail-domain-summary common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor struct-shape-mail-domain-summary-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-domain :initarg :default-domain :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-mail-domain-summary-default-domain :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mail-domain-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mail-domain-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mail-domain-summary 'make-mail-domain-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mail-domain-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mail-domain-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-domain))
      (common-lisp:list
       (common-lisp:cons "DefaultDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mail-domain-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mail-domains ()
   '(trivial-types:proper-list mail-domain-summary))
 (common-lisp:defun make-mail-domains
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mail-domain-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype mailbox-export-error-info () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mailbox-export-job common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type
                         (common-lisp:or mailbox-export-job-id
                                         common-lisp:null)
                         :accessor struct-shape-mailbox-export-job-job-id
                         :shape "MailboxExportJobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor struct-shape-mailbox-export-job-entity-id
                         :shape "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-mailbox-export-job-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         struct-shape-mailbox-export-job-s3bucket-name :shape
                         "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3path :initarg :s3path :initform common-lisp:nil
                         :type (common-lisp:or s3object-key common-lisp:null)
                         :accessor struct-shape-mailbox-export-job-s3path
                         :shape "S3ObjectKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-progress :initarg :estimated-progress
                         :initform common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-mailbox-export-job-estimated-progress
                         :shape "Percentage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or mailbox-export-job-state
                                         common-lisp:null)
                         :accessor struct-shape-mailbox-export-job-state :shape
                         "MailboxExportJobState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-mailbox-export-job-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-mailbox-export-job-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mailbox-export-job
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mailbox-export-job
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mailbox-export-job 'make-mailbox-export-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mailbox-export-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mailbox-export-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3path))
      (common-lisp:list
       (common-lisp:cons "S3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-progress))
      (common-lisp:list
       (common-lisp:cons "EstimatedProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mailbox-export-job))
   common-lisp:nil))
(common-lisp:deftype mailbox-export-job-id () 'common-lisp:string)
(common-lisp:deftype mailbox-export-job-state () 'common-lisp:string)
(common-lisp:deftype mailbox-quota () 'common-lisp:integer)
(common-lisp:deftype mailbox-size () 'common-lisp:double-float)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass member common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-member-id :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-member-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or member-type common-lisp:null)
                         :accessor struct-shape-member-type :shape "MemberType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or entity-state common-lisp:null)
                         :accessor struct-shape-member-state :shape
                         "EntityState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enabled-date :initarg :enabled-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-member-enabled-date :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (disabled-date :initarg :disabled-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-member-disabled-date :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'member
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'member 'make-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-date))
      (common-lisp:list
       (common-lisp:cons "EnabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-date))
      (common-lisp:list
       (common-lisp:cons "DisabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member))
   common-lisp:nil))
(common-lisp:deftype member-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype members () '(trivial-types:proper-list member))
 (common-lisp:defun make-members
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass mobile-device-access-matched-rule common-lisp:nil
                       ((mobile-device-access-rule-id :initarg
                         :mobile-device-access-rule-id :initform
                         common-lisp:nil :type
                         (common-lisp:or mobile-device-access-rule-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-mobile-device-access-matched-rule-mobile-device-access-rule-id
                         :shape "MobileDeviceAccessRuleId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or mobile-device-access-rule-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-mobile-device-access-matched-rule-name
                         :shape "MobileDeviceAccessRuleName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mobile-device-access-matched-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'mobile-device-access-matched-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mobile-device-access-matched-rule
                    'make-mobile-device-access-matched-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-matched-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-matched-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mobile-device-access-rule-id))
      (common-lisp:list
       (common-lisp:cons "MobileDeviceAccessRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-matched-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mobile-device-access-matched-rule-list ()
   '(trivial-types:proper-list mobile-device-access-matched-rule))
 (common-lisp:defun make-mobile-device-access-matched-rule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            mobile-device-access-matched-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass mobile-device-access-override common-lisp:nil
                       ((user-id :initarg :user-id :initform common-lisp:nil
                         :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor
                         struct-shape-mobile-device-access-override-user-id
                         :shape "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-id :initarg :device-id :initform
                         common-lisp:nil :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-mobile-device-access-override-device-id
                         :shape "DeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (effect :initarg :effect :initform common-lisp:nil
                         :type
                         (common-lisp:or mobile-device-access-rule-effect
                                         common-lisp:null)
                         :accessor
                         struct-shape-mobile-device-access-override-effect
                         :shape "MobileDeviceAccessRuleEffect" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or mobile-device-access-rule-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-mobile-device-access-override-description
                         :shape "MobileDeviceAccessRuleDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (date-created :initarg :date-created :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-mobile-device-access-override-date-created
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-modified :initarg :date-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-mobile-device-access-override-date-modified
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mobile-device-access-override
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'mobile-device-access-override
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mobile-device-access-override
                    'make-mobile-device-access-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mobile-device-access-overrides-list ()
   '(trivial-types:proper-list mobile-device-access-override))
 (common-lisp:defun make-mobile-device-access-overrides-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            mobile-device-access-override))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass mobile-device-access-rule common-lisp:nil
                       ((mobile-device-access-rule-id :initarg
                         :mobile-device-access-rule-id :initform
                         common-lisp:nil :type
                         (common-lisp:or mobile-device-access-rule-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-mobile-device-access-rule-mobile-device-access-rule-id
                         :shape "MobileDeviceAccessRuleId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or mobile-device-access-rule-name
                                         common-lisp:null)
                         :accessor struct-shape-mobile-device-access-rule-name
                         :shape "MobileDeviceAccessRuleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or mobile-device-access-rule-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-mobile-device-access-rule-description
                         :shape "MobileDeviceAccessRuleDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (effect :initarg :effect :initform common-lisp:nil
                         :type
                         (common-lisp:or mobile-device-access-rule-effect
                                         common-lisp:null)
                         :accessor
                         struct-shape-mobile-device-access-rule-effect :shape
                         "MobileDeviceAccessRuleEffect" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-types :initarg :device-types :initform
                         common-lisp:nil :type
                         (common-lisp:or device-type-list common-lisp:null)
                         :accessor
                         struct-shape-mobile-device-access-rule-device-types
                         :shape "DeviceTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-device-types :initarg :not-device-types :initform
                         common-lisp:nil :type
                         (common-lisp:or device-type-list common-lisp:null)
                         :accessor
                         struct-shape-mobile-device-access-rule-not-device-types
                         :shape "DeviceTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-models :initarg :device-models :initform
                         common-lisp:nil :type
                         (common-lisp:or device-model-list common-lisp:null)
                         :accessor
                         struct-shape-mobile-device-access-rule-device-models
                         :shape "DeviceModelList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-device-models :initarg :not-device-models
                         :initform common-lisp:nil :type
                         (common-lisp:or device-model-list common-lisp:null)
                         :accessor
                         struct-shape-mobile-device-access-rule-not-device-models
                         :shape "DeviceModelList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-operating-systems :initarg
                         :device-operating-systems :initform common-lisp:nil
                         :type
                         (common-lisp:or device-operating-system-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-mobile-device-access-rule-device-operating-systems
                         :shape "DeviceOperatingSystemList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (not-device-operating-systems :initarg
                         :not-device-operating-systems :initform
                         common-lisp:nil :type
                         (common-lisp:or device-operating-system-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-mobile-device-access-rule-not-device-operating-systems
                         :shape "DeviceOperatingSystemList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-user-agents :initarg :device-user-agents
                         :initform common-lisp:nil :type
                         (common-lisp:or device-user-agent-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-mobile-device-access-rule-device-user-agents
                         :shape "DeviceUserAgentList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-device-user-agents :initarg
                         :not-device-user-agents :initform common-lisp:nil
                         :type
                         (common-lisp:or device-user-agent-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-mobile-device-access-rule-not-device-user-agents
                         :shape "DeviceUserAgentList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-created :initarg :date-created :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-mobile-device-access-rule-date-created
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-modified :initarg :date-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-mobile-device-access-rule-date-modified
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mobile-device-access-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mobile-device-access-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mobile-device-access-rule
                    'make-mobile-device-access-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mobile-device-access-rule-id))
      (common-lisp:list
       (common-lisp:cons "MobileDeviceAccessRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-types))
      (common-lisp:list
       (common-lisp:cons "DeviceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-device-types))
      (common-lisp:list
       (common-lisp:cons "NotDeviceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-models))
      (common-lisp:list
       (common-lisp:cons "DeviceModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-device-models))
      (common-lisp:list
       (common-lisp:cons "NotDeviceModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-operating-systems))
      (common-lisp:list
       (common-lisp:cons "DeviceOperatingSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-device-operating-systems))
      (common-lisp:list
       (common-lisp:cons "NotDeviceOperatingSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-user-agents))
      (common-lisp:list
       (common-lisp:cons "DeviceUserAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-device-user-agents))
      (common-lisp:list
       (common-lisp:cons "NotDeviceUserAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-rule))
   common-lisp:nil))
(common-lisp:deftype mobile-device-access-rule-description ()
  'common-lisp:string)
(common-lisp:deftype mobile-device-access-rule-effect () 'common-lisp:string)
(common-lisp:deftype mobile-device-access-rule-id () 'common-lisp:string)
(common-lisp:deftype mobile-device-access-rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype mobile-device-access-rules-list ()
   '(trivial-types:proper-list mobile-device-access-rule))
 (common-lisp:defun make-mobile-device-access-rules-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            mobile-device-access-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition name-availability-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       name-availability-exception-message)))
 (common-lisp:export
  (common-lisp:list 'name-availability-exception
                    'name-availability-exception-message)))
(common-lisp:deftype new-resource-description () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype organization-id () 'common-lisp:string)
(common-lisp:deftype organization-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition organization-not-found-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       organization-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'organization-not-found-exception
                    'organization-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition organization-state-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       organization-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'organization-state-exception
                    'organization-state-exception-message)))
(common-lisp:progn
 (common-lisp:deftype organization-summaries ()
   '(trivial-types:proper-list organization-summary))
 (common-lisp:defun make-organization-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list organization-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass organization-summary common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-organization-summary-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or organization-name common-lisp:null)
                         :accessor struct-shape-organization-summary-alias
                         :shape "OrganizationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-mail-domain :initarg :default-mail-domain
                         :initform common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-organization-summary-default-mail-domain
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-organization-summary-error-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-organization-summary-state :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'organization-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-summary 'make-organization-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input organization-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input organization-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-mail-domain))
      (common-lisp:list
       (common-lisp:cons "DefaultMailDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input organization-summary))
   common-lisp:nil))
(common-lisp:deftype password () 'common-lisp:string)
(common-lisp:deftype percentage () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass permission common-lisp:nil
                       ((grantee-id :initarg :grantee-id :initform
                         (common-lisp:error ":grantee-id is required") :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor struct-shape-permission-grantee-id :shape
                         "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grantee-type :initarg :grantee-type :initform
                         (common-lisp:error ":grantee-type is required") :type
                         (common-lisp:or member-type common-lisp:null)
                         :accessor struct-shape-permission-grantee-type :shape
                         "MemberType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (permission-values :initarg :permission-values
                         :initform
                         (common-lisp:error ":permission-values is required")
                         :type
                         (common-lisp:or permission-values common-lisp:null)
                         :accessor struct-shape-permission-permission-values
                         :shape "PermissionValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-permission
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'permission
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'permission 'make-permission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-id))
      (common-lisp:list
       (common-lisp:cons "GranteeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-type))
      (common-lisp:list
       (common-lisp:cons "GranteeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-values))
      (common-lisp:list
       (common-lisp:cons "PermissionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input permission))
   common-lisp:nil))
(common-lisp:deftype permission-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype permission-values ()
   '(trivial-types:proper-list permission-type))
 (common-lisp:defun make-permission-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype permissions () '(trivial-types:proper-list permission))
 (common-lisp:defun make-permissions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-access-control-rule-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or access-control-rule-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-access-control-rule-request-name
                         :shape "AccessControlRuleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (effect :initarg :effect :initform
                         (common-lisp:error ":effect is required") :type
                         (common-lisp:or access-control-rule-effect
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-access-control-rule-request-effect
                         :shape "AccessControlRuleEffect" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or access-control-rule-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-access-control-rule-request-description
                         :shape "AccessControlRuleDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ip-ranges :initarg :ip-ranges :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-range-list common-lisp:null)
                         :accessor
                         struct-shape-put-access-control-rule-request-ip-ranges
                         :shape "IpRangeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-ip-ranges :initarg :not-ip-ranges :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-range-list common-lisp:null)
                         :accessor
                         struct-shape-put-access-control-rule-request-not-ip-ranges
                         :shape "IpRangeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform common-lisp:nil
                         :type (common-lisp:or actions-list common-lisp:null)
                         :accessor
                         struct-shape-put-access-control-rule-request-actions
                         :shape "ActionsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-actions :initarg :not-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or actions-list common-lisp:null)
                         :accessor
                         struct-shape-put-access-control-rule-request-not-actions
                         :shape "ActionsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-ids :initarg :user-ids :initform common-lisp:nil
                         :type (common-lisp:or user-id-list common-lisp:null)
                         :accessor
                         struct-shape-put-access-control-rule-request-user-ids
                         :shape "UserIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-user-ids :initarg :not-user-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or user-id-list common-lisp:null)
                         :accessor
                         struct-shape-put-access-control-rule-request-not-user-ids
                         :shape "UserIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-put-access-control-rule-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (impersonation-role-ids :initarg
                         :impersonation-role-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or impersonation-role-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-access-control-rule-request-impersonation-role-ids
                         :shape "ImpersonationRoleIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (not-impersonation-role-ids :initarg
                         :not-impersonation-role-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or impersonation-role-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-access-control-rule-request-not-impersonation-role-ids
                         :shape "ImpersonationRoleIdList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-access-control-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-access-control-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-access-control-rule-request
                    'make-put-access-control-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-access-control-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-access-control-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-ranges))
      (common-lisp:list
       (common-lisp:cons "IpRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-ip-ranges))
      (common-lisp:list
       (common-lisp:cons "NotIpRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-actions))
      (common-lisp:list
       (common-lisp:cons "NotActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "UserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-user-ids))
      (common-lisp:list
       (common-lisp:cons "NotUserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-ids))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-impersonation-role-ids))
      (common-lisp:list
       (common-lisp:cons "NotImpersonationRoleIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-access-control-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-access-control-rule-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-access-control-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-access-control-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-access-control-rule-response
                    'make-put-access-control-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-access-control-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-access-control-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-access-control-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-email-monitoring-configuration-request
                       common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-put-email-monitoring-configuration-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-put-email-monitoring-configuration-request-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-arn :initarg :log-group-arn :initform
                         (common-lisp:error ":log-group-arn is required") :type
                         (common-lisp:or log-group-arn common-lisp:null)
                         :accessor
                         struct-shape-put-email-monitoring-configuration-request-log-group-arn
                         :shape "LogGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-email-monitoring-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-email-monitoring-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-email-monitoring-configuration-request
                    'make-put-email-monitoring-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-email-monitoring-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-email-monitoring-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "LogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-email-monitoring-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-email-monitoring-configuration-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-email-monitoring-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-email-monitoring-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-email-monitoring-configuration-response
                    'make-put-email-monitoring-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-email-monitoring-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-email-monitoring-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-email-monitoring-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-inbound-dmarc-settings-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-put-inbound-dmarc-settings-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enforced :initarg :enforced :initform
                         (common-lisp:error ":enforced is required") :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-put-inbound-dmarc-settings-request-enforced
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-inbound-dmarc-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-inbound-dmarc-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-inbound-dmarc-settings-request
                    'make-put-inbound-dmarc-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-inbound-dmarc-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-inbound-dmarc-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforced))
      (common-lisp:list
       (common-lisp:cons "Enforced"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-inbound-dmarc-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-inbound-dmarc-settings-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-inbound-dmarc-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-inbound-dmarc-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-inbound-dmarc-settings-response
                    'make-put-inbound-dmarc-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-inbound-dmarc-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-inbound-dmarc-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-inbound-dmarc-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-mailbox-permissions-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-put-mailbox-permissions-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entity-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-put-mailbox-permissions-request-entity-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grantee-id :initarg :grantee-id :initform
                         (common-lisp:error ":grantee-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-put-mailbox-permissions-request-grantee-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permission-values :initarg :permission-values
                         :initform
                         (common-lisp:error ":permission-values is required")
                         :type
                         (common-lisp:or permission-values common-lisp:null)
                         :accessor
                         struct-shape-put-mailbox-permissions-request-permission-values
                         :shape "PermissionValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-mailbox-permissions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-mailbox-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-mailbox-permissions-request
                    'make-put-mailbox-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-mailbox-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-mailbox-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-id))
      (common-lisp:list
       (common-lisp:cons "GranteeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-values))
      (common-lisp:list
       (common-lisp:cons "PermissionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-mailbox-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-mailbox-permissions-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-mailbox-permissions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-mailbox-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-mailbox-permissions-response
                    'make-put-mailbox-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-mailbox-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-mailbox-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-mailbox-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-mobile-device-access-override-request
                       common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-put-mobile-device-access-override-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-put-mobile-device-access-override-request-user-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-id :initarg :device-id :initform
                         (common-lisp:error ":device-id is required") :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-put-mobile-device-access-override-request-device-id
                         :shape "DeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (effect :initarg :effect :initform
                         (common-lisp:error ":effect is required") :type
                         (common-lisp:or mobile-device-access-rule-effect
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-mobile-device-access-override-request-effect
                         :shape "MobileDeviceAccessRuleEffect" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or mobile-device-access-rule-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-mobile-device-access-override-request-description
                         :shape "MobileDeviceAccessRuleDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-mobile-device-access-override-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-mobile-device-access-override-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-mobile-device-access-override-request
                    'make-put-mobile-device-access-override-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-mobile-device-access-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-mobile-device-access-override-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-mobile-device-access-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-mobile-device-access-override-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-mobile-device-access-override-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-mobile-device-access-override-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-mobile-device-access-override-response
                    'make-put-mobile-device-access-override-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-mobile-device-access-override-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-mobile-device-access-override-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-mobile-device-access-override-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-retention-policy-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-put-retention-policy-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or short-string common-lisp:null)
                         :accessor struct-shape-put-retention-policy-request-id
                         :shape "ShortString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or short-string common-lisp:null)
                         :accessor
                         struct-shape-put-retention-policy-request-name :shape
                         "ShortString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-description common-lisp:null)
                         :accessor
                         struct-shape-put-retention-policy-request-description
                         :shape "PolicyDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (folder-configurations :initarg :folder-configurations
                         :initform
                         (common-lisp:error
                          ":folder-configurations is required")
                         :type
                         (common-lisp:or folder-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-retention-policy-request-folder-configurations
                         :shape "FolderConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-retention-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-retention-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-retention-policy-request
                    'make-put-retention-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'folder-configurations))
      (common-lisp:list
       (common-lisp:cons "FolderConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-retention-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-retention-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-retention-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-retention-policy-response
                    'make-put-retention-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass redacted-ews-availability-provider common-lisp:nil
                       ((ews-endpoint :initarg :ews-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-redacted-ews-availability-provider-ews-endpoint
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ews-username :initarg :ews-username :initform
                         common-lisp:nil :type
                         (common-lisp:or external-user-name common-lisp:null)
                         :accessor
                         struct-shape-redacted-ews-availability-provider-ews-username
                         :shape "ExternalUserName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redacted-ews-availability-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'redacted-ews-availability-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redacted-ews-availability-provider
                    'make-redacted-ews-availability-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redacted-ews-availability-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redacted-ews-availability-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-endpoint))
      (common-lisp:list
       (common-lisp:cons "EwsEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-username))
      (common-lisp:list
       (common-lisp:cons "EwsUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redacted-ews-availability-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-mail-domain-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-client-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-register-mail-domain-request-client-token
                         :shape "IdempotencyClientToken" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-register-mail-domain-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or work-mail-domain-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-register-mail-domain-request-domain-name
                         :shape "WorkMailDomainName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-mail-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-mail-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-mail-domain-request
                    'make-register-mail-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-mail-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-mail-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-mail-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-mail-domain-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-mail-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-mail-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-mail-domain-response
                    'make-register-mail-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-mail-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-mail-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-mail-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-to-work-mail-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-register-to-work-mail-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entity-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-register-to-work-mail-request-entity-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email :initarg :email :initform
                         (common-lisp:error ":email is required") :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor
                         struct-shape-register-to-work-mail-request-email
                         :shape "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-to-work-mail-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-to-work-mail-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-to-work-mail-request
                    'make-register-to-work-mail-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-to-work-mail-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-to-work-mail-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-to-work-mail-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-to-work-mail-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-to-work-mail-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-to-work-mail-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-to-work-mail-response
                    'make-register-to-work-mail-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-to-work-mail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-to-work-mail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-to-work-mail-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-name-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       reserved-name-exception-message)))
 (common-lisp:export
  (common-lisp:list 'reserved-name-exception 'reserved-name-exception-message)))
(common-lisp:progn
 (common-lisp:defclass reset-password-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-reset-password-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor struct-shape-reset-password-request-user-id
                         :shape "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform
                         (common-lisp:error ":password is required") :type
                         (common-lisp:or password common-lisp:null) :accessor
                         struct-shape-reset-password-request-password :shape
                         "Password" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-password-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reset-password-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-password-request 'make-reset-password-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-password-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-password-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-password-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-password-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-password-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reset-password-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-password-response 'make-reset-password-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-password-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-password-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-password-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor struct-shape-resource-id :shape
                         "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email :initarg :email :initform common-lisp:nil :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor struct-shape-resource-email :shape
                         "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-resource-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-resource-type :shape
                         "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or entity-state common-lisp:null)
                         :accessor struct-shape-resource-state :shape
                         "EntityState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enabled-date :initarg :enabled-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-resource-enabled-date :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (disabled-date :initarg :disabled-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-resource-disabled-date :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor struct-shape-resource-description :shape
                         "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-date))
      (common-lisp:list
       (common-lisp:cons "EnabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-date))
      (common-lisp:list
       (common-lisp:cons "DisabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-delegates ()
   '(trivial-types:proper-list delegate))
 (common-lisp:defun make-resource-delegates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delegate))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-description () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resources () '(trivial-types:proper-list resource))
 (common-lisp:defun make-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype retention-action () 'common-lisp:string)
(common-lisp:deftype retention-period () 'common-lisp:integer)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:deftype short-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-mailbox-export-job-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         (common-lisp:error ":client-token is required") :type
                         (common-lisp:or idempotency-client-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-mailbox-export-job-request-client-token
                         :shape "IdempotencyClientToken" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-start-mailbox-export-job-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entity-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-start-mailbox-export-job-request-entity-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-start-mailbox-export-job-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-start-mailbox-export-job-request-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         (common-lisp:error ":kms-key-arn is required") :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-start-mailbox-export-job-request-kms-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         (common-lisp:error ":s3bucket-name is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         struct-shape-start-mailbox-export-job-request-s3bucket-name
                         :shape "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3prefix :initarg :s3prefix :initform
                         (common-lisp:error ":s3prefix is required") :type
                         (common-lisp:or s3object-key common-lisp:null)
                         :accessor
                         struct-shape-start-mailbox-export-job-request-s3prefix
                         :shape "S3ObjectKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-mailbox-export-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-mailbox-export-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-mailbox-export-job-request
                    'make-start-mailbox-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mailbox-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mailbox-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "S3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mailbox-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-mailbox-export-job-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type
                         (common-lisp:or mailbox-export-job-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-mailbox-export-job-response-job-id
                         :shape "MailboxExportJobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-mailbox-export-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-mailbox-export-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-mailbox-export-job-response
                    'make-start-mailbox-export-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mailbox-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mailbox-export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mailbox-export-job-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-users ()
   '(trivial-types:proper-list entity-identifier))
 (common-lisp:defun make-target-users
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass test-availability-configuration-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-test-availability-configuration-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-test-availability-configuration-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ews-provider :initarg :ews-provider :initform
                         common-lisp:nil :type
                         (common-lisp:or ews-availability-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-availability-configuration-request-ews-provider
                         :shape "EwsAvailabilityProvider" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-provider :initarg :lambda-provider :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-availability-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-availability-configuration-request-lambda-provider
                         :shape "LambdaAvailabilityProvider" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-availability-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-availability-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-availability-configuration-request
                    'make-test-availability-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-availability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-availability-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-provider))
      (common-lisp:list
       (common-lisp:cons "EwsProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-provider))
      (common-lisp:list
       (common-lisp:cons "LambdaProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-availability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-availability-configuration-response common-lisp:nil
                       ((test-passed :initarg :test-passed :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-test-availability-configuration-response-test-passed
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-test-availability-configuration-response-failure-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-availability-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-availability-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-availability-configuration-response
                    'make-test-availability-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-availability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-availability-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-passed))
      (common-lisp:list
       (common-lisp:cons "TestPassed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-availability-configuration-response))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-operation-exception
                    'unsupported-operation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-availability-configuration-request
                       common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-update-availability-configuration-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-update-availability-configuration-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ews-provider :initarg :ews-provider :initform
                         common-lisp:nil :type
                         (common-lisp:or ews-availability-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-availability-configuration-request-ews-provider
                         :shape "EwsAvailabilityProvider" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-provider :initarg :lambda-provider :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-availability-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-availability-configuration-request-lambda-provider
                         :shape "LambdaAvailabilityProvider" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-availability-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-availability-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-availability-configuration-request
                    'make-update-availability-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-provider))
      (common-lisp:list
       (common-lisp:cons "EwsProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-provider))
      (common-lisp:list
       (common-lisp:cons "LambdaProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-availability-configuration-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-availability-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-availability-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-availability-configuration-response
                    'make-update-availability-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-default-mail-domain-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-update-default-mail-domain-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or work-mail-domain-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-default-mail-domain-request-domain-name
                         :shape "WorkMailDomainName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-default-mail-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-default-mail-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-default-mail-domain-request
                    'make-update-default-mail-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-default-mail-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-default-mail-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-default-mail-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-default-mail-domain-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-default-mail-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-default-mail-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-default-mail-domain-response
                    'make-update-default-mail-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-default-mail-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-default-mail-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-default-mail-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-group-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-update-group-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-id :initarg :group-id :initform
                         (common-lisp:error ":group-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor struct-shape-update-group-request-group-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hidden-from-global-address-list :initarg
                         :hidden-from-global-address-list :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-update-group-request-hidden-from-global-address-list
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-group-request 'make-update-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hidden-from-global-address-list))
      (common-lisp:list
       (common-lisp:cons "HiddenFromGlobalAddressList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-group-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-group-response 'make-update-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-impersonation-role-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-update-impersonation-role-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (impersonation-role-id :initarg :impersonation-role-id
                         :initform
                         (common-lisp:error
                          ":impersonation-role-id is required")
                         :type
                         (common-lisp:or impersonation-role-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-impersonation-role-request-impersonation-role-id
                         :shape "ImpersonationRoleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or impersonation-role-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-impersonation-role-request-name
                         :shape "ImpersonationRoleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or impersonation-role-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-impersonation-role-request-type
                         :shape "ImpersonationRoleType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or impersonation-role-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-impersonation-role-request-description
                         :shape "ImpersonationRoleDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or impersonation-rule-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-impersonation-role-request-rules
                         :shape "ImpersonationRuleList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-impersonation-role-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-impersonation-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-impersonation-role-request
                    'make-update-impersonation-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-impersonation-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-impersonation-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-impersonation-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-impersonation-role-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-impersonation-role-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-impersonation-role-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-impersonation-role-response
                    'make-update-impersonation-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-impersonation-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-impersonation-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-impersonation-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-mailbox-quota-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-update-mailbox-quota-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-update-mailbox-quota-request-user-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mailbox-quota :initarg :mailbox-quota :initform
                         (common-lisp:error ":mailbox-quota is required") :type
                         (common-lisp:or mailbox-quota common-lisp:null)
                         :accessor
                         struct-shape-update-mailbox-quota-request-mailbox-quota
                         :shape "MailboxQuota" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-mailbox-quota-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-mailbox-quota-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-mailbox-quota-request
                    'make-update-mailbox-quota-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mailbox-quota-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mailbox-quota-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mailbox-quota))
      (common-lisp:list
       (common-lisp:cons "MailboxQuota"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mailbox-quota-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-mailbox-quota-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-mailbox-quota-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-mailbox-quota-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-mailbox-quota-response
                    'make-update-mailbox-quota-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mailbox-quota-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mailbox-quota-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mailbox-quota-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-mobile-device-access-rule-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-update-mobile-device-access-rule-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mobile-device-access-rule-id :initarg
                         :mobile-device-access-rule-id :initform
                         (common-lisp:error
                          ":mobile-device-access-rule-id is required")
                         :type
                         (common-lisp:or mobile-device-access-rule-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-mobile-device-access-rule-request-mobile-device-access-rule-id
                         :shape "MobileDeviceAccessRuleId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or mobile-device-access-rule-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-mobile-device-access-rule-request-name
                         :shape "MobileDeviceAccessRuleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or mobile-device-access-rule-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-mobile-device-access-rule-request-description
                         :shape "MobileDeviceAccessRuleDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (effect :initarg :effect :initform
                         (common-lisp:error ":effect is required") :type
                         (common-lisp:or mobile-device-access-rule-effect
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-mobile-device-access-rule-request-effect
                         :shape "MobileDeviceAccessRuleEffect" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-types :initarg :device-types :initform
                         common-lisp:nil :type
                         (common-lisp:or device-type-list common-lisp:null)
                         :accessor
                         struct-shape-update-mobile-device-access-rule-request-device-types
                         :shape "DeviceTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-device-types :initarg :not-device-types :initform
                         common-lisp:nil :type
                         (common-lisp:or device-type-list common-lisp:null)
                         :accessor
                         struct-shape-update-mobile-device-access-rule-request-not-device-types
                         :shape "DeviceTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-models :initarg :device-models :initform
                         common-lisp:nil :type
                         (common-lisp:or device-model-list common-lisp:null)
                         :accessor
                         struct-shape-update-mobile-device-access-rule-request-device-models
                         :shape "DeviceModelList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-device-models :initarg :not-device-models
                         :initform common-lisp:nil :type
                         (common-lisp:or device-model-list common-lisp:null)
                         :accessor
                         struct-shape-update-mobile-device-access-rule-request-not-device-models
                         :shape "DeviceModelList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-operating-systems :initarg
                         :device-operating-systems :initform common-lisp:nil
                         :type
                         (common-lisp:or device-operating-system-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-mobile-device-access-rule-request-device-operating-systems
                         :shape "DeviceOperatingSystemList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (not-device-operating-systems :initarg
                         :not-device-operating-systems :initform
                         common-lisp:nil :type
                         (common-lisp:or device-operating-system-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-mobile-device-access-rule-request-not-device-operating-systems
                         :shape "DeviceOperatingSystemList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-user-agents :initarg :device-user-agents
                         :initform common-lisp:nil :type
                         (common-lisp:or device-user-agent-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-mobile-device-access-rule-request-device-user-agents
                         :shape "DeviceUserAgentList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (not-device-user-agents :initarg
                         :not-device-user-agents :initform common-lisp:nil
                         :type
                         (common-lisp:or device-user-agent-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-mobile-device-access-rule-request-not-device-user-agents
                         :shape "DeviceUserAgentList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-mobile-device-access-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-mobile-device-access-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-mobile-device-access-rule-request
                    'make-update-mobile-device-access-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mobile-device-access-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mobile-device-access-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mobile-device-access-rule-id))
      (common-lisp:list
       (common-lisp:cons "MobileDeviceAccessRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-types))
      (common-lisp:list
       (common-lisp:cons "DeviceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-device-types))
      (common-lisp:list
       (common-lisp:cons "NotDeviceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-models))
      (common-lisp:list
       (common-lisp:cons "DeviceModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-device-models))
      (common-lisp:list
       (common-lisp:cons "NotDeviceModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-operating-systems))
      (common-lisp:list
       (common-lisp:cons "DeviceOperatingSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-device-operating-systems))
      (common-lisp:list
       (common-lisp:cons "NotDeviceOperatingSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-user-agents))
      (common-lisp:list
       (common-lisp:cons "DeviceUserAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-device-user-agents))
      (common-lisp:list
       (common-lisp:cons "NotDeviceUserAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mobile-device-access-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-mobile-device-access-rule-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-mobile-device-access-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-mobile-device-access-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-mobile-device-access-rule-response
                    'make-update-mobile-device-access-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mobile-device-access-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mobile-device-access-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mobile-device-access-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-primary-email-address-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-update-primary-email-address-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entity-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-update-primary-email-address-request-entity-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email :initarg :email :initform
                         (common-lisp:error ":email is required") :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor
                         struct-shape-update-primary-email-address-request-email
                         :shape "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-primary-email-address-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-primary-email-address-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-primary-email-address-request
                    'make-update-primary-email-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-primary-email-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-primary-email-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-primary-email-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-primary-email-address-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-primary-email-address-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-primary-email-address-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-primary-email-address-response
                    'make-update-primary-email-address-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-primary-email-address-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-primary-email-address-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-primary-email-address-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-update-resource-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor
                         struct-shape-update-resource-request-resource-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-update-resource-request-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (booking-options :initarg :booking-options :initform
                         common-lisp:nil :type
                         (common-lisp:or booking-options common-lisp:null)
                         :accessor
                         struct-shape-update-resource-request-booking-options
                         :shape "BookingOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or new-resource-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-resource-request-description
                         :shape "NewResourceDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-update-resource-request-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hidden-from-global-address-list :initarg
                         :hidden-from-global-address-list :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-update-resource-request-hidden-from-global-address-list
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-resource-request 'make-update-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'booking-options))
      (common-lisp:list
       (common-lisp:cons "BookingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hidden-from-global-address-list))
      (common-lisp:list
       (common-lisp:cons "HiddenFromGlobalAddressList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-resource-response 'make-update-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-request common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-update-user-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or entity-identifier common-lisp:null)
                         :accessor struct-shape-update-user-request-user-id
                         :shape "EntityIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or user-role common-lisp:null) :accessor
                         struct-shape-update-user-request-role :shape
                         "UserRole" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor
                         struct-shape-update-user-request-display-name :shape
                         "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-update-user-request-first-name
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-update-user-request-last-name
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hidden-from-global-address-list :initarg
                         :hidden-from-global-address-list :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-update-user-request-hidden-from-global-address-list
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (initials :initarg :initials :initform common-lisp:nil
                         :type (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-update-user-request-initials
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (telephone :initarg :telephone :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-update-user-request-telephone
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (street :initarg :street :initform common-lisp:nil
                         :type (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-update-user-request-street
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-title :initarg :job-title :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-update-user-request-job-title
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (city :initarg :city :initform common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-update-user-request-city :shape
                         "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (company :initarg :company :initform common-lisp:nil
                         :type (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-update-user-request-company
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (zip-code :initarg :zip-code :initform common-lisp:nil
                         :type (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-update-user-request-zip-code
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (department :initarg :department :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-update-user-request-department
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (country :initarg :country :initform common-lisp:nil
                         :type (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-update-user-request-country
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (office :initarg :office :initform common-lisp:nil
                         :type (common-lisp:or user-attribute common-lisp:null)
                         :accessor struct-shape-update-user-request-office
                         :shape "UserAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-request 'make-update-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hidden-from-global-address-list))
      (common-lisp:list
       (common-lisp:cons "HiddenFromGlobalAddressList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initials))
      (common-lisp:list
       (common-lisp:cons "Initials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telephone))
      (common-lisp:list
       (common-lisp:cons "Telephone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street))
      (common-lisp:list
       (common-lisp:cons "Street"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-title))
      (common-lisp:list
       (common-lisp:cons "JobTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'company))
      (common-lisp:list
       (common-lisp:cons "Company"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zip-code))
      (common-lisp:list
       (common-lisp:cons "ZipCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'department))
      (common-lisp:list
       (common-lisp:cons "Department"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'office))
      (common-lisp:list
       (common-lisp:cons "Office"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-response 'make-update-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-response))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or work-mail-identifier common-lisp:null)
                         :accessor struct-shape-user-id :shape
                         "WorkMailIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email :initarg :email :initform common-lisp:nil :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor struct-shape-user-email :shape
                         "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         struct-shape-user-name :shape "UserName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-display-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or entity-state common-lisp:null)
                         :accessor struct-shape-user-state :shape "EntityState"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-role :initarg :user-role :initform
                         common-lisp:nil :type
                         (common-lisp:or user-role common-lisp:null) :accessor
                         struct-shape-user-user-role :shape "UserRole"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enabled-date :initarg :enabled-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-user-enabled-date :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (disabled-date :initarg :disabled-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-user-disabled-date :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role))
      (common-lisp:list
       (common-lisp:cons "UserRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-date))
      (common-lisp:list
       (common-lisp:cons "EnabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-date))
      (common-lisp:list
       (common-lisp:cons "DisabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:deftype user-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-id-list ()
   '(trivial-types:proper-list work-mail-identifier))
 (common-lisp:defun make-user-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list work-mail-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-name () 'common-lisp:string)
(common-lisp:deftype user-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype users () '(trivial-types:proper-list user))
 (common-lisp:defun make-users
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype work-mail-domain-name () 'common-lisp:string)
(common-lisp:deftype work-mail-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-delegate-to-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id resource-id entity-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id resource-id entity-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-delegate-to-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateDelegateToResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-delegate-to-resource))
(common-lisp:progn
 (common-lisp:defun associate-member-to-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id group-id member-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id group-id member-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-member-to-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateMemberToGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-member-to-group))
(common-lisp:progn
 (common-lisp:defun assume-impersonation-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id impersonation-role-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id impersonation-role-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-assume-impersonation-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssumeImpersonationRole"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'assume-impersonation-role))
(common-lisp:progn
 (common-lisp:defun cancel-mailbox-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token job-id organization-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token job-id organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-mailbox-export-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelMailboxExportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-mailbox-export-job))
(common-lisp:progn
 (common-lisp:defun create-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id alias)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-alias))
(common-lisp:progn
 (common-lisp:defun create-availability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token organization-id domain-name
                     ews-provider lambda-provider)
   (common-lisp:declare
    (common-lisp:ignorable client-token organization-id domain-name
     ews-provider lambda-provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-availability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAvailabilityConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-availability-configuration))
(common-lisp:progn
 (common-lisp:defun create-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id name
                     hidden-from-global-address-list)
   (common-lisp:declare
    (common-lisp:ignorable organization-id name
     hidden-from-global-address-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-group))
(common-lisp:progn
 (common-lisp:defun create-impersonation-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token organization-id name type
                     description rules)
   (common-lisp:declare
    (common-lisp:ignorable client-token organization-id name type description
     rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-impersonation-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateImpersonationRole"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-impersonation-role))
(common-lisp:progn
 (common-lisp:defun create-mobile-device-access-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id client-token name
                     description effect device-types not-device-types
                     device-models not-device-models device-operating-systems
                     not-device-operating-systems device-user-agents
                     not-device-user-agents)
   (common-lisp:declare
    (common-lisp:ignorable organization-id client-token name description effect
     device-types not-device-types device-models not-device-models
     device-operating-systems not-device-operating-systems device-user-agents
     not-device-user-agents))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-mobile-device-access-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateMobileDeviceAccessRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-mobile-device-access-rule))
(common-lisp:progn
 (common-lisp:defun create-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id alias client-token domains
                     kms-key-arn enable-interoperability)
   (common-lisp:declare
    (common-lisp:ignorable directory-id alias client-token domains kms-key-arn
     enable-interoperability))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-organization-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateOrganization"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-organization))
(common-lisp:progn
 (common-lisp:defun create-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id name type description
                     hidden-from-global-address-list)
   (common-lisp:declare
    (common-lisp:ignorable organization-id name type description
     hidden-from-global-address-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-resource))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id name display-name
                     password role first-name last-name
                     hidden-from-global-address-list)
   (common-lisp:declare
    (common-lisp:ignorable organization-id name display-name password role
     first-name last-name hidden-from-global-address-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun delete-access-control-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id name)
   (common-lisp:declare (common-lisp:ignorable organization-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-access-control-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAccessControlRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-access-control-rule))
(common-lisp:progn
 (common-lisp:defun delete-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id alias)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-alias))
(common-lisp:progn
 (common-lisp:defun delete-availability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id domain-name)
   (common-lisp:declare (common-lisp:ignorable organization-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-availability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAvailabilityConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-availability-configuration))
(common-lisp:progn
 (common-lisp:defun delete-email-monitoring-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id)
   (common-lisp:declare (common-lisp:ignorable organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-email-monitoring-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEmailMonitoringConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-email-monitoring-configuration))
(common-lisp:progn
 (common-lisp:defun delete-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id group-id)
   (common-lisp:declare (common-lisp:ignorable organization-id group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-group))
(common-lisp:progn
 (common-lisp:defun delete-impersonation-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id impersonation-role-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id impersonation-role-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-impersonation-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteImpersonationRole"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-impersonation-role))
(common-lisp:progn
 (common-lisp:defun delete-mailbox-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id grantee-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id grantee-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-mailbox-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMailboxPermissions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-mailbox-permissions))
(common-lisp:progn
 (common-lisp:defun delete-mobile-device-access-override
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id device-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id user-id device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-mobile-device-access-override-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMobileDeviceAccessOverride"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-mobile-device-access-override))
(common-lisp:progn
 (common-lisp:defun delete-mobile-device-access-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id
                     mobile-device-access-rule-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id mobile-device-access-rule-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-mobile-device-access-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMobileDeviceAccessRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-mobile-device-access-rule))
(common-lisp:progn
 (common-lisp:defun delete-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token organization-id
                     delete-directory force-delete)
   (common-lisp:declare
    (common-lisp:ignorable client-token organization-id delete-directory
     force-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-organization-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteOrganization"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-organization))
(common-lisp:progn
 (common-lisp:defun delete-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id resource-id)
   (common-lisp:declare (common-lisp:ignorable organization-id resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resource))
(common-lisp:progn
 (common-lisp:defun delete-retention-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id id)
   (common-lisp:declare (common-lisp:ignorable organization-id id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-retention-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRetentionPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-retention-policy))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id)
   (common-lisp:declare (common-lisp:ignorable organization-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun deregister-from-work-mail
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id)
   (common-lisp:declare (common-lisp:ignorable organization-id entity-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-from-work-mail-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterFromWorkMail"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-from-work-mail))
(common-lisp:progn
 (common-lisp:defun deregister-mail-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id domain-name)
   (common-lisp:declare (common-lisp:ignorable organization-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-mail-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterMailDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-mail-domain))
(common-lisp:progn
 (common-lisp:defun describe-email-monitoring-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id)
   (common-lisp:declare (common-lisp:ignorable organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-email-monitoring-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEmailMonitoringConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-email-monitoring-configuration))
(common-lisp:progn
 (common-lisp:defun describe-entity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id email)
   (common-lisp:declare (common-lisp:ignorable organization-id email))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-entity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEntity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-entity))
(common-lisp:progn
 (common-lisp:defun describe-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id group-id)
   (common-lisp:declare (common-lisp:ignorable organization-id group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-group))
(common-lisp:progn
 (common-lisp:defun describe-inbound-dmarc-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id)
   (common-lisp:declare (common-lisp:ignorable organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-inbound-dmarc-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeInboundDmarcSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-inbound-dmarc-settings))
(common-lisp:progn
 (common-lisp:defun describe-mailbox-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id organization-id)
   (common-lisp:declare (common-lisp:ignorable job-id organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-mailbox-export-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeMailboxExportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-mailbox-export-job))
(common-lisp:progn
 (common-lisp:defun describe-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id)
   (common-lisp:declare (common-lisp:ignorable organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-organization-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeOrganization"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-organization))
(common-lisp:progn
 (common-lisp:defun describe-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id resource-id)
   (common-lisp:declare (common-lisp:ignorable organization-id resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-resource))
(common-lisp:progn
 (common-lisp:defun describe-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id)
   (common-lisp:declare (common-lisp:ignorable organization-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-user))
(common-lisp:progn
 (common-lisp:defun disassociate-delegate-from-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id resource-id entity-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id resource-id entity-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-delegate-from-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateDelegateFromResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-delegate-from-resource))
(common-lisp:progn
 (common-lisp:defun disassociate-member-from-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id group-id member-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id group-id member-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-member-from-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateMemberFromGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-member-from-group))
(common-lisp:progn
 (common-lisp:defun get-access-control-effect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id ip-address action user-id
                     impersonation-role-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id ip-address action user-id
     impersonation-role-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-access-control-effect-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAccessControlEffect"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-access-control-effect))
(common-lisp:progn
 (common-lisp:defun get-default-retention-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id)
   (common-lisp:declare (common-lisp:ignorable organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-default-retention-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDefaultRetentionPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-default-retention-policy))
(common-lisp:progn
 (common-lisp:defun get-impersonation-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id impersonation-role-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id impersonation-role-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-impersonation-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetImpersonationRole"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-impersonation-role))
(common-lisp:progn
 (common-lisp:defun get-impersonation-role-effect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id impersonation-role-id
                     target-user)
   (common-lisp:declare
    (common-lisp:ignorable organization-id impersonation-role-id target-user))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-impersonation-role-effect-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetImpersonationRoleEffect"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-impersonation-role-effect))
(common-lisp:progn
 (common-lisp:defun get-mail-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id domain-name)
   (common-lisp:declare (common-lisp:ignorable organization-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mail-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMailDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-mail-domain))
(common-lisp:progn
 (common-lisp:defun get-mailbox-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id)
   (common-lisp:declare (common-lisp:ignorable organization-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mailbox-details-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMailboxDetails"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-mailbox-details))
(common-lisp:progn
 (common-lisp:defun get-mobile-device-access-effect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id device-type device-model
                     device-operating-system device-user-agent)
   (common-lisp:declare
    (common-lisp:ignorable organization-id device-type device-model
     device-operating-system device-user-agent))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-mobile-device-access-effect-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMobileDeviceAccessEffect"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-mobile-device-access-effect))
(common-lisp:progn
 (common-lisp:defun get-mobile-device-access-override
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id device-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id user-id device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-mobile-device-access-override-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMobileDeviceAccessOverride"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-mobile-device-access-override))
(common-lisp:progn
 (common-lisp:defun list-access-control-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id)
   (common-lisp:declare (common-lisp:ignorable organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-access-control-rules-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAccessControlRules"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-access-control-rules))
(common-lisp:progn
 (common-lisp:defun list-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAliases"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-aliases))
(common-lisp:progn
 (common-lisp:defun list-availability-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable organization-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-availability-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAvailabilityConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-availability-configurations))
(common-lisp:progn
 (common-lisp:defun list-group-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id group-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id group-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-group-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListGroupMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-group-members))
(common-lisp:progn
 (common-lisp:defun list-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id next-token max-results
                     filters)
   (common-lisp:declare
    (common-lisp:ignorable organization-id next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-groups))
(common-lisp:progn
 (common-lisp:defun list-groups-for-entity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id filters
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id filters next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-groups-for-entity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListGroupsForEntity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-groups-for-entity))
(common-lisp:progn
 (common-lisp:defun list-impersonation-roles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-impersonation-roles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListImpersonationRoles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-impersonation-roles))
(common-lisp:progn
 (common-lisp:defun list-mail-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable organization-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mail-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMailDomains"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-mail-domains))
(common-lisp:progn
 (common-lisp:defun list-mailbox-export-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mailbox-export-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMailboxExportJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-mailbox-export-jobs))
(common-lisp:progn
 (common-lisp:defun list-mailbox-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mailbox-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMailboxPermissions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-mailbox-permissions))
(common-lisp:progn
 (common-lisp:defun list-mobile-device-access-overrides
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id device-id
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id user-id device-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-mobile-device-access-overrides-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMobileDeviceAccessOverrides"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-mobile-device-access-overrides))
(common-lisp:progn
 (common-lisp:defun list-mobile-device-access-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id)
   (common-lisp:declare (common-lisp:ignorable organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-mobile-device-access-rules-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMobileDeviceAccessRules"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-mobile-device-access-rules))
(common-lisp:progn
 (common-lisp:defun list-organizations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-organizations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListOrganizations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-organizations))
(common-lisp:progn
 (common-lisp:defun list-resource-delegates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id resource-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id resource-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resource-delegates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListResourceDelegates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resource-delegates))
(common-lisp:progn
 (common-lisp:defun list-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id next-token max-results
                     filters)
   (common-lisp:declare
    (common-lisp:ignorable organization-id next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListResources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resources))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id next-token max-results
                     filters)
   (common-lisp:declare
    (common-lisp:ignorable organization-id next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListUsers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-users))
(common-lisp:progn
 (common-lisp:defun put-access-control-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name effect description ip-ranges
                     not-ip-ranges actions not-actions user-ids not-user-ids
                     organization-id impersonation-role-ids
                     not-impersonation-role-ids)
   (common-lisp:declare
    (common-lisp:ignorable name effect description ip-ranges not-ip-ranges
     actions not-actions user-ids not-user-ids organization-id
     impersonation-role-ids not-impersonation-role-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-access-control-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutAccessControlRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-access-control-rule))
(common-lisp:progn
 (common-lisp:defun put-email-monitoring-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id role-arn log-group-arn)
   (common-lisp:declare
    (common-lisp:ignorable organization-id role-arn log-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-email-monitoring-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutEmailMonitoringConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-email-monitoring-configuration))
(common-lisp:progn
 (common-lisp:defun put-inbound-dmarc-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id enforced)
   (common-lisp:declare (common-lisp:ignorable organization-id enforced))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-inbound-dmarc-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutInboundDmarcSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-inbound-dmarc-settings))
(common-lisp:progn
 (common-lisp:defun put-mailbox-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id grantee-id
                     permission-values)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id grantee-id
     permission-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-mailbox-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutMailboxPermissions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-mailbox-permissions))
(common-lisp:progn
 (common-lisp:defun put-mobile-device-access-override
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id device-id effect
                     description)
   (common-lisp:declare
    (common-lisp:ignorable organization-id user-id device-id effect
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-mobile-device-access-override-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutMobileDeviceAccessOverride"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-mobile-device-access-override))
(common-lisp:progn
 (common-lisp:defun put-retention-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id id name description
                     folder-configurations)
   (common-lisp:declare
    (common-lisp:ignorable organization-id id name description
     folder-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-retention-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRetentionPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-retention-policy))
(common-lisp:progn
 (common-lisp:defun register-mail-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token organization-id domain-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token organization-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-mail-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterMailDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-mail-domain))
(common-lisp:progn
 (common-lisp:defun register-to-work-mail
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id email)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id email))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-to-work-mail-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterToWorkMail"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-to-work-mail))
(common-lisp:progn
 (common-lisp:defun reset-password
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id password)
   (common-lisp:declare
    (common-lisp:ignorable organization-id user-id password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-password-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetPassword"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reset-password))
(common-lisp:progn
 (common-lisp:defun start-mailbox-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token organization-id entity-id
                     description role-arn kms-key-arn s3bucket-name s3prefix)
   (common-lisp:declare
    (common-lisp:ignorable client-token organization-id entity-id description
     role-arn kms-key-arn s3bucket-name s3prefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-mailbox-export-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMailboxExportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-mailbox-export-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-availability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id domain-name ews-provider
                     lambda-provider)
   (common-lisp:declare
    (common-lisp:ignorable organization-id domain-name ews-provider
     lambda-provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-test-availability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TestAvailabilityConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'test-availability-configuration))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-availability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id domain-name ews-provider
                     lambda-provider)
   (common-lisp:declare
    (common-lisp:ignorable organization-id domain-name ews-provider
     lambda-provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-availability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAvailabilityConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-availability-configuration))
(common-lisp:progn
 (common-lisp:defun update-default-mail-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id domain-name)
   (common-lisp:declare (common-lisp:ignorable organization-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-default-mail-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDefaultMailDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-default-mail-domain))
(common-lisp:progn
 (common-lisp:defun update-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id group-id
                     hidden-from-global-address-list)
   (common-lisp:declare
    (common-lisp:ignorable organization-id group-id
     hidden-from-global-address-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-group))
(common-lisp:progn
 (common-lisp:defun update-impersonation-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id impersonation-role-id
                     name type description rules)
   (common-lisp:declare
    (common-lisp:ignorable organization-id impersonation-role-id name type
     description rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-impersonation-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateImpersonationRole"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-impersonation-role))
(common-lisp:progn
 (common-lisp:defun update-mailbox-quota
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id mailbox-quota)
   (common-lisp:declare
    (common-lisp:ignorable organization-id user-id mailbox-quota))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-mailbox-quota-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateMailboxQuota"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-mailbox-quota))
(common-lisp:progn
 (common-lisp:defun update-mobile-device-access-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id
                     mobile-device-access-rule-id name description effect
                     device-types not-device-types device-models
                     not-device-models device-operating-systems
                     not-device-operating-systems device-user-agents
                     not-device-user-agents)
   (common-lisp:declare
    (common-lisp:ignorable organization-id mobile-device-access-rule-id name
     description effect device-types not-device-types device-models
     not-device-models device-operating-systems not-device-operating-systems
     device-user-agents not-device-user-agents))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-mobile-device-access-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateMobileDeviceAccessRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-mobile-device-access-rule))
(common-lisp:progn
 (common-lisp:defun update-primary-email-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id email)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id email))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-primary-email-address-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdatePrimaryEmailAddress"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-primary-email-address))
(common-lisp:progn
 (common-lisp:defun update-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id resource-id name
                     booking-options description type
                     hidden-from-global-address-list)
   (common-lisp:declare
    (common-lisp:ignorable organization-id resource-id name booking-options
     description type hidden-from-global-address-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-resource))
(common-lisp:progn
 (common-lisp:defun update-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id role display-name
                     first-name last-name hidden-from-global-address-list
                     initials telephone street job-title city company zip-code
                     department country office)
   (common-lisp:declare
    (common-lisp:ignorable organization-id user-id role display-name first-name
     last-name hidden-from-global-address-list initials telephone street
     job-title city company zip-code department country office))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-user))
