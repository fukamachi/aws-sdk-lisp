;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/transcribe/api
  (:use)
  (:nicknames #:aws/transcribe)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/transcribe/api)
(common-lisp:progn
 (common-lisp:define-condition transcribe-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'transcribe-error))
(common-lisp:progn
 (common-lisp:defclass transcribe-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "transcribe" :api-version
                        "2017-10-26" :host-prefix "transcribe" :signing-name
                        "transcribe" :global-host common-lisp:nil
                        :target-prefix "Transcribe" :json-version "1.1"))
 (common-lisp:export 'transcribe-request))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotFoundException" . not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass absolute-time-range common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-milliseconds
                                         common-lisp:null)
                         :accessor struct-shape-absolute-time-range-start-time
                         :shape "TimestampMilliseconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type
                         (common-lisp:or timestamp-milliseconds
                                         common-lisp:null)
                         :accessor struct-shape-absolute-time-range-end-time
                         :shape "TimestampMilliseconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (first :initarg :first :initform common-lisp:nil :type
                         (common-lisp:or timestamp-milliseconds
                                         common-lisp:null)
                         :accessor struct-shape-absolute-time-range-first
                         :shape "TimestampMilliseconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last :initarg :last :initform common-lisp:nil :type
                         (common-lisp:or timestamp-milliseconds
                                         common-lisp:null)
                         :accessor struct-shape-absolute-time-range-last :shape
                         "TimestampMilliseconds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-absolute-time-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'absolute-time-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'absolute-time-range 'make-absolute-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input absolute-time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input absolute-time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first))
      (common-lisp:list
       (common-lisp:cons "First"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last))
      (common-lisp:list
       (common-lisp:cons "Last"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input absolute-time-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (transcribe-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype base-model-name () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype clmlanguage-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass call-analytics-job common-lisp:nil
                       ((call-analytics-job-name :initarg
                         :call-analytics-job-name :initform common-lisp:nil
                         :type
                         (common-lisp:or call-analytics-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-call-analytics-job-name
                         :shape "CallAnalyticsJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (call-analytics-job-status :initarg
                         :call-analytics-job-status :initform common-lisp:nil
                         :type
                         (common-lisp:or call-analytics-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-call-analytics-job-status
                         :shape "CallAnalyticsJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-language-code :shape
                         "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (media-sample-rate-hertz :initarg
                         :media-sample-rate-hertz :initform common-lisp:nil
                         :type
                         (common-lisp:or media-sample-rate-hertz
                                         common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-media-sample-rate-hertz
                         :shape "MediaSampleRateHertz" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (media-format :initarg :media-format :initform
                         common-lisp:nil :type
                         (common-lisp:or media-format common-lisp:null)
                         :accessor struct-shape-call-analytics-job-media-format
                         :shape "MediaFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (media :initarg :media :initform common-lisp:nil :type
                         (common-lisp:or media common-lisp:null) :accessor
                         struct-shape-call-analytics-job-media :shape "Media"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (transcript :initarg :transcript :initform
                         common-lisp:nil :type
                         (common-lisp:or transcript common-lisp:null) :accessor
                         struct-shape-call-analytics-job-transcript :shape
                         "Transcript" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-call-analytics-job-start-time :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-call-analytics-job-creation-time :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completion-time :initarg :completion-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-call-analytics-job-completion-time :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reason common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-failure-reason :shape
                         "FailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or data-access-role-arn common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-data-access-role-arn
                         :shape "DataAccessRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identified-language-score :initarg
                         :identified-language-score :initform common-lisp:nil
                         :type
                         (common-lisp:or identified-language-score
                                         common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-identified-language-score
                         :shape "IdentifiedLanguageScore" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or call-analytics-job-settings
                                         common-lisp:null)
                         :accessor struct-shape-call-analytics-job-settings
                         :shape "CallAnalyticsJobSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (channel-definitions :initarg :channel-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or channel-definitions common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-channel-definitions
                         :shape "ChannelDefinitions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-call-analytics-job
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'call-analytics-job
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'call-analytics-job 'make-call-analytics-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input call-analytics-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input call-analytics-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-job-name))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-job-status))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:list
       (common-lisp:cons "MediaSampleRateHertz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-format))
      (common-lisp:list
       (common-lisp:cons "MediaFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media))
      (common-lisp:list
       (common-lisp:cons "Media"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identified-language-score))
      (common-lisp:list
       (common-lisp:cons "IdentifiedLanguageScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-definitions))
      (common-lisp:list
       (common-lisp:cons "ChannelDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input call-analytics-job))
   common-lisp:nil))
(common-lisp:deftype call-analytics-job-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass call-analytics-job-settings common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-settings-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-settings-vocabulary-filter-name
                         :shape "VocabularyFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vocabulary-filter-method :initarg
                         :vocabulary-filter-method :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-method
                                         common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-settings-vocabulary-filter-method
                         :shape "VocabularyFilterMethod" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-model-name :initarg :language-model-name
                         :initform common-lisp:nil :type
                         (common-lisp:or model-name common-lisp:null) :accessor
                         struct-shape-call-analytics-job-settings-language-model-name
                         :shape "ModelName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-redaction :initarg :content-redaction
                         :initform common-lisp:nil :type
                         (common-lisp:or content-redaction common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-settings-content-redaction
                         :shape "ContentRedaction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-options :initarg :language-options :initform
                         common-lisp:nil :type
                         (common-lisp:or language-options common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-settings-language-options
                         :shape "LanguageOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-id-settings :initarg :language-id-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or language-id-settings-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-settings-language-id-settings
                         :shape "LanguageIdSettingsMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (summarization :initarg :summarization :initform
                         common-lisp:nil :type
                         (common-lisp:or summarization common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-settings-summarization
                         :shape "Summarization" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-call-analytics-job-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'call-analytics-job-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'call-analytics-job-settings
                    'make-call-analytics-job-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-job-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-job-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-method))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:list
       (common-lisp:cons "LanguageModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-redaction))
      (common-lisp:list
       (common-lisp:cons "ContentRedaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-options))
      (common-lisp:list
       (common-lisp:cons "LanguageOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-id-settings))
      (common-lisp:list
       (common-lisp:cons "LanguageIdSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summarization))
      (common-lisp:list
       (common-lisp:cons "Summarization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-job-settings))
   common-lisp:nil))
(common-lisp:deftype call-analytics-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype call-analytics-job-summaries ()
   '(trivial-types:proper-list call-analytics-job-summary))
 (common-lisp:defun make-call-analytics-job-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            call-analytics-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass call-analytics-job-summary common-lisp:nil
                       ((call-analytics-job-name :initarg
                         :call-analytics-job-name :initform common-lisp:nil
                         :type
                         (common-lisp:or call-analytics-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-summary-call-analytics-job-name
                         :shape "CallAnalyticsJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-call-analytics-job-summary-creation-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-call-analytics-job-summary-start-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completion-time :initarg :completion-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-call-analytics-job-summary-completion-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-summary-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (call-analytics-job-status :initarg
                         :call-analytics-job-status :initform common-lisp:nil
                         :type
                         (common-lisp:or call-analytics-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-summary-call-analytics-job-status
                         :shape "CallAnalyticsJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reason common-lisp:null)
                         :accessor
                         struct-shape-call-analytics-job-summary-failure-reason
                         :shape "FailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-call-analytics-job-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'call-analytics-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'call-analytics-job-summary
                    'make-call-analytics-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-job-name))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-job-status))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-job-summary))
   common-lisp:nil))
(common-lisp:deftype category-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass category-properties common-lisp:nil
                       ((category-name :initarg :category-name :initform
                         common-lisp:nil :type
                         (common-lisp:or category-name common-lisp:null)
                         :accessor
                         struct-shape-category-properties-category-name :shape
                         "CategoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or rule-list common-lisp:null) :accessor
                         struct-shape-category-properties-rules :shape
                         "RuleList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-category-properties-create-time :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-category-properties-last-update-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-type :initarg :input-type :initform
                         common-lisp:nil :type
                         (common-lisp:or input-type common-lisp:null) :accessor
                         struct-shape-category-properties-input-type :shape
                         "InputType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-category-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'category-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'category-properties 'make-category-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input category-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input category-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-name))
      (common-lisp:list
       (common-lisp:cons "CategoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-type))
      (common-lisp:list
       (common-lisp:cons "InputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input category-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype category-properties-list ()
   '(trivial-types:proper-list category-properties))
 (common-lisp:defun make-category-properties-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list category-properties))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass channel-definition common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-id common-lisp:null) :accessor
                         struct-shape-channel-definition-channel-id :shape
                         "ChannelId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (participant-role :initarg :participant-role :initform
                         common-lisp:nil :type
                         (common-lisp:or participant-role common-lisp:null)
                         :accessor
                         struct-shape-channel-definition-participant-role
                         :shape "ParticipantRole" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-channel-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'channel-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'channel-definition 'make-channel-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-definitions ()
   '(trivial-types:proper-list channel-definition))
 (common-lisp:defun make-channel-definitions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype channel-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (transcribe-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass content-redaction common-lisp:nil
                       ((redaction-type :initarg :redaction-type :initform
                         (common-lisp:error ":redaction-type is required")
                         :type (common-lisp:or redaction-type common-lisp:null)
                         :accessor
                         struct-shape-content-redaction-redaction-type :shape
                         "RedactionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redaction-output :initarg :redaction-output :initform
                         (common-lisp:error ":redaction-output is required")
                         :type
                         (common-lisp:or redaction-output common-lisp:null)
                         :accessor
                         struct-shape-content-redaction-redaction-output :shape
                         "RedactionOutput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pii-entity-types :initarg :pii-entity-types :initform
                         common-lisp:nil :type
                         (common-lisp:or pii-entity-types common-lisp:null)
                         :accessor
                         struct-shape-content-redaction-pii-entity-types :shape
                         "PiiEntityTypes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-content-redaction
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'content-redaction
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'content-redaction 'make-content-redaction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input content-redaction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input content-redaction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redaction-type))
      (common-lisp:list
       (common-lisp:cons "RedactionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redaction-output))
      (common-lisp:list
       (common-lisp:cons "RedactionOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pii-entity-types))
      (common-lisp:list
       (common-lisp:cons "PiiEntityTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input content-redaction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-call-analytics-category-request common-lisp:nil
                       ((category-name :initarg :category-name :initform
                         (common-lisp:error ":category-name is required") :type
                         (common-lisp:or category-name common-lisp:null)
                         :accessor
                         struct-shape-create-call-analytics-category-request-category-name
                         :shape "CategoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or rule-list common-lisp:null) :accessor
                         struct-shape-create-call-analytics-category-request-rules
                         :shape "RuleList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-type :initarg :input-type :initform
                         common-lisp:nil :type
                         (common-lisp:or input-type common-lisp:null) :accessor
                         struct-shape-create-call-analytics-category-request-input-type
                         :shape "InputType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-call-analytics-category-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-call-analytics-category-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-call-analytics-category-request
                    'make-create-call-analytics-category-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-call-analytics-category-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-call-analytics-category-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-name))
      (common-lisp:list
       (common-lisp:cons "CategoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-type))
      (common-lisp:list
       (common-lisp:cons "InputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-call-analytics-category-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-call-analytics-category-response common-lisp:nil
                       ((category-properties :initarg :category-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or category-properties common-lisp:null)
                         :accessor
                         struct-shape-create-call-analytics-category-response-category-properties
                         :shape "CategoryProperties" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-call-analytics-category-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-call-analytics-category-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-call-analytics-category-response
                    'make-create-call-analytics-category-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-call-analytics-category-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-call-analytics-category-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-properties))
      (common-lisp:list
       (common-lisp:cons "CategoryProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-call-analytics-category-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-language-model-request common-lisp:nil
                       ((language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or clmlanguage-code common-lisp:null)
                         :accessor
                         struct-shape-create-language-model-request-language-code
                         :shape "CLMLanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (base-model-name :initarg :base-model-name :initform
                         (common-lisp:error ":base-model-name is required")
                         :type
                         (common-lisp:or base-model-name common-lisp:null)
                         :accessor
                         struct-shape-create-language-model-request-base-model-name
                         :shape "BaseModelName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-name :initarg :model-name :initform
                         (common-lisp:error ":model-name is required") :type
                         (common-lisp:or model-name common-lisp:null) :accessor
                         struct-shape-create-language-model-request-model-name
                         :shape "ModelName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-data-config :initarg :input-data-config
                         :initform
                         (common-lisp:error ":input-data-config is required")
                         :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         struct-shape-create-language-model-request-input-data-config
                         :shape "InputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-language-model-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-language-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-language-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-language-model-request
                    'make-create-language-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-language-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-language-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-model-name))
      (common-lisp:list
       (common-lisp:cons "BaseModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-language-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-language-model-response common-lisp:nil
                       ((language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or clmlanguage-code common-lisp:null)
                         :accessor
                         struct-shape-create-language-model-response-language-code
                         :shape "CLMLanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (base-model-name :initarg :base-model-name :initform
                         common-lisp:nil :type
                         (common-lisp:or base-model-name common-lisp:null)
                         :accessor
                         struct-shape-create-language-model-response-base-model-name
                         :shape "BaseModelName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-name :initarg :model-name :initform
                         common-lisp:nil :type
                         (common-lisp:or model-name common-lisp:null) :accessor
                         struct-shape-create-language-model-response-model-name
                         :shape "ModelName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-data-config :initarg :input-data-config
                         :initform common-lisp:nil :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         struct-shape-create-language-model-response-input-data-config
                         :shape "InputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-status :initarg :model-status :initform
                         common-lisp:nil :type
                         (common-lisp:or model-status common-lisp:null)
                         :accessor
                         struct-shape-create-language-model-response-model-status
                         :shape "ModelStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-language-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-language-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-language-model-response
                    'make-create-language-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-language-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-language-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-model-name))
      (common-lisp:list
       (common-lisp:cons "BaseModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-status))
      (common-lisp:list
       (common-lisp:cons "ModelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-language-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-medical-vocabulary-request common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         (common-lisp:error ":vocabulary-name is required")
                         :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-create-medical-vocabulary-request-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-create-medical-vocabulary-request-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-file-uri :initarg :vocabulary-file-uri
                         :initform
                         (common-lisp:error ":vocabulary-file-uri is required")
                         :type (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-create-medical-vocabulary-request-vocabulary-file-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-medical-vocabulary-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-medical-vocabulary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-medical-vocabulary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-medical-vocabulary-request
                    'make-create-medical-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-medical-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-medical-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-file-uri))
      (common-lisp:list
       (common-lisp:cons "VocabularyFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-medical-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-medical-vocabulary-response common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-create-medical-vocabulary-response-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-create-medical-vocabulary-response-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-state :initarg :vocabulary-state :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-state common-lisp:null)
                         :accessor
                         struct-shape-create-medical-vocabulary-response-vocabulary-state
                         :shape "VocabularyState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-create-medical-vocabulary-response-last-modified-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reason common-lisp:null)
                         :accessor
                         struct-shape-create-medical-vocabulary-response-failure-reason
                         :shape "FailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-medical-vocabulary-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-medical-vocabulary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-medical-vocabulary-response
                    'make-create-medical-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-medical-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-medical-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-state))
      (common-lisp:list
       (common-lisp:cons "VocabularyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-medical-vocabulary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vocabulary-filter-request common-lisp:nil
                       ((vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform
                         (common-lisp:error
                          ":vocabulary-filter-name is required")
                         :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-vocabulary-filter-request-vocabulary-filter-name
                         :shape "VocabularyFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-create-vocabulary-filter-request-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (words :initarg :words :initform common-lisp:nil :type
                         (common-lisp:or words common-lisp:null) :accessor
                         struct-shape-create-vocabulary-filter-request-words
                         :shape "Words" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-filter-file-uri :initarg
                         :vocabulary-filter-file-uri :initform common-lisp:nil
                         :type (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-create-vocabulary-filter-request-vocabulary-filter-file-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-vocabulary-filter-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or data-access-role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-vocabulary-filter-request-data-access-role-arn
                         :shape "DataAccessRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vocabulary-filter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vocabulary-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vocabulary-filter-request
                    'make-create-vocabulary-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'words))
      (common-lisp:list
       (common-lisp:cons "Words"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-file-uri))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vocabulary-filter-response common-lisp:nil
                       ((vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-vocabulary-filter-response-vocabulary-filter-name
                         :shape "VocabularyFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-create-vocabulary-filter-response-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-create-vocabulary-filter-response-last-modified-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vocabulary-filter-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vocabulary-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vocabulary-filter-response
                    'make-create-vocabulary-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vocabulary-request common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         (common-lisp:error ":vocabulary-name is required")
                         :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-create-vocabulary-request-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-create-vocabulary-request-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (phrases :initarg :phrases :initform common-lisp:nil
                         :type (common-lisp:or phrases common-lisp:null)
                         :accessor
                         struct-shape-create-vocabulary-request-phrases :shape
                         "Phrases" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vocabulary-file-uri :initarg :vocabulary-file-uri
                         :initform common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-create-vocabulary-request-vocabulary-file-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-vocabulary-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or data-access-role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-vocabulary-request-data-access-role-arn
                         :shape "DataAccessRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vocabulary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-vocabulary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vocabulary-request
                    'make-create-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phrases))
      (common-lisp:list
       (common-lisp:cons "Phrases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-file-uri))
      (common-lisp:list
       (common-lisp:cons "VocabularyFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vocabulary-response common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-create-vocabulary-response-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-create-vocabulary-response-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-state :initarg :vocabulary-state :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-state common-lisp:null)
                         :accessor
                         struct-shape-create-vocabulary-response-vocabulary-state
                         :shape "VocabularyState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-create-vocabulary-response-last-modified-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reason common-lisp:null)
                         :accessor
                         struct-shape-create-vocabulary-response-failure-reason
                         :shape "FailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vocabulary-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-vocabulary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vocabulary-response
                    'make-create-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-state))
      (common-lisp:list
       (common-lisp:cons "VocabularyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-response))
   common-lisp:nil))
(common-lisp:deftype data-access-role-arn () 'common-lisp:string)
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-call-analytics-category-request common-lisp:nil
                       ((category-name :initarg :category-name :initform
                         (common-lisp:error ":category-name is required") :type
                         (common-lisp:or category-name common-lisp:null)
                         :accessor
                         struct-shape-delete-call-analytics-category-request-category-name
                         :shape "CategoryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-call-analytics-category-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-call-analytics-category-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-call-analytics-category-request
                    'make-delete-call-analytics-category-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-category-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-category-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-name))
      (common-lisp:list
       (common-lisp:cons "CategoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-category-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-call-analytics-category-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-call-analytics-category-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-call-analytics-category-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-call-analytics-category-response
                    'make-delete-call-analytics-category-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-category-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-category-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-category-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-call-analytics-job-request common-lisp:nil
                       ((call-analytics-job-name :initarg
                         :call-analytics-job-name :initform
                         (common-lisp:error
                          ":call-analytics-job-name is required")
                         :type
                         (common-lisp:or call-analytics-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-call-analytics-job-request-call-analytics-job-name
                         :shape "CallAnalyticsJobName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-call-analytics-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-call-analytics-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-call-analytics-job-request
                    'make-delete-call-analytics-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-job-name))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-call-analytics-job-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-call-analytics-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-call-analytics-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-call-analytics-job-response
                    'make-delete-call-analytics-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-language-model-request common-lisp:nil
                       ((model-name :initarg :model-name :initform
                         (common-lisp:error ":model-name is required") :type
                         (common-lisp:or model-name common-lisp:null) :accessor
                         struct-shape-delete-language-model-request-model-name
                         :shape "ModelName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-language-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-language-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-language-model-request
                    'make-delete-language-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-language-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-language-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-language-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-medical-scribe-job-request common-lisp:nil
                       ((medical-scribe-job-name :initarg
                         :medical-scribe-job-name :initform
                         (common-lisp:error
                          ":medical-scribe-job-name is required")
                         :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-medical-scribe-job-request-medical-scribe-job-name
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-medical-scribe-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-medical-scribe-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-medical-scribe-job-request
                    'make-delete-medical-scribe-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-medical-scribe-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-medical-scribe-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-scribe-job-name))
      (common-lisp:list
       (common-lisp:cons "MedicalScribeJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-medical-scribe-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-medical-transcription-job-request common-lisp:nil
                       ((medical-transcription-job-name :initarg
                         :medical-transcription-job-name :initform
                         (common-lisp:error
                          ":medical-transcription-job-name is required")
                         :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-medical-transcription-job-request-medical-transcription-job-name
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-medical-transcription-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-medical-transcription-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-medical-transcription-job-request
                    'make-delete-medical-transcription-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-medical-transcription-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-medical-transcription-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "MedicalTranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-medical-transcription-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-medical-vocabulary-request common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         (common-lisp:error ":vocabulary-name is required")
                         :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-delete-medical-vocabulary-request-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-medical-vocabulary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-medical-vocabulary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-medical-vocabulary-request
                    'make-delete-medical-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-medical-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-medical-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-medical-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-transcription-job-request common-lisp:nil
                       ((transcription-job-name :initarg
                         :transcription-job-name :initform
                         (common-lisp:error
                          ":transcription-job-name is required")
                         :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-transcription-job-request-transcription-job-name
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-transcription-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-transcription-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-transcription-job-request
                    'make-delete-transcription-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-transcription-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-transcription-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-transcription-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vocabulary-filter-request common-lisp:nil
                       ((vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform
                         (common-lisp:error
                          ":vocabulary-filter-name is required")
                         :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-vocabulary-filter-request-vocabulary-filter-name
                         :shape "VocabularyFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-vocabulary-filter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vocabulary-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-vocabulary-filter-request
                    'make-delete-vocabulary-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vocabulary-request common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         (common-lisp:error ":vocabulary-name is required")
                         :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-delete-vocabulary-request-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-vocabulary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-vocabulary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-vocabulary-request
                    'make-delete-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-language-model-request common-lisp:nil
                       ((model-name :initarg :model-name :initform
                         (common-lisp:error ":model-name is required") :type
                         (common-lisp:or model-name common-lisp:null) :accessor
                         struct-shape-describe-language-model-request-model-name
                         :shape "ModelName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-language-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-language-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-language-model-request
                    'make-describe-language-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-language-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-language-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-language-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-language-model-response common-lisp:nil
                       ((language-model :initarg :language-model :initform
                         common-lisp:nil :type
                         (common-lisp:or language-model common-lisp:null)
                         :accessor
                         struct-shape-describe-language-model-response-language-model
                         :shape "LanguageModel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-language-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-language-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-language-model-response
                    'make-describe-language-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-language-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-language-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model))
      (common-lisp:list
       (common-lisp:cons "LanguageModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-language-model-response))
   common-lisp:nil))
(common-lisp:deftype duration-in-seconds () 'common-lisp:single-float)
(common-lisp:deftype failure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-call-analytics-category-request common-lisp:nil
                       ((category-name :initarg :category-name :initform
                         (common-lisp:error ":category-name is required") :type
                         (common-lisp:or category-name common-lisp:null)
                         :accessor
                         struct-shape-get-call-analytics-category-request-category-name
                         :shape "CategoryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-call-analytics-category-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-call-analytics-category-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-call-analytics-category-request
                    'make-get-call-analytics-category-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-category-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-category-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-name))
      (common-lisp:list
       (common-lisp:cons "CategoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-category-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-call-analytics-category-response common-lisp:nil
                       ((category-properties :initarg :category-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or category-properties common-lisp:null)
                         :accessor
                         struct-shape-get-call-analytics-category-response-category-properties
                         :shape "CategoryProperties" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-call-analytics-category-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-call-analytics-category-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-call-analytics-category-response
                    'make-get-call-analytics-category-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-category-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-category-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-properties))
      (common-lisp:list
       (common-lisp:cons "CategoryProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-category-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-call-analytics-job-request common-lisp:nil
                       ((call-analytics-job-name :initarg
                         :call-analytics-job-name :initform
                         (common-lisp:error
                          ":call-analytics-job-name is required")
                         :type
                         (common-lisp:or call-analytics-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-call-analytics-job-request-call-analytics-job-name
                         :shape "CallAnalyticsJobName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-call-analytics-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-call-analytics-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-call-analytics-job-request
                    'make-get-call-analytics-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-job-name))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-call-analytics-job-response common-lisp:nil
                       ((call-analytics-job :initarg :call-analytics-job
                         :initform common-lisp:nil :type
                         (common-lisp:or call-analytics-job common-lisp:null)
                         :accessor
                         struct-shape-get-call-analytics-job-response-call-analytics-job
                         :shape "CallAnalyticsJob" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-call-analytics-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-call-analytics-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-call-analytics-job-response
                    'make-get-call-analytics-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-analytics-job))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-medical-scribe-job-request common-lisp:nil
                       ((medical-scribe-job-name :initarg
                         :medical-scribe-job-name :initform
                         (common-lisp:error
                          ":medical-scribe-job-name is required")
                         :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-medical-scribe-job-request-medical-scribe-job-name
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-medical-scribe-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-medical-scribe-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-medical-scribe-job-request
                    'make-get-medical-scribe-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-scribe-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-scribe-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-scribe-job-name))
      (common-lisp:list
       (common-lisp:cons "MedicalScribeJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-scribe-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-medical-scribe-job-response common-lisp:nil
                       ((medical-scribe-job :initarg :medical-scribe-job
                         :initform common-lisp:nil :type
                         (common-lisp:or medical-scribe-job common-lisp:null)
                         :accessor
                         struct-shape-get-medical-scribe-job-response-medical-scribe-job
                         :shape "MedicalScribeJob" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-medical-scribe-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-medical-scribe-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-medical-scribe-job-response
                    'make-get-medical-scribe-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-scribe-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-scribe-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'medical-scribe-job))
      (common-lisp:list
       (common-lisp:cons "MedicalScribeJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-scribe-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-medical-transcription-job-request common-lisp:nil
                       ((medical-transcription-job-name :initarg
                         :medical-transcription-job-name :initform
                         (common-lisp:error
                          ":medical-transcription-job-name is required")
                         :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-medical-transcription-job-request-medical-transcription-job-name
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-medical-transcription-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-medical-transcription-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-medical-transcription-job-request
                    'make-get-medical-transcription-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-transcription-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-transcription-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "MedicalTranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-transcription-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-medical-transcription-job-response common-lisp:nil
                       ((medical-transcription-job :initarg
                         :medical-transcription-job :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-transcription-job
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-medical-transcription-job-response-medical-transcription-job
                         :shape "MedicalTranscriptionJob" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-medical-transcription-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-medical-transcription-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-medical-transcription-job-response
                    'make-get-medical-transcription-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-transcription-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-transcription-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-transcription-job))
      (common-lisp:list
       (common-lisp:cons "MedicalTranscriptionJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-transcription-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-medical-vocabulary-request common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         (common-lisp:error ":vocabulary-name is required")
                         :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-get-medical-vocabulary-request-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-medical-vocabulary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-medical-vocabulary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-medical-vocabulary-request
                    'make-get-medical-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-medical-vocabulary-response common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-get-medical-vocabulary-response-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-get-medical-vocabulary-response-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-state :initarg :vocabulary-state :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-state common-lisp:null)
                         :accessor
                         struct-shape-get-medical-vocabulary-response-vocabulary-state
                         :shape "VocabularyState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-get-medical-vocabulary-response-last-modified-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reason common-lisp:null)
                         :accessor
                         struct-shape-get-medical-vocabulary-response-failure-reason
                         :shape "FailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (download-uri :initarg :download-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-get-medical-vocabulary-response-download-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-medical-vocabulary-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-medical-vocabulary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-medical-vocabulary-response
                    'make-get-medical-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-state))
      (common-lisp:list
       (common-lisp:cons "VocabularyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-uri))
      (common-lisp:list
       (common-lisp:cons "DownloadUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-vocabulary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-transcription-job-request common-lisp:nil
                       ((transcription-job-name :initarg
                         :transcription-job-name :initform
                         (common-lisp:error
                          ":transcription-job-name is required")
                         :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-transcription-job-request-transcription-job-name
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-transcription-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-transcription-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-transcription-job-request
                    'make-get-transcription-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transcription-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transcription-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transcription-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-transcription-job-response common-lisp:nil
                       ((transcription-job :initarg :transcription-job
                         :initform common-lisp:nil :type
                         (common-lisp:or transcription-job common-lisp:null)
                         :accessor
                         struct-shape-get-transcription-job-response-transcription-job
                         :shape "TranscriptionJob" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-transcription-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-transcription-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-transcription-job-response
                    'make-get-transcription-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transcription-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transcription-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcription-job))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transcription-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vocabulary-filter-request common-lisp:nil
                       ((vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform
                         (common-lisp:error
                          ":vocabulary-filter-name is required")
                         :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-vocabulary-filter-request-vocabulary-filter-name
                         :shape "VocabularyFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-vocabulary-filter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-vocabulary-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-vocabulary-filter-request
                    'make-get-vocabulary-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vocabulary-filter-response common-lisp:nil
                       ((vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-vocabulary-filter-response-vocabulary-filter-name
                         :shape "VocabularyFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-get-vocabulary-filter-response-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-get-vocabulary-filter-response-last-modified-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (download-uri :initarg :download-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-get-vocabulary-filter-response-download-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-vocabulary-filter-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-vocabulary-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-vocabulary-filter-response
                    'make-get-vocabulary-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-uri))
      (common-lisp:list
       (common-lisp:cons "DownloadUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vocabulary-request common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         (common-lisp:error ":vocabulary-name is required")
                         :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-get-vocabulary-request-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-vocabulary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-vocabulary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-vocabulary-request 'make-get-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vocabulary-response common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-get-vocabulary-response-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-get-vocabulary-response-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-state :initarg :vocabulary-state :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-state common-lisp:null)
                         :accessor
                         struct-shape-get-vocabulary-response-vocabulary-state
                         :shape "VocabularyState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-get-vocabulary-response-last-modified-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reason common-lisp:null)
                         :accessor
                         struct-shape-get-vocabulary-response-failure-reason
                         :shape "FailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (download-uri :initarg :download-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-get-vocabulary-response-download-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-vocabulary-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-vocabulary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-vocabulary-response 'make-get-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-state))
      (common-lisp:list
       (common-lisp:cons "VocabularyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-uri))
      (common-lisp:list
       (common-lisp:cons "DownloadUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-response))
   common-lisp:nil))
(common-lisp:deftype identified-language-score () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass input-data-config common-lisp:nil
                       ((s3uri :initarg :s3uri :initform
                         (common-lisp:error ":s3uri is required") :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-input-data-config-s3uri :shape "Uri"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tuning-data-s3uri :initarg :tuning-data-s3uri
                         :initform common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-input-data-config-tuning-data-s3uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform
                         (common-lisp:error
                          ":data-access-role-arn is required")
                         :type
                         (common-lisp:or data-access-role-arn common-lisp:null)
                         :accessor
                         struct-shape-input-data-config-data-access-role-arn
                         :shape "DataAccessRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-data-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-data-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-data-config 'make-input-data-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tuning-data-s3uri))
      (common-lisp:list
       (common-lisp:cons "TuningDataS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-data-config))
   common-lisp:nil))
(common-lisp:deftype input-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (transcribe-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:defclass interruption-filter common-lisp:nil
                       ((threshold :initarg :threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-milliseconds
                                         common-lisp:null)
                         :accessor struct-shape-interruption-filter-threshold
                         :shape "TimestampMilliseconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (participant-role :initarg :participant-role :initform
                         common-lisp:nil :type
                         (common-lisp:or participant-role common-lisp:null)
                         :accessor
                         struct-shape-interruption-filter-participant-role
                         :shape "ParticipantRole" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (absolute-time-range :initarg :absolute-time-range
                         :initform common-lisp:nil :type
                         (common-lisp:or absolute-time-range common-lisp:null)
                         :accessor
                         struct-shape-interruption-filter-absolute-time-range
                         :shape "AbsoluteTimeRange" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relative-time-range :initarg :relative-time-range
                         :initform common-lisp:nil :type
                         (common-lisp:or relative-time-range common-lisp:null)
                         :accessor
                         struct-shape-interruption-filter-relative-time-range
                         :shape "RelativeTimeRange" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (negate :initarg :negate :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-interruption-filter-negate
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-interruption-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'interruption-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'interruption-filter 'make-interruption-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input interruption-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input interruption-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'absolute-time-range))
      (common-lisp:list
       (common-lisp:cons "AbsoluteTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-time-range))
      (common-lisp:list
       (common-lisp:cons "RelativeTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negate))
      (common-lisp:list
       (common-lisp:cons "Negate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input interruption-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-execution-settings common-lisp:nil
                       ((allow-deferred-execution :initarg
                         :allow-deferred-execution :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-job-execution-settings-allow-deferred-execution
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or data-access-role-arn common-lisp:null)
                         :accessor
                         struct-shape-job-execution-settings-data-access-role-arn
                         :shape "DataAccessRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-execution-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-execution-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-execution-settings 'make-job-execution-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-deferred-execution))
      (common-lisp:list
       (common-lisp:cons "AllowDeferredExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kmsencryption-context-map () 'common-lisp:hash-table)
 (common-lisp:defun make-kmsencryption-context-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype kmskey-id () 'common-lisp:string)
(common-lisp:deftype language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass language-code-item common-lisp:nil
                       ((language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-language-code-item-language-code :shape
                         "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration-in-seconds :initarg :duration-in-seconds
                         :initform common-lisp:nil :type
                         (common-lisp:or duration-in-seconds common-lisp:null)
                         :accessor
                         struct-shape-language-code-item-duration-in-seconds
                         :shape "DurationInSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-language-code-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'language-code-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'language-code-item 'make-language-code-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input language-code-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input language-code-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input language-code-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype language-code-list ()
   '(trivial-types:proper-list language-code-item))
 (common-lisp:defun make-language-code-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language-code-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass language-id-settings common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-language-id-settings-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-language-id-settings-vocabulary-filter-name
                         :shape "VocabularyFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-model-name :initarg :language-model-name
                         :initform common-lisp:nil :type
                         (common-lisp:or model-name common-lisp:null) :accessor
                         struct-shape-language-id-settings-language-model-name
                         :shape "ModelName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-language-id-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'language-id-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'language-id-settings 'make-language-id-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input language-id-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input language-id-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:list
       (common-lisp:cons "LanguageModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input language-id-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype language-id-settings-map () 'common-lisp:hash-table)
 (common-lisp:defun make-language-id-settings-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass language-model common-lisp:nil
                       ((model-name :initarg :model-name :initform
                         common-lisp:nil :type
                         (common-lisp:or model-name common-lisp:null) :accessor
                         struct-shape-language-model-model-name :shape
                         "ModelName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-language-model-create-time :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-language-model-last-modified-time :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or clmlanguage-code common-lisp:null)
                         :accessor struct-shape-language-model-language-code
                         :shape "CLMLanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (base-model-name :initarg :base-model-name :initform
                         common-lisp:nil :type
                         (common-lisp:or base-model-name common-lisp:null)
                         :accessor struct-shape-language-model-base-model-name
                         :shape "BaseModelName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-status :initarg :model-status :initform
                         common-lisp:nil :type
                         (common-lisp:or model-status common-lisp:null)
                         :accessor struct-shape-language-model-model-status
                         :shape "ModelStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upgrade-availability :initarg :upgrade-availability
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-language-model-upgrade-availability
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reason common-lisp:null)
                         :accessor struct-shape-language-model-failure-reason
                         :shape "FailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-data-config :initarg :input-data-config
                         :initform common-lisp:nil :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         struct-shape-language-model-input-data-config :shape
                         "InputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-language-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'language-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'language-model 'make-language-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input language-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input language-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-model-name))
      (common-lisp:list
       (common-lisp:cons "BaseModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-status))
      (common-lisp:list
       (common-lisp:cons "ModelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upgrade-availability))
      (common-lisp:list
       (common-lisp:cons "UpgradeAvailability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input language-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype language-options ()
   '(trivial-types:proper-list language-code))
 (common-lisp:defun make-language-options
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (transcribe-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-call-analytics-categories-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-call-analytics-categories-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-call-analytics-categories-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-call-analytics-categories-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-call-analytics-categories-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-call-analytics-categories-request
                    'make-list-call-analytics-categories-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-categories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-categories-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-categories-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-call-analytics-categories-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-call-analytics-categories-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (categories :initarg :categories :initform
                         common-lisp:nil :type
                         (common-lisp:or category-properties-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-call-analytics-categories-response-categories
                         :shape "CategoryPropertiesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-call-analytics-categories-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-call-analytics-categories-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-call-analytics-categories-response
                    'make-list-call-analytics-categories-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-categories-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-categories-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'categories))
      (common-lisp:list
       (common-lisp:cons "Categories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-categories-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-call-analytics-jobs-request common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or call-analytics-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-call-analytics-jobs-request-status
                         :shape "CallAnalyticsJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-name-contains :initarg :job-name-contains
                         :initform common-lisp:nil :type
                         (common-lisp:or call-analytics-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-call-analytics-jobs-request-job-name-contains
                         :shape "CallAnalyticsJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-call-analytics-jobs-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-call-analytics-jobs-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-call-analytics-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-call-analytics-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-call-analytics-jobs-request
                    'make-list-call-analytics-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name-contains))
      (common-lisp:list
       (common-lisp:cons "JobNameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-call-analytics-jobs-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or call-analytics-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-call-analytics-jobs-response-status
                         :shape "CallAnalyticsJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-call-analytics-jobs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (call-analytics-job-summaries :initarg
                         :call-analytics-job-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or call-analytics-job-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-call-analytics-jobs-response-call-analytics-job-summaries
                         :shape "CallAnalyticsJobSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-call-analytics-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-call-analytics-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-call-analytics-jobs-response
                    'make-list-call-analytics-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-job-summaries))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-language-models-request common-lisp:nil
                       ((status-equals :initarg :status-equals :initform
                         common-lisp:nil :type
                         (common-lisp:or model-status common-lisp:null)
                         :accessor
                         struct-shape-list-language-models-request-status-equals
                         :shape "ModelStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name-contains :initarg :name-contains :initform
                         common-lisp:nil :type
                         (common-lisp:or model-name common-lisp:null) :accessor
                         struct-shape-list-language-models-request-name-contains
                         :shape "ModelName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-language-models-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-language-models-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-language-models-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-language-models-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-language-models-request
                    'make-list-language-models-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-language-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-language-models-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-language-models-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-language-models-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-language-models-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (models :initarg :models :initform common-lisp:nil
                         :type (common-lisp:or models common-lisp:null)
                         :accessor
                         struct-shape-list-language-models-response-models
                         :shape "Models" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-language-models-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-language-models-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-language-models-response
                    'make-list-language-models-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-language-models-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-language-models-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'models))
      (common-lisp:list
       (common-lisp:cons "Models"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-language-models-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-medical-scribe-jobs-request common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-scribe-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-medical-scribe-jobs-request-status
                         :shape "MedicalScribeJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-name-contains :initarg :job-name-contains
                         :initform common-lisp:nil :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-medical-scribe-jobs-request-job-name-contains
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-medical-scribe-jobs-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-medical-scribe-jobs-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-medical-scribe-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-medical-scribe-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-medical-scribe-jobs-request
                    'make-list-medical-scribe-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-scribe-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-scribe-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name-contains))
      (common-lisp:list
       (common-lisp:cons "JobNameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-scribe-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-medical-scribe-jobs-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-scribe-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-medical-scribe-jobs-response-status
                         :shape "MedicalScribeJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-medical-scribe-jobs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (medical-scribe-job-summaries :initarg
                         :medical-scribe-job-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or medical-scribe-job-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-medical-scribe-jobs-response-medical-scribe-job-summaries
                         :shape "MedicalScribeJobSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-medical-scribe-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-medical-scribe-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-medical-scribe-jobs-response
                    'make-list-medical-scribe-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-scribe-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-scribe-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-scribe-job-summaries))
      (common-lisp:list
       (common-lisp:cons "MedicalScribeJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-scribe-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-medical-transcription-jobs-request common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or transcription-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-medical-transcription-jobs-request-status
                         :shape "TranscriptionJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-name-contains :initarg :job-name-contains
                         :initform common-lisp:nil :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-medical-transcription-jobs-request-job-name-contains
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-medical-transcription-jobs-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-medical-transcription-jobs-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-medical-transcription-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-medical-transcription-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-medical-transcription-jobs-request
                    'make-list-medical-transcription-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-transcription-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-transcription-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name-contains))
      (common-lisp:list
       (common-lisp:cons "JobNameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-transcription-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-medical-transcription-jobs-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or transcription-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-medical-transcription-jobs-response-status
                         :shape "TranscriptionJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-medical-transcription-jobs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (medical-transcription-job-summaries :initarg
                         :medical-transcription-job-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or medical-transcription-job-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-medical-transcription-jobs-response-medical-transcription-job-summaries
                         :shape "MedicalTranscriptionJobSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-medical-transcription-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-medical-transcription-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-medical-transcription-jobs-response
                    'make-list-medical-transcription-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-transcription-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-transcription-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-transcription-job-summaries))
      (common-lisp:list
       (common-lisp:cons "MedicalTranscriptionJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-transcription-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-medical-vocabularies-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-medical-vocabularies-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-medical-vocabularies-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-equals :initarg :state-equals :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-state common-lisp:null)
                         :accessor
                         struct-shape-list-medical-vocabularies-request-state-equals
                         :shape "VocabularyState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name-contains :initarg :name-contains :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-list-medical-vocabularies-request-name-contains
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-medical-vocabularies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-medical-vocabularies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-medical-vocabularies-request
                    'make-list-medical-vocabularies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-vocabularies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-vocabularies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-equals))
      (common-lisp:list
       (common-lisp:cons "StateEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-vocabularies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-medical-vocabularies-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-state common-lisp:null)
                         :accessor
                         struct-shape-list-medical-vocabularies-response-status
                         :shape "VocabularyState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-medical-vocabularies-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabularies :initarg :vocabularies :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabularies common-lisp:null)
                         :accessor
                         struct-shape-list-medical-vocabularies-response-vocabularies
                         :shape "Vocabularies" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-medical-vocabularies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-medical-vocabularies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-medical-vocabularies-response
                    'make-list-medical-vocabularies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-vocabularies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-vocabularies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabularies))
      (common-lisp:list
       (common-lisp:cons "Vocabularies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-vocabularies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or transcribe-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "TranscribeArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or transcribe-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-response-resource-arn
                         :shape "TranscribeArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-transcription-jobs-request common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or transcription-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-transcription-jobs-request-status
                         :shape "TranscriptionJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-name-contains :initarg :job-name-contains
                         :initform common-lisp:nil :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-transcription-jobs-request-job-name-contains
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-transcription-jobs-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-transcription-jobs-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-transcription-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-transcription-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-transcription-jobs-request
                    'make-list-transcription-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transcription-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transcription-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name-contains))
      (common-lisp:list
       (common-lisp:cons "JobNameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transcription-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-transcription-jobs-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or transcription-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-transcription-jobs-response-status
                         :shape "TranscriptionJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-transcription-jobs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transcription-job-summaries :initarg
                         :transcription-job-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or transcription-job-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-transcription-jobs-response-transcription-job-summaries
                         :shape "TranscriptionJobSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-transcription-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-transcription-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-transcription-jobs-response
                    'make-list-transcription-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transcription-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transcription-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-summaries))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transcription-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vocabularies-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-vocabularies-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-vocabularies-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-equals :initarg :state-equals :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-state common-lisp:null)
                         :accessor
                         struct-shape-list-vocabularies-request-state-equals
                         :shape "VocabularyState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name-contains :initarg :name-contains :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-list-vocabularies-request-name-contains
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vocabularies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-vocabularies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vocabularies-request
                    'make-list-vocabularies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabularies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabularies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-equals))
      (common-lisp:list
       (common-lisp:cons "StateEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabularies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vocabularies-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-state common-lisp:null)
                         :accessor
                         struct-shape-list-vocabularies-response-status :shape
                         "VocabularyState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-vocabularies-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabularies :initarg :vocabularies :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabularies common-lisp:null)
                         :accessor
                         struct-shape-list-vocabularies-response-vocabularies
                         :shape "Vocabularies" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vocabularies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-vocabularies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vocabularies-response
                    'make-list-vocabularies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabularies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabularies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabularies))
      (common-lisp:list
       (common-lisp:cons "Vocabularies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabularies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vocabulary-filters-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-vocabulary-filters-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-vocabulary-filters-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name-contains :initarg :name-contains :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-vocabulary-filters-request-name-contains
                         :shape "VocabularyFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vocabulary-filters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vocabulary-filters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vocabulary-filters-request
                    'make-list-vocabulary-filters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabulary-filters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabulary-filters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabulary-filters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vocabulary-filters-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-vocabulary-filters-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-filters :initarg :vocabulary-filters
                         :initform common-lisp:nil :type
                         (common-lisp:or vocabulary-filters common-lisp:null)
                         :accessor
                         struct-shape-list-vocabulary-filters-response-vocabulary-filters
                         :shape "VocabularyFilters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vocabulary-filters-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vocabulary-filters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vocabulary-filters-response
                    'make-list-vocabulary-filters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabulary-filters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabulary-filters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-filters))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabulary-filters-response))
   common-lisp:nil))
(common-lisp:deftype max-alternatives () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype max-speakers () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass media common-lisp:nil
                       ((media-file-uri :initarg :media-file-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-media-media-file-uri :shape "Uri"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (redacted-media-file-uri :initarg
                         :redacted-media-file-uri :initform common-lisp:nil
                         :type (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-media-redacted-media-file-uri :shape
                         "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'media
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'media 'make-media))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input media))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input media))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-file-uri))
      (common-lisp:list
       (common-lisp:cons "MediaFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redacted-media-file-uri))
      (common-lisp:list
       (common-lisp:cons "RedactedMediaFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input media))
   common-lisp:nil))
(common-lisp:deftype media-format () 'common-lisp:string)
(common-lisp:deftype media-sample-rate-hertz () 'common-lisp:integer)
(common-lisp:deftype medical-content-identification-type () 'common-lisp:string)
(common-lisp:deftype medical-media-sample-rate-hertz () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass medical-scribe-channel-definition common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         (common-lisp:error ":channel-id is required") :type
                         (common-lisp:or medical-scribe-channel-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-channel-definition-channel-id
                         :shape "MedicalScribeChannelId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (participant-role :initarg :participant-role :initform
                         (common-lisp:error ":participant-role is required")
                         :type
                         (common-lisp:or medical-scribe-participant-role
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-channel-definition-participant-role
                         :shape "MedicalScribeParticipantRole" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-medical-scribe-channel-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'medical-scribe-channel-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'medical-scribe-channel-definition
                    'make-medical-scribe-channel-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          medical-scribe-channel-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          medical-scribe-channel-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          medical-scribe-channel-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype medical-scribe-channel-definitions ()
   '(trivial-types:proper-list medical-scribe-channel-definition))
 (common-lisp:defun make-medical-scribe-channel-definitions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            medical-scribe-channel-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype medical-scribe-channel-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass medical-scribe-job common-lisp:nil
                       ((medical-scribe-job-name :initarg
                         :medical-scribe-job-name :initform common-lisp:nil
                         :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-job-medical-scribe-job-name
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (medical-scribe-job-status :initarg
                         :medical-scribe-job-status :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-scribe-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-job-medical-scribe-job-status
                         :shape "MedicalScribeJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or medical-scribe-language-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-job-language-code :shape
                         "MedicalScribeLanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (media :initarg :media :initform common-lisp:nil :type
                         (common-lisp:or media common-lisp:null) :accessor
                         struct-shape-medical-scribe-job-media :shape "Media"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (medical-scribe-output :initarg :medical-scribe-output
                         :initform common-lisp:nil :type
                         (common-lisp:or medical-scribe-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-job-medical-scribe-output
                         :shape "MedicalScribeOutput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-medical-scribe-job-start-time :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-medical-scribe-job-creation-time :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completion-time :initarg :completion-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-medical-scribe-job-completion-time :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reason common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-job-failure-reason :shape
                         "FailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-scribe-settings
                                         common-lisp:null)
                         :accessor struct-shape-medical-scribe-job-settings
                         :shape "MedicalScribeSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or data-access-role-arn common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-job-data-access-role-arn
                         :shape "DataAccessRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (channel-definitions :initarg :channel-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or medical-scribe-channel-definitions
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-job-channel-definitions
                         :shape "MedicalScribeChannelDefinitions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-medical-scribe-job-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-medical-scribe-job
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'medical-scribe-job
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'medical-scribe-job 'make-medical-scribe-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input medical-scribe-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input medical-scribe-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-scribe-job-name))
      (common-lisp:list
       (common-lisp:cons "MedicalScribeJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-scribe-job-status))
      (common-lisp:list
       (common-lisp:cons "MedicalScribeJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media))
      (common-lisp:list
       (common-lisp:cons "Media"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-scribe-output))
      (common-lisp:list
       (common-lisp:cons "MedicalScribeOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-definitions))
      (common-lisp:list
       (common-lisp:cons "ChannelDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input medical-scribe-job))
   common-lisp:nil))
(common-lisp:deftype medical-scribe-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype medical-scribe-job-summaries ()
   '(trivial-types:proper-list medical-scribe-job-summary))
 (common-lisp:defun make-medical-scribe-job-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            medical-scribe-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass medical-scribe-job-summary common-lisp:nil
                       ((medical-scribe-job-name :initarg
                         :medical-scribe-job-name :initform common-lisp:nil
                         :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-job-summary-medical-scribe-job-name
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-medical-scribe-job-summary-creation-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-medical-scribe-job-summary-start-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completion-time :initarg :completion-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-medical-scribe-job-summary-completion-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or medical-scribe-language-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-job-summary-language-code
                         :shape "MedicalScribeLanguageCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (medical-scribe-job-status :initarg
                         :medical-scribe-job-status :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-scribe-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-job-summary-medical-scribe-job-status
                         :shape "MedicalScribeJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reason common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-job-summary-failure-reason
                         :shape "FailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-medical-scribe-job-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'medical-scribe-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'medical-scribe-job-summary
                    'make-medical-scribe-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          medical-scribe-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          medical-scribe-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-scribe-job-name))
      (common-lisp:list
       (common-lisp:cons "MedicalScribeJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-scribe-job-status))
      (common-lisp:list
       (common-lisp:cons "MedicalScribeJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          medical-scribe-job-summary))
   common-lisp:nil))
(common-lisp:deftype medical-scribe-language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass medical-scribe-output common-lisp:nil
                       ((transcript-file-uri :initarg :transcript-file-uri
                         :initform
                         (common-lisp:error ":transcript-file-uri is required")
                         :type (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-medical-scribe-output-transcript-file-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (clinical-document-uri :initarg :clinical-document-uri
                         :initform
                         (common-lisp:error
                          ":clinical-document-uri is required")
                         :type (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-medical-scribe-output-clinical-document-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-medical-scribe-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'medical-scribe-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'medical-scribe-output 'make-medical-scribe-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          medical-scribe-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          medical-scribe-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript-file-uri))
      (common-lisp:list
       (common-lisp:cons "TranscriptFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'clinical-document-uri))
      (common-lisp:list
       (common-lisp:cons "ClinicalDocumentUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          medical-scribe-output))
   common-lisp:nil))
(common-lisp:deftype medical-scribe-participant-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass medical-scribe-settings common-lisp:nil
                       ((show-speaker-labels :initarg :show-speaker-labels
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-medical-scribe-settings-show-speaker-labels
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-speaker-labels :initarg :max-speaker-labels
                         :initform common-lisp:nil :type
                         (common-lisp:or max-speakers common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-settings-max-speaker-labels
                         :shape "MaxSpeakers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (channel-identification :initarg
                         :channel-identification :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-settings-channel-identification
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-settings-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-settings-vocabulary-filter-name
                         :shape "VocabularyFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vocabulary-filter-method :initarg
                         :vocabulary-filter-method :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-method
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-scribe-settings-vocabulary-filter-method
                         :shape "VocabularyFilterMethod" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-medical-scribe-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'medical-scribe-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'medical-scribe-settings 'make-medical-scribe-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          medical-scribe-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          medical-scribe-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-speaker-labels))
      (common-lisp:list
       (common-lisp:cons "ShowSpeakerLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-speaker-labels))
      (common-lisp:list
       (common-lisp:cons "MaxSpeakerLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'channel-identification))
      (common-lisp:list
       (common-lisp:cons "ChannelIdentification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-method))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          medical-scribe-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass medical-transcript common-lisp:nil
                       ((transcript-file-uri :initarg :transcript-file-uri
                         :initform common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-medical-transcript-transcript-file-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-medical-transcript
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'medical-transcript
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'medical-transcript 'make-medical-transcript))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input medical-transcript))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input medical-transcript))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript-file-uri))
      (common-lisp:list
       (common-lisp:cons "TranscriptFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input medical-transcript))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass medical-transcription-job common-lisp:nil
                       ((medical-transcription-job-name :initarg
                         :medical-transcription-job-name :initform
                         common-lisp:nil :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-job-medical-transcription-job-name
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (transcription-job-status :initarg
                         :transcription-job-status :initform common-lisp:nil
                         :type
                         (common-lisp:or transcription-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-job-transcription-job-status
                         :shape "TranscriptionJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-job-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (media-sample-rate-hertz :initarg
                         :media-sample-rate-hertz :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-media-sample-rate-hertz
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-job-media-sample-rate-hertz
                         :shape "MedicalMediaSampleRateHertz" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (media-format :initarg :media-format :initform
                         common-lisp:nil :type
                         (common-lisp:or media-format common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-job-media-format
                         :shape "MediaFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (media :initarg :media :initform common-lisp:nil :type
                         (common-lisp:or media common-lisp:null) :accessor
                         struct-shape-medical-transcription-job-media :shape
                         "Media" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (transcript :initarg :transcript :initform
                         common-lisp:nil :type
                         (common-lisp:or medical-transcript common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-job-transcript
                         :shape "MedicalTranscript" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-medical-transcription-job-start-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-medical-transcription-job-creation-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completion-time :initarg :completion-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-medical-transcription-job-completion-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reason common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-job-failure-reason
                         :shape "FailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-transcription-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-job-settings :shape
                         "MedicalTranscriptionSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content-identification-type :initarg
                         :content-identification-type :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-content-identification-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-job-content-identification-type
                         :shape "MedicalContentIdentificationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (specialty :initarg :specialty :initform
                         common-lisp:nil :type
                         (common-lisp:or specialty common-lisp:null) :accessor
                         struct-shape-medical-transcription-job-specialty
                         :shape "Specialty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-medical-transcription-job-type :shape
                         "Type" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-medical-transcription-job-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-medical-transcription-job
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'medical-transcription-job
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'medical-transcription-job
                    'make-medical-transcription-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "MedicalTranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-status))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:list
       (common-lisp:cons "MediaSampleRateHertz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-format))
      (common-lisp:list
       (common-lisp:cons "MediaFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media))
      (common-lisp:list
       (common-lisp:cons "Media"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:list
       (common-lisp:cons "ContentIdentificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'specialty))
      (common-lisp:list
       (common-lisp:cons "Specialty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype medical-transcription-job-summaries ()
   '(trivial-types:proper-list medical-transcription-job-summary))
 (common-lisp:defun make-medical-transcription-job-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            medical-transcription-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass medical-transcription-job-summary common-lisp:nil
                       ((medical-transcription-job-name :initarg
                         :medical-transcription-job-name :initform
                         common-lisp:nil :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-job-summary-medical-transcription-job-name
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-medical-transcription-job-summary-creation-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-medical-transcription-job-summary-start-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completion-time :initarg :completion-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-medical-transcription-job-summary-completion-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-job-summary-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transcription-job-status :initarg
                         :transcription-job-status :initform common-lisp:nil
                         :type
                         (common-lisp:or transcription-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-job-summary-transcription-job-status
                         :shape "TranscriptionJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reason common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-job-summary-failure-reason
                         :shape "FailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-location-type :initarg :output-location-type
                         :initform common-lisp:nil :type
                         (common-lisp:or output-location-type common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-job-summary-output-location-type
                         :shape "OutputLocationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (specialty :initarg :specialty :initform
                         common-lisp:nil :type
                         (common-lisp:or specialty common-lisp:null) :accessor
                         struct-shape-medical-transcription-job-summary-specialty
                         :shape "Specialty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-identification-type :initarg
                         :content-identification-type :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-content-identification-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-job-summary-content-identification-type
                         :shape "MedicalContentIdentificationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-medical-transcription-job-summary-type
                         :shape "Type" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-medical-transcription-job-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'medical-transcription-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'medical-transcription-job-summary
                    'make-medical-transcription-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "MedicalTranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-status))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-location-type))
      (common-lisp:list
       (common-lisp:cons "OutputLocationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'specialty))
      (common-lisp:list
       (common-lisp:cons "Specialty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:list
       (common-lisp:cons "ContentIdentificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass medical-transcription-setting common-lisp:nil
                       ((show-speaker-labels :initarg :show-speaker-labels
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-medical-transcription-setting-show-speaker-labels
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-speaker-labels :initarg :max-speaker-labels
                         :initform common-lisp:nil :type
                         (common-lisp:or max-speakers common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-setting-max-speaker-labels
                         :shape "MaxSpeakers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (channel-identification :initarg
                         :channel-identification :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-setting-channel-identification
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (show-alternatives :initarg :show-alternatives
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-medical-transcription-setting-show-alternatives
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-alternatives :initarg :max-alternatives :initform
                         common-lisp:nil :type
                         (common-lisp:or max-alternatives common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-setting-max-alternatives
                         :shape "MaxAlternatives" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-medical-transcription-setting-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-medical-transcription-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'medical-transcription-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'medical-transcription-setting
                    'make-medical-transcription-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-speaker-labels))
      (common-lisp:list
       (common-lisp:cons "ShowSpeakerLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-speaker-labels))
      (common-lisp:list
       (common-lisp:cons "MaxSpeakerLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'channel-identification))
      (common-lisp:list
       (common-lisp:cons "ChannelIdentification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-alternatives))
      (common-lisp:list
       (common-lisp:cons "ShowAlternatives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-alternatives))
      (common-lisp:list
       (common-lisp:cons "MaxAlternatives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-setting))
   common-lisp:nil))
(common-lisp:deftype model-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass model-settings common-lisp:nil
                       ((language-model-name :initarg :language-model-name
                         :initform common-lisp:nil :type
                         (common-lisp:or model-name common-lisp:null) :accessor
                         struct-shape-model-settings-language-model-name :shape
                         "ModelName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-model-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'model-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'model-settings 'make-model-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:list
       (common-lisp:cons "LanguageModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-settings))
   common-lisp:nil))
(common-lisp:deftype model-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype models () '(trivial-types:proper-list language-model))
 (common-lisp:defun make-models
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language-model))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass non-talk-time-filter common-lisp:nil
                       ((threshold :initarg :threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-milliseconds
                                         common-lisp:null)
                         :accessor struct-shape-non-talk-time-filter-threshold
                         :shape "TimestampMilliseconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (absolute-time-range :initarg :absolute-time-range
                         :initform common-lisp:nil :type
                         (common-lisp:or absolute-time-range common-lisp:null)
                         :accessor
                         struct-shape-non-talk-time-filter-absolute-time-range
                         :shape "AbsoluteTimeRange" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relative-time-range :initarg :relative-time-range
                         :initform common-lisp:nil :type
                         (common-lisp:or relative-time-range common-lisp:null)
                         :accessor
                         struct-shape-non-talk-time-filter-relative-time-range
                         :shape "RelativeTimeRange" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (negate :initarg :negate :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-non-talk-time-filter-negate
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-non-talk-time-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'non-talk-time-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'non-talk-time-filter 'make-non-talk-time-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input non-talk-time-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input non-talk-time-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'absolute-time-range))
      (common-lisp:list
       (common-lisp:cons "AbsoluteTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-time-range))
      (common-lisp:list
       (common-lisp:cons "RelativeTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negate))
      (common-lisp:list
       (common-lisp:cons "Negate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input non-talk-time-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (transcribe-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype output-bucket-name () 'common-lisp:string)
(common-lisp:deftype output-key () 'common-lisp:string)
(common-lisp:deftype output-location-type () 'common-lisp:string)
(common-lisp:deftype participant-role () 'common-lisp:string)
(common-lisp:deftype percentage () 'common-lisp:integer)
(common-lisp:deftype phrase () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype phrases () '(trivial-types:proper-list phrase))
 (common-lisp:defun make-phrases
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list phrase))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pii-entity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype pii-entity-types ()
   '(trivial-types:proper-list pii-entity-type))
 (common-lisp:defun make-pii-entity-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pii-entity-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype redaction-output () 'common-lisp:string)
(common-lisp:deftype redaction-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass relative-time-range common-lisp:nil
                       ((start-percentage :initarg :start-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-relative-time-range-start-percentage
                         :shape "Percentage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-percentage :initarg :end-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-relative-time-range-end-percentage :shape
                         "Percentage" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (first :initarg :first :initform common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-relative-time-range-first :shape
                         "Percentage" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last :initarg :last :initform common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-relative-time-range-last :shape
                         "Percentage" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relative-time-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'relative-time-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'relative-time-range 'make-relative-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input relative-time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input relative-time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-percentage))
      (common-lisp:list
       (common-lisp:cons "StartPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-percentage))
      (common-lisp:list
       (common-lisp:cons "EndPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first))
      (common-lisp:list
       (common-lisp:cons "First"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last))
      (common-lisp:list
       (common-lisp:cons "Last"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input relative-time-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rule common-lisp:nil
                       ((non-talk-time-filter :initarg :non-talk-time-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or non-talk-time-filter common-lisp:null)
                         :accessor struct-shape-rule-non-talk-time-filter
                         :shape "NonTalkTimeFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interruption-filter :initarg :interruption-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or interruption-filter common-lisp:null)
                         :accessor struct-shape-rule-interruption-filter :shape
                         "InterruptionFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transcript-filter :initarg :transcript-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or transcript-filter common-lisp:null)
                         :accessor struct-shape-rule-transcript-filter :shape
                         "TranscriptFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sentiment-filter :initarg :sentiment-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or sentiment-filter common-lisp:null)
                         :accessor struct-shape-rule-sentiment-filter :shape
                         "SentimentFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rule (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-talk-time-filter))
      (common-lisp:list
       (common-lisp:cons "NonTalkTimeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interruption-filter))
      (common-lisp:list
       (common-lisp:cons "InterruptionFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript-filter))
      (common-lisp:list
       (common-lisp:cons "TranscriptFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sentiment-filter))
      (common-lisp:list
       (common-lisp:cons "SentimentFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-list () '(trivial-types:proper-list rule))
 (common-lisp:defun make-rule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sentiment-filter common-lisp:nil
                       ((sentiments :initarg :sentiments :initform
                         (common-lisp:error ":sentiments is required") :type
                         (common-lisp:or sentiment-value-list common-lisp:null)
                         :accessor struct-shape-sentiment-filter-sentiments
                         :shape "SentimentValueList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (absolute-time-range :initarg :absolute-time-range
                         :initform common-lisp:nil :type
                         (common-lisp:or absolute-time-range common-lisp:null)
                         :accessor
                         struct-shape-sentiment-filter-absolute-time-range
                         :shape "AbsoluteTimeRange" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relative-time-range :initarg :relative-time-range
                         :initform common-lisp:nil :type
                         (common-lisp:or relative-time-range common-lisp:null)
                         :accessor
                         struct-shape-sentiment-filter-relative-time-range
                         :shape "RelativeTimeRange" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (participant-role :initarg :participant-role :initform
                         common-lisp:nil :type
                         (common-lisp:or participant-role common-lisp:null)
                         :accessor
                         struct-shape-sentiment-filter-participant-role :shape
                         "ParticipantRole" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (negate :initarg :negate :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-sentiment-filter-negate :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sentiment-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sentiment-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sentiment-filter 'make-sentiment-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sentiment-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sentiment-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sentiments))
      (common-lisp:list
       (common-lisp:cons "Sentiments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'absolute-time-range))
      (common-lisp:list
       (common-lisp:cons "AbsoluteTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-time-range))
      (common-lisp:list
       (common-lisp:cons "RelativeTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negate))
      (common-lisp:list
       (common-lisp:cons "Negate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sentiment-filter))
   common-lisp:nil))
(common-lisp:deftype sentiment-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sentiment-value-list ()
   '(trivial-types:proper-list sentiment-value))
 (common-lisp:defun make-sentiment-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sentiment-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass settings common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor struct-shape-settings-vocabulary-name :shape
                         "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (show-speaker-labels :initarg :show-speaker-labels
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-settings-show-speaker-labels :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-speaker-labels :initarg :max-speaker-labels
                         :initform common-lisp:nil :type
                         (common-lisp:or max-speakers common-lisp:null)
                         :accessor struct-shape-settings-max-speaker-labels
                         :shape "MaxSpeakers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (channel-identification :initarg
                         :channel-identification :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-settings-channel-identification
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (show-alternatives :initarg :show-alternatives
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-settings-show-alternatives :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-alternatives :initarg :max-alternatives :initform
                         common-lisp:nil :type
                         (common-lisp:or max-alternatives common-lisp:null)
                         :accessor struct-shape-settings-max-alternatives
                         :shape "MaxAlternatives" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor struct-shape-settings-vocabulary-filter-name
                         :shape "VocabularyFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vocabulary-filter-method :initarg
                         :vocabulary-filter-method :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-method
                                         common-lisp:null)
                         :accessor
                         struct-shape-settings-vocabulary-filter-method :shape
                         "VocabularyFilterMethod" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'settings 'make-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-speaker-labels))
      (common-lisp:list
       (common-lisp:cons "ShowSpeakerLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-speaker-labels))
      (common-lisp:list
       (common-lisp:cons "MaxSpeakerLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'channel-identification))
      (common-lisp:list
       (common-lisp:cons "ChannelIdentification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-alternatives))
      (common-lisp:list
       (common-lisp:cons "ShowAlternatives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-alternatives))
      (common-lisp:list
       (common-lisp:cons "MaxAlternatives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-method))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input settings))
   common-lisp:nil))
(common-lisp:deftype specialty () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-call-analytics-job-request common-lisp:nil
                       ((call-analytics-job-name :initarg
                         :call-analytics-job-name :initform
                         (common-lisp:error
                          ":call-analytics-job-name is required")
                         :type
                         (common-lisp:or call-analytics-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-job-request-call-analytics-job-name
                         :shape "CallAnalyticsJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (media :initarg :media :initform
                         (common-lisp:error ":media is required") :type
                         (common-lisp:or media common-lisp:null) :accessor
                         struct-shape-start-call-analytics-job-request-media
                         :shape "Media" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-location :initarg :output-location :initform
                         common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-start-call-analytics-job-request-output-location
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output-encryption-kmskey-id :initarg
                         :output-encryption-kmskey-id :initform common-lisp:nil
                         :type (common-lisp:or kmskey-id common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-job-request-output-encryption-kmskey-id
                         :shape "KMSKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or data-access-role-arn common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-job-request-data-access-role-arn
                         :shape "DataAccessRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or call-analytics-job-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-job-request-settings
                         :shape "CallAnalyticsJobSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (channel-definitions :initarg :channel-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or channel-definitions common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-job-request-channel-definitions
                         :shape "ChannelDefinitions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-call-analytics-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-call-analytics-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-call-analytics-job-request
                    'make-start-call-analytics-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-job-name))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media))
      (common-lisp:list
       (common-lisp:cons "Media"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-encryption-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "OutputEncryptionKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-definitions))
      (common-lisp:list
       (common-lisp:cons "ChannelDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-call-analytics-job-response common-lisp:nil
                       ((call-analytics-job :initarg :call-analytics-job
                         :initform common-lisp:nil :type
                         (common-lisp:or call-analytics-job common-lisp:null)
                         :accessor
                         struct-shape-start-call-analytics-job-response-call-analytics-job
                         :shape "CallAnalyticsJob" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-call-analytics-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-call-analytics-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-call-analytics-job-response
                    'make-start-call-analytics-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-analytics-job))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-medical-scribe-job-request common-lisp:nil
                       ((medical-scribe-job-name :initarg
                         :medical-scribe-job-name :initform
                         (common-lisp:error
                          ":medical-scribe-job-name is required")
                         :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-medical-scribe-job-request-medical-scribe-job-name
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (media :initarg :media :initform
                         (common-lisp:error ":media is required") :type
                         (common-lisp:or media common-lisp:null) :accessor
                         struct-shape-start-medical-scribe-job-request-media
                         :shape "Media" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-bucket-name :initarg :output-bucket-name
                         :initform
                         (common-lisp:error ":output-bucket-name is required")
                         :type
                         (common-lisp:or output-bucket-name common-lisp:null)
                         :accessor
                         struct-shape-start-medical-scribe-job-request-output-bucket-name
                         :shape "OutputBucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-encryption-kmskey-id :initarg
                         :output-encryption-kmskey-id :initform common-lisp:nil
                         :type (common-lisp:or kmskey-id common-lisp:null)
                         :accessor
                         struct-shape-start-medical-scribe-job-request-output-encryption-kmskey-id
                         :shape "KMSKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kmsencryption-context :initarg :kmsencryption-context
                         :initform common-lisp:nil :type
                         (common-lisp:or kmsencryption-context-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-medical-scribe-job-request-kmsencryption-context
                         :shape "KMSEncryptionContextMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform
                         (common-lisp:error
                          ":data-access-role-arn is required")
                         :type
                         (common-lisp:or data-access-role-arn common-lisp:null)
                         :accessor
                         struct-shape-start-medical-scribe-job-request-data-access-role-arn
                         :shape "DataAccessRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform
                         (common-lisp:error ":settings is required") :type
                         (common-lisp:or medical-scribe-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-medical-scribe-job-request-settings
                         :shape "MedicalScribeSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (channel-definitions :initarg :channel-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or medical-scribe-channel-definitions
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-medical-scribe-job-request-channel-definitions
                         :shape "MedicalScribeChannelDefinitions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-start-medical-scribe-job-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-medical-scribe-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-medical-scribe-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-medical-scribe-job-request
                    'make-start-medical-scribe-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-scribe-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-scribe-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-scribe-job-name))
      (common-lisp:list
       (common-lisp:cons "MedicalScribeJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media))
      (common-lisp:list
       (common-lisp:cons "Media"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-bucket-name))
      (common-lisp:list
       (common-lisp:cons "OutputBucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-encryption-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "OutputEncryptionKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kmsencryption-context))
      (common-lisp:list
       (common-lisp:cons "KMSEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-definitions))
      (common-lisp:list
       (common-lisp:cons "ChannelDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-scribe-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-medical-scribe-job-response common-lisp:nil
                       ((medical-scribe-job :initarg :medical-scribe-job
                         :initform common-lisp:nil :type
                         (common-lisp:or medical-scribe-job common-lisp:null)
                         :accessor
                         struct-shape-start-medical-scribe-job-response-medical-scribe-job
                         :shape "MedicalScribeJob" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-medical-scribe-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-medical-scribe-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-medical-scribe-job-response
                    'make-start-medical-scribe-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-scribe-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-scribe-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'medical-scribe-job))
      (common-lisp:list
       (common-lisp:cons "MedicalScribeJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-scribe-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-medical-transcription-job-request common-lisp:nil
                       ((medical-transcription-job-name :initarg
                         :medical-transcription-job-name :initform
                         (common-lisp:error
                          ":medical-transcription-job-name is required")
                         :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-medical-transcription-job-request-medical-transcription-job-name
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-start-medical-transcription-job-request-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (media-sample-rate-hertz :initarg
                         :media-sample-rate-hertz :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-media-sample-rate-hertz
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-medical-transcription-job-request-media-sample-rate-hertz
                         :shape "MedicalMediaSampleRateHertz" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (media-format :initarg :media-format :initform
                         common-lisp:nil :type
                         (common-lisp:or media-format common-lisp:null)
                         :accessor
                         struct-shape-start-medical-transcription-job-request-media-format
                         :shape "MediaFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (media :initarg :media :initform
                         (common-lisp:error ":media is required") :type
                         (common-lisp:or media common-lisp:null) :accessor
                         struct-shape-start-medical-transcription-job-request-media
                         :shape "Media" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-bucket-name :initarg :output-bucket-name
                         :initform
                         (common-lisp:error ":output-bucket-name is required")
                         :type
                         (common-lisp:or output-bucket-name common-lisp:null)
                         :accessor
                         struct-shape-start-medical-transcription-job-request-output-bucket-name
                         :shape "OutputBucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-key :initarg :output-key :initform
                         common-lisp:nil :type
                         (common-lisp:or output-key common-lisp:null) :accessor
                         struct-shape-start-medical-transcription-job-request-output-key
                         :shape "OutputKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-encryption-kmskey-id :initarg
                         :output-encryption-kmskey-id :initform common-lisp:nil
                         :type (common-lisp:or kmskey-id common-lisp:null)
                         :accessor
                         struct-shape-start-medical-transcription-job-request-output-encryption-kmskey-id
                         :shape "KMSKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kmsencryption-context :initarg :kmsencryption-context
                         :initform common-lisp:nil :type
                         (common-lisp:or kmsencryption-context-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-medical-transcription-job-request-kmsencryption-context
                         :shape "KMSEncryptionContextMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-transcription-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-medical-transcription-job-request-settings
                         :shape "MedicalTranscriptionSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content-identification-type :initarg
                         :content-identification-type :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-content-identification-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-medical-transcription-job-request-content-identification-type
                         :shape "MedicalContentIdentificationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (specialty :initarg :specialty :initform
                         (common-lisp:error ":specialty is required") :type
                         (common-lisp:or specialty common-lisp:null) :accessor
                         struct-shape-start-medical-transcription-job-request-specialty
                         :shape "Specialty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-start-medical-transcription-job-request-type
                         :shape "Type" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-start-medical-transcription-job-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-medical-transcription-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-medical-transcription-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-medical-transcription-job-request
                    'make-start-medical-transcription-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-transcription-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-transcription-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "MedicalTranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:list
       (common-lisp:cons "MediaSampleRateHertz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-format))
      (common-lisp:list
       (common-lisp:cons "MediaFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media))
      (common-lisp:list
       (common-lisp:cons "Media"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-bucket-name))
      (common-lisp:list
       (common-lisp:cons "OutputBucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-key))
      (common-lisp:list
       (common-lisp:cons "OutputKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-encryption-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "OutputEncryptionKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kmsencryption-context))
      (common-lisp:list
       (common-lisp:cons "KMSEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:list
       (common-lisp:cons "ContentIdentificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'specialty))
      (common-lisp:list
       (common-lisp:cons "Specialty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-transcription-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-medical-transcription-job-response common-lisp:nil
                       ((medical-transcription-job :initarg
                         :medical-transcription-job :initform common-lisp:nil
                         :type
                         (common-lisp:or medical-transcription-job
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-medical-transcription-job-response-medical-transcription-job
                         :shape "MedicalTranscriptionJob" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-medical-transcription-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-medical-transcription-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-medical-transcription-job-response
                    'make-start-medical-transcription-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-transcription-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-transcription-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-transcription-job))
      (common-lisp:list
       (common-lisp:cons "MedicalTranscriptionJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-transcription-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-transcription-job-request common-lisp:nil
                       ((transcription-job-name :initarg
                         :transcription-job-name :initform
                         (common-lisp:error
                          ":transcription-job-name is required")
                         :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-transcription-job-request-transcription-job-name
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-start-transcription-job-request-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (media-sample-rate-hertz :initarg
                         :media-sample-rate-hertz :initform common-lisp:nil
                         :type
                         (common-lisp:or media-sample-rate-hertz
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-transcription-job-request-media-sample-rate-hertz
                         :shape "MediaSampleRateHertz" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (media-format :initarg :media-format :initform
                         common-lisp:nil :type
                         (common-lisp:or media-format common-lisp:null)
                         :accessor
                         struct-shape-start-transcription-job-request-media-format
                         :shape "MediaFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (media :initarg :media :initform
                         (common-lisp:error ":media is required") :type
                         (common-lisp:or media common-lisp:null) :accessor
                         struct-shape-start-transcription-job-request-media
                         :shape "Media" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-bucket-name :initarg :output-bucket-name
                         :initform common-lisp:nil :type
                         (common-lisp:or output-bucket-name common-lisp:null)
                         :accessor
                         struct-shape-start-transcription-job-request-output-bucket-name
                         :shape "OutputBucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-key :initarg :output-key :initform
                         common-lisp:nil :type
                         (common-lisp:or output-key common-lisp:null) :accessor
                         struct-shape-start-transcription-job-request-output-key
                         :shape "OutputKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-encryption-kmskey-id :initarg
                         :output-encryption-kmskey-id :initform common-lisp:nil
                         :type (common-lisp:or kmskey-id common-lisp:null)
                         :accessor
                         struct-shape-start-transcription-job-request-output-encryption-kmskey-id
                         :shape "KMSKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kmsencryption-context :initarg :kmsencryption-context
                         :initform common-lisp:nil :type
                         (common-lisp:or kmsencryption-context-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-transcription-job-request-kmsencryption-context
                         :shape "KMSEncryptionContextMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type (common-lisp:or settings common-lisp:null)
                         :accessor
                         struct-shape-start-transcription-job-request-settings
                         :shape "Settings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-settings :initarg :model-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or model-settings common-lisp:null)
                         :accessor
                         struct-shape-start-transcription-job-request-model-settings
                         :shape "ModelSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-execution-settings :initarg
                         :job-execution-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or job-execution-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-transcription-job-request-job-execution-settings
                         :shape "JobExecutionSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content-redaction :initarg :content-redaction
                         :initform common-lisp:nil :type
                         (common-lisp:or content-redaction common-lisp:null)
                         :accessor
                         struct-shape-start-transcription-job-request-content-redaction
                         :shape "ContentRedaction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identify-language :initarg :identify-language
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-transcription-job-request-identify-language
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identify-multiple-languages :initarg
                         :identify-multiple-languages :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-start-transcription-job-request-identify-multiple-languages
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-options :initarg :language-options :initform
                         common-lisp:nil :type
                         (common-lisp:or language-options common-lisp:null)
                         :accessor
                         struct-shape-start-transcription-job-request-language-options
                         :shape "LanguageOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subtitles :initarg :subtitles :initform
                         common-lisp:nil :type
                         (common-lisp:or subtitles common-lisp:null) :accessor
                         struct-shape-start-transcription-job-request-subtitles
                         :shape "Subtitles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-start-transcription-job-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-id-settings :initarg :language-id-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or language-id-settings-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-transcription-job-request-language-id-settings
                         :shape "LanguageIdSettingsMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (toxicity-detection :initarg :toxicity-detection
                         :initform common-lisp:nil :type
                         (common-lisp:or toxicity-detection common-lisp:null)
                         :accessor
                         struct-shape-start-transcription-job-request-toxicity-detection
                         :shape "ToxicityDetection" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-transcription-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-transcription-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-transcription-job-request
                    'make-start-transcription-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-transcription-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-transcription-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:list
       (common-lisp:cons "MediaSampleRateHertz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-format))
      (common-lisp:list
       (common-lisp:cons "MediaFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media))
      (common-lisp:list
       (common-lisp:cons "Media"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-bucket-name))
      (common-lisp:list
       (common-lisp:cons "OutputBucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-key))
      (common-lisp:list
       (common-lisp:cons "OutputKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-encryption-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "OutputEncryptionKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kmsencryption-context))
      (common-lisp:list
       (common-lisp:cons "KMSEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-settings))
      (common-lisp:list
       (common-lisp:cons "ModelSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-execution-settings))
      (common-lisp:list
       (common-lisp:cons "JobExecutionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-redaction))
      (common-lisp:list
       (common-lisp:cons "ContentRedaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identify-language))
      (common-lisp:list
       (common-lisp:cons "IdentifyLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identify-multiple-languages))
      (common-lisp:list
       (common-lisp:cons "IdentifyMultipleLanguages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-options))
      (common-lisp:list
       (common-lisp:cons "LanguageOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitles))
      (common-lisp:list
       (common-lisp:cons "Subtitles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-id-settings))
      (common-lisp:list
       (common-lisp:cons "LanguageIdSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'toxicity-detection))
      (common-lisp:list
       (common-lisp:cons "ToxicityDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-transcription-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-transcription-job-response common-lisp:nil
                       ((transcription-job :initarg :transcription-job
                         :initform common-lisp:nil :type
                         (common-lisp:or transcription-job common-lisp:null)
                         :accessor
                         struct-shape-start-transcription-job-response-transcription-job
                         :shape "TranscriptionJob" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-transcription-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-transcription-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-transcription-job-response
                    'make-start-transcription-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-transcription-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-transcription-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcription-job))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-transcription-job-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-target-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-string-target-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subtitle-file-uris () '(trivial-types:proper-list uri))
 (common-lisp:defun make-subtitle-file-uris
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list uri))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subtitle-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subtitle-formats ()
   '(trivial-types:proper-list subtitle-format))
 (common-lisp:defun make-subtitle-formats
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subtitle-format))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subtitle-output-start-index () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass subtitles common-lisp:nil
                       ((formats :initarg :formats :initform common-lisp:nil
                         :type
                         (common-lisp:or subtitle-formats common-lisp:null)
                         :accessor struct-shape-subtitles-formats :shape
                         "SubtitleFormats" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-start-index :initarg :output-start-index
                         :initform common-lisp:nil :type
                         (common-lisp:or subtitle-output-start-index
                                         common-lisp:null)
                         :accessor struct-shape-subtitles-output-start-index
                         :shape "SubtitleOutputStartIndex" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subtitles
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subtitles
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'subtitles 'make-subtitles))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subtitles))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subtitles))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'formats))
      (common-lisp:list
       (common-lisp:cons "Formats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-start-index))
      (common-lisp:list
       (common-lisp:cons "OutputStartIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subtitles))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subtitles-output common-lisp:nil
                       ((formats :initarg :formats :initform common-lisp:nil
                         :type
                         (common-lisp:or subtitle-formats common-lisp:null)
                         :accessor struct-shape-subtitles-output-formats :shape
                         "SubtitleFormats" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subtitle-file-uris :initarg :subtitle-file-uris
                         :initform common-lisp:nil :type
                         (common-lisp:or subtitle-file-uris common-lisp:null)
                         :accessor
                         struct-shape-subtitles-output-subtitle-file-uris
                         :shape "SubtitleFileUris" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-start-index :initarg :output-start-index
                         :initform common-lisp:nil :type
                         (common-lisp:or subtitle-output-start-index
                                         common-lisp:null)
                         :accessor
                         struct-shape-subtitles-output-output-start-index
                         :shape "SubtitleOutputStartIndex" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subtitles-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subtitles-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subtitles-output 'make-subtitles-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subtitles-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subtitles-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'formats))
      (common-lisp:list
       (common-lisp:cons "Formats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle-file-uris))
      (common-lisp:list
       (common-lisp:cons "SubtitleFileUris"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-start-index))
      (common-lisp:list
       (common-lisp:cons "OutputStartIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subtitles-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass summarization common-lisp:nil
                       ((generate-abstractive-summary :initarg
                         :generate-abstractive-summary :initform
                         (common-lisp:error
                          ":generate-abstractive-summary is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-summarization-generate-abstractive-summary
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-summarization
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'summarization
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'summarization 'make-summarization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input summarization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input summarization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generate-abstractive-summary))
      (common-lisp:list
       (common-lisp:cons "GenerateAbstractiveSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input summarization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or transcribe-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "TranscribeArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype timestamp-milliseconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype toxicity-categories ()
   '(trivial-types:proper-list toxicity-category))
 (common-lisp:defun make-toxicity-categories
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list toxicity-category))
   aws-sdk/generator/shape::members))
(common-lisp:deftype toxicity-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype toxicity-detection ()
   '(trivial-types:proper-list toxicity-detection-settings))
 (common-lisp:defun make-toxicity-detection
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            toxicity-detection-settings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass toxicity-detection-settings common-lisp:nil
                       ((toxicity-categories :initarg :toxicity-categories
                         :initform
                         (common-lisp:error ":toxicity-categories is required")
                         :type
                         (common-lisp:or toxicity-categories common-lisp:null)
                         :accessor
                         struct-shape-toxicity-detection-settings-toxicity-categories
                         :shape "ToxicityCategories" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-toxicity-detection-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'toxicity-detection-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'toxicity-detection-settings
                    'make-toxicity-detection-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          toxicity-detection-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          toxicity-detection-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'toxicity-categories))
      (common-lisp:list
       (common-lisp:cons "ToxicityCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          toxicity-detection-settings))
   common-lisp:nil))
(common-lisp:deftype transcribe-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass transcript common-lisp:nil
                       ((transcript-file-uri :initarg :transcript-file-uri
                         :initform common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-transcript-transcript-file-uri :shape
                         "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (redacted-transcript-file-uri :initarg
                         :redacted-transcript-file-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-transcript-redacted-transcript-file-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transcript
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transcript
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'transcript 'make-transcript))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transcript))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transcript))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript-file-uri))
      (common-lisp:list
       (common-lisp:cons "TranscriptFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redacted-transcript-file-uri))
      (common-lisp:list
       (common-lisp:cons "RedactedTranscriptFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transcript))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transcript-filter common-lisp:nil
                       ((transcript-filter-type :initarg
                         :transcript-filter-type :initform
                         (common-lisp:error
                          ":transcript-filter-type is required")
                         :type
                         (common-lisp:or transcript-filter-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcript-filter-transcript-filter-type
                         :shape "TranscriptFilterType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (absolute-time-range :initarg :absolute-time-range
                         :initform common-lisp:nil :type
                         (common-lisp:or absolute-time-range common-lisp:null)
                         :accessor
                         struct-shape-transcript-filter-absolute-time-range
                         :shape "AbsoluteTimeRange" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relative-time-range :initarg :relative-time-range
                         :initform common-lisp:nil :type
                         (common-lisp:or relative-time-range common-lisp:null)
                         :accessor
                         struct-shape-transcript-filter-relative-time-range
                         :shape "RelativeTimeRange" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (participant-role :initarg :participant-role :initform
                         common-lisp:nil :type
                         (common-lisp:or participant-role common-lisp:null)
                         :accessor
                         struct-shape-transcript-filter-participant-role :shape
                         "ParticipantRole" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (negate :initarg :negate :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-transcript-filter-negate :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (targets :initarg :targets :initform
                         (common-lisp:error ":targets is required") :type
                         (common-lisp:or string-target-list common-lisp:null)
                         :accessor struct-shape-transcript-filter-targets
                         :shape "StringTargetList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transcript-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transcript-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transcript-filter 'make-transcript-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transcript-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transcript-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcript-filter-type))
      (common-lisp:list
       (common-lisp:cons "TranscriptFilterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'absolute-time-range))
      (common-lisp:list
       (common-lisp:cons "AbsoluteTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-time-range))
      (common-lisp:list
       (common-lisp:cons "RelativeTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negate))
      (common-lisp:list
       (common-lisp:cons "Negate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transcript-filter))
   common-lisp:nil))
(common-lisp:deftype transcript-filter-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass transcription-job common-lisp:nil
                       ((transcription-job-name :initarg
                         :transcription-job-name :initform common-lisp:nil
                         :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-transcription-job-name
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (transcription-job-status :initarg
                         :transcription-job-status :initform common-lisp:nil
                         :type
                         (common-lisp:or transcription-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-transcription-job-status
                         :shape "TranscriptionJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor struct-shape-transcription-job-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (media-sample-rate-hertz :initarg
                         :media-sample-rate-hertz :initform common-lisp:nil
                         :type
                         (common-lisp:or media-sample-rate-hertz
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-media-sample-rate-hertz
                         :shape "MediaSampleRateHertz" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (media-format :initarg :media-format :initform
                         common-lisp:nil :type
                         (common-lisp:or media-format common-lisp:null)
                         :accessor struct-shape-transcription-job-media-format
                         :shape "MediaFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (media :initarg :media :initform common-lisp:nil :type
                         (common-lisp:or media common-lisp:null) :accessor
                         struct-shape-transcription-job-media :shape "Media"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (transcript :initarg :transcript :initform
                         common-lisp:nil :type
                         (common-lisp:or transcript common-lisp:null) :accessor
                         struct-shape-transcription-job-transcript :shape
                         "Transcript" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-transcription-job-start-time :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-transcription-job-creation-time :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completion-time :initarg :completion-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-transcription-job-completion-time :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reason common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-failure-reason :shape
                         "FailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type (common-lisp:or settings common-lisp:null)
                         :accessor struct-shape-transcription-job-settings
                         :shape "Settings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-settings :initarg :model-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or model-settings common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-model-settings :shape
                         "ModelSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-execution-settings :initarg
                         :job-execution-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or job-execution-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-job-execution-settings
                         :shape "JobExecutionSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content-redaction :initarg :content-redaction
                         :initform common-lisp:nil :type
                         (common-lisp:or content-redaction common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-content-redaction
                         :shape "ContentRedaction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identify-language :initarg :identify-language
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-transcription-job-identify-language
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identify-multiple-languages :initarg
                         :identify-multiple-languages :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-identify-multiple-languages
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-options :initarg :language-options :initform
                         common-lisp:nil :type
                         (common-lisp:or language-options common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-language-options :shape
                         "LanguageOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identified-language-score :initarg
                         :identified-language-score :initform common-lisp:nil
                         :type
                         (common-lisp:or identified-language-score
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-identified-language-score
                         :shape "IdentifiedLanguageScore" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-codes :initarg :language-codes :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code-list common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-language-codes :shape
                         "LanguageCodeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-transcription-job-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subtitles :initarg :subtitles :initform
                         common-lisp:nil :type
                         (common-lisp:or subtitles-output common-lisp:null)
                         :accessor struct-shape-transcription-job-subtitles
                         :shape "SubtitlesOutput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-id-settings :initarg :language-id-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or language-id-settings-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-language-id-settings
                         :shape "LanguageIdSettingsMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (toxicity-detection :initarg :toxicity-detection
                         :initform common-lisp:nil :type
                         (common-lisp:or toxicity-detection common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-toxicity-detection
                         :shape "ToxicityDetection" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transcription-job
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transcription-job
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transcription-job 'make-transcription-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transcription-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transcription-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-status))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:list
       (common-lisp:cons "MediaSampleRateHertz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-format))
      (common-lisp:list
       (common-lisp:cons "MediaFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media))
      (common-lisp:list
       (common-lisp:cons "Media"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-settings))
      (common-lisp:list
       (common-lisp:cons "ModelSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-execution-settings))
      (common-lisp:list
       (common-lisp:cons "JobExecutionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-redaction))
      (common-lisp:list
       (common-lisp:cons "ContentRedaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identify-language))
      (common-lisp:list
       (common-lisp:cons "IdentifyLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identify-multiple-languages))
      (common-lisp:list
       (common-lisp:cons "IdentifyMultipleLanguages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-options))
      (common-lisp:list
       (common-lisp:cons "LanguageOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identified-language-score))
      (common-lisp:list
       (common-lisp:cons "IdentifiedLanguageScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-codes))
      (common-lisp:list
       (common-lisp:cons "LanguageCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitles))
      (common-lisp:list
       (common-lisp:cons "Subtitles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-id-settings))
      (common-lisp:list
       (common-lisp:cons "LanguageIdSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'toxicity-detection))
      (common-lisp:list
       (common-lisp:cons "ToxicityDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transcription-job))
   common-lisp:nil))
(common-lisp:deftype transcription-job-name () 'common-lisp:string)
(common-lisp:deftype transcription-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype transcription-job-summaries ()
   '(trivial-types:proper-list transcription-job-summary))
 (common-lisp:defun make-transcription-job-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            transcription-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass transcription-job-summary common-lisp:nil
                       ((transcription-job-name :initarg
                         :transcription-job-name :initform common-lisp:nil
                         :type
                         (common-lisp:or transcription-job-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-summary-transcription-job-name
                         :shape "TranscriptionJobName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-transcription-job-summary-creation-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-transcription-job-summary-start-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completion-time :initarg :completion-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-transcription-job-summary-completion-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-summary-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transcription-job-status :initarg
                         :transcription-job-status :initform common-lisp:nil
                         :type
                         (common-lisp:or transcription-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-summary-transcription-job-status
                         :shape "TranscriptionJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reason common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-summary-failure-reason
                         :shape "FailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-location-type :initarg :output-location-type
                         :initform common-lisp:nil :type
                         (common-lisp:or output-location-type common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-summary-output-location-type
                         :shape "OutputLocationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-redaction :initarg :content-redaction
                         :initform common-lisp:nil :type
                         (common-lisp:or content-redaction common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-summary-content-redaction
                         :shape "ContentRedaction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-settings :initarg :model-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or model-settings common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-summary-model-settings
                         :shape "ModelSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identify-language :initarg :identify-language
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-transcription-job-summary-identify-language
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identify-multiple-languages :initarg
                         :identify-multiple-languages :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-summary-identify-multiple-languages
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identified-language-score :initarg
                         :identified-language-score :initform common-lisp:nil
                         :type
                         (common-lisp:or identified-language-score
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-summary-identified-language-score
                         :shape "IdentifiedLanguageScore" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-codes :initarg :language-codes :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code-list common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-summary-language-codes
                         :shape "LanguageCodeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (toxicity-detection :initarg :toxicity-detection
                         :initform common-lisp:nil :type
                         (common-lisp:or toxicity-detection common-lisp:null)
                         :accessor
                         struct-shape-transcription-job-summary-toxicity-detection
                         :shape "ToxicityDetection" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transcription-job-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transcription-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transcription-job-summary
                    'make-transcription-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transcription-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transcription-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-status))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-location-type))
      (common-lisp:list
       (common-lisp:cons "OutputLocationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-redaction))
      (common-lisp:list
       (common-lisp:cons "ContentRedaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-settings))
      (common-lisp:list
       (common-lisp:cons "ModelSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identify-language))
      (common-lisp:list
       (common-lisp:cons "IdentifyLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identify-multiple-languages))
      (common-lisp:list
       (common-lisp:cons "IdentifyMultipleLanguages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identified-language-score))
      (common-lisp:list
       (common-lisp:cons "IdentifiedLanguageScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-codes))
      (common-lisp:list
       (common-lisp:cons "LanguageCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'toxicity-detection))
      (common-lisp:list
       (common-lisp:cons "ToxicityDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transcription-job-summary))
   common-lisp:nil))
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or transcribe-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "TranscribeArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-call-analytics-category-request common-lisp:nil
                       ((category-name :initarg :category-name :initform
                         (common-lisp:error ":category-name is required") :type
                         (common-lisp:or category-name common-lisp:null)
                         :accessor
                         struct-shape-update-call-analytics-category-request-category-name
                         :shape "CategoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or rule-list common-lisp:null) :accessor
                         struct-shape-update-call-analytics-category-request-rules
                         :shape "RuleList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-type :initarg :input-type :initform
                         common-lisp:nil :type
                         (common-lisp:or input-type common-lisp:null) :accessor
                         struct-shape-update-call-analytics-category-request-input-type
                         :shape "InputType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-call-analytics-category-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-call-analytics-category-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-call-analytics-category-request
                    'make-update-call-analytics-category-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-call-analytics-category-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-call-analytics-category-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-name))
      (common-lisp:list
       (common-lisp:cons "CategoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-type))
      (common-lisp:list
       (common-lisp:cons "InputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-call-analytics-category-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-call-analytics-category-response common-lisp:nil
                       ((category-properties :initarg :category-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or category-properties common-lisp:null)
                         :accessor
                         struct-shape-update-call-analytics-category-response-category-properties
                         :shape "CategoryProperties" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-call-analytics-category-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-call-analytics-category-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-call-analytics-category-response
                    'make-update-call-analytics-category-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-call-analytics-category-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-call-analytics-category-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-properties))
      (common-lisp:list
       (common-lisp:cons "CategoryProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-call-analytics-category-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-medical-vocabulary-request common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         (common-lisp:error ":vocabulary-name is required")
                         :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-update-medical-vocabulary-request-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-update-medical-vocabulary-request-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-file-uri :initarg :vocabulary-file-uri
                         :initform
                         (common-lisp:error ":vocabulary-file-uri is required")
                         :type (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-update-medical-vocabulary-request-vocabulary-file-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-medical-vocabulary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-medical-vocabulary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-medical-vocabulary-request
                    'make-update-medical-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-medical-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-medical-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-file-uri))
      (common-lisp:list
       (common-lisp:cons "VocabularyFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-medical-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-medical-vocabulary-response common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-update-medical-vocabulary-response-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-update-medical-vocabulary-response-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-update-medical-vocabulary-response-last-modified-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-state :initarg :vocabulary-state :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-state common-lisp:null)
                         :accessor
                         struct-shape-update-medical-vocabulary-response-vocabulary-state
                         :shape "VocabularyState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-medical-vocabulary-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-medical-vocabulary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-medical-vocabulary-response
                    'make-update-medical-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-medical-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-medical-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-state))
      (common-lisp:list
       (common-lisp:cons "VocabularyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-medical-vocabulary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vocabulary-filter-request common-lisp:nil
                       ((vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform
                         (common-lisp:error
                          ":vocabulary-filter-name is required")
                         :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-vocabulary-filter-request-vocabulary-filter-name
                         :shape "VocabularyFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (words :initarg :words :initform common-lisp:nil :type
                         (common-lisp:or words common-lisp:null) :accessor
                         struct-shape-update-vocabulary-filter-request-words
                         :shape "Words" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-filter-file-uri :initarg
                         :vocabulary-filter-file-uri :initform common-lisp:nil
                         :type (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-update-vocabulary-filter-request-vocabulary-filter-file-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or data-access-role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-vocabulary-filter-request-data-access-role-arn
                         :shape "DataAccessRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-vocabulary-filter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-vocabulary-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-vocabulary-filter-request
                    'make-update-vocabulary-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'words))
      (common-lisp:list
       (common-lisp:cons "Words"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-file-uri))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vocabulary-filter-response common-lisp:nil
                       ((vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-vocabulary-filter-response-vocabulary-filter-name
                         :shape "VocabularyFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-update-vocabulary-filter-response-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-update-vocabulary-filter-response-last-modified-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-vocabulary-filter-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-vocabulary-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-vocabulary-filter-response
                    'make-update-vocabulary-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vocabulary-request common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         (common-lisp:error ":vocabulary-name is required")
                         :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-update-vocabulary-request-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-update-vocabulary-request-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (phrases :initarg :phrases :initform common-lisp:nil
                         :type (common-lisp:or phrases common-lisp:null)
                         :accessor
                         struct-shape-update-vocabulary-request-phrases :shape
                         "Phrases" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vocabulary-file-uri :initarg :vocabulary-file-uri
                         :initform common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-update-vocabulary-request-vocabulary-file-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or data-access-role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-vocabulary-request-data-access-role-arn
                         :shape "DataAccessRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-vocabulary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-vocabulary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-vocabulary-request
                    'make-update-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phrases))
      (common-lisp:list
       (common-lisp:cons "Phrases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-file-uri))
      (common-lisp:list
       (common-lisp:cons "VocabularyFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vocabulary-response common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor
                         struct-shape-update-vocabulary-response-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-update-vocabulary-response-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-update-vocabulary-response-last-modified-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-state :initarg :vocabulary-state :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-state common-lisp:null)
                         :accessor
                         struct-shape-update-vocabulary-response-vocabulary-state
                         :shape "VocabularyState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-vocabulary-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-vocabulary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-vocabulary-response
                    'make-update-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-state))
      (common-lisp:list
       (common-lisp:cons "VocabularyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-response))
   common-lisp:nil))
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vocabularies ()
   '(trivial-types:proper-list vocabulary-info))
 (common-lisp:defun make-vocabularies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vocabulary-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vocabulary-filter-info common-lisp:nil
                       ((vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform common-lisp:nil
                         :type
                         (common-lisp:or vocabulary-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-vocabulary-filter-info-vocabulary-filter-name
                         :shape "VocabularyFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-vocabulary-filter-info-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-vocabulary-filter-info-last-modified-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vocabulary-filter-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vocabulary-filter-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vocabulary-filter-info 'make-vocabulary-filter-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vocabulary-filter-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vocabulary-filter-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vocabulary-filter-info))
   common-lisp:nil))
(common-lisp:deftype vocabulary-filter-method () 'common-lisp:string)
(common-lisp:deftype vocabulary-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vocabulary-filters ()
   '(trivial-types:proper-list vocabulary-filter-info))
 (common-lisp:defun make-vocabulary-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vocabulary-filter-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vocabulary-info common-lisp:nil
                       ((vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-name common-lisp:null)
                         :accessor struct-shape-vocabulary-info-vocabulary-name
                         :shape "VocabularyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor struct-shape-vocabulary-info-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-vocabulary-info-last-modified-time :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vocabulary-state :initarg :vocabulary-state :initform
                         common-lisp:nil :type
                         (common-lisp:or vocabulary-state common-lisp:null)
                         :accessor
                         struct-shape-vocabulary-info-vocabulary-state :shape
                         "VocabularyState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vocabulary-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vocabulary-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vocabulary-info 'make-vocabulary-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vocabulary-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vocabulary-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-state))
      (common-lisp:list
       (common-lisp:cons "VocabularyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vocabulary-info))
   common-lisp:nil))
(common-lisp:deftype vocabulary-name () 'common-lisp:string)
(common-lisp:deftype vocabulary-state () 'common-lisp:string)
(common-lisp:deftype word () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype words () '(trivial-types:proper-list word))
 (common-lisp:defun make-words
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list word))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-call-analytics-category
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category-name rules input-type)
   (common-lisp:declare (common-lisp:ignorable category-name rules input-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-call-analytics-category-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCallAnalyticsCategory"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-call-analytics-category))
(common-lisp:progn
 (common-lisp:defun create-language-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key language-code base-model-name model-name
                     input-data-config tags)
   (common-lisp:declare
    (common-lisp:ignorable language-code base-model-name model-name
     input-data-config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-language-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLanguageModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-language-model))
(common-lisp:progn
 (common-lisp:defun create-medical-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-name language-code
                     vocabulary-file-uri tags)
   (common-lisp:declare
    (common-lisp:ignorable vocabulary-name language-code vocabulary-file-uri
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-medical-vocabulary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateMedicalVocabulary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-medical-vocabulary))
(common-lisp:progn
 (common-lisp:defun create-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-name language-code phrases
                     vocabulary-file-uri tags data-access-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable vocabulary-name language-code phrases
     vocabulary-file-uri tags data-access-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vocabulary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVocabulary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-vocabulary))
(common-lisp:progn
 (common-lisp:defun create-vocabulary-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-filter-name language-code
                     words vocabulary-filter-file-uri tags
                     data-access-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable vocabulary-filter-name language-code words
     vocabulary-filter-file-uri tags data-access-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vocabulary-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVocabularyFilter"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-vocabulary-filter))
(common-lisp:progn
 (common-lisp:defun delete-call-analytics-category
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category-name)
   (common-lisp:declare (common-lisp:ignorable category-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-call-analytics-category-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCallAnalyticsCategory"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-call-analytics-category))
(common-lisp:progn
 (common-lisp:defun delete-call-analytics-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key call-analytics-job-name)
   (common-lisp:declare (common-lisp:ignorable call-analytics-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-call-analytics-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCallAnalyticsJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-call-analytics-job))
(common-lisp:progn
 (common-lisp:defun delete-language-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-name)
   (common-lisp:declare (common-lisp:ignorable model-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-language-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLanguageModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-language-model))
(common-lisp:progn
 (common-lisp:defun delete-medical-scribe-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key medical-scribe-job-name)
   (common-lisp:declare (common-lisp:ignorable medical-scribe-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-medical-scribe-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMedicalScribeJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-medical-scribe-job))
(common-lisp:progn
 (common-lisp:defun delete-medical-transcription-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key medical-transcription-job-name)
   (common-lisp:declare (common-lisp:ignorable medical-transcription-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-medical-transcription-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMedicalTranscriptionJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-medical-transcription-job))
(common-lisp:progn
 (common-lisp:defun delete-medical-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-name)
   (common-lisp:declare (common-lisp:ignorable vocabulary-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-medical-vocabulary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMedicalVocabulary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-medical-vocabulary))
(common-lisp:progn
 (common-lisp:defun delete-transcription-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transcription-job-name)
   (common-lisp:declare (common-lisp:ignorable transcription-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-transcription-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTranscriptionJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-transcription-job))
(common-lisp:progn
 (common-lisp:defun delete-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-name)
   (common-lisp:declare (common-lisp:ignorable vocabulary-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vocabulary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVocabulary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-vocabulary))
(common-lisp:progn
 (common-lisp:defun delete-vocabulary-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-filter-name)
   (common-lisp:declare (common-lisp:ignorable vocabulary-filter-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vocabulary-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVocabularyFilter"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-vocabulary-filter))
(common-lisp:progn
 (common-lisp:defun describe-language-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-name)
   (common-lisp:declare (common-lisp:ignorable model-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-language-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLanguageModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-language-model))
(common-lisp:progn
 (common-lisp:defun get-call-analytics-category
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category-name)
   (common-lisp:declare (common-lisp:ignorable category-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-call-analytics-category-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCallAnalyticsCategory"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-call-analytics-category))
(common-lisp:progn
 (common-lisp:defun get-call-analytics-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key call-analytics-job-name)
   (common-lisp:declare (common-lisp:ignorable call-analytics-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-call-analytics-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCallAnalyticsJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-call-analytics-job))
(common-lisp:progn
 (common-lisp:defun get-medical-scribe-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key medical-scribe-job-name)
   (common-lisp:declare (common-lisp:ignorable medical-scribe-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-medical-scribe-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMedicalScribeJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-medical-scribe-job))
(common-lisp:progn
 (common-lisp:defun get-medical-transcription-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key medical-transcription-job-name)
   (common-lisp:declare (common-lisp:ignorable medical-transcription-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-medical-transcription-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMedicalTranscriptionJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-medical-transcription-job))
(common-lisp:progn
 (common-lisp:defun get-medical-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-name)
   (common-lisp:declare (common-lisp:ignorable vocabulary-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-medical-vocabulary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMedicalVocabulary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-medical-vocabulary))
(common-lisp:progn
 (common-lisp:defun get-transcription-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transcription-job-name)
   (common-lisp:declare (common-lisp:ignorable transcription-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-transcription-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTranscriptionJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-transcription-job))
(common-lisp:progn
 (common-lisp:defun get-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-name)
   (common-lisp:declare (common-lisp:ignorable vocabulary-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-vocabulary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetVocabulary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-vocabulary))
(common-lisp:progn
 (common-lisp:defun get-vocabulary-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-filter-name)
   (common-lisp:declare (common-lisp:ignorable vocabulary-filter-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-vocabulary-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetVocabularyFilter"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-vocabulary-filter))
(common-lisp:progn
 (common-lisp:defun list-call-analytics-categories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-call-analytics-categories-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCallAnalyticsCategories"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-call-analytics-categories))
(common-lisp:progn
 (common-lisp:defun list-call-analytics-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status job-name-contains next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable status job-name-contains next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-call-analytics-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCallAnalyticsJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-call-analytics-jobs))
(common-lisp:progn
 (common-lisp:defun list-language-models
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status-equals name-contains next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable status-equals name-contains next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-language-models-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListLanguageModels"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-language-models))
(common-lisp:progn
 (common-lisp:defun list-medical-scribe-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status job-name-contains next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable status job-name-contains next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-medical-scribe-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMedicalScribeJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-medical-scribe-jobs))
(common-lisp:progn
 (common-lisp:defun list-medical-transcription-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status job-name-contains next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable status job-name-contains next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-medical-transcription-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMedicalTranscriptionJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-medical-transcription-jobs))
(common-lisp:progn
 (common-lisp:defun list-medical-vocabularies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results state-equals
                     name-contains)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results state-equals name-contains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-medical-vocabularies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMedicalVocabularies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-medical-vocabularies))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-transcription-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status job-name-contains next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable status job-name-contains next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-transcription-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTranscriptionJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-transcription-jobs))
(common-lisp:progn
 (common-lisp:defun list-vocabularies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results state-equals
                     name-contains)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results state-equals name-contains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vocabularies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListVocabularies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-vocabularies))
(common-lisp:progn
 (common-lisp:defun list-vocabulary-filters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results name-contains)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results name-contains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vocabulary-filters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListVocabularyFilters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-vocabulary-filters))
(common-lisp:progn
 (common-lisp:defun start-call-analytics-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key call-analytics-job-name media
                     output-location output-encryption-kmskey-id
                     data-access-role-arn settings channel-definitions)
   (common-lisp:declare
    (common-lisp:ignorable call-analytics-job-name media output-location
     output-encryption-kmskey-id data-access-role-arn settings
     channel-definitions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-call-analytics-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartCallAnalyticsJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-call-analytics-job))
(common-lisp:progn
 (common-lisp:defun start-medical-scribe-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key medical-scribe-job-name media
                     output-bucket-name output-encryption-kmskey-id
                     kmsencryption-context data-access-role-arn settings
                     channel-definitions tags)
   (common-lisp:declare
    (common-lisp:ignorable medical-scribe-job-name media output-bucket-name
     output-encryption-kmskey-id kmsencryption-context data-access-role-arn
     settings channel-definitions tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-medical-scribe-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMedicalScribeJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-medical-scribe-job))
(common-lisp:progn
 (common-lisp:defun start-medical-transcription-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key medical-transcription-job-name
                     language-code media-sample-rate-hertz media-format media
                     output-bucket-name output-key output-encryption-kmskey-id
                     kmsencryption-context settings content-identification-type
                     specialty type tags)
   (common-lisp:declare
    (common-lisp:ignorable medical-transcription-job-name language-code
     media-sample-rate-hertz media-format media output-bucket-name output-key
     output-encryption-kmskey-id kmsencryption-context settings
     content-identification-type specialty type tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-medical-transcription-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMedicalTranscriptionJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-medical-transcription-job))
(common-lisp:progn
 (common-lisp:defun start-transcription-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transcription-job-name language-code
                     media-sample-rate-hertz media-format media
                     output-bucket-name output-key output-encryption-kmskey-id
                     kmsencryption-context settings model-settings
                     job-execution-settings content-redaction identify-language
                     identify-multiple-languages language-options subtitles
                     tags language-id-settings toxicity-detection)
   (common-lisp:declare
    (common-lisp:ignorable transcription-job-name language-code
     media-sample-rate-hertz media-format media output-bucket-name output-key
     output-encryption-kmskey-id kmsencryption-context settings model-settings
     job-execution-settings content-redaction identify-language
     identify-multiple-languages language-options subtitles tags
     language-id-settings toxicity-detection))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-transcription-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartTranscriptionJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-transcription-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-call-analytics-category
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category-name rules input-type)
   (common-lisp:declare (common-lisp:ignorable category-name rules input-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-call-analytics-category-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCallAnalyticsCategory"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-call-analytics-category))
(common-lisp:progn
 (common-lisp:defun update-medical-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-name language-code
                     vocabulary-file-uri)
   (common-lisp:declare
    (common-lisp:ignorable vocabulary-name language-code vocabulary-file-uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-medical-vocabulary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateMedicalVocabulary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-medical-vocabulary))
(common-lisp:progn
 (common-lisp:defun update-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-name language-code phrases
                     vocabulary-file-uri data-access-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable vocabulary-name language-code phrases
     vocabulary-file-uri data-access-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-vocabulary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateVocabulary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-vocabulary))
(common-lisp:progn
 (common-lisp:defun update-vocabulary-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-filter-name words
                     vocabulary-filter-file-uri data-access-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable vocabulary-filter-name words
     vocabulary-filter-file-uri data-access-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-vocabulary-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateVocabularyFilter"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-vocabulary-filter))
