;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/wellarchitected/api
  (:use)
  (:nicknames #:aws/wellarchitected)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/wellarchitected/api)
(common-lisp:progn
 (common-lisp:define-condition wellarchitected-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'wellarchitected-error))
(common-lisp:progn
 (common-lisp:defclass wellarchitected-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "wellarchitected"
                        :api-version "2020-03-31" :host-prefix
                        "wellarchitected" :signing-name "wellarchitected"
                        :global-host common-lisp:nil))
 (common-lisp:export 'wellarchitected-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (wellarchitected-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:deftype account-summary () 'common-lisp:hash-table)
 (common-lisp:defun make-account-summary (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype additional-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass additional-resources common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or additional-resource-type
                                         common-lisp:null)
                         :accessor struct-shape-additional-resources-type
                         :shape "AdditionalResourceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or urls common-lisp:null) :accessor
                         struct-shape-additional-resources-content :shape
                         "Urls" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-additional-resources
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'additional-resources
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'additional-resources 'make-additional-resources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input additional-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input additional-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input additional-resources))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-resources-list ()
   '(trivial-types:proper-list additional-resources))
 (common-lisp:defun make-additional-resources-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list additional-resources))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass answer common-lisp:nil
                       ((question-id :initarg :question-id :initform
                         common-lisp:nil :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor struct-shape-answer-question-id :shape
                         "QuestionId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pillar-id :initarg :pillar-id :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-id common-lisp:null) :accessor
                         struct-shape-answer-pillar-id :shape "PillarId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (question-title :initarg :question-title :initform
                         common-lisp:nil :type
                         (common-lisp:or question-title common-lisp:null)
                         :accessor struct-shape-answer-question-title :shape
                         "QuestionTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (question-description :initarg :question-description
                         :initform common-lisp:nil :type
                         (common-lisp:or question-description common-lisp:null)
                         :accessor struct-shape-answer-question-description
                         :shape "QuestionDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (improvement-plan-url :initarg :improvement-plan-url
                         :initform common-lisp:nil :type
                         (common-lisp:or improvement-plan-url common-lisp:null)
                         :accessor struct-shape-answer-improvement-plan-url
                         :shape "ImprovementPlanUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (helpful-resource-url :initarg :helpful-resource-url
                         :initform common-lisp:nil :type
                         (common-lisp:or helpful-resource-url common-lisp:null)
                         :accessor struct-shape-answer-helpful-resource-url
                         :shape "HelpfulResourceUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (helpful-resource-display-text :initarg
                         :helpful-resource-display-text :initform
                         common-lisp:nil :type
                         (common-lisp:or display-text common-lisp:null)
                         :accessor
                         struct-shape-answer-helpful-resource-display-text
                         :shape "DisplayText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (choices :initarg :choices :initform common-lisp:nil
                         :type (common-lisp:or choices common-lisp:null)
                         :accessor struct-shape-answer-choices :shape "Choices"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (selected-choices :initarg :selected-choices :initform
                         common-lisp:nil :type
                         (common-lisp:or selected-choices common-lisp:null)
                         :accessor struct-shape-answer-selected-choices :shape
                         "SelectedChoices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (choice-answers :initarg :choice-answers :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-answers common-lisp:null)
                         :accessor struct-shape-answer-choice-answers :shape
                         "ChoiceAnswers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-applicable :initarg :is-applicable :initform
                         common-lisp:nil :type
                         (common-lisp:or is-applicable common-lisp:null)
                         :accessor struct-shape-answer-is-applicable :shape
                         "IsApplicable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (risk :initarg :risk :initform common-lisp:nil :type
                         (common-lisp:or risk common-lisp:null) :accessor
                         struct-shape-answer-risk :shape "Risk" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         struct-shape-answer-notes :shape "Notes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or answer-reason common-lisp:null)
                         :accessor struct-shape-answer-reason :shape
                         "AnswerReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-answer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'answer
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'answer 'make-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-title))
      (common-lisp:list
       (common-lisp:cons "QuestionTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'question-description))
      (common-lisp:list
       (common-lisp:cons "QuestionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'improvement-plan-url))
      (common-lisp:list
       (common-lisp:cons "ImprovementPlanUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'helpful-resource-url))
      (common-lisp:list
       (common-lisp:cons "HelpfulResourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'helpful-resource-display-text))
      (common-lisp:list
       (common-lisp:cons "HelpfulResourceDisplayText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choices))
      (common-lisp:list
       (common-lisp:cons "Choices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-choices))
      (common-lisp:list
       (common-lisp:cons "SelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-answers))
      (common-lisp:list
       (common-lisp:cons "ChoiceAnswers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-applicable))
      (common-lisp:list
       (common-lisp:cons "IsApplicable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk))
      (common-lisp:list
       (common-lisp:cons "Risk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input answer))
   common-lisp:nil))
(common-lisp:deftype answer-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype answer-summaries ()
   '(trivial-types:proper-list answer-summary))
 (common-lisp:defun make-answer-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list answer-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass answer-summary common-lisp:nil
                       ((question-id :initarg :question-id :initform
                         common-lisp:nil :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor struct-shape-answer-summary-question-id
                         :shape "QuestionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pillar-id :initarg :pillar-id :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-id common-lisp:null) :accessor
                         struct-shape-answer-summary-pillar-id :shape
                         "PillarId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (question-title :initarg :question-title :initform
                         common-lisp:nil :type
                         (common-lisp:or question-title common-lisp:null)
                         :accessor struct-shape-answer-summary-question-title
                         :shape "QuestionTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (choices :initarg :choices :initform common-lisp:nil
                         :type (common-lisp:or choices common-lisp:null)
                         :accessor struct-shape-answer-summary-choices :shape
                         "Choices" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (selected-choices :initarg :selected-choices :initform
                         common-lisp:nil :type
                         (common-lisp:or selected-choices common-lisp:null)
                         :accessor struct-shape-answer-summary-selected-choices
                         :shape "SelectedChoices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (choice-answer-summaries :initarg
                         :choice-answer-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or choice-answer-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-answer-summary-choice-answer-summaries
                         :shape "ChoiceAnswerSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-applicable :initarg :is-applicable :initform
                         common-lisp:nil :type
                         (common-lisp:or is-applicable common-lisp:null)
                         :accessor struct-shape-answer-summary-is-applicable
                         :shape "IsApplicable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (risk :initarg :risk :initform common-lisp:nil :type
                         (common-lisp:or risk common-lisp:null) :accessor
                         struct-shape-answer-summary-risk :shape "Risk"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or answer-reason common-lisp:null)
                         :accessor struct-shape-answer-summary-reason :shape
                         "AnswerReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (question-type :initarg :question-type :initform
                         common-lisp:nil :type
                         (common-lisp:or question-type common-lisp:null)
                         :accessor struct-shape-answer-summary-question-type
                         :shape "QuestionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-answer-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'answer-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'answer-summary 'make-answer-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input answer-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input answer-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-title))
      (common-lisp:list
       (common-lisp:cons "QuestionTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choices))
      (common-lisp:list
       (common-lisp:cons "Choices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-choices))
      (common-lisp:list
       (common-lisp:cons "SelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'choice-answer-summaries))
      (common-lisp:list
       (common-lisp:cons "ChoiceAnswerSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-applicable))
      (common-lisp:list
       (common-lisp:cons "IsApplicable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk))
      (common-lisp:list
       (common-lisp:cons "Risk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-type))
      (common-lisp:list
       (common-lisp:cons "QuestionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input answer-summary))
   common-lisp:nil))
(common-lisp:deftype application-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-lenses-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-associate-lenses-input-workload-id :shape
                         "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (lens-aliases :initarg :lens-aliases :initform
                         (common-lisp:error ":lens-aliases is required") :type
                         (common-lisp:or lens-aliases common-lisp:null)
                         :accessor
                         struct-shape-associate-lenses-input-lens-aliases
                         :shape "LensAliases" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-lenses-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-lenses-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-lenses-input 'make-associate-lenses-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-lenses-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-lenses-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-aliases))
      (common-lisp:list
       (common-lisp:cons "LensAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-lenses-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-profiles-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-associate-profiles-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (profile-arns :initarg :profile-arns :initform
                         (common-lisp:error ":profile-arns is required") :type
                         (common-lisp:or profile-arns common-lisp:null)
                         :accessor
                         struct-shape-associate-profiles-input-profile-arns
                         :shape "ProfileArns" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-profiles-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-profiles-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-profiles-input 'make-associate-profiles-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-profiles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-profiles-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arns))
      (common-lisp:list
       (common-lisp:cons "ProfileArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-profiles-input))
   common-lisp:nil))
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype aws-region () 'common-lisp:string)
(common-lisp:deftype base64string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass best-practice common-lisp:nil
                       ((choice-id :initarg :choice-id :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-id common-lisp:null) :accessor
                         struct-shape-best-practice-choice-id :shape "ChoiceId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (choice-title :initarg :choice-title :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-title common-lisp:null)
                         :accessor struct-shape-best-practice-choice-title
                         :shape "ChoiceTitle" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-best-practice
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'best-practice
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'best-practice 'make-best-practice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input best-practice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input best-practice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-title))
      (common-lisp:list
       (common-lisp:cons "ChoiceTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input best-practice))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype best-practices ()
   '(trivial-types:proper-list best-practice))
 (common-lisp:defun make-best-practices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list best-practice))
   aws-sdk/generator/shape::members))
(common-lisp:deftype check-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass check-detail common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or check-id common-lisp:null) :accessor
                         struct-shape-check-detail-id :shape "CheckId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or check-name common-lisp:null) :accessor
                         struct-shape-check-detail-name :shape "CheckName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or check-description common-lisp:null)
                         :accessor struct-shape-check-detail-description :shape
                         "CheckDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform common-lisp:nil
                         :type (common-lisp:or check-provider common-lisp:null)
                         :accessor struct-shape-check-detail-provider :shape
                         "CheckProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor struct-shape-check-detail-lens-arn :shape
                         "LensArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pillar-id :initarg :pillar-id :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-id common-lisp:null) :accessor
                         struct-shape-check-detail-pillar-id :shape "PillarId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (question-id :initarg :question-id :initform
                         common-lisp:nil :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor struct-shape-check-detail-question-id :shape
                         "QuestionId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (choice-id :initarg :choice-id :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-id common-lisp:null) :accessor
                         struct-shape-check-detail-choice-id :shape "ChoiceId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or check-status common-lisp:null)
                         :accessor struct-shape-check-detail-status :shape
                         "CheckStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor struct-shape-check-detail-account-id :shape
                         "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (flagged-resources :initarg :flagged-resources
                         :initform common-lisp:nil :type
                         (common-lisp:or flagged-resources common-lisp:null)
                         :accessor struct-shape-check-detail-flagged-resources
                         :shape "FlaggedResources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type
                         (common-lisp:or check-failure-reason common-lisp:null)
                         :accessor struct-shape-check-detail-reason :shape
                         "CheckFailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-check-detail-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-check-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'check-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'check-detail 'make-check-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input check-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input check-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flagged-resources))
      (common-lisp:list
       (common-lisp:cons "FlaggedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input check-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype check-details ()
   '(trivial-types:proper-list check-detail))
 (common-lisp:defun make-check-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list check-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype check-failure-reason () 'common-lisp:string)
(common-lisp:deftype check-id () 'common-lisp:string)
(common-lisp:deftype check-name () 'common-lisp:string)
(common-lisp:deftype check-provider () 'common-lisp:string)
(common-lisp:deftype check-status () 'common-lisp:string)
(common-lisp:deftype check-status-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype check-summaries ()
   '(trivial-types:proper-list check-summary))
 (common-lisp:defun make-check-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list check-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass check-summary common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or check-id common-lisp:null) :accessor
                         struct-shape-check-summary-id :shape "CheckId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or check-name common-lisp:null) :accessor
                         struct-shape-check-summary-name :shape "CheckName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider :initarg :provider :initform common-lisp:nil
                         :type (common-lisp:or check-provider common-lisp:null)
                         :accessor struct-shape-check-summary-provider :shape
                         "CheckProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or check-description common-lisp:null)
                         :accessor struct-shape-check-summary-description
                         :shape "CheckDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-check-summary-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor struct-shape-check-summary-lens-arn :shape
                         "LensArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pillar-id :initarg :pillar-id :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-id common-lisp:null) :accessor
                         struct-shape-check-summary-pillar-id :shape "PillarId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (question-id :initarg :question-id :initform
                         common-lisp:nil :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor struct-shape-check-summary-question-id
                         :shape "QuestionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (choice-id :initarg :choice-id :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-id common-lisp:null) :accessor
                         struct-shape-check-summary-choice-id :shape "ChoiceId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or check-status common-lisp:null)
                         :accessor struct-shape-check-summary-status :shape
                         "CheckStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (account-summary :initarg :account-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or account-summary common-lisp:null)
                         :accessor struct-shape-check-summary-account-summary
                         :shape "AccountSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-check-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'check-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'check-summary 'make-check-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input check-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input check-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-summary))
      (common-lisp:list
       (common-lisp:cons "AccountSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input check-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass choice common-lisp:nil
                       ((choice-id :initarg :choice-id :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-id common-lisp:null) :accessor
                         struct-shape-choice-choice-id :shape "ChoiceId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or choice-title common-lisp:null)
                         :accessor struct-shape-choice-title :shape
                         "ChoiceTitle" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-description common-lisp:null)
                         :accessor struct-shape-choice-description :shape
                         "ChoiceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (helpful-resource :initarg :helpful-resource :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-content common-lisp:null)
                         :accessor struct-shape-choice-helpful-resource :shape
                         "ChoiceContent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (improvement-plan :initarg :improvement-plan :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-content common-lisp:null)
                         :accessor struct-shape-choice-improvement-plan :shape
                         "ChoiceContent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-resources :initarg :additional-resources
                         :initform common-lisp:nil :type
                         (common-lisp:or additional-resources-list
                                         common-lisp:null)
                         :accessor struct-shape-choice-additional-resources
                         :shape "AdditionalResourcesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-choice
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'choice
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'choice 'make-choice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input choice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input choice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'helpful-resource))
      (common-lisp:list
       (common-lisp:cons "HelpfulResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'improvement-plan))
      (common-lisp:list
       (common-lisp:cons "ImprovementPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-resources))
      (common-lisp:list
       (common-lisp:cons "AdditionalResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input choice))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass choice-answer common-lisp:nil
                       ((choice-id :initarg :choice-id :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-id common-lisp:null) :accessor
                         struct-shape-choice-answer-choice-id :shape "ChoiceId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or choice-status common-lisp:null)
                         :accessor struct-shape-choice-answer-status :shape
                         "ChoiceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or choice-reason common-lisp:null)
                         :accessor struct-shape-choice-answer-reason :shape
                         "ChoiceReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or choice-notes common-lisp:null)
                         :accessor struct-shape-choice-answer-notes :shape
                         "ChoiceNotes" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-choice-answer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'choice-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'choice-answer 'make-choice-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input choice-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input choice-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input choice-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype choice-answer-summaries ()
   '(trivial-types:proper-list choice-answer-summary))
 (common-lisp:defun make-choice-answer-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list choice-answer-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass choice-answer-summary common-lisp:nil
                       ((choice-id :initarg :choice-id :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-id common-lisp:null) :accessor
                         struct-shape-choice-answer-summary-choice-id :shape
                         "ChoiceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or choice-status common-lisp:null)
                         :accessor struct-shape-choice-answer-summary-status
                         :shape "ChoiceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or choice-reason common-lisp:null)
                         :accessor struct-shape-choice-answer-summary-reason
                         :shape "ChoiceReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-choice-answer-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'choice-answer-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'choice-answer-summary 'make-choice-answer-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          choice-answer-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          choice-answer-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          choice-answer-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype choice-answers ()
   '(trivial-types:proper-list choice-answer))
 (common-lisp:defun make-choice-answers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list choice-answer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass choice-content common-lisp:nil
                       ((display-text :initarg :display-text :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-content-display-text
                                         common-lisp:null)
                         :accessor struct-shape-choice-content-display-text
                         :shape "ChoiceContentDisplayText" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or choice-content-url common-lisp:null)
                         :accessor struct-shape-choice-content-url :shape
                         "ChoiceContentUrl" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-choice-content
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'choice-content
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'choice-content 'make-choice-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input choice-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input choice-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-text))
      (common-lisp:list
       (common-lisp:cons "DisplayText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input choice-content))
   common-lisp:nil))
(common-lisp:deftype choice-content-display-text () 'common-lisp:string)
(common-lisp:deftype choice-content-url () 'common-lisp:string)
(common-lisp:deftype choice-description () 'common-lisp:string)
(common-lisp:deftype choice-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass choice-improvement-plan common-lisp:nil
                       ((choice-id :initarg :choice-id :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-id common-lisp:null) :accessor
                         struct-shape-choice-improvement-plan-choice-id :shape
                         "ChoiceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-text :initarg :display-text :initform
                         common-lisp:nil :type
                         (common-lisp:or display-text common-lisp:null)
                         :accessor
                         struct-shape-choice-improvement-plan-display-text
                         :shape "DisplayText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (improvement-plan-url :initarg :improvement-plan-url
                         :initform common-lisp:nil :type
                         (common-lisp:or improvement-plan-url common-lisp:null)
                         :accessor
                         struct-shape-choice-improvement-plan-improvement-plan-url
                         :shape "ImprovementPlanUrl" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-choice-improvement-plan
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'choice-improvement-plan
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'choice-improvement-plan 'make-choice-improvement-plan))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          choice-improvement-plan))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          choice-improvement-plan))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-text))
      (common-lisp:list
       (common-lisp:cons "DisplayText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'improvement-plan-url))
      (common-lisp:list
       (common-lisp:cons "ImprovementPlanUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          choice-improvement-plan))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype choice-improvement-plans ()
   '(trivial-types:proper-list choice-improvement-plan))
 (common-lisp:defun make-choice-improvement-plans
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list choice-improvement-plan))
   aws-sdk/generator/shape::members))
(common-lisp:deftype choice-notes () 'common-lisp:string)
(common-lisp:deftype choice-reason () 'common-lisp:string)
(common-lisp:deftype choice-status () 'common-lisp:string)
(common-lisp:deftype choice-title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass choice-update common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or choice-status common-lisp:null)
                         :accessor struct-shape-choice-update-status :shape
                         "ChoiceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or choice-reason common-lisp:null)
                         :accessor struct-shape-choice-update-reason :shape
                         "ChoiceReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or choice-notes common-lisp:null)
                         :accessor struct-shape-choice-update-notes :shape
                         "ChoiceNotes" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-choice-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'choice-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'choice-update 'make-choice-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input choice-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input choice-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input choice-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype choice-updates () 'common-lisp:hash-table)
 (common-lisp:defun make-choice-updates (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype choices () '(trivial-types:proper-list choice))
 (common-lisp:defun make-choices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list choice))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (wellarchitected-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass consolidated-report-metric common-lisp:nil
                       ((metric-type :initarg :metric-type :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-type common-lisp:null)
                         :accessor
                         struct-shape-consolidated-report-metric-metric-type
                         :shape "MetricType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (risk-counts :initarg :risk-counts :initform
                         common-lisp:nil :type
                         (common-lisp:or risk-counts common-lisp:null)
                         :accessor
                         struct-shape-consolidated-report-metric-risk-counts
                         :shape "RiskCounts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-consolidated-report-metric-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-name :initarg :workload-name :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor
                         struct-shape-consolidated-report-metric-workload-name
                         :shape "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-arn :initarg :workload-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-arn common-lisp:null)
                         :accessor
                         struct-shape-consolidated-report-metric-workload-arn
                         :shape "WorkloadArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-consolidated-report-metric-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lenses :initarg :lenses :initform common-lisp:nil
                         :type (common-lisp:or lens-metrics common-lisp:null)
                         :accessor
                         struct-shape-consolidated-report-metric-lenses :shape
                         "LensMetrics" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lenses-applied-count :initarg :lenses-applied-count
                         :initform common-lisp:nil :type
                         (common-lisp:or lenses-applied-count common-lisp:null)
                         :accessor
                         struct-shape-consolidated-report-metric-lenses-applied-count
                         :shape "LensesAppliedCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-consolidated-report-metric
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'consolidated-report-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'consolidated-report-metric
                    'make-consolidated-report-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          consolidated-report-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          consolidated-report-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-type))
      (common-lisp:list
       (common-lisp:cons "MetricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-counts))
      (common-lisp:list
       (common-lisp:cons "RiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-arn))
      (common-lisp:list
       (common-lisp:cons "WorkloadArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lenses))
      (common-lisp:list
       (common-lisp:cons "Lenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lenses-applied-count))
      (common-lisp:list
       (common-lisp:cons "LensesAppliedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          consolidated-report-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype consolidated-report-metrics ()
   '(trivial-types:proper-list consolidated-report-metric))
 (common-lisp:defun make-consolidated-report-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            consolidated-report-metric))
   aws-sdk/generator/shape::members))
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-lens-share-input common-lisp:nil
                       ((lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-create-lens-share-input-lens-alias :shape
                         "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (shared-with :initarg :shared-with :initform
                         (common-lisp:error ":shared-with is required") :type
                         (common-lisp:or shared-with common-lisp:null)
                         :accessor
                         struct-shape-create-lens-share-input-shared-with
                         :shape "SharedWith" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-lens-share-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-lens-share-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-lens-share-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-lens-share-input 'make-create-lens-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-share-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-lens-share-output common-lisp:nil
                       ((share-id :initarg :share-id :initform common-lisp:nil
                         :type (common-lisp:or share-id common-lisp:null)
                         :accessor
                         struct-shape-create-lens-share-output-share-id :shape
                         "ShareId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-lens-share-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-lens-share-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-lens-share-output 'make-create-lens-share-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-share-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-share-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-lens-version-input common-lisp:nil
                       ((lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-create-lens-version-input-lens-alias
                         :shape "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (lens-version :initarg :lens-version :initform
                         (common-lisp:error ":lens-version is required") :type
                         (common-lisp:or lens-version common-lisp:null)
                         :accessor
                         struct-shape-create-lens-version-input-lens-version
                         :shape "LensVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-major-version :initarg :is-major-version :initform
                         common-lisp:nil :type
                         (common-lisp:or is-major-version common-lisp:null)
                         :accessor
                         struct-shape-create-lens-version-input-is-major-version
                         :shape "IsMajorVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-lens-version-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-lens-version-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-lens-version-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-lens-version-input
                    'make-create-lens-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-version))
      (common-lisp:list
       (common-lisp:cons "LensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-major-version))
      (common-lisp:list
       (common-lisp:cons "IsMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-lens-version-output common-lisp:nil
                       ((lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor
                         struct-shape-create-lens-version-output-lens-arn
                         :shape "LensArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-version :initarg :lens-version :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-version common-lisp:null)
                         :accessor
                         struct-shape-create-lens-version-output-lens-version
                         :shape "LensVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-lens-version-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-lens-version-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-lens-version-output
                    'make-create-lens-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-version))
      (common-lisp:list
       (common-lisp:cons "LensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lens-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-milestone-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-create-milestone-input-workload-id :shape
                         "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (milestone-name :initarg :milestone-name :initform
                         (common-lisp:error ":milestone-name is required")
                         :type (common-lisp:or milestone-name common-lisp:null)
                         :accessor
                         struct-shape-create-milestone-input-milestone-name
                         :shape "MilestoneName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-milestone-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-milestone-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-milestone-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-milestone-input 'make-create-milestone-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-milestone-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-milestone-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-name))
      (common-lisp:list
       (common-lisp:cons "MilestoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-milestone-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-milestone-output common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-create-milestone-output-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (milestone-number :initarg :milestone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-number common-lisp:null)
                         :accessor
                         struct-shape-create-milestone-output-milestone-number
                         :shape "MilestoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-milestone-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-milestone-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-milestone-output 'make-create-milestone-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-milestone-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-milestone-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-milestone-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-profile-input common-lisp:nil
                       ((profile-name :initarg :profile-name :initform
                         (common-lisp:error ":profile-name is required") :type
                         (common-lisp:or profile-name common-lisp:null)
                         :accessor
                         struct-shape-create-profile-input-profile-name :shape
                         "ProfileName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (profile-description :initarg :profile-description
                         :initform
                         (common-lisp:error ":profile-description is required")
                         :type
                         (common-lisp:or profile-description common-lisp:null)
                         :accessor
                         struct-shape-create-profile-input-profile-description
                         :shape "ProfileDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-questions :initarg :profile-questions
                         :initform
                         (common-lisp:error ":profile-questions is required")
                         :type
                         (common-lisp:or profile-question-updates
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-input-profile-questions
                         :shape "ProfileQuestionUpdates" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-profile-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-profile-input-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-profile-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-profile-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-profile-input 'make-create-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-profile-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-description))
      (common-lisp:list
       (common-lisp:cons "ProfileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-questions))
      (common-lisp:list
       (common-lisp:cons "ProfileQuestions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-profile-output common-lisp:nil
                       ((profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-arn common-lisp:null)
                         :accessor
                         struct-shape-create-profile-output-profile-arn :shape
                         "ProfileArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (profile-version :initarg :profile-version :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-version common-lisp:null)
                         :accessor
                         struct-shape-create-profile-output-profile-version
                         :shape "ProfileVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-profile-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-profile-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-profile-output 'make-create-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-version))
      (common-lisp:list
       (common-lisp:cons "ProfileVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-profile-share-input common-lisp:nil
                       ((profile-arn :initarg :profile-arn :initform
                         (common-lisp:error ":profile-arn is required") :type
                         (common-lisp:or profile-arn common-lisp:null)
                         :accessor
                         struct-shape-create-profile-share-input-profile-arn
                         :shape "ProfileArn" :location "uri" :location-name
                         "ProfileArn")
                        (shared-with :initarg :shared-with :initform
                         (common-lisp:error ":shared-with is required") :type
                         (common-lisp:or shared-with common-lisp:null)
                         :accessor
                         struct-shape-create-profile-share-input-shared-with
                         :shape "SharedWith" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-profile-share-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-profile-share-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-profile-share-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-profile-share-input
                    'make-create-profile-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-share-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-profile-share-output common-lisp:nil
                       ((share-id :initarg :share-id :initform common-lisp:nil
                         :type (common-lisp:or share-id common-lisp:null)
                         :accessor
                         struct-shape-create-profile-share-output-share-id
                         :shape "ShareId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-arn common-lisp:null)
                         :accessor
                         struct-shape-create-profile-share-output-profile-arn
                         :shape "ProfileArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-profile-share-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-profile-share-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-profile-share-output
                    'make-create-profile-share-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-share-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-share-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-review-template-input common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":template-name is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-create-review-template-input-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or template-description common-lisp:null)
                         :accessor
                         struct-shape-create-review-template-input-description
                         :shape "TemplateDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lenses :initarg :lenses :initform
                         (common-lisp:error ":lenses is required") :type
                         (common-lisp:or review-template-lenses
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-review-template-input-lenses
                         :shape "ReviewTemplateLenses" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         struct-shape-create-review-template-input-notes :shape
                         "Notes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-review-template-input-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-review-template-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-review-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-review-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-review-template-input
                    'make-create-review-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-review-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-review-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lenses))
      (common-lisp:list
       (common-lisp:cons "Lenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-review-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-review-template-output common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-create-review-template-output-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-review-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-review-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-review-template-output
                    'make-create-review-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-review-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-review-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-review-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-template-share-input common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-create-template-share-input-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn")
                        (shared-with :initarg :shared-with :initform
                         (common-lisp:error ":shared-with is required") :type
                         (common-lisp:or shared-with common-lisp:null)
                         :accessor
                         struct-shape-create-template-share-input-shared-with
                         :shape "SharedWith" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-template-share-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-template-share-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-template-share-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-template-share-input
                    'make-create-template-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-share-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-template-share-output common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-create-template-share-output-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (share-id :initarg :share-id :initform common-lisp:nil
                         :type (common-lisp:or share-id common-lisp:null)
                         :accessor
                         struct-shape-create-template-share-output-share-id
                         :shape "ShareId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-template-share-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-template-share-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-template-share-output
                    'make-create-template-share-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-share-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-share-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workload-input common-lisp:nil
                       ((workload-name :initarg :workload-name :initform
                         (common-lisp:error ":workload-name is required") :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor
                         struct-shape-create-workload-input-workload-name
                         :shape "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or workload-description common-lisp:null)
                         :accessor
                         struct-shape-create-workload-input-description :shape
                         "WorkloadDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment :initarg :environment :initform
                         (common-lisp:error ":environment is required") :type
                         (common-lisp:or workload-environment common-lisp:null)
                         :accessor
                         struct-shape-create-workload-input-environment :shape
                         "WorkloadEnvironment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-ids :initarg :account-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-account-ids common-lisp:null)
                         :accessor
                         struct-shape-create-workload-input-account-ids :shape
                         "WorkloadAccountIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-regions :initarg :aws-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-aws-regions common-lisp:null)
                         :accessor
                         struct-shape-create-workload-input-aws-regions :shape
                         "WorkloadAwsRegions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (non-aws-regions :initarg :non-aws-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-non-aws-regions
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workload-input-non-aws-regions
                         :shape "WorkloadNonAwsRegions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pillar-priorities :initarg :pillar-priorities
                         :initform common-lisp:nil :type
                         (common-lisp:or workload-pillar-priorities
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workload-input-pillar-priorities
                         :shape "WorkloadPillarPriorities" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (architectural-design :initarg :architectural-design
                         :initform common-lisp:nil :type
                         (common-lisp:or workload-architectural-design
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workload-input-architectural-design
                         :shape "WorkloadArchitecturalDesign" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (review-owner :initarg :review-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-review-owner
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workload-input-review-owner :shape
                         "WorkloadReviewOwner" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (industry-type :initarg :industry-type :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-industry-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workload-input-industry-type
                         :shape "WorkloadIndustryType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (industry :initarg :industry :initform common-lisp:nil
                         :type
                         (common-lisp:or workload-industry common-lisp:null)
                         :accessor struct-shape-create-workload-input-industry
                         :shape "WorkloadIndustry" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lenses :initarg :lenses :initform
                         (common-lisp:error ":lenses is required") :type
                         (common-lisp:or workload-lenses common-lisp:null)
                         :accessor struct-shape-create-workload-input-lenses
                         :shape "WorkloadLenses" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         struct-shape-create-workload-input-notes :shape
                         "Notes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-workload-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-workload-input-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (discovery-config :initarg :discovery-config :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-discovery-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workload-input-discovery-config
                         :shape "WorkloadDiscoveryConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (applications :initarg :applications :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-applications
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workload-input-applications :shape
                         "WorkloadApplications" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-arns :initarg :profile-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-profile-arns
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workload-input-profile-arns :shape
                         "WorkloadProfileArns" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (review-template-arns :initarg :review-template-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or review-template-arns common-lisp:null)
                         :accessor
                         struct-shape-create-workload-input-review-template-arns
                         :shape "ReviewTemplateArns" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-workload-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-workload-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-workload-input 'make-create-workload-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-regions))
      (common-lisp:list
       (common-lisp:cons "AwsRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'non-aws-regions))
      (common-lisp:list
       (common-lisp:cons "NonAwsRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-priorities))
      (common-lisp:list
       (common-lisp:cons "PillarPriorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'architectural-design))
      (common-lisp:list
       (common-lisp:cons "ArchitecturalDesign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-owner))
      (common-lisp:list
       (common-lisp:cons "ReviewOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'industry-type))
      (common-lisp:list
       (common-lisp:cons "IndustryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'industry))
      (common-lisp:list
       (common-lisp:cons "Industry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lenses))
      (common-lisp:list
       (common-lisp:cons "Lenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-config))
      (common-lisp:list
       (common-lisp:cons "DiscoveryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arns))
      (common-lisp:list
       (common-lisp:cons "ProfileArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'review-template-arns))
      (common-lisp:list
       (common-lisp:cons "ReviewTemplateArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workload-output common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-create-workload-output-workload-id :shape
                         "WorkloadId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workload-arn :initarg :workload-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-arn common-lisp:null)
                         :accessor
                         struct-shape-create-workload-output-workload-arn
                         :shape "WorkloadArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-workload-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-workload-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-workload-output 'make-create-workload-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-arn))
      (common-lisp:list
       (common-lisp:cons "WorkloadArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workload-share-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-create-workload-share-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (shared-with :initarg :shared-with :initform
                         (common-lisp:error ":shared-with is required") :type
                         (common-lisp:or shared-with common-lisp:null)
                         :accessor
                         struct-shape-create-workload-share-input-shared-with
                         :shape "SharedWith" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permission-type :initarg :permission-type :initform
                         (common-lisp:error ":permission-type is required")
                         :type
                         (common-lisp:or permission-type common-lisp:null)
                         :accessor
                         struct-shape-create-workload-share-input-permission-type
                         :shape "PermissionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-workload-share-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-workload-share-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-workload-share-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-workload-share-input
                    'make-create-workload-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-share-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-type))
      (common-lisp:list
       (common-lisp:cons "PermissionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workload-share-output common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-create-workload-share-output-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (share-id :initarg :share-id :initform common-lisp:nil
                         :type (common-lisp:or share-id common-lisp:null)
                         :accessor
                         struct-shape-create-workload-share-output-share-id
                         :shape "ShareId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-workload-share-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-workload-share-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-workload-share-output
                    'make-create-workload-share-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-share-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workload-share-output))
   common-lisp:nil))
(common-lisp:deftype definition-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-lens-input common-lisp:nil
                       ((lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-delete-lens-input-lens-alias :shape
                         "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-delete-lens-input-client-request-token
                         :shape "ClientRequestToken" :location "querystring"
                         :location-name "ClientRequestToken")
                        (lens-status :initarg :lens-status :initform
                         (common-lisp:error ":lens-status is required") :type
                         (common-lisp:or lens-status-type common-lisp:null)
                         :accessor struct-shape-delete-lens-input-lens-status
                         :shape "LensStatusType" :location "querystring"
                         :location-name "LensStatus"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-lens-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-lens-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-lens-input 'make-delete-lens-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-lens-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-lens-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-lens-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-lens-share-input common-lisp:nil
                       ((share-id :initarg :share-id :initform
                         (common-lisp:error ":share-id is required") :type
                         (common-lisp:or share-id common-lisp:null) :accessor
                         struct-shape-delete-lens-share-input-share-id :shape
                         "ShareId" :location "uri" :location-name "ShareId")
                        (lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-delete-lens-share-input-lens-alias :shape
                         "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-delete-lens-share-input-client-request-token
                         :shape "ClientRequestToken" :location "querystring"
                         :location-name "ClientRequestToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-lens-share-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-lens-share-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-lens-share-input 'make-delete-lens-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lens-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lens-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lens-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-profile-input common-lisp:nil
                       ((profile-arn :initarg :profile-arn :initform
                         (common-lisp:error ":profile-arn is required") :type
                         (common-lisp:or profile-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-profile-input-profile-arn :shape
                         "ProfileArn" :location "uri" :location-name
                         "ProfileArn")
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-delete-profile-input-client-request-token
                         :shape "ClientRequestToken" :location "querystring"
                         :location-name "ClientRequestToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-profile-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-profile-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-profile-input 'make-delete-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-profile-share-input common-lisp:nil
                       ((share-id :initarg :share-id :initform
                         (common-lisp:error ":share-id is required") :type
                         (common-lisp:or share-id common-lisp:null) :accessor
                         struct-shape-delete-profile-share-input-share-id
                         :shape "ShareId" :location "uri" :location-name
                         "ShareId")
                        (profile-arn :initarg :profile-arn :initform
                         (common-lisp:error ":profile-arn is required") :type
                         (common-lisp:or profile-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-profile-share-input-profile-arn
                         :shape "ProfileArn" :location "uri" :location-name
                         "ProfileArn")
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-delete-profile-share-input-client-request-token
                         :shape "ClientRequestToken" :location "querystring"
                         :location-name "ClientRequestToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-profile-share-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-profile-share-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-profile-share-input
                    'make-delete-profile-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-review-template-input common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-review-template-input-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn")
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-delete-review-template-input-client-request-token
                         :shape "ClientRequestToken" :location "querystring"
                         :location-name "ClientRequestToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-review-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-review-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-review-template-input
                    'make-delete-review-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-review-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-review-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-review-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-template-share-input common-lisp:nil
                       ((share-id :initarg :share-id :initform
                         (common-lisp:error ":share-id is required") :type
                         (common-lisp:or share-id common-lisp:null) :accessor
                         struct-shape-delete-template-share-input-share-id
                         :shape "ShareId" :location "uri" :location-name
                         "ShareId")
                        (template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-template-share-input-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn")
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-delete-template-share-input-client-request-token
                         :shape "ClientRequestToken" :location "querystring"
                         :location-name "ClientRequestToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-template-share-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-template-share-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-template-share-input
                    'make-delete-template-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workload-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-delete-workload-input-workload-id :shape
                         "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-delete-workload-input-client-request-token
                         :shape "ClientRequestToken" :location "querystring"
                         :location-name "ClientRequestToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-workload-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-workload-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-workload-input 'make-delete-workload-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workload-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workload-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workload-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workload-share-input common-lisp:nil
                       ((share-id :initarg :share-id :initform
                         (common-lisp:error ":share-id is required") :type
                         (common-lisp:or share-id common-lisp:null) :accessor
                         struct-shape-delete-workload-share-input-share-id
                         :shape "ShareId" :location "uri" :location-name
                         "ShareId")
                        (workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-delete-workload-share-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-delete-workload-share-input-client-request-token
                         :shape "ClientRequestToken" :location "querystring"
                         :location-name "ClientRequestToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-workload-share-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-workload-share-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-workload-share-input
                    'make-delete-workload-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workload-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workload-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workload-share-input))
   common-lisp:nil))
(common-lisp:deftype difference-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-lenses-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-lenses-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (lens-aliases :initarg :lens-aliases :initform
                         (common-lisp:error ":lens-aliases is required") :type
                         (common-lisp:or lens-aliases common-lisp:null)
                         :accessor
                         struct-shape-disassociate-lenses-input-lens-aliases
                         :shape "LensAliases" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-lenses-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-lenses-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-lenses-input
                    'make-disassociate-lenses-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-lenses-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-lenses-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-aliases))
      (common-lisp:list
       (common-lisp:cons "LensAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-lenses-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-profiles-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-profiles-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (profile-arns :initarg :profile-arns :initform
                         (common-lisp:error ":profile-arns is required") :type
                         (common-lisp:or profile-arns common-lisp:null)
                         :accessor
                         struct-shape-disassociate-profiles-input-profile-arns
                         :shape "ProfileArns" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-profiles-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-profiles-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-profiles-input
                    'make-disassociate-profiles-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-profiles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-profiles-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arns))
      (common-lisp:list
       (common-lisp:cons "ProfileArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-profiles-input))
   common-lisp:nil))
(common-lisp:deftype discovery-integration-status () 'common-lisp:string)
(common-lisp:deftype display-text () 'common-lisp:string)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:deftype exception-resource-id () 'common-lisp:string)
(common-lisp:deftype exception-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-lens-input common-lisp:nil
                       ((lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-export-lens-input-lens-alias :shape
                         "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (lens-version :initarg :lens-version :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-version common-lisp:null)
                         :accessor struct-shape-export-lens-input-lens-version
                         :shape "LensVersion" :location "querystring"
                         :location-name "LensVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-lens-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-lens-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-lens-input 'make-export-lens-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-lens-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-lens-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-lens-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-lens-output common-lisp:nil
                       ((lens-json :initarg :lens-json :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-json common-lisp:null) :accessor
                         struct-shape-export-lens-output-lens-json :shape
                         "LensJSON" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-lens-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-lens-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-lens-output 'make-export-lens-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-lens-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-lens-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-json))
      (common-lisp:list
       (common-lisp:cons "LensJSON"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-lens-output))
   common-lisp:nil))
(common-lisp:deftype flagged-resources () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-answer-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor struct-shape-get-answer-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-get-answer-input-lens-alias :shape
                         "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (question-id :initarg :question-id :initform
                         (common-lisp:error ":question-id is required") :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor struct-shape-get-answer-input-question-id
                         :shape "QuestionId" :location "uri" :location-name
                         "QuestionId")
                        (milestone-number :initarg :milestone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-number common-lisp:null)
                         :accessor
                         struct-shape-get-answer-input-milestone-number :shape
                         "MilestoneNumber" :location "querystring"
                         :location-name "MilestoneNumber"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-answer-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-answer-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-answer-input 'make-get-answer-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-answer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-answer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-answer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-answer-output common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor struct-shape-get-answer-output-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (milestone-number :initarg :milestone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-number common-lisp:null)
                         :accessor
                         struct-shape-get-answer-output-milestone-number :shape
                         "MilestoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-alias :initarg :lens-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-get-answer-output-lens-alias :shape
                         "LensAlias" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor struct-shape-get-answer-output-lens-arn
                         :shape "LensArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (answer :initarg :answer :initform common-lisp:nil
                         :type (common-lisp:or answer common-lisp:null)
                         :accessor struct-shape-get-answer-output-answer :shape
                         "Answer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-answer-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-answer-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-answer-output 'make-get-answer-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-answer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-answer-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer))
      (common-lisp:list
       (common-lisp:cons "Answer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-answer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-consolidated-report-input common-lisp:nil
                       ((format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or report-format common-lisp:null)
                         :accessor
                         struct-shape-get-consolidated-report-input-format
                         :shape "ReportFormat" :location "querystring"
                         :location-name "Format")
                        (include-shared-resources :initarg
                         :include-shared-resources :initform common-lisp:nil
                         :type
                         (common-lisp:or include-shared-resources
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-consolidated-report-input-include-shared-resources
                         :shape "IncludeSharedResources" :location
                         "querystring" :location-name "IncludeSharedResources")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-consolidated-report-input-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or get-consolidated-report-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-consolidated-report-input-max-results
                         :shape "GetConsolidatedReportMaxResults" :location
                         "querystring" :location-name "MaxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-consolidated-report-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-consolidated-report-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-consolidated-report-input
                    'make-get-consolidated-report-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-consolidated-report-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-consolidated-report-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-consolidated-report-input))
   common-lisp:nil))
(common-lisp:deftype get-consolidated-report-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-consolidated-report-output common-lisp:nil
                       ((metrics :initarg :metrics :initform common-lisp:nil
                         :type
                         (common-lisp:or consolidated-report-metrics
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-consolidated-report-output-metrics
                         :shape "ConsolidatedReportMetrics" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-consolidated-report-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (base64string :initarg :base64string :initform
                         common-lisp:nil :type
                         (common-lisp:or base64string common-lisp:null)
                         :accessor
                         struct-shape-get-consolidated-report-output-base64string
                         :shape "Base64String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-consolidated-report-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-consolidated-report-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-consolidated-report-output
                    'make-get-consolidated-report-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-consolidated-report-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-consolidated-report-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base64string))
      (common-lisp:list
       (common-lisp:cons "Base64String"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-consolidated-report-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lens-input common-lisp:nil
                       ((lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-get-lens-input-lens-alias :shape
                         "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (lens-version :initarg :lens-version :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-version common-lisp:null)
                         :accessor struct-shape-get-lens-input-lens-version
                         :shape "LensVersion" :location "querystring"
                         :location-name "LensVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lens-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-lens-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-lens-input 'make-get-lens-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-lens-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-lens-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-lens-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lens-output common-lisp:nil
                       ((lens :initarg :lens :initform common-lisp:nil :type
                         (common-lisp:or lens common-lisp:null) :accessor
                         struct-shape-get-lens-output-lens :shape "Lens"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lens-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-lens-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-lens-output 'make-get-lens-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-lens-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-lens-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens))
      (common-lisp:list
       (common-lisp:cons "Lens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-lens-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lens-review-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-get-lens-review-input-workload-id :shape
                         "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-get-lens-review-input-lens-alias :shape
                         "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (milestone-number :initarg :milestone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-number common-lisp:null)
                         :accessor
                         struct-shape-get-lens-review-input-milestone-number
                         :shape "MilestoneNumber" :location "querystring"
                         :location-name "MilestoneNumber"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lens-review-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-lens-review-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-lens-review-input 'make-get-lens-review-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lens-review-output common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-get-lens-review-output-workload-id :shape
                         "WorkloadId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (milestone-number :initarg :milestone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-number common-lisp:null)
                         :accessor
                         struct-shape-get-lens-review-output-milestone-number
                         :shape "MilestoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-review :initarg :lens-review :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-review common-lisp:null)
                         :accessor
                         struct-shape-get-lens-review-output-lens-review :shape
                         "LensReview" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lens-review-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-lens-review-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-lens-review-output 'make-get-lens-review-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-review))
      (common-lisp:list
       (common-lisp:cons "LensReview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lens-review-report-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-get-lens-review-report-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-get-lens-review-report-input-lens-alias
                         :shape "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (milestone-number :initarg :milestone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-number common-lisp:null)
                         :accessor
                         struct-shape-get-lens-review-report-input-milestone-number
                         :shape "MilestoneNumber" :location "querystring"
                         :location-name "MilestoneNumber"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lens-review-report-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-lens-review-report-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-lens-review-report-input
                    'make-get-lens-review-report-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-report-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-report-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-report-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lens-review-report-output common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-get-lens-review-report-output-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (milestone-number :initarg :milestone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-number common-lisp:null)
                         :accessor
                         struct-shape-get-lens-review-report-output-milestone-number
                         :shape "MilestoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-review-report :initarg :lens-review-report
                         :initform common-lisp:nil :type
                         (common-lisp:or lens-review-report common-lisp:null)
                         :accessor
                         struct-shape-get-lens-review-report-output-lens-review-report
                         :shape "LensReviewReport" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lens-review-report-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-lens-review-report-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-lens-review-report-output
                    'make-get-lens-review-report-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-report-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-report-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-review-report))
      (common-lisp:list
       (common-lisp:cons "LensReviewReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-review-report-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lens-version-difference-input common-lisp:nil
                       ((lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-get-lens-version-difference-input-lens-alias
                         :shape "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (base-lens-version :initarg :base-lens-version
                         :initform common-lisp:nil :type
                         (common-lisp:or lens-version common-lisp:null)
                         :accessor
                         struct-shape-get-lens-version-difference-input-base-lens-version
                         :shape "LensVersion" :location "querystring"
                         :location-name "BaseLensVersion")
                        (target-lens-version :initarg :target-lens-version
                         :initform common-lisp:nil :type
                         (common-lisp:or lens-version common-lisp:null)
                         :accessor
                         struct-shape-get-lens-version-difference-input-target-lens-version
                         :shape "LensVersion" :location "querystring"
                         :location-name "TargetLensVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lens-version-difference-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-lens-version-difference-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-lens-version-difference-input
                    'make-get-lens-version-difference-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-version-difference-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-version-difference-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-version-difference-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lens-version-difference-output common-lisp:nil
                       ((lens-alias :initarg :lens-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-get-lens-version-difference-output-lens-alias
                         :shape "LensAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor
                         struct-shape-get-lens-version-difference-output-lens-arn
                         :shape "LensArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (base-lens-version :initarg :base-lens-version
                         :initform common-lisp:nil :type
                         (common-lisp:or lens-version common-lisp:null)
                         :accessor
                         struct-shape-get-lens-version-difference-output-base-lens-version
                         :shape "LensVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-lens-version :initarg :target-lens-version
                         :initform common-lisp:nil :type
                         (common-lisp:or lens-version common-lisp:null)
                         :accessor
                         struct-shape-get-lens-version-difference-output-target-lens-version
                         :shape "LensVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-lens-version :initarg :latest-lens-version
                         :initform common-lisp:nil :type
                         (common-lisp:or lens-version common-lisp:null)
                         :accessor
                         struct-shape-get-lens-version-difference-output-latest-lens-version
                         :shape "LensVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-differences :initarg :version-differences
                         :initform common-lisp:nil :type
                         (common-lisp:or version-differences common-lisp:null)
                         :accessor
                         struct-shape-get-lens-version-difference-output-version-differences
                         :shape "VersionDifferences" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lens-version-difference-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-lens-version-difference-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-lens-version-difference-output
                    'make-get-lens-version-difference-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-version-difference-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-version-difference-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-lens-version))
      (common-lisp:list
       (common-lisp:cons "BaseLensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-lens-version))
      (common-lisp:list
       (common-lisp:cons "TargetLensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-lens-version))
      (common-lisp:list
       (common-lisp:cons "LatestLensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-differences))
      (common-lisp:list
       (common-lisp:cons "VersionDifferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lens-version-difference-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-milestone-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor struct-shape-get-milestone-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (milestone-number :initarg :milestone-number :initform
                         (common-lisp:error ":milestone-number is required")
                         :type
                         (common-lisp:or milestone-number common-lisp:null)
                         :accessor
                         struct-shape-get-milestone-input-milestone-number
                         :shape "MilestoneNumber" :location "uri"
                         :location-name "MilestoneNumber"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-milestone-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-milestone-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-milestone-input 'make-get-milestone-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-milestone-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-milestone-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-milestone-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-milestone-output common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-get-milestone-output-workload-id :shape
                         "WorkloadId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (milestone :initarg :milestone :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone common-lisp:null) :accessor
                         struct-shape-get-milestone-output-milestone :shape
                         "Milestone" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-milestone-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-milestone-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-milestone-output 'make-get-milestone-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-milestone-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-milestone-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone))
      (common-lisp:list
       (common-lisp:cons "Milestone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-milestone-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-profile-input common-lisp:nil
                       ((profile-arn :initarg :profile-arn :initform
                         (common-lisp:error ":profile-arn is required") :type
                         (common-lisp:or profile-arn common-lisp:null)
                         :accessor struct-shape-get-profile-input-profile-arn
                         :shape "ProfileArn" :location "uri" :location-name
                         "ProfileArn")
                        (profile-version :initarg :profile-version :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-version common-lisp:null)
                         :accessor
                         struct-shape-get-profile-input-profile-version :shape
                         "ProfileVersion" :location "querystring"
                         :location-name "ProfileVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-profile-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-profile-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-profile-input 'make-get-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-profile-output common-lisp:nil
                       ((profile :initarg :profile :initform common-lisp:nil
                         :type (common-lisp:or profile common-lisp:null)
                         :accessor struct-shape-get-profile-output-profile
                         :shape "Profile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-profile-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-profile-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-profile-output 'make-get-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-profile-template-input common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-profile-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-profile-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-profile-template-input
                    'make-get-profile-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-profile-template-output common-lisp:nil
                       ((profile-template :initarg :profile-template :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-template common-lisp:null)
                         :accessor
                         struct-shape-get-profile-template-output-profile-template
                         :shape "ProfileTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-profile-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-profile-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-profile-template-output
                    'make-get-profile-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-template))
      (common-lisp:list
       (common-lisp:cons "ProfileTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-review-template-answer-input common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-get-review-template-answer-input-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn")
                        (lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-get-review-template-answer-input-lens-alias
                         :shape "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (question-id :initarg :question-id :initform
                         (common-lisp:error ":question-id is required") :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor
                         struct-shape-get-review-template-answer-input-question-id
                         :shape "QuestionId" :location "uri" :location-name
                         "QuestionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-review-template-answer-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-review-template-answer-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-review-template-answer-input
                    'make-get-review-template-answer-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-answer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-answer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-answer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-review-template-answer-output common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-get-review-template-answer-output-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-alias :initarg :lens-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-get-review-template-answer-output-lens-alias
                         :shape "LensAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (answer :initarg :answer :initform common-lisp:nil
                         :type
                         (common-lisp:or review-template-answer
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-review-template-answer-output-answer
                         :shape "ReviewTemplateAnswer" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-review-template-answer-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-review-template-answer-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-review-template-answer-output
                    'make-get-review-template-answer-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-answer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-answer-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer))
      (common-lisp:list
       (common-lisp:cons "Answer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-answer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-review-template-input common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-get-review-template-input-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-review-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-review-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-review-template-input
                    'make-get-review-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-review-template-lens-review-input common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-get-review-template-lens-review-input-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn")
                        (lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-get-review-template-lens-review-input-lens-alias
                         :shape "LensAlias" :location "uri" :location-name
                         "LensAlias"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-review-template-lens-review-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-review-template-lens-review-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-review-template-lens-review-input
                    'make-get-review-template-lens-review-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-lens-review-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-lens-review-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-lens-review-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-review-template-lens-review-output common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-get-review-template-lens-review-output-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-review :initarg :lens-review :initform
                         common-lisp:nil :type
                         (common-lisp:or review-template-lens-review
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-review-template-lens-review-output-lens-review
                         :shape "ReviewTemplateLensReview" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-review-template-lens-review-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-review-template-lens-review-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-review-template-lens-review-output
                    'make-get-review-template-lens-review-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-lens-review-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-lens-review-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-review))
      (common-lisp:list
       (common-lisp:cons "LensReview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-lens-review-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-review-template-output common-lisp:nil
                       ((review-template :initarg :review-template :initform
                         common-lisp:nil :type
                         (common-lisp:or review-template common-lisp:null)
                         :accessor
                         struct-shape-get-review-template-output-review-template
                         :shape "ReviewTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-review-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-review-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-review-template-output
                    'make-get-review-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-template))
      (common-lisp:list
       (common-lisp:cons "ReviewTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-review-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workload-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor struct-shape-get-workload-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workload-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-workload-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workload-input 'make-get-workload-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-workload-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-workload-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-workload-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workload-output common-lisp:nil
                       ((workload :initarg :workload :initform common-lisp:nil
                         :type (common-lisp:or workload common-lisp:null)
                         :accessor struct-shape-get-workload-output-workload
                         :shape "Workload" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workload-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-workload-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workload-output 'make-get-workload-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-workload-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-workload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload))
      (common-lisp:list
       (common-lisp:cons "Workload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-workload-output))
   common-lisp:nil))
(common-lisp:deftype helpful-resource-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-lens-input common-lisp:nil
                       ((lens-alias :initarg :lens-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-import-lens-input-lens-alias :shape
                         "LensAlias" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (jsonstring :initarg :jsonstring :initform
                         (common-lisp:error ":jsonstring is required") :type
                         (common-lisp:or lens-json common-lisp:null) :accessor
                         struct-shape-import-lens-input-jsonstring :shape
                         "LensJSON" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-import-lens-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-import-lens-input-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-lens-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-lens-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-lens-input 'make-import-lens-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-lens-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-lens-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jsonstring))
      (common-lisp:list
       (common-lisp:cons "JSONString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-lens-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-lens-output common-lisp:nil
                       ((lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor struct-shape-import-lens-output-lens-arn
                         :shape "LensArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or import-lens-status common-lisp:null)
                         :accessor struct-shape-import-lens-output-status
                         :shape "ImportLensStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-lens-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-lens-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-lens-output 'make-import-lens-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-lens-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-lens-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-lens-output))
   common-lisp:nil))
(common-lisp:deftype import-lens-status () 'common-lisp:string)
(common-lisp:deftype improvement-plan-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype improvement-summaries ()
   '(trivial-types:proper-list improvement-summary))
 (common-lisp:defun make-improvement-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list improvement-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass improvement-summary common-lisp:nil
                       ((question-id :initarg :question-id :initform
                         common-lisp:nil :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor struct-shape-improvement-summary-question-id
                         :shape "QuestionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pillar-id :initarg :pillar-id :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-id common-lisp:null) :accessor
                         struct-shape-improvement-summary-pillar-id :shape
                         "PillarId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (question-title :initarg :question-title :initform
                         common-lisp:nil :type
                         (common-lisp:or question-title common-lisp:null)
                         :accessor
                         struct-shape-improvement-summary-question-title :shape
                         "QuestionTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (risk :initarg :risk :initform common-lisp:nil :type
                         (common-lisp:or risk common-lisp:null) :accessor
                         struct-shape-improvement-summary-risk :shape "Risk"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (improvement-plan-url :initarg :improvement-plan-url
                         :initform common-lisp:nil :type
                         (common-lisp:or improvement-plan-url common-lisp:null)
                         :accessor
                         struct-shape-improvement-summary-improvement-plan-url
                         :shape "ImprovementPlanUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (improvement-plans :initarg :improvement-plans
                         :initform common-lisp:nil :type
                         (common-lisp:or choice-improvement-plans
                                         common-lisp:null)
                         :accessor
                         struct-shape-improvement-summary-improvement-plans
                         :shape "ChoiceImprovementPlans" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-improvement-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'improvement-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'improvement-summary 'make-improvement-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input improvement-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input improvement-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-title))
      (common-lisp:list
       (common-lisp:cons "QuestionTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk))
      (common-lisp:list
       (common-lisp:cons "Risk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'improvement-plan-url))
      (common-lisp:list
       (common-lisp:cons "ImprovementPlanUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'improvement-plans))
      (common-lisp:list
       (common-lisp:cons "ImprovementPlans"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input improvement-summary))
   common-lisp:nil))
(common-lisp:deftype include-shared-resources () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (wellarchitected-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype is-applicable () 'common-lisp:boolean)
(common-lisp:deftype is-major-version () 'common-lisp:boolean)
(common-lisp:deftype is-review-owner-update-acknowledged ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass lens common-lisp:nil
                       ((lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor struct-shape-lens-lens-arn :shape "LensArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-version :initarg :lens-version :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-version common-lisp:null)
                         :accessor struct-shape-lens-lens-version :shape
                         "LensVersion" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or lens-name common-lisp:null) :accessor
                         struct-shape-lens-name :shape "LensName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-description common-lisp:null)
                         :accessor struct-shape-lens-description :shape
                         "LensDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or lens-owner common-lisp:null) :accessor
                         struct-shape-lens-owner :shape "LensOwner" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (share-invitation-id :initarg :share-invitation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or share-invitation-id common-lisp:null)
                         :accessor struct-shape-lens-share-invitation-id :shape
                         "ShareInvitationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-lens-tags :shape "TagMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lens (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lens
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lens 'make-lens))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lens))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lens))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-version))
      (common-lisp:list
       (common-lisp:cons "LensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-invitation-id))
      (common-lisp:list
       (common-lisp:cons "ShareInvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lens))
   common-lisp:nil))
(common-lisp:deftype lens-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lens-aliases () '(trivial-types:proper-list lens-alias))
 (common-lisp:defun make-lens-aliases
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lens-alias))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lens-arn () 'common-lisp:string)
(common-lisp:deftype lens-description () 'common-lisp:string)
(common-lisp:deftype lens-json () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lens-metric common-lisp:nil
                       ((lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor struct-shape-lens-metric-lens-arn :shape
                         "LensArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pillars :initarg :pillars :initform common-lisp:nil
                         :type (common-lisp:or pillar-metrics common-lisp:null)
                         :accessor struct-shape-lens-metric-pillars :shape
                         "PillarMetrics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (risk-counts :initarg :risk-counts :initform
                         common-lisp:nil :type
                         (common-lisp:or risk-counts common-lisp:null)
                         :accessor struct-shape-lens-metric-risk-counts :shape
                         "RiskCounts" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lens-metric
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lens-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lens-metric 'make-lens-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lens-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lens-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillars))
      (common-lisp:list
       (common-lisp:cons "Pillars"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-counts))
      (common-lisp:list
       (common-lisp:cons "RiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lens-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lens-metrics () '(trivial-types:proper-list lens-metric))
 (common-lisp:defun make-lens-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lens-metric))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lens-name () 'common-lisp:string)
(common-lisp:deftype lens-name-prefix () 'common-lisp:string)
(common-lisp:deftype lens-owner () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lens-review common-lisp:nil
                       ((lens-alias :initarg :lens-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-lens-review-lens-alias :shape "LensAlias"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor struct-shape-lens-review-lens-arn :shape
                         "LensArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-version :initarg :lens-version :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-version common-lisp:null)
                         :accessor struct-shape-lens-review-lens-version :shape
                         "LensVersion" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-name :initarg :lens-name :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-name common-lisp:null) :accessor
                         struct-shape-lens-review-lens-name :shape "LensName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-status :initarg :lens-status :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-status common-lisp:null)
                         :accessor struct-shape-lens-review-lens-status :shape
                         "LensStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pillar-review-summaries :initarg
                         :pillar-review-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or pillar-review-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-lens-review-pillar-review-summaries
                         :shape "PillarReviewSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-lens-review-updated-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         struct-shape-lens-review-notes :shape "Notes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (risk-counts :initarg :risk-counts :initform
                         common-lisp:nil :type
                         (common-lisp:or risk-counts common-lisp:null)
                         :accessor struct-shape-lens-review-risk-counts :shape
                         "RiskCounts" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-lens-review-next-token :shape "NextToken"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (profiles :initarg :profiles :initform common-lisp:nil
                         :type
                         (common-lisp:or workload-profiles common-lisp:null)
                         :accessor struct-shape-lens-review-profiles :shape
                         "WorkloadProfiles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prioritized-risk-counts :initarg
                         :prioritized-risk-counts :initform common-lisp:nil
                         :type (common-lisp:or risk-counts common-lisp:null)
                         :accessor
                         struct-shape-lens-review-prioritized-risk-counts
                         :shape "RiskCounts" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lens-review
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lens-review
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lens-review 'make-lens-review))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lens-review))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lens-review))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-version))
      (common-lisp:list
       (common-lisp:cons "LensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-name))
      (common-lisp:list
       (common-lisp:cons "LensName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-status))
      (common-lisp:list
       (common-lisp:cons "LensStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pillar-review-summaries))
      (common-lisp:list
       (common-lisp:cons "PillarReviewSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-counts))
      (common-lisp:list
       (common-lisp:cons "RiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiles))
      (common-lisp:list
       (common-lisp:cons "Profiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prioritized-risk-counts))
      (common-lisp:list
       (common-lisp:cons "PrioritizedRiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lens-review))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lens-review-report common-lisp:nil
                       ((lens-alias :initarg :lens-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-lens-review-report-lens-alias :shape
                         "LensAlias" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor struct-shape-lens-review-report-lens-arn
                         :shape "LensArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (base64string :initarg :base64string :initform
                         common-lisp:nil :type
                         (common-lisp:or base64string common-lisp:null)
                         :accessor struct-shape-lens-review-report-base64string
                         :shape "Base64String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lens-review-report
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lens-review-report
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lens-review-report 'make-lens-review-report))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lens-review-report))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lens-review-report))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base64string))
      (common-lisp:list
       (common-lisp:cons "Base64String"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lens-review-report))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lens-review-summaries ()
   '(trivial-types:proper-list lens-review-summary))
 (common-lisp:defun make-lens-review-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lens-review-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass lens-review-summary common-lisp:nil
                       ((lens-alias :initarg :lens-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-lens-review-summary-lens-alias :shape
                         "LensAlias" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor struct-shape-lens-review-summary-lens-arn
                         :shape "LensArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-version :initarg :lens-version :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-version common-lisp:null)
                         :accessor
                         struct-shape-lens-review-summary-lens-version :shape
                         "LensVersion" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-name :initarg :lens-name :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-name common-lisp:null) :accessor
                         struct-shape-lens-review-summary-lens-name :shape
                         "LensName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-status :initarg :lens-status :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-status common-lisp:null)
                         :accessor struct-shape-lens-review-summary-lens-status
                         :shape "LensStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-lens-review-summary-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (risk-counts :initarg :risk-counts :initform
                         common-lisp:nil :type
                         (common-lisp:or risk-counts common-lisp:null)
                         :accessor struct-shape-lens-review-summary-risk-counts
                         :shape "RiskCounts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profiles :initarg :profiles :initform common-lisp:nil
                         :type
                         (common-lisp:or workload-profiles common-lisp:null)
                         :accessor struct-shape-lens-review-summary-profiles
                         :shape "WorkloadProfiles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prioritized-risk-counts :initarg
                         :prioritized-risk-counts :initform common-lisp:nil
                         :type (common-lisp:or risk-counts common-lisp:null)
                         :accessor
                         struct-shape-lens-review-summary-prioritized-risk-counts
                         :shape "RiskCounts" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lens-review-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lens-review-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lens-review-summary 'make-lens-review-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lens-review-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lens-review-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-version))
      (common-lisp:list
       (common-lisp:cons "LensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-name))
      (common-lisp:list
       (common-lisp:cons "LensName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-status))
      (common-lisp:list
       (common-lisp:cons "LensStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-counts))
      (common-lisp:list
       (common-lisp:cons "RiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiles))
      (common-lisp:list
       (common-lisp:cons "Profiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prioritized-risk-counts))
      (common-lisp:list
       (common-lisp:cons "PrioritizedRiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lens-review-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lens-share-summaries ()
   '(trivial-types:proper-list lens-share-summary))
 (common-lisp:defun make-lens-share-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lens-share-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass lens-share-summary common-lisp:nil
                       ((share-id :initarg :share-id :initform common-lisp:nil
                         :type (common-lisp:or share-id common-lisp:null)
                         :accessor struct-shape-lens-share-summary-share-id
                         :shape "ShareId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shared-with :initarg :shared-with :initform
                         common-lisp:nil :type
                         (common-lisp:or shared-with common-lisp:null)
                         :accessor struct-shape-lens-share-summary-shared-with
                         :shape "SharedWith" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or share-status common-lisp:null)
                         :accessor struct-shape-lens-share-summary-status
                         :shape "ShareStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-lens-share-summary-status-message :shape
                         "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lens-share-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lens-share-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lens-share-summary 'make-lens-share-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lens-share-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lens-share-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lens-share-summary))
   common-lisp:nil))
(common-lisp:deftype lens-status () 'common-lisp:string)
(common-lisp:deftype lens-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lens-summaries ()
   '(trivial-types:proper-list lens-summary))
 (common-lisp:defun make-lens-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lens-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass lens-summary common-lisp:nil
                       ((lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor struct-shape-lens-summary-lens-arn :shape
                         "LensArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-alias :initarg :lens-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-lens-summary-lens-alias :shape
                         "LensAlias" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-name :initarg :lens-name :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-name common-lisp:null) :accessor
                         struct-shape-lens-summary-lens-name :shape "LensName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-type :initarg :lens-type :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-type common-lisp:null) :accessor
                         struct-shape-lens-summary-lens-type :shape "LensType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-description common-lisp:null)
                         :accessor struct-shape-lens-summary-description :shape
                         "LensDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-lens-summary-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-lens-summary-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-version :initarg :lens-version :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-version common-lisp:null)
                         :accessor struct-shape-lens-summary-lens-version
                         :shape "LensVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor struct-shape-lens-summary-owner :shape
                         "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-status :initarg :lens-status :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-status common-lisp:null)
                         :accessor struct-shape-lens-summary-lens-status :shape
                         "LensStatus" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lens-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lens-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lens-summary 'make-lens-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lens-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lens-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-name))
      (common-lisp:list
       (common-lisp:cons "LensName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-type))
      (common-lisp:list
       (common-lisp:cons "LensType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-version))
      (common-lisp:list
       (common-lisp:cons "LensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-status))
      (common-lisp:list
       (common-lisp:cons "LensStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lens-summary))
   common-lisp:nil))
(common-lisp:deftype lens-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lens-upgrade-summary common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-lens-upgrade-summary-workload-id :shape
                         "WorkloadId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workload-name :initarg :workload-name :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor
                         struct-shape-lens-upgrade-summary-workload-name :shape
                         "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-alias :initarg :lens-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-lens-upgrade-summary-lens-alias :shape
                         "LensAlias" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor struct-shape-lens-upgrade-summary-lens-arn
                         :shape "LensArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-lens-version :initarg :current-lens-version
                         :initform common-lisp:nil :type
                         (common-lisp:or lens-version common-lisp:null)
                         :accessor
                         struct-shape-lens-upgrade-summary-current-lens-version
                         :shape "LensVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-lens-version :initarg :latest-lens-version
                         :initform common-lisp:nil :type
                         (common-lisp:or lens-version common-lisp:null)
                         :accessor
                         struct-shape-lens-upgrade-summary-latest-lens-version
                         :shape "LensVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-lens-upgrade-summary-resource-arn :shape
                         "ResourceArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor
                         struct-shape-lens-upgrade-summary-resource-name :shape
                         "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lens-upgrade-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lens-upgrade-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lens-upgrade-summary 'make-lens-upgrade-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lens-upgrade-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lens-upgrade-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-lens-version))
      (common-lisp:list
       (common-lisp:cons "CurrentLensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-lens-version))
      (common-lisp:list
       (common-lisp:cons "LatestLensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lens-upgrade-summary))
   common-lisp:nil))
(common-lisp:deftype lens-version () 'common-lisp:string)
(common-lisp:deftype lenses-applied-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-answers-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor struct-shape-list-answers-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-list-answers-input-lens-alias :shape
                         "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (pillar-id :initarg :pillar-id :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-id common-lisp:null) :accessor
                         struct-shape-list-answers-input-pillar-id :shape
                         "PillarId" :location "querystring" :location-name
                         "PillarId")
                        (milestone-number :initarg :milestone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-number common-lisp:null)
                         :accessor
                         struct-shape-list-answers-input-milestone-number
                         :shape "MilestoneNumber" :location "querystring"
                         :location-name "MilestoneNumber")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-answers-input-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-answers-max-results
                                         common-lisp:null)
                         :accessor struct-shape-list-answers-input-max-results
                         :shape "ListAnswersMaxResults" :location "querystring"
                         :location-name "MaxResults")
                        (question-priority :initarg :question-priority
                         :initform common-lisp:nil :type
                         (common-lisp:or question-priority common-lisp:null)
                         :accessor
                         struct-shape-list-answers-input-question-priority
                         :shape "QuestionPriority" :location "querystring"
                         :location-name "QuestionPriority"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-answers-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-answers-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-answers-input 'make-list-answers-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-answers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-answers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-answers-input))
   common-lisp:nil))
(common-lisp:deftype list-answers-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-answers-output common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor struct-shape-list-answers-output-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (milestone-number :initarg :milestone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-number common-lisp:null)
                         :accessor
                         struct-shape-list-answers-output-milestone-number
                         :shape "MilestoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-alias :initarg :lens-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-list-answers-output-lens-alias :shape
                         "LensAlias" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor struct-shape-list-answers-output-lens-arn
                         :shape "LensArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (answer-summaries :initarg :answer-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or answer-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-answers-output-answer-summaries
                         :shape "AnswerSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-answers-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-answers-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-answers-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-answers-output 'make-list-answers-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-answers-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-answers-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer-summaries))
      (common-lisp:list
       (common-lisp:cons "AnswerSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-answers-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-check-details-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-list-check-details-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-check-details-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-check-details-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-arn :initarg :lens-arn :initform
                         (common-lisp:error ":lens-arn is required") :type
                         (common-lisp:or lens-arn common-lisp:null) :accessor
                         struct-shape-list-check-details-input-lens-arn :shape
                         "LensArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pillar-id :initarg :pillar-id :initform
                         (common-lisp:error ":pillar-id is required") :type
                         (common-lisp:or pillar-id common-lisp:null) :accessor
                         struct-shape-list-check-details-input-pillar-id :shape
                         "PillarId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (question-id :initarg :question-id :initform
                         (common-lisp:error ":question-id is required") :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor
                         struct-shape-list-check-details-input-question-id
                         :shape "QuestionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (choice-id :initarg :choice-id :initform
                         (common-lisp:error ":choice-id is required") :type
                         (common-lisp:or choice-id common-lisp:null) :accessor
                         struct-shape-list-check-details-input-choice-id :shape
                         "ChoiceId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-check-details-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-check-details-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-check-details-input 'make-list-check-details-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-check-details-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-check-details-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-check-details-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-check-details-output common-lisp:nil
                       ((check-details :initarg :check-details :initform
                         common-lisp:nil :type
                         (common-lisp:or check-details common-lisp:null)
                         :accessor
                         struct-shape-list-check-details-output-check-details
                         :shape "CheckDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-check-details-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-check-details-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-check-details-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-check-details-output
                    'make-list-check-details-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-check-details-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-check-details-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-details))
      (common-lisp:list
       (common-lisp:cons "CheckDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-check-details-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-check-summaries-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-list-check-summaries-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-check-summaries-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-check-summaries-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-arn :initarg :lens-arn :initform
                         (common-lisp:error ":lens-arn is required") :type
                         (common-lisp:or lens-arn common-lisp:null) :accessor
                         struct-shape-list-check-summaries-input-lens-arn
                         :shape "LensArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pillar-id :initarg :pillar-id :initform
                         (common-lisp:error ":pillar-id is required") :type
                         (common-lisp:or pillar-id common-lisp:null) :accessor
                         struct-shape-list-check-summaries-input-pillar-id
                         :shape "PillarId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (question-id :initarg :question-id :initform
                         (common-lisp:error ":question-id is required") :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor
                         struct-shape-list-check-summaries-input-question-id
                         :shape "QuestionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (choice-id :initarg :choice-id :initform
                         (common-lisp:error ":choice-id is required") :type
                         (common-lisp:or choice-id common-lisp:null) :accessor
                         struct-shape-list-check-summaries-input-choice-id
                         :shape "ChoiceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-check-summaries-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-check-summaries-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-check-summaries-input
                    'make-list-check-summaries-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-check-summaries-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-check-summaries-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-check-summaries-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-check-summaries-output common-lisp:nil
                       ((check-summaries :initarg :check-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or check-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-check-summaries-output-check-summaries
                         :shape "CheckSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-check-summaries-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-check-summaries-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-check-summaries-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-check-summaries-output
                    'make-list-check-summaries-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-check-summaries-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-check-summaries-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-summaries))
      (common-lisp:list
       (common-lisp:cons "CheckSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-check-summaries-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-lens-review-improvements-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-list-lens-review-improvements-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-list-lens-review-improvements-input-lens-alias
                         :shape "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (pillar-id :initarg :pillar-id :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-id common-lisp:null) :accessor
                         struct-shape-list-lens-review-improvements-input-pillar-id
                         :shape "PillarId" :location "querystring"
                         :location-name "PillarId")
                        (milestone-number :initarg :milestone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-number common-lisp:null)
                         :accessor
                         struct-shape-list-lens-review-improvements-input-milestone-number
                         :shape "MilestoneNumber" :location "querystring"
                         :location-name "MilestoneNumber")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-lens-review-improvements-input-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-lens-review-improvements-max-results
                          common-lisp:null)
                         :accessor
                         struct-shape-list-lens-review-improvements-input-max-results
                         :shape "ListLensReviewImprovementsMaxResults"
                         :location "querystring" :location-name "MaxResults")
                        (question-priority :initarg :question-priority
                         :initform common-lisp:nil :type
                         (common-lisp:or question-priority common-lisp:null)
                         :accessor
                         struct-shape-list-lens-review-improvements-input-question-priority
                         :shape "QuestionPriority" :location "querystring"
                         :location-name "QuestionPriority"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-lens-review-improvements-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-lens-review-improvements-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-lens-review-improvements-input
                    'make-list-lens-review-improvements-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-review-improvements-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-review-improvements-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-review-improvements-input))
   common-lisp:nil))
(common-lisp:deftype list-lens-review-improvements-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-lens-review-improvements-output common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-list-lens-review-improvements-output-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (milestone-number :initarg :milestone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-number common-lisp:null)
                         :accessor
                         struct-shape-list-lens-review-improvements-output-milestone-number
                         :shape "MilestoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-alias :initarg :lens-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-list-lens-review-improvements-output-lens-alias
                         :shape "LensAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor
                         struct-shape-list-lens-review-improvements-output-lens-arn
                         :shape "LensArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (improvement-summaries :initarg :improvement-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or improvement-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-lens-review-improvements-output-improvement-summaries
                         :shape "ImprovementSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-lens-review-improvements-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-lens-review-improvements-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-lens-review-improvements-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-lens-review-improvements-output
                    'make-list-lens-review-improvements-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-review-improvements-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-review-improvements-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'improvement-summaries))
      (common-lisp:list
       (common-lisp:cons "ImprovementSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-review-improvements-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-lens-reviews-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-list-lens-reviews-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (milestone-number :initarg :milestone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-number common-lisp:null)
                         :accessor
                         struct-shape-list-lens-reviews-input-milestone-number
                         :shape "MilestoneNumber" :location "querystring"
                         :location-name "MilestoneNumber")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-lens-reviews-input-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-lens-reviews-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "MaxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-lens-reviews-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-lens-reviews-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-lens-reviews-input 'make-list-lens-reviews-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-reviews-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-reviews-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-reviews-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-lens-reviews-output common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-list-lens-reviews-output-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (milestone-number :initarg :milestone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-number common-lisp:null)
                         :accessor
                         struct-shape-list-lens-reviews-output-milestone-number
                         :shape "MilestoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-review-summaries :initarg :lens-review-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or lens-review-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-lens-reviews-output-lens-review-summaries
                         :shape "LensReviewSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-lens-reviews-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-lens-reviews-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-lens-reviews-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-lens-reviews-output 'make-list-lens-reviews-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-reviews-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-reviews-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lens-review-summaries))
      (common-lisp:list
       (common-lisp:cons "LensReviewSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-reviews-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-lens-shares-input common-lisp:nil
                       ((lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-list-lens-shares-input-lens-alias :shape
                         "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (shared-with-prefix :initarg :shared-with-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or shared-with-prefix common-lisp:null)
                         :accessor
                         struct-shape-list-lens-shares-input-shared-with-prefix
                         :shape "SharedWithPrefix" :location "querystring"
                         :location-name "SharedWithPrefix")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-lens-shares-input-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-workload-shares-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-lens-shares-input-max-results :shape
                         "ListWorkloadSharesMaxResults" :location "querystring"
                         :location-name "MaxResults")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or share-status common-lisp:null)
                         :accessor struct-shape-list-lens-shares-input-status
                         :shape "ShareStatus" :location "querystring"
                         :location-name "Status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-lens-shares-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-lens-shares-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-lens-shares-input 'make-list-lens-shares-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-shares-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-lens-shares-output common-lisp:nil
                       ((lens-share-summaries :initarg :lens-share-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or lens-share-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-lens-shares-output-lens-share-summaries
                         :shape "LensShareSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-lens-shares-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-lens-shares-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-lens-shares-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-lens-shares-output 'make-list-lens-shares-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-shares-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-shares-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lens-share-summaries))
      (common-lisp:list
       (common-lisp:cons "LensShareSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lens-shares-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-lenses-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-lenses-input-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-lenses-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "MaxResults")
                        (lens-type :initarg :lens-type :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-type common-lisp:null) :accessor
                         struct-shape-list-lenses-input-lens-type :shape
                         "LensType" :location "querystring" :location-name
                         "LensType")
                        (lens-status :initarg :lens-status :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-status-type common-lisp:null)
                         :accessor struct-shape-list-lenses-input-lens-status
                         :shape "LensStatusType" :location "querystring"
                         :location-name "LensStatus")
                        (lens-name :initarg :lens-name :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-name common-lisp:null) :accessor
                         struct-shape-list-lenses-input-lens-name :shape
                         "LensName" :location "querystring" :location-name
                         "LensName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-lenses-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-lenses-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-lenses-input 'make-list-lenses-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-lenses-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-lenses-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-lenses-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-lenses-output common-lisp:nil
                       ((lens-summaries :initarg :lens-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-lenses-output-lens-summaries :shape
                         "LensSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-lenses-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-lenses-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-lenses-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-lenses-output 'make-list-lenses-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-lenses-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-lenses-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-summaries))
      (common-lisp:list
       (common-lisp:cons "LensSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-lenses-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-milestones-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-list-milestones-input-workload-id :shape
                         "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-milestones-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-milestones-input-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-milestones-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-milestones-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-milestones-input 'make-list-milestones-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-milestones-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-milestones-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-milestones-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-milestones-output common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-list-milestones-output-workload-id :shape
                         "WorkloadId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (milestone-summaries :initarg :milestone-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or milestone-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-milestones-output-milestone-summaries
                         :shape "MilestoneSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-milestones-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-milestones-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-milestones-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-milestones-output 'make-list-milestones-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-milestones-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-milestones-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-summaries))
      (common-lisp:list
       (common-lisp:cons "MilestoneSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-milestones-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notifications-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-list-notifications-input-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-notifications-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-notifications-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-notifications-input-max-results
                         :shape "ListNotificationsMaxResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-list-notifications-input-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-notifications-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-notifications-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-notifications-input 'make-list-notifications-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-input))
   common-lisp:nil))
(common-lisp:deftype list-notifications-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-notifications-output common-lisp:nil
                       ((notification-summaries :initarg
                         :notification-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or notification-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-notifications-output-notification-summaries
                         :shape "NotificationSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-notifications-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-notifications-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-notifications-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-notifications-output
                    'make-list-notifications-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-summaries))
      (common-lisp:list
       (common-lisp:cons "NotificationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profile-notifications-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-list-profile-notifications-input-workload-id
                         :shape "WorkloadId" :location "querystring"
                         :location-name "WorkloadId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-profile-notifications-input-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-profile-notifications-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "MaxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profile-notifications-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-profile-notifications-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profile-notifications-input
                    'make-list-profile-notifications-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-notifications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-notifications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-notifications-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profile-notifications-output common-lisp:nil
                       ((notification-summaries :initarg
                         :notification-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or profile-notification-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-profile-notifications-output-notification-summaries
                         :shape "ProfileNotificationSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-profile-notifications-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profile-notifications-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-profile-notifications-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profile-notifications-output
                    'make-list-profile-notifications-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-notifications-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-notifications-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-summaries))
      (common-lisp:list
       (common-lisp:cons "NotificationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-notifications-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profile-shares-input common-lisp:nil
                       ((profile-arn :initarg :profile-arn :initform
                         (common-lisp:error ":profile-arn is required") :type
                         (common-lisp:or profile-arn common-lisp:null)
                         :accessor
                         struct-shape-list-profile-shares-input-profile-arn
                         :shape "ProfileArn" :location "uri" :location-name
                         "ProfileArn")
                        (shared-with-prefix :initarg :shared-with-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or shared-with-prefix common-lisp:null)
                         :accessor
                         struct-shape-list-profile-shares-input-shared-with-prefix
                         :shape "SharedWithPrefix" :location "querystring"
                         :location-name "SharedWithPrefix")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-profile-shares-input-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-profile-shares-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-profile-shares-input-max-results
                         :shape "ListProfileSharesMaxResults" :location
                         "querystring" :location-name "MaxResults")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or share-status common-lisp:null)
                         :accessor
                         struct-shape-list-profile-shares-input-status :shape
                         "ShareStatus" :location "querystring" :location-name
                         "Status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profile-shares-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-profile-shares-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profile-shares-input
                    'make-list-profile-shares-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-shares-input))
   common-lisp:nil))
(common-lisp:deftype list-profile-shares-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-profile-shares-output common-lisp:nil
                       ((profile-share-summaries :initarg
                         :profile-share-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or profile-share-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-profile-shares-output-profile-share-summaries
                         :shape "ProfileShareSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-profile-shares-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profile-shares-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-profile-shares-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profile-shares-output
                    'make-list-profile-shares-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-shares-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-shares-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profile-share-summaries))
      (common-lisp:list
       (common-lisp:cons "ProfileShareSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-shares-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profiles-input common-lisp:nil
                       ((profile-name-prefix :initarg :profile-name-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or profile-name-prefix common-lisp:null)
                         :accessor
                         struct-shape-list-profiles-input-profile-name-prefix
                         :shape "ProfileNamePrefix" :location "querystring"
                         :location-name "ProfileNamePrefix")
                        (profile-owner-type :initarg :profile-owner-type
                         :initform common-lisp:nil :type
                         (common-lisp:or profile-owner-type common-lisp:null)
                         :accessor
                         struct-shape-list-profiles-input-profile-owner-type
                         :shape "ProfileOwnerType" :location "querystring"
                         :location-name "ProfileOwnerType")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-profiles-input-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-profiles-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "MaxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profiles-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-profiles-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profiles-input 'make-list-profiles-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-profiles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-profiles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-profiles-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profiles-output common-lisp:nil
                       ((profile-summaries :initarg :profile-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or profile-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-profiles-output-profile-summaries
                         :shape "ProfileSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-profiles-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profiles-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-profiles-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profiles-output 'make-list-profiles-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-profiles-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-profiles-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-summaries))
      (common-lisp:list
       (common-lisp:cons "ProfileSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-profiles-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-review-template-answers-input common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-list-review-template-answers-input-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn")
                        (lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-list-review-template-answers-input-lens-alias
                         :shape "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (pillar-id :initarg :pillar-id :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-id common-lisp:null) :accessor
                         struct-shape-list-review-template-answers-input-pillar-id
                         :shape "PillarId" :location "querystring"
                         :location-name "PillarId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-review-template-answers-input-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-review-template-answers-max-results
                          common-lisp:null)
                         :accessor
                         struct-shape-list-review-template-answers-input-max-results
                         :shape "ListReviewTemplateAnswersMaxResults" :location
                         "querystring" :location-name "MaxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-review-template-answers-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-review-template-answers-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-review-template-answers-input
                    'make-list-review-template-answers-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-review-template-answers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-review-template-answers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-review-template-answers-input))
   common-lisp:nil))
(common-lisp:deftype list-review-template-answers-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-review-template-answers-output common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-list-review-template-answers-output-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-alias :initarg :lens-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-list-review-template-answers-output-lens-alias
                         :shape "LensAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (answer-summaries :initarg :answer-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or review-template-answer-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-review-template-answers-output-answer-summaries
                         :shape "ReviewTemplateAnswerSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-review-template-answers-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-review-template-answers-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-review-template-answers-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-review-template-answers-output
                    'make-list-review-template-answers-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-review-template-answers-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-review-template-answers-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer-summaries))
      (common-lisp:list
       (common-lisp:cons "AnswerSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-review-template-answers-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-review-templates-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-review-templates-input-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-review-templates-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "MaxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-review-templates-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-review-templates-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-review-templates-input
                    'make-list-review-templates-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-review-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-review-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-review-templates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-review-templates-output common-lisp:nil
                       ((review-templates :initarg :review-templates :initform
                         common-lisp:nil :type
                         (common-lisp:or review-templates common-lisp:null)
                         :accessor
                         struct-shape-list-review-templates-output-review-templates
                         :shape "ReviewTemplates" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-review-templates-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-review-templates-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-review-templates-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-review-templates-output
                    'make-list-review-templates-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-review-templates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-review-templates-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-templates))
      (common-lisp:list
       (common-lisp:cons "ReviewTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-review-templates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-share-invitations-input common-lisp:nil
                       ((workload-name-prefix :initarg :workload-name-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or workload-name-prefix common-lisp:null)
                         :accessor
                         struct-shape-list-share-invitations-input-workload-name-prefix
                         :shape "WorkloadNamePrefix" :location "querystring"
                         :location-name "WorkloadNamePrefix")
                        (lens-name-prefix :initarg :lens-name-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-name-prefix common-lisp:null)
                         :accessor
                         struct-shape-list-share-invitations-input-lens-name-prefix
                         :shape "LensNamePrefix" :location "querystring"
                         :location-name "LensNamePrefix")
                        (share-resource-type :initarg :share-resource-type
                         :initform common-lisp:nil :type
                         (common-lisp:or share-resource-type common-lisp:null)
                         :accessor
                         struct-shape-list-share-invitations-input-share-resource-type
                         :shape "ShareResourceType" :location "querystring"
                         :location-name "ShareResourceType")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-share-invitations-input-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-share-invitations-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-share-invitations-input-max-results
                         :shape "ListShareInvitationsMaxResults" :location
                         "querystring" :location-name "MaxResults")
                        (profile-name-prefix :initarg :profile-name-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or profile-name-prefix common-lisp:null)
                         :accessor
                         struct-shape-list-share-invitations-input-profile-name-prefix
                         :shape "ProfileNamePrefix" :location "querystring"
                         :location-name "ProfileNamePrefix")
                        (template-name-prefix :initarg :template-name-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or template-name-prefix common-lisp:null)
                         :accessor
                         struct-shape-list-share-invitations-input-template-name-prefix
                         :shape "TemplateNamePrefix" :location "querystring"
                         :location-name "TemplateNamePrefix"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-share-invitations-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-share-invitations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-share-invitations-input
                    'make-list-share-invitations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-share-invitations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-share-invitations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-share-invitations-input))
   common-lisp:nil))
(common-lisp:deftype list-share-invitations-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-share-invitations-output common-lisp:nil
                       ((share-invitation-summaries :initarg
                         :share-invitation-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or share-invitation-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-share-invitations-output-share-invitation-summaries
                         :shape "ShareInvitationSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-share-invitations-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-share-invitations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-share-invitations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-share-invitations-output
                    'make-list-share-invitations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-share-invitations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-share-invitations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'share-invitation-summaries))
      (common-lisp:list
       (common-lisp:cons "ShareInvitationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-share-invitations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((workload-arn :initarg :workload-arn :initform
                         (common-lisp:error ":workload-arn is required") :type
                         (common-lisp:or workload-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-input-workload-arn
                         :shape "WorkloadArn" :location "uri" :location-name
                         "WorkloadArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-output-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-template-shares-input common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-list-template-shares-input-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn")
                        (shared-with-prefix :initarg :shared-with-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or shared-with-prefix common-lisp:null)
                         :accessor
                         struct-shape-list-template-shares-input-shared-with-prefix
                         :shape "SharedWithPrefix" :location "querystring"
                         :location-name "SharedWithPrefix")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-template-shares-input-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-template-shares-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-template-shares-input-max-results
                         :shape "ListTemplateSharesMaxResults" :location
                         "querystring" :location-name "MaxResults")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or share-status common-lisp:null)
                         :accessor
                         struct-shape-list-template-shares-input-status :shape
                         "ShareStatus" :location "querystring" :location-name
                         "Status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-template-shares-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-template-shares-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-template-shares-input
                    'make-list-template-shares-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-shares-input))
   common-lisp:nil))
(common-lisp:deftype list-template-shares-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-template-shares-output common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-list-template-shares-output-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-share-summaries :initarg
                         :template-share-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or template-share-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-template-shares-output-template-share-summaries
                         :shape "TemplateShareSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-template-shares-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-template-shares-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-template-shares-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-template-shares-output
                    'make-list-template-shares-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-shares-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-shares-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-share-summaries))
      (common-lisp:list
       (common-lisp:cons "TemplateShareSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-shares-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workload-shares-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-list-workload-shares-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (shared-with-prefix :initarg :shared-with-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or shared-with-prefix common-lisp:null)
                         :accessor
                         struct-shape-list-workload-shares-input-shared-with-prefix
                         :shape "SharedWithPrefix" :location "querystring"
                         :location-name "SharedWithPrefix")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-workload-shares-input-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-workload-shares-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-workload-shares-input-max-results
                         :shape "ListWorkloadSharesMaxResults" :location
                         "querystring" :location-name "MaxResults")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or share-status common-lisp:null)
                         :accessor
                         struct-shape-list-workload-shares-input-status :shape
                         "ShareStatus" :location "querystring" :location-name
                         "Status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workload-shares-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workload-shares-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workload-shares-input
                    'make-list-workload-shares-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-shares-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-shares-input))
   common-lisp:nil))
(common-lisp:deftype list-workload-shares-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-workload-shares-output common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-list-workload-shares-output-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-share-summaries :initarg
                         :workload-share-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or workload-share-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-workload-shares-output-workload-share-summaries
                         :shape "WorkloadShareSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-workload-shares-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workload-shares-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workload-shares-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workload-shares-output
                    'make-list-workload-shares-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-shares-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-shares-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workload-share-summaries))
      (common-lisp:list
       (common-lisp:cons "WorkloadShareSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workload-shares-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workloads-input common-lisp:nil
                       ((workload-name-prefix :initarg :workload-name-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or workload-name-prefix common-lisp:null)
                         :accessor
                         struct-shape-list-workloads-input-workload-name-prefix
                         :shape "WorkloadNamePrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-workloads-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-workloads-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-workloads-input-max-results :shape
                         "ListWorkloadsMaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workloads-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workloads-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workloads-input 'make-list-workloads-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-workloads-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-workloads-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workload-name-prefix))
      (common-lisp:list
       (common-lisp:cons "WorkloadNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-workloads-input))
   common-lisp:nil))
(common-lisp:deftype list-workloads-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-workloads-output common-lisp:nil
                       ((workload-summaries :initarg :workload-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or workload-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-workloads-output-workload-summaries
                         :shape "WorkloadSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-workloads-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workloads-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workloads-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workloads-output 'make-list-workloads-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workloads-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workloads-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-summaries))
      (common-lisp:list
       (common-lisp:cons "WorkloadSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workloads-output))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype max-selected-profile-choices () 'common-lisp:integer)
(common-lisp:deftype metric-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass milestone common-lisp:nil
                       ((milestone-number :initarg :milestone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-number common-lisp:null)
                         :accessor struct-shape-milestone-milestone-number
                         :shape "MilestoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (milestone-name :initarg :milestone-name :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-name common-lisp:null)
                         :accessor struct-shape-milestone-milestone-name :shape
                         "MilestoneName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recorded-at :initarg :recorded-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-milestone-recorded-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workload :initarg :workload :initform common-lisp:nil
                         :type (common-lisp:or workload common-lisp:null)
                         :accessor struct-shape-milestone-workload :shape
                         "Workload" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-milestone
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'milestone
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'milestone 'make-milestone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input milestone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input milestone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-name))
      (common-lisp:list
       (common-lisp:cons "MilestoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recorded-at))
      (common-lisp:list
       (common-lisp:cons "RecordedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload))
      (common-lisp:list
       (common-lisp:cons "Workload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input milestone))
   common-lisp:nil))
(common-lisp:deftype milestone-name () 'common-lisp:string)
(common-lisp:deftype milestone-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype milestone-summaries ()
   '(trivial-types:proper-list milestone-summary))
 (common-lisp:defun make-milestone-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list milestone-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass milestone-summary common-lisp:nil
                       ((milestone-number :initarg :milestone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-number common-lisp:null)
                         :accessor
                         struct-shape-milestone-summary-milestone-number :shape
                         "MilestoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (milestone-name :initarg :milestone-name :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-name common-lisp:null)
                         :accessor
                         struct-shape-milestone-summary-milestone-name :shape
                         "MilestoneName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recorded-at :initarg :recorded-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-milestone-summary-recorded-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workload-summary :initarg :workload-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-summary common-lisp:null)
                         :accessor
                         struct-shape-milestone-summary-workload-summary :shape
                         "WorkloadSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-milestone-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'milestone-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'milestone-summary 'make-milestone-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input milestone-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input milestone-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-number))
      (common-lisp:list
       (common-lisp:cons "MilestoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-name))
      (common-lisp:list
       (common-lisp:cons "MilestoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recorded-at))
      (common-lisp:list
       (common-lisp:cons "RecordedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-summary))
      (common-lisp:list
       (common-lisp:cons "WorkloadSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input milestone-summary))
   common-lisp:nil))
(common-lisp:deftype min-selected-profile-choices () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype notes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype notification-summaries ()
   '(trivial-types:proper-list notification-summary))
 (common-lisp:defun make-notification-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list notification-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass notification-summary common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or notification-type common-lisp:null)
                         :accessor struct-shape-notification-summary-type
                         :shape "NotificationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-upgrade-summary :initarg :lens-upgrade-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or lens-upgrade-summary common-lisp:null)
                         :accessor
                         struct-shape-notification-summary-lens-upgrade-summary
                         :shape "LensUpgradeSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notification-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notification-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notification-summary 'make-notification-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lens-upgrade-summary))
      (common-lisp:list
       (common-lisp:cons "LensUpgradeSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification-summary))
   common-lisp:nil))
(common-lisp:deftype notification-type () 'common-lisp:string)
(common-lisp:deftype organization-sharing-status () 'common-lisp:string)
(common-lisp:deftype permission-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pillar-difference common-lisp:nil
                       ((pillar-id :initarg :pillar-id :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-id common-lisp:null) :accessor
                         struct-shape-pillar-difference-pillar-id :shape
                         "PillarId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pillar-name :initarg :pillar-name :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-name common-lisp:null)
                         :accessor struct-shape-pillar-difference-pillar-name
                         :shape "PillarName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (difference-status :initarg :difference-status
                         :initform common-lisp:nil :type
                         (common-lisp:or difference-status common-lisp:null)
                         :accessor
                         struct-shape-pillar-difference-difference-status
                         :shape "DifferenceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (question-differences :initarg :question-differences
                         :initform common-lisp:nil :type
                         (common-lisp:or question-differences common-lisp:null)
                         :accessor
                         struct-shape-pillar-difference-question-differences
                         :shape "QuestionDifferences" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pillar-difference
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pillar-difference
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pillar-difference 'make-pillar-difference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pillar-difference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pillar-difference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-name))
      (common-lisp:list
       (common-lisp:cons "PillarName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'difference-status))
      (common-lisp:list
       (common-lisp:cons "DifferenceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'question-differences))
      (common-lisp:list
       (common-lisp:cons "QuestionDifferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pillar-difference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pillar-differences ()
   '(trivial-types:proper-list pillar-difference))
 (common-lisp:defun make-pillar-differences
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pillar-difference))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pillar-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pillar-metric common-lisp:nil
                       ((pillar-id :initarg :pillar-id :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-id common-lisp:null) :accessor
                         struct-shape-pillar-metric-pillar-id :shape "PillarId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (risk-counts :initarg :risk-counts :initform
                         common-lisp:nil :type
                         (common-lisp:or risk-counts common-lisp:null)
                         :accessor struct-shape-pillar-metric-risk-counts
                         :shape "RiskCounts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (questions :initarg :questions :initform
                         common-lisp:nil :type
                         (common-lisp:or question-metrics common-lisp:null)
                         :accessor struct-shape-pillar-metric-questions :shape
                         "QuestionMetrics" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pillar-metric
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pillar-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'pillar-metric 'make-pillar-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pillar-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pillar-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-counts))
      (common-lisp:list
       (common-lisp:cons "RiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'questions))
      (common-lisp:list
       (common-lisp:cons "Questions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pillar-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pillar-metrics ()
   '(trivial-types:proper-list pillar-metric))
 (common-lisp:defun make-pillar-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pillar-metric))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pillar-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype pillar-notes () 'common-lisp:hash-table)
 (common-lisp:defun make-pillar-notes (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype pillar-review-summaries ()
   '(trivial-types:proper-list pillar-review-summary))
 (common-lisp:defun make-pillar-review-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pillar-review-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pillar-review-summary common-lisp:nil
                       ((pillar-id :initarg :pillar-id :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-id common-lisp:null) :accessor
                         struct-shape-pillar-review-summary-pillar-id :shape
                         "PillarId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pillar-name :initarg :pillar-name :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-name common-lisp:null)
                         :accessor
                         struct-shape-pillar-review-summary-pillar-name :shape
                         "PillarName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         struct-shape-pillar-review-summary-notes :shape
                         "Notes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (risk-counts :initarg :risk-counts :initform
                         common-lisp:nil :type
                         (common-lisp:or risk-counts common-lisp:null)
                         :accessor
                         struct-shape-pillar-review-summary-risk-counts :shape
                         "RiskCounts" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (prioritized-risk-counts :initarg
                         :prioritized-risk-counts :initform common-lisp:nil
                         :type (common-lisp:or risk-counts common-lisp:null)
                         :accessor
                         struct-shape-pillar-review-summary-prioritized-risk-counts
                         :shape "RiskCounts" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pillar-review-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pillar-review-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pillar-review-summary 'make-pillar-review-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pillar-review-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pillar-review-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-name))
      (common-lisp:list
       (common-lisp:cons "PillarName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-counts))
      (common-lisp:list
       (common-lisp:cons "RiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prioritized-risk-counts))
      (common-lisp:list
       (common-lisp:cons "PrioritizedRiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pillar-review-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass profile common-lisp:nil
                       ((profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-arn common-lisp:null)
                         :accessor struct-shape-profile-profile-arn :shape
                         "ProfileArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (profile-version :initarg :profile-version :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-version common-lisp:null)
                         :accessor struct-shape-profile-profile-version :shape
                         "ProfileVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-name :initarg :profile-name :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-name common-lisp:null)
                         :accessor struct-shape-profile-profile-name :shape
                         "ProfileName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (profile-description :initarg :profile-description
                         :initform common-lisp:nil :type
                         (common-lisp:or profile-description common-lisp:null)
                         :accessor struct-shape-profile-profile-description
                         :shape "ProfileDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-questions :initarg :profile-questions
                         :initform common-lisp:nil :type
                         (common-lisp:or profile-questions common-lisp:null)
                         :accessor struct-shape-profile-profile-questions
                         :shape "ProfileQuestions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor struct-shape-profile-owner :shape
                         "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-profile-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-profile-updated-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (share-invitation-id :initarg :share-invitation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or share-invitation-id common-lisp:null)
                         :accessor struct-shape-profile-share-invitation-id
                         :shape "ShareInvitationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-profile-tags :shape "TagMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'profile 'make-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-version))
      (common-lisp:list
       (common-lisp:cons "ProfileVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-description))
      (common-lisp:list
       (common-lisp:cons "ProfileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-questions))
      (common-lisp:list
       (common-lisp:cons "ProfileQuestions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-invitation-id))
      (common-lisp:list
       (common-lisp:cons "ShareInvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile))
   common-lisp:nil))
(common-lisp:deftype profile-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype profile-arns () '(trivial-types:proper-list profile-arn))
 (common-lisp:defun make-profile-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass profile-choice common-lisp:nil
                       ((choice-id :initarg :choice-id :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-id common-lisp:null) :accessor
                         struct-shape-profile-choice-choice-id :shape
                         "ChoiceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (choice-title :initarg :choice-title :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-title common-lisp:null)
                         :accessor struct-shape-profile-choice-choice-title
                         :shape "ChoiceTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (choice-description :initarg :choice-description
                         :initform common-lisp:nil :type
                         (common-lisp:or choice-description common-lisp:null)
                         :accessor
                         struct-shape-profile-choice-choice-description :shape
                         "ChoiceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-profile-choice
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'profile-choice
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'profile-choice 'make-profile-choice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile-choice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile-choice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-title))
      (common-lisp:list
       (common-lisp:cons "ChoiceTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-description))
      (common-lisp:list
       (common-lisp:cons "ChoiceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile-choice))
   common-lisp:nil))
(common-lisp:deftype profile-description () 'common-lisp:string)
(common-lisp:deftype profile-name () 'common-lisp:string)
(common-lisp:deftype profile-name-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype profile-notification-summaries ()
   '(trivial-types:proper-list profile-notification-summary))
 (common-lisp:defun make-profile-notification-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            profile-notification-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass profile-notification-summary common-lisp:nil
                       ((current-profile-version :initarg
                         :current-profile-version :initform common-lisp:nil
                         :type
                         (common-lisp:or profile-version common-lisp:null)
                         :accessor
                         struct-shape-profile-notification-summary-current-profile-version
                         :shape "ProfileVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-profile-version :initarg
                         :latest-profile-version :initform common-lisp:nil
                         :type
                         (common-lisp:or profile-version common-lisp:null)
                         :accessor
                         struct-shape-profile-notification-summary-latest-profile-version
                         :shape "ProfileVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or profile-notification-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-profile-notification-summary-type :shape
                         "ProfileNotificationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-arn common-lisp:null)
                         :accessor
                         struct-shape-profile-notification-summary-profile-arn
                         :shape "ProfileArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-name :initarg :profile-name :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-name common-lisp:null)
                         :accessor
                         struct-shape-profile-notification-summary-profile-name
                         :shape "ProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-profile-notification-summary-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-name :initarg :workload-name :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor
                         struct-shape-profile-notification-summary-workload-name
                         :shape "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-profile-notification-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'profile-notification-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'profile-notification-summary
                    'make-profile-notification-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          profile-notification-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          profile-notification-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-profile-version))
      (common-lisp:list
       (common-lisp:cons "CurrentProfileVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-profile-version))
      (common-lisp:list
       (common-lisp:cons "LatestProfileVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          profile-notification-summary))
   common-lisp:nil))
(common-lisp:deftype profile-notification-type () 'common-lisp:string)
(common-lisp:deftype profile-owner-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass profile-question common-lisp:nil
                       ((question-id :initarg :question-id :initform
                         common-lisp:nil :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor struct-shape-profile-question-question-id
                         :shape "QuestionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (question-title :initarg :question-title :initform
                         common-lisp:nil :type
                         (common-lisp:or question-title common-lisp:null)
                         :accessor struct-shape-profile-question-question-title
                         :shape "QuestionTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (question-description :initarg :question-description
                         :initform common-lisp:nil :type
                         (common-lisp:or question-description common-lisp:null)
                         :accessor
                         struct-shape-profile-question-question-description
                         :shape "QuestionDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (question-choices :initarg :question-choices :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-question-choices
                                         common-lisp:null)
                         :accessor
                         struct-shape-profile-question-question-choices :shape
                         "ProfileQuestionChoices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selected-choice-ids :initarg :selected-choice-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or selected-choice-ids common-lisp:null)
                         :accessor
                         struct-shape-profile-question-selected-choice-ids
                         :shape "SelectedChoiceIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-selected-choices :initarg :min-selected-choices
                         :initform common-lisp:nil :type
                         (common-lisp:or min-selected-profile-choices
                                         common-lisp:null)
                         :accessor
                         struct-shape-profile-question-min-selected-choices
                         :shape "MinSelectedProfileChoices" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-selected-choices :initarg :max-selected-choices
                         :initform common-lisp:nil :type
                         (common-lisp:or max-selected-profile-choices
                                         common-lisp:null)
                         :accessor
                         struct-shape-profile-question-max-selected-choices
                         :shape "MaxSelectedProfileChoices" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-profile-question
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'profile-question
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'profile-question 'make-profile-question))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile-question))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile-question))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-title))
      (common-lisp:list
       (common-lisp:cons "QuestionTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'question-description))
      (common-lisp:list
       (common-lisp:cons "QuestionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-choices))
      (common-lisp:list
       (common-lisp:cons "QuestionChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-choice-ids))
      (common-lisp:list
       (common-lisp:cons "SelectedChoiceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-selected-choices))
      (common-lisp:list
       (common-lisp:cons "MinSelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-selected-choices))
      (common-lisp:list
       (common-lisp:cons "MaxSelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile-question))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profile-question-choices ()
   '(trivial-types:proper-list profile-choice))
 (common-lisp:defun make-profile-question-choices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-choice))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass profile-question-update common-lisp:nil
                       ((question-id :initarg :question-id :initform
                         common-lisp:nil :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor
                         struct-shape-profile-question-update-question-id
                         :shape "QuestionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selected-choice-ids :initarg :selected-choice-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or selected-profile-choice-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-profile-question-update-selected-choice-ids
                         :shape "SelectedProfileChoiceIds" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-profile-question-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'profile-question-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'profile-question-update 'make-profile-question-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          profile-question-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          profile-question-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-choice-ids))
      (common-lisp:list
       (common-lisp:cons "SelectedChoiceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          profile-question-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profile-question-updates ()
   '(trivial-types:proper-list profile-question-update))
 (common-lisp:defun make-profile-question-updates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-question-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype profile-questions ()
   '(trivial-types:proper-list profile-question))
 (common-lisp:defun make-profile-questions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-question))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype profile-share-summaries ()
   '(trivial-types:proper-list profile-share-summary))
 (common-lisp:defun make-profile-share-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-share-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass profile-share-summary common-lisp:nil
                       ((share-id :initarg :share-id :initform common-lisp:nil
                         :type (common-lisp:or share-id common-lisp:null)
                         :accessor struct-shape-profile-share-summary-share-id
                         :shape "ShareId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shared-with :initarg :shared-with :initform
                         common-lisp:nil :type
                         (common-lisp:or shared-with common-lisp:null)
                         :accessor
                         struct-shape-profile-share-summary-shared-with :shape
                         "SharedWith" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or share-status common-lisp:null)
                         :accessor struct-shape-profile-share-summary-status
                         :shape "ShareStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-profile-share-summary-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-profile-share-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'profile-share-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'profile-share-summary 'make-profile-share-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          profile-share-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          profile-share-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          profile-share-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profile-summaries ()
   '(trivial-types:proper-list profile-summary))
 (common-lisp:defun make-profile-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass profile-summary common-lisp:nil
                       ((profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-arn common-lisp:null)
                         :accessor struct-shape-profile-summary-profile-arn
                         :shape "ProfileArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-version :initarg :profile-version :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-version common-lisp:null)
                         :accessor struct-shape-profile-summary-profile-version
                         :shape "ProfileVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-name :initarg :profile-name :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-name common-lisp:null)
                         :accessor struct-shape-profile-summary-profile-name
                         :shape "ProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-description :initarg :profile-description
                         :initform common-lisp:nil :type
                         (common-lisp:or profile-description common-lisp:null)
                         :accessor
                         struct-shape-profile-summary-profile-description
                         :shape "ProfileDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor struct-shape-profile-summary-owner :shape
                         "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-profile-summary-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-profile-summary-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-profile-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'profile-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'profile-summary 'make-profile-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-version))
      (common-lisp:list
       (common-lisp:cons "ProfileVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-description))
      (common-lisp:list
       (common-lisp:cons "ProfileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass profile-template common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-name common-lisp:null)
                         :accessor struct-shape-profile-template-template-name
                         :shape "ProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-questions :initarg :template-questions
                         :initform common-lisp:nil :type
                         (common-lisp:or template-questions common-lisp:null)
                         :accessor
                         struct-shape-profile-template-template-questions
                         :shape "TemplateQuestions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-profile-template-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-profile-template-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-profile-template
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'profile-template
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'profile-template 'make-profile-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-questions))
      (common-lisp:list
       (common-lisp:cons "TemplateQuestions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass profile-template-choice common-lisp:nil
                       ((choice-id :initarg :choice-id :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-id common-lisp:null) :accessor
                         struct-shape-profile-template-choice-choice-id :shape
                         "ChoiceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (choice-title :initarg :choice-title :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-title common-lisp:null)
                         :accessor
                         struct-shape-profile-template-choice-choice-title
                         :shape "ChoiceTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (choice-description :initarg :choice-description
                         :initform common-lisp:nil :type
                         (common-lisp:or choice-description common-lisp:null)
                         :accessor
                         struct-shape-profile-template-choice-choice-description
                         :shape "ChoiceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-profile-template-choice
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'profile-template-choice
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'profile-template-choice 'make-profile-template-choice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          profile-template-choice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          profile-template-choice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-id))
      (common-lisp:list
       (common-lisp:cons "ChoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-title))
      (common-lisp:list
       (common-lisp:cons "ChoiceTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-description))
      (common-lisp:list
       (common-lisp:cons "ChoiceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          profile-template-choice))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass profile-template-question common-lisp:nil
                       ((question-id :initarg :question-id :initform
                         common-lisp:nil :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor
                         struct-shape-profile-template-question-question-id
                         :shape "QuestionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (question-title :initarg :question-title :initform
                         common-lisp:nil :type
                         (common-lisp:or question-title common-lisp:null)
                         :accessor
                         struct-shape-profile-template-question-question-title
                         :shape "QuestionTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (question-description :initarg :question-description
                         :initform common-lisp:nil :type
                         (common-lisp:or question-description common-lisp:null)
                         :accessor
                         struct-shape-profile-template-question-question-description
                         :shape "QuestionDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (question-choices :initarg :question-choices :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-template-question-choices
                                         common-lisp:null)
                         :accessor
                         struct-shape-profile-template-question-question-choices
                         :shape "ProfileTemplateQuestionChoices" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (min-selected-choices :initarg :min-selected-choices
                         :initform common-lisp:nil :type
                         (common-lisp:or min-selected-profile-choices
                                         common-lisp:null)
                         :accessor
                         struct-shape-profile-template-question-min-selected-choices
                         :shape "MinSelectedProfileChoices" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-selected-choices :initarg :max-selected-choices
                         :initform common-lisp:nil :type
                         (common-lisp:or max-selected-profile-choices
                                         common-lisp:null)
                         :accessor
                         struct-shape-profile-template-question-max-selected-choices
                         :shape "MaxSelectedProfileChoices" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-profile-template-question
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'profile-template-question
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'profile-template-question
                    'make-profile-template-question))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          profile-template-question))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          profile-template-question))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-title))
      (common-lisp:list
       (common-lisp:cons "QuestionTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'question-description))
      (common-lisp:list
       (common-lisp:cons "QuestionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-choices))
      (common-lisp:list
       (common-lisp:cons "QuestionChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-selected-choices))
      (common-lisp:list
       (common-lisp:cons "MinSelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-selected-choices))
      (common-lisp:list
       (common-lisp:cons "MaxSelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          profile-template-question))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profile-template-question-choices ()
   '(trivial-types:proper-list profile-template-choice))
 (common-lisp:defun make-profile-template-question-choices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-template-choice))
   aws-sdk/generator/shape::members))
(common-lisp:deftype profile-version () 'common-lisp:string)
(common-lisp:deftype question () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype question-counts () 'common-lisp:hash-table)
 (common-lisp:defun make-question-counts (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype question-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass question-difference common-lisp:nil
                       ((question-id :initarg :question-id :initform
                         common-lisp:nil :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor struct-shape-question-difference-question-id
                         :shape "QuestionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (question-title :initarg :question-title :initform
                         common-lisp:nil :type
                         (common-lisp:or question-title common-lisp:null)
                         :accessor
                         struct-shape-question-difference-question-title :shape
                         "QuestionTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (difference-status :initarg :difference-status
                         :initform common-lisp:nil :type
                         (common-lisp:or difference-status common-lisp:null)
                         :accessor
                         struct-shape-question-difference-difference-status
                         :shape "DifferenceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-question-difference
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'question-difference
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'question-difference 'make-question-difference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input question-difference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input question-difference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-title))
      (common-lisp:list
       (common-lisp:cons "QuestionTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'difference-status))
      (common-lisp:list
       (common-lisp:cons "DifferenceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input question-difference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype question-differences ()
   '(trivial-types:proper-list question-difference))
 (common-lisp:defun make-question-differences
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list question-difference))
   aws-sdk/generator/shape::members))
(common-lisp:deftype question-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass question-metric common-lisp:nil
                       ((question-id :initarg :question-id :initform
                         common-lisp:nil :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor struct-shape-question-metric-question-id
                         :shape "QuestionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (risk :initarg :risk :initform common-lisp:nil :type
                         (common-lisp:or risk common-lisp:null) :accessor
                         struct-shape-question-metric-risk :shape "Risk"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (best-practices :initarg :best-practices :initform
                         common-lisp:nil :type
                         (common-lisp:or best-practices common-lisp:null)
                         :accessor struct-shape-question-metric-best-practices
                         :shape "BestPractices" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-question-metric
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'question-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'question-metric 'make-question-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input question-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input question-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk))
      (common-lisp:list
       (common-lisp:cons "Risk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'best-practices))
      (common-lisp:list
       (common-lisp:cons "BestPractices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input question-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype question-metrics ()
   '(trivial-types:proper-list question-metric))
 (common-lisp:defun make-question-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list question-metric))
   aws-sdk/generator/shape::members))
(common-lisp:deftype question-priority () 'common-lisp:string)
(common-lisp:deftype question-title () 'common-lisp:string)
(common-lisp:deftype question-type () 'common-lisp:string)
(common-lisp:deftype quota-code () 'common-lisp:string)
(common-lisp:deftype report-format () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (wellarchitected-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass review-template common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or template-description common-lisp:null)
                         :accessor struct-shape-review-template-description
                         :shape "TemplateDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lenses :initarg :lenses :initform common-lisp:nil
                         :type
                         (common-lisp:or review-template-lenses
                                         common-lisp:null)
                         :accessor struct-shape-review-template-lenses :shape
                         "ReviewTemplateLenses" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         struct-shape-review-template-notes :shape "Notes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (question-counts :initarg :question-counts :initform
                         common-lisp:nil :type
                         (common-lisp:or question-counts common-lisp:null)
                         :accessor struct-shape-review-template-question-counts
                         :shape "QuestionCounts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor struct-shape-review-template-owner :shape
                         "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-review-template-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor struct-shape-review-template-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         common-lisp:nil :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor struct-shape-review-template-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-review-template-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-status :initarg :update-status :initform
                         common-lisp:nil :type
                         (common-lisp:or review-template-update-status
                                         common-lisp:null)
                         :accessor struct-shape-review-template-update-status
                         :shape "ReviewTemplateUpdateStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (share-invitation-id :initarg :share-invitation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or share-invitation-id common-lisp:null)
                         :accessor
                         struct-shape-review-template-share-invitation-id
                         :shape "ShareInvitationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-review-template
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'review-template
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'review-template 'make-review-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input review-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input review-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lenses))
      (common-lisp:list
       (common-lisp:cons "Lenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-counts))
      (common-lisp:list
       (common-lisp:cons "QuestionCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-invitation-id))
      (common-lisp:list
       (common-lisp:cons "ShareInvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input review-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass review-template-answer common-lisp:nil
                       ((question-id :initarg :question-id :initform
                         common-lisp:nil :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-question-id :shape
                         "QuestionId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pillar-id :initarg :pillar-id :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-id common-lisp:null) :accessor
                         struct-shape-review-template-answer-pillar-id :shape
                         "PillarId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (question-title :initarg :question-title :initform
                         common-lisp:nil :type
                         (common-lisp:or question-title common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-question-title
                         :shape "QuestionTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (question-description :initarg :question-description
                         :initform common-lisp:nil :type
                         (common-lisp:or question-description common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-question-description
                         :shape "QuestionDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (improvement-plan-url :initarg :improvement-plan-url
                         :initform common-lisp:nil :type
                         (common-lisp:or improvement-plan-url common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-improvement-plan-url
                         :shape "ImprovementPlanUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (helpful-resource-url :initarg :helpful-resource-url
                         :initform common-lisp:nil :type
                         (common-lisp:or helpful-resource-url common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-helpful-resource-url
                         :shape "HelpfulResourceUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (helpful-resource-display-text :initarg
                         :helpful-resource-display-text :initform
                         common-lisp:nil :type
                         (common-lisp:or display-text common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-helpful-resource-display-text
                         :shape "DisplayText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (choices :initarg :choices :initform common-lisp:nil
                         :type (common-lisp:or choices common-lisp:null)
                         :accessor struct-shape-review-template-answer-choices
                         :shape "Choices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selected-choices :initarg :selected-choices :initform
                         common-lisp:nil :type
                         (common-lisp:or selected-choices common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-selected-choices
                         :shape "SelectedChoices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (choice-answers :initarg :choice-answers :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-answers common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-choice-answers
                         :shape "ChoiceAnswers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-applicable :initarg :is-applicable :initform
                         common-lisp:nil :type
                         (common-lisp:or is-applicable common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-is-applicable
                         :shape "IsApplicable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (answer-status :initarg :answer-status :initform
                         common-lisp:nil :type
                         (common-lisp:or review-template-answer-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-answer-status
                         :shape "ReviewTemplateAnswerStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         struct-shape-review-template-answer-notes :shape
                         "Notes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or answer-reason common-lisp:null)
                         :accessor struct-shape-review-template-answer-reason
                         :shape "AnswerReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-review-template-answer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'review-template-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'review-template-answer 'make-review-template-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          review-template-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          review-template-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-title))
      (common-lisp:list
       (common-lisp:cons "QuestionTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'question-description))
      (common-lisp:list
       (common-lisp:cons "QuestionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'improvement-plan-url))
      (common-lisp:list
       (common-lisp:cons "ImprovementPlanUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'helpful-resource-url))
      (common-lisp:list
       (common-lisp:cons "HelpfulResourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'helpful-resource-display-text))
      (common-lisp:list
       (common-lisp:cons "HelpfulResourceDisplayText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choices))
      (common-lisp:list
       (common-lisp:cons "Choices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-choices))
      (common-lisp:list
       (common-lisp:cons "SelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-answers))
      (common-lisp:list
       (common-lisp:cons "ChoiceAnswers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-applicable))
      (common-lisp:list
       (common-lisp:cons "IsApplicable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer-status))
      (common-lisp:list
       (common-lisp:cons "AnswerStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          review-template-answer))
   common-lisp:nil))
(common-lisp:deftype review-template-answer-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype review-template-answer-summaries ()
   '(trivial-types:proper-list review-template-answer-summary))
 (common-lisp:defun make-review-template-answer-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            review-template-answer-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass review-template-answer-summary common-lisp:nil
                       ((question-id :initarg :question-id :initform
                         common-lisp:nil :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-summary-question-id
                         :shape "QuestionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pillar-id :initarg :pillar-id :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-id common-lisp:null) :accessor
                         struct-shape-review-template-answer-summary-pillar-id
                         :shape "PillarId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (question-title :initarg :question-title :initform
                         common-lisp:nil :type
                         (common-lisp:or question-title common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-summary-question-title
                         :shape "QuestionTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (choices :initarg :choices :initform common-lisp:nil
                         :type (common-lisp:or choices common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-summary-choices
                         :shape "Choices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selected-choices :initarg :selected-choices :initform
                         common-lisp:nil :type
                         (common-lisp:or selected-choices common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-summary-selected-choices
                         :shape "SelectedChoices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (choice-answer-summaries :initarg
                         :choice-answer-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or choice-answer-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-summary-choice-answer-summaries
                         :shape "ChoiceAnswerSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-applicable :initarg :is-applicable :initform
                         common-lisp:nil :type
                         (common-lisp:or is-applicable common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-summary-is-applicable
                         :shape "IsApplicable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (answer-status :initarg :answer-status :initform
                         common-lisp:nil :type
                         (common-lisp:or review-template-answer-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-summary-answer-status
                         :shape "ReviewTemplateAnswerStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or answer-reason common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-summary-reason
                         :shape "AnswerReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (question-type :initarg :question-type :initform
                         common-lisp:nil :type
                         (common-lisp:or question-type common-lisp:null)
                         :accessor
                         struct-shape-review-template-answer-summary-question-type
                         :shape "QuestionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-review-template-answer-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'review-template-answer-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'review-template-answer-summary
                    'make-review-template-answer-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          review-template-answer-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          review-template-answer-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-id))
      (common-lisp:list
       (common-lisp:cons "QuestionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-title))
      (common-lisp:list
       (common-lisp:cons "QuestionTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choices))
      (common-lisp:list
       (common-lisp:cons "Choices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-choices))
      (common-lisp:list
       (common-lisp:cons "SelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'choice-answer-summaries))
      (common-lisp:list
       (common-lisp:cons "ChoiceAnswerSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-applicable))
      (common-lisp:list
       (common-lisp:cons "IsApplicable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer-status))
      (common-lisp:list
       (common-lisp:cons "AnswerStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-type))
      (common-lisp:list
       (common-lisp:cons "QuestionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          review-template-answer-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype review-template-arns ()
   '(trivial-types:proper-list template-arn))
 (common-lisp:defun make-review-template-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype review-template-lens-aliases ()
   '(trivial-types:proper-list lens-alias))
 (common-lisp:defun make-review-template-lens-aliases
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lens-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass review-template-lens-review common-lisp:nil
                       ((lens-alias :initarg :lens-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-review-template-lens-review-lens-alias
                         :shape "LensAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor
                         struct-shape-review-template-lens-review-lens-arn
                         :shape "LensArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-version :initarg :lens-version :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-version common-lisp:null)
                         :accessor
                         struct-shape-review-template-lens-review-lens-version
                         :shape "LensVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-name :initarg :lens-name :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-name common-lisp:null) :accessor
                         struct-shape-review-template-lens-review-lens-name
                         :shape "LensName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-status :initarg :lens-status :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-status common-lisp:null)
                         :accessor
                         struct-shape-review-template-lens-review-lens-status
                         :shape "LensStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pillar-review-summaries :initarg
                         :pillar-review-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          review-template-pillar-review-summaries
                          common-lisp:null)
                         :accessor
                         struct-shape-review-template-lens-review-pillar-review-summaries
                         :shape "ReviewTemplatePillarReviewSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-review-template-lens-review-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         struct-shape-review-template-lens-review-notes :shape
                         "Notes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (question-counts :initarg :question-counts :initform
                         common-lisp:nil :type
                         (common-lisp:or question-counts common-lisp:null)
                         :accessor
                         struct-shape-review-template-lens-review-question-counts
                         :shape "QuestionCounts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-review-template-lens-review-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-review-template-lens-review
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'review-template-lens-review
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'review-template-lens-review
                    'make-review-template-lens-review))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          review-template-lens-review))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          review-template-lens-review))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-version))
      (common-lisp:list
       (common-lisp:cons "LensVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-name))
      (common-lisp:list
       (common-lisp:cons "LensName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-status))
      (common-lisp:list
       (common-lisp:cons "LensStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pillar-review-summaries))
      (common-lisp:list
       (common-lisp:cons "PillarReviewSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-counts))
      (common-lisp:list
       (common-lisp:cons "QuestionCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          review-template-lens-review))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype review-template-lenses ()
   '(trivial-types:proper-list lens-alias))
 (common-lisp:defun make-review-template-lenses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lens-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype review-template-pillar-review-summaries ()
   '(trivial-types:proper-list review-template-pillar-review-summary))
 (common-lisp:defun make-review-template-pillar-review-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            review-template-pillar-review-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass review-template-pillar-review-summary common-lisp:nil
                       ((pillar-id :initarg :pillar-id :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-id common-lisp:null) :accessor
                         struct-shape-review-template-pillar-review-summary-pillar-id
                         :shape "PillarId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pillar-name :initarg :pillar-name :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-name common-lisp:null)
                         :accessor
                         struct-shape-review-template-pillar-review-summary-pillar-name
                         :shape "PillarName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         struct-shape-review-template-pillar-review-summary-notes
                         :shape "Notes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (question-counts :initarg :question-counts :initform
                         common-lisp:nil :type
                         (common-lisp:or question-counts common-lisp:null)
                         :accessor
                         struct-shape-review-template-pillar-review-summary-question-counts
                         :shape "QuestionCounts" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-review-template-pillar-review-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'review-template-pillar-review-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'review-template-pillar-review-summary
                    'make-review-template-pillar-review-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          review-template-pillar-review-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          review-template-pillar-review-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-id))
      (common-lisp:list
       (common-lisp:cons "PillarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-name))
      (common-lisp:list
       (common-lisp:cons "PillarName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-counts))
      (common-lisp:list
       (common-lisp:cons "QuestionCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          review-template-pillar-review-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass review-template-summary common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or template-description common-lisp:null)
                         :accessor
                         struct-shape-review-template-summary-description
                         :shape "TemplateDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lenses :initarg :lenses :initform common-lisp:nil
                         :type
                         (common-lisp:or review-template-lenses
                                         common-lisp:null)
                         :accessor struct-shape-review-template-summary-lenses
                         :shape "ReviewTemplateLenses" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor struct-shape-review-template-summary-owner
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-review-template-summary-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-review-template-summary-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         common-lisp:nil :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-review-template-summary-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-status :initarg :update-status :initform
                         common-lisp:nil :type
                         (common-lisp:or review-template-update-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-review-template-summary-update-status
                         :shape "ReviewTemplateUpdateStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-review-template-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'review-template-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'review-template-summary 'make-review-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          review-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          review-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lenses))
      (common-lisp:list
       (common-lisp:cons "Lenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          review-template-summary))
   common-lisp:nil))
(common-lisp:deftype review-template-update-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype review-templates ()
   '(trivial-types:proper-list review-template-summary))
 (common-lisp:defun make-review-templates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list review-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype risk () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype risk-counts () 'common-lisp:hash-table)
 (common-lisp:defun make-risk-counts (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype selected-choice-ids ()
   '(trivial-types:proper-list choice-id))
 (common-lisp:defun make-selected-choice-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list choice-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype selected-choices ()
   '(trivial-types:proper-list choice-id))
 (common-lisp:defun make-selected-choices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list choice-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype selected-profile-choice-ids ()
   '(trivial-types:proper-list choice-id))
 (common-lisp:defun make-selected-profile-choice-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list choice-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (wellarchitected-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:deftype share-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass share-invitation common-lisp:nil
                       ((share-invitation-id :initarg :share-invitation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or share-invitation-id common-lisp:null)
                         :accessor
                         struct-shape-share-invitation-share-invitation-id
                         :shape "ShareInvitationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (share-resource-type :initarg :share-resource-type
                         :initform common-lisp:nil :type
                         (common-lisp:or share-resource-type common-lisp:null)
                         :accessor
                         struct-shape-share-invitation-share-resource-type
                         :shape "ShareResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor struct-shape-share-invitation-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-alias :initarg :lens-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-share-invitation-lens-alias :shape
                         "LensAlias" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor struct-shape-share-invitation-lens-arn
                         :shape "LensArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-arn common-lisp:null)
                         :accessor struct-shape-share-invitation-profile-arn
                         :shape "ProfileArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor struct-shape-share-invitation-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-share-invitation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'share-invitation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'share-invitation 'make-share-invitation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input share-invitation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input share-invitation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-invitation-id))
      (common-lisp:list
       (common-lisp:cons "ShareInvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-resource-type))
      (common-lisp:list
       (common-lisp:cons "ShareResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input share-invitation))
   common-lisp:nil))
(common-lisp:deftype share-invitation-action () 'common-lisp:string)
(common-lisp:deftype share-invitation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype share-invitation-summaries ()
   '(trivial-types:proper-list share-invitation-summary))
 (common-lisp:defun make-share-invitation-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            share-invitation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass share-invitation-summary common-lisp:nil
                       ((share-invitation-id :initarg :share-invitation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or share-invitation-id common-lisp:null)
                         :accessor
                         struct-shape-share-invitation-summary-share-invitation-id
                         :shape "ShareInvitationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shared-by :initarg :shared-by :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-share-invitation-summary-shared-by :shape
                         "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shared-with :initarg :shared-with :initform
                         common-lisp:nil :type
                         (common-lisp:or shared-with common-lisp:null)
                         :accessor
                         struct-shape-share-invitation-summary-shared-with
                         :shape "SharedWith" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permission-type :initarg :permission-type :initform
                         common-lisp:nil :type
                         (common-lisp:or permission-type common-lisp:null)
                         :accessor
                         struct-shape-share-invitation-summary-permission-type
                         :shape "PermissionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (share-resource-type :initarg :share-resource-type
                         :initform common-lisp:nil :type
                         (common-lisp:or share-resource-type common-lisp:null)
                         :accessor
                         struct-shape-share-invitation-summary-share-resource-type
                         :shape "ShareResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-name :initarg :workload-name :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor
                         struct-shape-share-invitation-summary-workload-name
                         :shape "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-share-invitation-summary-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-name :initarg :lens-name :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-name common-lisp:null) :accessor
                         struct-shape-share-invitation-summary-lens-name :shape
                         "LensName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor
                         struct-shape-share-invitation-summary-lens-arn :shape
                         "LensArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (profile-name :initarg :profile-name :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-name common-lisp:null)
                         :accessor
                         struct-shape-share-invitation-summary-profile-name
                         :shape "ProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-arn common-lisp:null)
                         :accessor
                         struct-shape-share-invitation-summary-profile-arn
                         :shape "ProfileArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         common-lisp:nil :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-share-invitation-summary-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-share-invitation-summary-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-share-invitation-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'share-invitation-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'share-invitation-summary 'make-share-invitation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          share-invitation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          share-invitation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-invitation-id))
      (common-lisp:list
       (common-lisp:cons "ShareInvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-by))
      (common-lisp:list
       (common-lisp:cons "SharedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-type))
      (common-lisp:list
       (common-lisp:cons "PermissionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-resource-type))
      (common-lisp:list
       (common-lisp:cons "ShareResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-name))
      (common-lisp:list
       (common-lisp:cons "LensName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          share-invitation-summary))
   common-lisp:nil))
(common-lisp:deftype share-resource-type () 'common-lisp:string)
(common-lisp:deftype share-status () 'common-lisp:string)
(common-lisp:deftype shared-with () 'common-lisp:string)
(common-lisp:deftype shared-with-prefix () 'common-lisp:string)
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((workload-arn :initarg :workload-arn :initform
                         (common-lisp:error ":workload-arn is required") :type
                         (common-lisp:or workload-arn common-lisp:null)
                         :accessor struct-shape-tag-resource-input-workload-arn
                         :shape "WorkloadArn" :location "uri" :location-name
                         "WorkloadArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-input-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype template-arn () 'common-lisp:string)
(common-lisp:deftype template-description () 'common-lisp:string)
(common-lisp:deftype template-name () 'common-lisp:string)
(common-lisp:deftype template-name-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype template-questions ()
   '(trivial-types:proper-list profile-template-question))
 (common-lisp:defun make-template-questions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            profile-template-question))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype template-share-summaries ()
   '(trivial-types:proper-list template-share-summary))
 (common-lisp:defun make-template-share-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-share-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass template-share-summary common-lisp:nil
                       ((share-id :initarg :share-id :initform common-lisp:nil
                         :type (common-lisp:or share-id common-lisp:null)
                         :accessor struct-shape-template-share-summary-share-id
                         :shape "ShareId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shared-with :initarg :shared-with :initform
                         common-lisp:nil :type
                         (common-lisp:or shared-with common-lisp:null)
                         :accessor
                         struct-shape-template-share-summary-shared-with :shape
                         "SharedWith" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or share-status common-lisp:null)
                         :accessor struct-shape-template-share-summary-status
                         :shape "ShareStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-template-share-summary-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template-share-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'template-share-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'template-share-summary 'make-template-share-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-share-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-share-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-share-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (wellarchitected-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-service-code)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype trusted-advisor-integration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((workload-arn :initarg :workload-arn :initform
                         (common-lisp:error ":workload-arn is required") :type
                         (common-lisp:or workload-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-input-workload-arn :shape
                         "WorkloadArn" :location "uri" :location-name
                         "WorkloadArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-input-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-answer-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor struct-shape-update-answer-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-update-answer-input-lens-alias :shape
                         "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (question-id :initarg :question-id :initform
                         (common-lisp:error ":question-id is required") :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor struct-shape-update-answer-input-question-id
                         :shape "QuestionId" :location "uri" :location-name
                         "QuestionId")
                        (selected-choices :initarg :selected-choices :initform
                         common-lisp:nil :type
                         (common-lisp:or selected-choices common-lisp:null)
                         :accessor
                         struct-shape-update-answer-input-selected-choices
                         :shape "SelectedChoices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (choice-updates :initarg :choice-updates :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-updates common-lisp:null)
                         :accessor
                         struct-shape-update-answer-input-choice-updates :shape
                         "ChoiceUpdates" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         struct-shape-update-answer-input-notes :shape "Notes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-applicable :initarg :is-applicable :initform
                         common-lisp:nil :type
                         (common-lisp:or is-applicable common-lisp:null)
                         :accessor
                         struct-shape-update-answer-input-is-applicable :shape
                         "IsApplicable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or answer-reason common-lisp:null)
                         :accessor struct-shape-update-answer-input-reason
                         :shape "AnswerReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-answer-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-answer-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-answer-input 'make-update-answer-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-answer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-answer-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-choices))
      (common-lisp:list
       (common-lisp:cons "SelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-updates))
      (common-lisp:list
       (common-lisp:cons "ChoiceUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-applicable))
      (common-lisp:list
       (common-lisp:cons "IsApplicable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-answer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-answer-output common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-update-answer-output-workload-id :shape
                         "WorkloadId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-alias :initarg :lens-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-update-answer-output-lens-alias :shape
                         "LensAlias" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lens-arn :initarg :lens-arn :initform common-lisp:nil
                         :type (common-lisp:or lens-arn common-lisp:null)
                         :accessor struct-shape-update-answer-output-lens-arn
                         :shape "LensArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (answer :initarg :answer :initform common-lisp:nil
                         :type (common-lisp:or answer common-lisp:null)
                         :accessor struct-shape-update-answer-output-answer
                         :shape "Answer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-answer-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-answer-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-answer-output 'make-update-answer-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-answer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-answer-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-arn))
      (common-lisp:list
       (common-lisp:cons "LensArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer))
      (common-lisp:list
       (common-lisp:cons "Answer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-answer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-global-settings-input common-lisp:nil
                       ((organization-sharing-status :initarg
                         :organization-sharing-status :initform common-lisp:nil
                         :type
                         (common-lisp:or organization-sharing-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-global-settings-input-organization-sharing-status
                         :shape "OrganizationSharingStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (discovery-integration-status :initarg
                         :discovery-integration-status :initform
                         common-lisp:nil :type
                         (common-lisp:or discovery-integration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-global-settings-input-discovery-integration-status
                         :shape "DiscoveryIntegrationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-global-settings-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-global-settings-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-global-settings-input
                    'make-update-global-settings-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-global-settings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-global-settings-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-sharing-status))
      (common-lisp:list
       (common-lisp:cons "OrganizationSharingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'discovery-integration-status))
      (common-lisp:list
       (common-lisp:cons "DiscoveryIntegrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-global-settings-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-lens-review-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-update-lens-review-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-update-lens-review-input-lens-alias
                         :shape "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (lens-notes :initarg :lens-notes :initform
                         common-lisp:nil :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         struct-shape-update-lens-review-input-lens-notes
                         :shape "Notes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pillar-notes :initarg :pillar-notes :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-notes common-lisp:null)
                         :accessor
                         struct-shape-update-lens-review-input-pillar-notes
                         :shape "PillarNotes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-lens-review-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-lens-review-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-lens-review-input 'make-update-lens-review-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-lens-review-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-lens-review-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-notes))
      (common-lisp:list
       (common-lisp:cons "LensNotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-notes))
      (common-lisp:list
       (common-lisp:cons "PillarNotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-lens-review-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-lens-review-output common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-update-lens-review-output-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-review :initarg :lens-review :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-review common-lisp:null)
                         :accessor
                         struct-shape-update-lens-review-output-lens-review
                         :shape "LensReview" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-lens-review-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-lens-review-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-lens-review-output
                    'make-update-lens-review-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-lens-review-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-lens-review-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-review))
      (common-lisp:list
       (common-lisp:cons "LensReview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-lens-review-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-profile-input common-lisp:nil
                       ((profile-arn :initarg :profile-arn :initform
                         (common-lisp:error ":profile-arn is required") :type
                         (common-lisp:or profile-arn common-lisp:null)
                         :accessor
                         struct-shape-update-profile-input-profile-arn :shape
                         "ProfileArn" :location "uri" :location-name
                         "ProfileArn")
                        (profile-description :initarg :profile-description
                         :initform common-lisp:nil :type
                         (common-lisp:or profile-description common-lisp:null)
                         :accessor
                         struct-shape-update-profile-input-profile-description
                         :shape "ProfileDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-questions :initarg :profile-questions
                         :initform common-lisp:nil :type
                         (common-lisp:or profile-question-updates
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-input-profile-questions
                         :shape "ProfileQuestionUpdates" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-profile-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-profile-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-profile-input 'make-update-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-profile-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-description))
      (common-lisp:list
       (common-lisp:cons "ProfileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-questions))
      (common-lisp:list
       (common-lisp:cons "ProfileQuestions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-profile-output common-lisp:nil
                       ((profile :initarg :profile :initform common-lisp:nil
                         :type (common-lisp:or profile common-lisp:null)
                         :accessor struct-shape-update-profile-output-profile
                         :shape "Profile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-profile-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-profile-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-profile-output 'make-update-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-review-template-answer-input common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-answer-input-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn")
                        (lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-update-review-template-answer-input-lens-alias
                         :shape "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (question-id :initarg :question-id :initform
                         (common-lisp:error ":question-id is required") :type
                         (common-lisp:or question-id common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-answer-input-question-id
                         :shape "QuestionId" :location "uri" :location-name
                         "QuestionId")
                        (selected-choices :initarg :selected-choices :initform
                         common-lisp:nil :type
                         (common-lisp:or selected-choices common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-answer-input-selected-choices
                         :shape "SelectedChoices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (choice-updates :initarg :choice-updates :initform
                         common-lisp:nil :type
                         (common-lisp:or choice-updates common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-answer-input-choice-updates
                         :shape "ChoiceUpdates" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         struct-shape-update-review-template-answer-input-notes
                         :shape "Notes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-applicable :initarg :is-applicable :initform
                         common-lisp:nil :type
                         (common-lisp:or is-applicable common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-answer-input-is-applicable
                         :shape "IsApplicable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or answer-reason common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-answer-input-reason
                         :shape "AnswerReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-review-template-answer-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-review-template-answer-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-review-template-answer-input
                    'make-update-review-template-answer-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-answer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-answer-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-choices))
      (common-lisp:list
       (common-lisp:cons "SelectedChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'choice-updates))
      (common-lisp:list
       (common-lisp:cons "ChoiceUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-applicable))
      (common-lisp:list
       (common-lisp:cons "IsApplicable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-answer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-review-template-answer-output common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-answer-output-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-alias :initarg :lens-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-update-review-template-answer-output-lens-alias
                         :shape "LensAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (answer :initarg :answer :initform common-lisp:nil
                         :type
                         (common-lisp:or review-template-answer
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-answer-output-answer
                         :shape "ReviewTemplateAnswer" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-review-template-answer-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-review-template-answer-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-review-template-answer-output
                    'make-update-review-template-answer-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-answer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-answer-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-alias))
      (common-lisp:list
       (common-lisp:cons "LensAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer))
      (common-lisp:list
       (common-lisp:cons "Answer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-answer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-review-template-input common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-input-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn")
                        (template-name :initarg :template-name :initform
                         common-lisp:nil :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-input-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or template-description common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-input-description
                         :shape "TemplateDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         struct-shape-update-review-template-input-notes :shape
                         "Notes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lenses-to-associate :initarg :lenses-to-associate
                         :initform common-lisp:nil :type
                         (common-lisp:or review-template-lens-aliases
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-input-lenses-to-associate
                         :shape "ReviewTemplateLensAliases" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lenses-to-disassociate :initarg
                         :lenses-to-disassociate :initform common-lisp:nil
                         :type
                         (common-lisp:or review-template-lens-aliases
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-input-lenses-to-disassociate
                         :shape "ReviewTemplateLensAliases" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-review-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-review-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-review-template-input
                    'make-update-review-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lenses-to-associate))
      (common-lisp:list
       (common-lisp:cons "LensesToAssociate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lenses-to-disassociate))
      (common-lisp:list
       (common-lisp:cons "LensesToDisassociate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-review-template-lens-review-input common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-lens-review-input-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn")
                        (lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-update-review-template-lens-review-input-lens-alias
                         :shape "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (lens-notes :initarg :lens-notes :initform
                         common-lisp:nil :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         struct-shape-update-review-template-lens-review-input-lens-notes
                         :shape "Notes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pillar-notes :initarg :pillar-notes :initform
                         common-lisp:nil :type
                         (common-lisp:or pillar-notes common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-lens-review-input-pillar-notes
                         :shape "PillarNotes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-review-template-lens-review-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-review-template-lens-review-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-review-template-lens-review-input
                    'make-update-review-template-lens-review-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-lens-review-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-lens-review-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-notes))
      (common-lisp:list
       (common-lisp:cons "LensNotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-notes))
      (common-lisp:list
       (common-lisp:cons "PillarNotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-lens-review-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-review-template-lens-review-output
                       common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-lens-review-output-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lens-review :initarg :lens-review :initform
                         common-lisp:nil :type
                         (common-lisp:or review-template-lens-review
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-lens-review-output-lens-review
                         :shape "ReviewTemplateLensReview" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-review-template-lens-review-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-review-template-lens-review-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-review-template-lens-review-output
                    'make-update-review-template-lens-review-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-lens-review-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-lens-review-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lens-review))
      (common-lisp:list
       (common-lisp:cons "LensReview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-lens-review-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-review-template-output common-lisp:nil
                       ((review-template :initarg :review-template :initform
                         common-lisp:nil :type
                         (common-lisp:or review-template common-lisp:null)
                         :accessor
                         struct-shape-update-review-template-output-review-template
                         :shape "ReviewTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-review-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-review-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-review-template-output
                    'make-update-review-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-template))
      (common-lisp:list
       (common-lisp:cons "ReviewTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-review-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-share-invitation-input common-lisp:nil
                       ((share-invitation-id :initarg :share-invitation-id
                         :initform
                         (common-lisp:error ":share-invitation-id is required")
                         :type
                         (common-lisp:or share-invitation-id common-lisp:null)
                         :accessor
                         struct-shape-update-share-invitation-input-share-invitation-id
                         :shape "ShareInvitationId" :location "uri"
                         :location-name "ShareInvitationId")
                        (share-invitation-action :initarg
                         :share-invitation-action :initform
                         (common-lisp:error
                          ":share-invitation-action is required")
                         :type
                         (common-lisp:or share-invitation-action
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-share-invitation-input-share-invitation-action
                         :shape "ShareInvitationAction" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-share-invitation-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-share-invitation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-share-invitation-input
                    'make-update-share-invitation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-share-invitation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-share-invitation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'share-invitation-action))
      (common-lisp:list
       (common-lisp:cons "ShareInvitationAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-share-invitation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-share-invitation-output common-lisp:nil
                       ((share-invitation :initarg :share-invitation :initform
                         common-lisp:nil :type
                         (common-lisp:or share-invitation common-lisp:null)
                         :accessor
                         struct-shape-update-share-invitation-output-share-invitation
                         :shape "ShareInvitation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-share-invitation-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-share-invitation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-share-invitation-output
                    'make-update-share-invitation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-share-invitation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-share-invitation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-invitation))
      (common-lisp:list
       (common-lisp:cons "ShareInvitation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-share-invitation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workload-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-update-workload-input-workload-id :shape
                         "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (workload-name :initarg :workload-name :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor
                         struct-shape-update-workload-input-workload-name
                         :shape "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-description common-lisp:null)
                         :accessor
                         struct-shape-update-workload-input-description :shape
                         "WorkloadDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment :initarg :environment :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-environment common-lisp:null)
                         :accessor
                         struct-shape-update-workload-input-environment :shape
                         "WorkloadEnvironment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-ids :initarg :account-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-account-ids common-lisp:null)
                         :accessor
                         struct-shape-update-workload-input-account-ids :shape
                         "WorkloadAccountIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-regions :initarg :aws-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-aws-regions common-lisp:null)
                         :accessor
                         struct-shape-update-workload-input-aws-regions :shape
                         "WorkloadAwsRegions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (non-aws-regions :initarg :non-aws-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-non-aws-regions
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workload-input-non-aws-regions
                         :shape "WorkloadNonAwsRegions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pillar-priorities :initarg :pillar-priorities
                         :initform common-lisp:nil :type
                         (common-lisp:or workload-pillar-priorities
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workload-input-pillar-priorities
                         :shape "WorkloadPillarPriorities" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (architectural-design :initarg :architectural-design
                         :initform common-lisp:nil :type
                         (common-lisp:or workload-architectural-design
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workload-input-architectural-design
                         :shape "WorkloadArchitecturalDesign" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (review-owner :initarg :review-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-review-owner
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workload-input-review-owner :shape
                         "WorkloadReviewOwner" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-review-owner-update-acknowledged :initarg
                         :is-review-owner-update-acknowledged :initform
                         common-lisp:nil :type
                         (common-lisp:or is-review-owner-update-acknowledged
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workload-input-is-review-owner-update-acknowledged
                         :shape "IsReviewOwnerUpdateAcknowledged" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (industry-type :initarg :industry-type :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-industry-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workload-input-industry-type
                         :shape "WorkloadIndustryType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (industry :initarg :industry :initform common-lisp:nil
                         :type
                         (common-lisp:or workload-industry common-lisp:null)
                         :accessor struct-shape-update-workload-input-industry
                         :shape "WorkloadIndustry" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         struct-shape-update-workload-input-notes :shape
                         "Notes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (improvement-status :initarg :improvement-status
                         :initform common-lisp:nil :type
                         (common-lisp:or workload-improvement-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workload-input-improvement-status
                         :shape "WorkloadImprovementStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (discovery-config :initarg :discovery-config :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-discovery-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workload-input-discovery-config
                         :shape "WorkloadDiscoveryConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (applications :initarg :applications :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-applications
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workload-input-applications :shape
                         "WorkloadApplications" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-workload-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-workload-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-workload-input 'make-update-workload-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-regions))
      (common-lisp:list
       (common-lisp:cons "AwsRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'non-aws-regions))
      (common-lisp:list
       (common-lisp:cons "NonAwsRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-priorities))
      (common-lisp:list
       (common-lisp:cons "PillarPriorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'architectural-design))
      (common-lisp:list
       (common-lisp:cons "ArchitecturalDesign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-owner))
      (common-lisp:list
       (common-lisp:cons "ReviewOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-review-owner-update-acknowledged))
      (common-lisp:list
       (common-lisp:cons "IsReviewOwnerUpdateAcknowledged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'industry-type))
      (common-lisp:list
       (common-lisp:cons "IndustryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'industry))
      (common-lisp:list
       (common-lisp:cons "Industry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'improvement-status))
      (common-lisp:list
       (common-lisp:cons "ImprovementStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-config))
      (common-lisp:list
       (common-lisp:cons "DiscoveryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workload-output common-lisp:nil
                       ((workload :initarg :workload :initform common-lisp:nil
                         :type (common-lisp:or workload common-lisp:null)
                         :accessor struct-shape-update-workload-output-workload
                         :shape "Workload" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-workload-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-workload-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-workload-output 'make-update-workload-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload))
      (common-lisp:list
       (common-lisp:cons "Workload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workload-share-input common-lisp:nil
                       ((share-id :initarg :share-id :initform
                         (common-lisp:error ":share-id is required") :type
                         (common-lisp:or share-id common-lisp:null) :accessor
                         struct-shape-update-workload-share-input-share-id
                         :shape "ShareId" :location "uri" :location-name
                         "ShareId")
                        (workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-update-workload-share-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (permission-type :initarg :permission-type :initform
                         (common-lisp:error ":permission-type is required")
                         :type
                         (common-lisp:or permission-type common-lisp:null)
                         :accessor
                         struct-shape-update-workload-share-input-permission-type
                         :shape "PermissionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-workload-share-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-workload-share-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-workload-share-input
                    'make-update-workload-share-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-share-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-share-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-type))
      (common-lisp:list
       (common-lisp:cons "PermissionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-share-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workload-share-output common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-update-workload-share-output-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-share :initarg :workload-share :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-share common-lisp:null)
                         :accessor
                         struct-shape-update-workload-share-output-workload-share
                         :shape "WorkloadShare" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-workload-share-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-workload-share-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-workload-share-output
                    'make-update-workload-share-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-share-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-share-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-share))
      (common-lisp:list
       (common-lisp:cons "WorkloadShare"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-share-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upgrade-lens-review-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-upgrade-lens-review-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-upgrade-lens-review-input-lens-alias
                         :shape "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (milestone-name :initarg :milestone-name :initform
                         (common-lisp:error ":milestone-name is required")
                         :type (common-lisp:or milestone-name common-lisp:null)
                         :accessor
                         struct-shape-upgrade-lens-review-input-milestone-name
                         :shape "MilestoneName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-upgrade-lens-review-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upgrade-lens-review-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'upgrade-lens-review-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upgrade-lens-review-input
                    'make-upgrade-lens-review-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-lens-review-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-lens-review-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-name))
      (common-lisp:list
       (common-lisp:cons "MilestoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-lens-review-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upgrade-profile-version-input common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         (common-lisp:error ":workload-id is required") :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor
                         struct-shape-upgrade-profile-version-input-workload-id
                         :shape "WorkloadId" :location "uri" :location-name
                         "WorkloadId")
                        (profile-arn :initarg :profile-arn :initform
                         (common-lisp:error ":profile-arn is required") :type
                         (common-lisp:or profile-arn common-lisp:null)
                         :accessor
                         struct-shape-upgrade-profile-version-input-profile-arn
                         :shape "ProfileArn" :location "uri" :location-name
                         "ProfileArn")
                        (milestone-name :initarg :milestone-name :initform
                         common-lisp:nil :type
                         (common-lisp:or milestone-name common-lisp:null)
                         :accessor
                         struct-shape-upgrade-profile-version-input-milestone-name
                         :shape "MilestoneName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-upgrade-profile-version-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upgrade-profile-version-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'upgrade-profile-version-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upgrade-profile-version-input
                    'make-upgrade-profile-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-profile-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-profile-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'milestone-name))
      (common-lisp:list
       (common-lisp:cons "MilestoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-profile-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upgrade-review-template-lens-review-input
                       common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         (common-lisp:error ":template-arn is required") :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-upgrade-review-template-lens-review-input-template-arn
                         :shape "TemplateArn" :location "uri" :location-name
                         "TemplateArn")
                        (lens-alias :initarg :lens-alias :initform
                         (common-lisp:error ":lens-alias is required") :type
                         (common-lisp:or lens-alias common-lisp:null) :accessor
                         struct-shape-upgrade-review-template-lens-review-input-lens-alias
                         :shape "LensAlias" :location "uri" :location-name
                         "LensAlias")
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-upgrade-review-template-lens-review-input-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upgrade-review-template-lens-review-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'upgrade-review-template-lens-review-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upgrade-review-template-lens-review-input
                    'make-upgrade-review-template-lens-review-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-review-template-lens-review-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-review-template-lens-review-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-review-template-lens-review-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype urls () '(trivial-types:proper-list choice-content))
 (common-lisp:defun make-urls
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list choice-content))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (wellarchitected-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason 'validation-exception-fields)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or validation-exception-field-name
                                         common-lisp:null)
                         :accessor struct-shape-validation-exception-field-name
                         :shape "ValidationExceptionFieldName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or exception-message common-lisp:null)
                         :accessor
                         struct-shape-validation-exception-field-message :shape
                         "ExceptionMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-exception-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-field-name () 'common-lisp:string)
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass version-differences common-lisp:nil
                       ((pillar-differences :initarg :pillar-differences
                         :initform common-lisp:nil :type
                         (common-lisp:or pillar-differences common-lisp:null)
                         :accessor
                         struct-shape-version-differences-pillar-differences
                         :shape "PillarDifferences" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-version-differences
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'version-differences
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'version-differences 'make-version-differences))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input version-differences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input version-differences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-differences))
      (common-lisp:list
       (common-lisp:cons "PillarDifferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input version-differences))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass workload common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor struct-shape-workload-workload-id :shape
                         "WorkloadId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workload-arn :initarg :workload-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-arn common-lisp:null)
                         :accessor struct-shape-workload-workload-arn :shape
                         "WorkloadArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workload-name :initarg :workload-name :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor struct-shape-workload-workload-name :shape
                         "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-description common-lisp:null)
                         :accessor struct-shape-workload-description :shape
                         "WorkloadDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment :initarg :environment :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-environment common-lisp:null)
                         :accessor struct-shape-workload-environment :shape
                         "WorkloadEnvironment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-workload-updated-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (account-ids :initarg :account-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-account-ids common-lisp:null)
                         :accessor struct-shape-workload-account-ids :shape
                         "WorkloadAccountIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-regions :initarg :aws-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-aws-regions common-lisp:null)
                         :accessor struct-shape-workload-aws-regions :shape
                         "WorkloadAwsRegions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (non-aws-regions :initarg :non-aws-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-non-aws-regions
                                         common-lisp:null)
                         :accessor struct-shape-workload-non-aws-regions :shape
                         "WorkloadNonAwsRegions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (architectural-design :initarg :architectural-design
                         :initform common-lisp:nil :type
                         (common-lisp:or workload-architectural-design
                                         common-lisp:null)
                         :accessor struct-shape-workload-architectural-design
                         :shape "WorkloadArchitecturalDesign" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (review-owner :initarg :review-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-review-owner
                                         common-lisp:null)
                         :accessor struct-shape-workload-review-owner :shape
                         "WorkloadReviewOwner" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (review-restriction-date :initarg
                         :review-restriction-date :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-workload-review-restriction-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-review-owner-update-acknowledged :initarg
                         :is-review-owner-update-acknowledged :initform
                         common-lisp:nil :type
                         (common-lisp:or is-review-owner-update-acknowledged
                                         common-lisp:null)
                         :accessor
                         struct-shape-workload-is-review-owner-update-acknowledged
                         :shape "IsReviewOwnerUpdateAcknowledged" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (industry-type :initarg :industry-type :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-industry-type
                                         common-lisp:null)
                         :accessor struct-shape-workload-industry-type :shape
                         "WorkloadIndustryType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (industry :initarg :industry :initform common-lisp:nil
                         :type
                         (common-lisp:or workload-industry common-lisp:null)
                         :accessor struct-shape-workload-industry :shape
                         "WorkloadIndustry" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         struct-shape-workload-notes :shape "Notes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (improvement-status :initarg :improvement-status
                         :initform common-lisp:nil :type
                         (common-lisp:or workload-improvement-status
                                         common-lisp:null)
                         :accessor struct-shape-workload-improvement-status
                         :shape "WorkloadImprovementStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (risk-counts :initarg :risk-counts :initform
                         common-lisp:nil :type
                         (common-lisp:or risk-counts common-lisp:null)
                         :accessor struct-shape-workload-risk-counts :shape
                         "RiskCounts" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pillar-priorities :initarg :pillar-priorities
                         :initform common-lisp:nil :type
                         (common-lisp:or workload-pillar-priorities
                                         common-lisp:null)
                         :accessor struct-shape-workload-pillar-priorities
                         :shape "WorkloadPillarPriorities" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lenses :initarg :lenses :initform common-lisp:nil
                         :type
                         (common-lisp:or workload-lenses common-lisp:null)
                         :accessor struct-shape-workload-lenses :shape
                         "WorkloadLenses" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor struct-shape-workload-owner :shape
                         "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (share-invitation-id :initarg :share-invitation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or share-invitation-id common-lisp:null)
                         :accessor struct-shape-workload-share-invitation-id
                         :shape "ShareInvitationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-workload-tags :shape "TagMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (discovery-config :initarg :discovery-config :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-discovery-config
                                         common-lisp:null)
                         :accessor struct-shape-workload-discovery-config
                         :shape "WorkloadDiscoveryConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (applications :initarg :applications :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-applications
                                         common-lisp:null)
                         :accessor struct-shape-workload-applications :shape
                         "WorkloadApplications" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profiles :initarg :profiles :initform common-lisp:nil
                         :type
                         (common-lisp:or workload-profiles common-lisp:null)
                         :accessor struct-shape-workload-profiles :shape
                         "WorkloadProfiles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prioritized-risk-counts :initarg
                         :prioritized-risk-counts :initform common-lisp:nil
                         :type (common-lisp:or risk-counts common-lisp:null)
                         :accessor
                         struct-shape-workload-prioritized-risk-counts :shape
                         "RiskCounts" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workload
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workload
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'workload 'make-workload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-arn))
      (common-lisp:list
       (common-lisp:cons "WorkloadArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-regions))
      (common-lisp:list
       (common-lisp:cons "AwsRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'non-aws-regions))
      (common-lisp:list
       (common-lisp:cons "NonAwsRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'architectural-design))
      (common-lisp:list
       (common-lisp:cons "ArchitecturalDesign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-owner))
      (common-lisp:list
       (common-lisp:cons "ReviewOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'review-restriction-date))
      (common-lisp:list
       (common-lisp:cons "ReviewRestrictionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-review-owner-update-acknowledged))
      (common-lisp:list
       (common-lisp:cons "IsReviewOwnerUpdateAcknowledged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'industry-type))
      (common-lisp:list
       (common-lisp:cons "IndustryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'industry))
      (common-lisp:list
       (common-lisp:cons "Industry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'improvement-status))
      (common-lisp:list
       (common-lisp:cons "ImprovementStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-counts))
      (common-lisp:list
       (common-lisp:cons "RiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pillar-priorities))
      (common-lisp:list
       (common-lisp:cons "PillarPriorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lenses))
      (common-lisp:list
       (common-lisp:cons "Lenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-invitation-id))
      (common-lisp:list
       (common-lisp:cons "ShareInvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-config))
      (common-lisp:list
       (common-lisp:cons "DiscoveryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiles))
      (common-lisp:list
       (common-lisp:cons "Profiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prioritized-risk-counts))
      (common-lisp:list
       (common-lisp:cons "PrioritizedRiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workload-account-ids ()
   '(trivial-types:proper-list aws-account-id))
 (common-lisp:defun make-workload-account-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype workload-applications ()
   '(trivial-types:proper-list application-arn))
 (common-lisp:defun make-workload-applications
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workload-architectural-design () 'common-lisp:string)
(common-lisp:deftype workload-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workload-aws-regions ()
   '(trivial-types:proper-list aws-region))
 (common-lisp:defun make-workload-aws-regions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-region))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workload-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workload-discovery-config common-lisp:nil
                       ((trusted-advisor-integration-status :initarg
                         :trusted-advisor-integration-status :initform
                         common-lisp:nil :type
                         (common-lisp:or trusted-advisor-integration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-workload-discovery-config-trusted-advisor-integration-status
                         :shape "TrustedAdvisorIntegrationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (workload-resource-definition :initarg
                         :workload-resource-definition :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-resource-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-workload-discovery-config-workload-resource-definition
                         :shape "WorkloadResourceDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workload-discovery-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workload-discovery-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'workload-discovery-config
                    'make-workload-discovery-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workload-discovery-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workload-discovery-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trusted-advisor-integration-status))
      (common-lisp:list
       (common-lisp:cons "TrustedAdvisorIntegrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workload-resource-definition))
      (common-lisp:list
       (common-lisp:cons "WorkloadResourceDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workload-discovery-config))
   common-lisp:nil))
(common-lisp:deftype workload-environment () 'common-lisp:string)
(common-lisp:deftype workload-id () 'common-lisp:string)
(common-lisp:deftype workload-improvement-status () 'common-lisp:string)
(common-lisp:deftype workload-industry () 'common-lisp:string)
(common-lisp:deftype workload-industry-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workload-lenses ()
   '(trivial-types:proper-list lens-alias))
 (common-lisp:defun make-workload-lenses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lens-alias))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workload-name () 'common-lisp:string)
(common-lisp:deftype workload-name-prefix () 'common-lisp:string)
(common-lisp:deftype workload-non-aws-region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workload-non-aws-regions ()
   '(trivial-types:proper-list workload-non-aws-region))
 (common-lisp:defun make-workload-non-aws-regions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workload-non-aws-region))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype workload-pillar-priorities ()
   '(trivial-types:proper-list pillar-id))
 (common-lisp:defun make-workload-pillar-priorities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pillar-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass workload-profile common-lisp:nil
                       ((profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-arn common-lisp:null)
                         :accessor struct-shape-workload-profile-profile-arn
                         :shape "ProfileArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-version :initarg :profile-version :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-version common-lisp:null)
                         :accessor
                         struct-shape-workload-profile-profile-version :shape
                         "ProfileVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workload-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workload-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'workload-profile 'make-workload-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workload-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workload-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-version))
      (common-lisp:list
       (common-lisp:cons "ProfileVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workload-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workload-profile-arns ()
   '(trivial-types:proper-list profile-arn))
 (common-lisp:defun make-workload-profile-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype workload-profiles ()
   '(trivial-types:proper-list workload-profile))
 (common-lisp:defun make-workload-profiles
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workload-profile))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype workload-resource-definition ()
   '(trivial-types:proper-list definition-type))
 (common-lisp:defun make-workload-resource-definition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list definition-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workload-review-owner () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workload-share common-lisp:nil
                       ((share-id :initarg :share-id :initform common-lisp:nil
                         :type (common-lisp:or share-id common-lisp:null)
                         :accessor struct-shape-workload-share-share-id :shape
                         "ShareId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shared-by :initarg :shared-by :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor struct-shape-workload-share-shared-by :shape
                         "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shared-with :initarg :shared-with :initform
                         common-lisp:nil :type
                         (common-lisp:or shared-with common-lisp:null)
                         :accessor struct-shape-workload-share-shared-with
                         :shape "SharedWith" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permission-type :initarg :permission-type :initform
                         common-lisp:nil :type
                         (common-lisp:or permission-type common-lisp:null)
                         :accessor struct-shape-workload-share-permission-type
                         :shape "PermissionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or share-status common-lisp:null)
                         :accessor struct-shape-workload-share-status :shape
                         "ShareStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workload-name :initarg :workload-name :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor struct-shape-workload-share-workload-name
                         :shape "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor struct-shape-workload-share-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workload-share
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workload-share
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'workload-share 'make-workload-share))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workload-share))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workload-share))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-by))
      (common-lisp:list
       (common-lisp:cons "SharedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-type))
      (common-lisp:list
       (common-lisp:cons "PermissionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workload-share))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workload-share-summaries ()
   '(trivial-types:proper-list workload-share-summary))
 (common-lisp:defun make-workload-share-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workload-share-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass workload-share-summary common-lisp:nil
                       ((share-id :initarg :share-id :initform common-lisp:nil
                         :type (common-lisp:or share-id common-lisp:null)
                         :accessor struct-shape-workload-share-summary-share-id
                         :shape "ShareId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shared-with :initarg :shared-with :initform
                         common-lisp:nil :type
                         (common-lisp:or shared-with common-lisp:null)
                         :accessor
                         struct-shape-workload-share-summary-shared-with :shape
                         "SharedWith" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (permission-type :initarg :permission-type :initform
                         common-lisp:nil :type
                         (common-lisp:or permission-type common-lisp:null)
                         :accessor
                         struct-shape-workload-share-summary-permission-type
                         :shape "PermissionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or share-status common-lisp:null)
                         :accessor struct-shape-workload-share-summary-status
                         :shape "ShareStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-workload-share-summary-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workload-share-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workload-share-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'workload-share-summary 'make-workload-share-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workload-share-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workload-share-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-with))
      (common-lisp:list
       (common-lisp:cons "SharedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-type))
      (common-lisp:list
       (common-lisp:cons "PermissionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workload-share-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workload-summaries ()
   '(trivial-types:proper-list workload-summary))
 (common-lisp:defun make-workload-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workload-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass workload-summary common-lisp:nil
                       ((workload-id :initarg :workload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-id common-lisp:null)
                         :accessor struct-shape-workload-summary-workload-id
                         :shape "WorkloadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-arn :initarg :workload-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-arn common-lisp:null)
                         :accessor struct-shape-workload-summary-workload-arn
                         :shape "WorkloadArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-name :initarg :workload-name :initform
                         common-lisp:nil :type
                         (common-lisp:or workload-name common-lisp:null)
                         :accessor struct-shape-workload-summary-workload-name
                         :shape "WorkloadName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor struct-shape-workload-summary-owner :shape
                         "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-workload-summary-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lenses :initarg :lenses :initform common-lisp:nil
                         :type
                         (common-lisp:or workload-lenses common-lisp:null)
                         :accessor struct-shape-workload-summary-lenses :shape
                         "WorkloadLenses" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (risk-counts :initarg :risk-counts :initform
                         common-lisp:nil :type
                         (common-lisp:or risk-counts common-lisp:null)
                         :accessor struct-shape-workload-summary-risk-counts
                         :shape "RiskCounts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (improvement-status :initarg :improvement-status
                         :initform common-lisp:nil :type
                         (common-lisp:or workload-improvement-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-workload-summary-improvement-status
                         :shape "WorkloadImprovementStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (profiles :initarg :profiles :initform common-lisp:nil
                         :type
                         (common-lisp:or workload-profiles common-lisp:null)
                         :accessor struct-shape-workload-summary-profiles
                         :shape "WorkloadProfiles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prioritized-risk-counts :initarg
                         :prioritized-risk-counts :initform common-lisp:nil
                         :type (common-lisp:or risk-counts common-lisp:null)
                         :accessor
                         struct-shape-workload-summary-prioritized-risk-counts
                         :shape "RiskCounts" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workload-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workload-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'workload-summary 'make-workload-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workload-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workload-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-arn))
      (common-lisp:list
       (common-lisp:cons "WorkloadArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lenses))
      (common-lisp:list
       (common-lisp:cons "Lenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-counts))
      (common-lisp:list
       (common-lisp:cons "RiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'improvement-status))
      (common-lisp:list
       (common-lisp:cons "ImprovementStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiles))
      (common-lisp:list
       (common-lisp:cons "Profiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prioritized-risk-counts))
      (common-lisp:list
       (common-lisp:cons "PrioritizedRiskCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workload-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun associate-lenses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-aliases)
   (common-lisp:declare (common-lisp:ignorable workload-id lens-aliases))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-lenses-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/associateLenses"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "AssociateLenses"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-lenses))
(common-lisp:progn
 (common-lisp:defun associate-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id profile-arns)
   (common-lisp:declare (common-lisp:ignorable workload-id profile-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-profiles-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/associateProfiles"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "AssociateProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-profiles))
(common-lisp:progn
 (common-lisp:defun create-lens-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lens-alias shared-with
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable lens-alias shared-with client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-lens-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/lenses/~A/shares"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "CreateLensShare"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-lens-share))
(common-lisp:progn
 (common-lisp:defun create-lens-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lens-alias lens-version is-major-version
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable lens-alias lens-version is-major-version
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-lens-version-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/lenses/~A/versions"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "CreateLensVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-lens-version))
(common-lisp:progn
 (common-lisp:defun create-milestone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id milestone-name
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable workload-id milestone-name client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-milestone-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/milestones"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "CreateMilestone"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-milestone))
(common-lisp:progn
 (common-lisp:defun create-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-name profile-description
                     profile-questions client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable profile-name profile-description profile-questions
     client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        "/profiles" "CreateProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-profile))
(common-lisp:progn
 (common-lisp:defun create-profile-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-arn shared-with
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable profile-arn shared-with client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-profile-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profiles/~A/shares"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profile-arn))))
        "CreateProfileShare"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-profile-share))
(common-lisp:progn
 (common-lisp:defun create-review-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name description lenses notes
                     tags client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable template-name description lenses notes tags
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-review-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        "/reviewTemplates" "CreateReviewTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-review-template))
(common-lisp:progn
 (common-lisp:defun create-template-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn shared-with
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable template-arn shared-with client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-template-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templates/shares/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "CreateTemplateShare"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-template-share))
(common-lisp:progn
 (common-lisp:defun create-workload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-name description environment
                     account-ids aws-regions non-aws-regions pillar-priorities
                     architectural-design review-owner industry-type industry
                     lenses notes client-request-token tags discovery-config
                     applications profile-arns review-template-arns)
   (common-lisp:declare
    (common-lisp:ignorable workload-name description environment account-ids
     aws-regions non-aws-regions pillar-priorities architectural-design
     review-owner industry-type industry lenses notes client-request-token tags
     discovery-config applications profile-arns review-template-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workload-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        "/workloads" "CreateWorkload"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-workload))
(common-lisp:progn
 (common-lisp:defun create-workload-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id shared-with permission-type
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable workload-id shared-with permission-type
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workload-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/shares"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "CreateWorkloadShare"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-workload-share))
(common-lisp:progn
 (common-lisp:defun delete-lens
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lens-alias client-request-token
                     lens-status)
   (common-lisp:declare
    (common-lisp:ignorable lens-alias client-request-token lens-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lens-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/lenses/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "DeleteLens"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-lens))
(common-lisp:progn
 (common-lisp:defun delete-lens-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key share-id lens-alias client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable share-id lens-alias client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lens-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/lenses/~A/shares/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'share-id))))
        "DeleteLensShare"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-lens-share))
(common-lisp:progn
 (common-lisp:defun delete-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-arn client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable profile-arn client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profiles/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profile-arn))))
        "DeleteProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-profile))
(common-lisp:progn
 (common-lisp:defun delete-profile-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key share-id profile-arn
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable share-id profile-arn client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-profile-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profiles/~A/shares/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profile-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'share-id))))
        "DeleteProfileShare"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-profile-share))
(common-lisp:progn
 (common-lisp:defun delete-review-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable template-arn client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-review-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/reviewTemplates/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "DeleteReviewTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-review-template))
(common-lisp:progn
 (common-lisp:defun delete-template-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key share-id template-arn
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable share-id template-arn client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-template-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templates/shares/~A/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'share-id))))
        "DeleteTemplateShare"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-template-share))
(common-lisp:progn
 (common-lisp:defun delete-workload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable workload-id client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workload-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "DeleteWorkload"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-workload))
(common-lisp:progn
 (common-lisp:defun delete-workload-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key share-id workload-id
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable share-id workload-id client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workload-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/shares/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'share-id))))
        "DeleteWorkloadShare"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-workload-share))
(common-lisp:progn
 (common-lisp:defun disassociate-lenses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-aliases)
   (common-lisp:declare (common-lisp:ignorable workload-id lens-aliases))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-lenses-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/disassociateLenses"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "DisassociateLenses"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-lenses))
(common-lisp:progn
 (common-lisp:defun disassociate-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id profile-arns)
   (common-lisp:declare (common-lisp:ignorable workload-id profile-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-profiles-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/disassociateProfiles"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "DisassociateProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-profiles))
(common-lisp:progn
 (common-lisp:defun export-lens
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lens-alias lens-version)
   (common-lisp:declare (common-lisp:ignorable lens-alias lens-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-lens-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/lenses/~A/export"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "ExportLens"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'export-lens))
(common-lisp:progn
 (common-lisp:defun get-answer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-alias question-id
                     milestone-number)
   (common-lisp:declare
    (common-lisp:ignorable workload-id lens-alias question-id
     milestone-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-answer-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/lensReviews/~A/answers/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'question-id))))
        "GetAnswer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-answer))
(common-lisp:progn
 (common-lisp:defun get-consolidated-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key format include-shared-resources
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable format include-shared-resources next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-consolidated-report-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        "/consolidatedReport" "GetConsolidatedReport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-consolidated-report))
(common-lisp:progn
 (common-lisp:defun get-lens
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lens-alias lens-version)
   (common-lisp:declare (common-lisp:ignorable lens-alias lens-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lens-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/lenses/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "GetLens"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-lens))
(common-lisp:progn
 (common-lisp:defun get-lens-review
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-alias milestone-number)
   (common-lisp:declare
    (common-lisp:ignorable workload-id lens-alias milestone-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lens-review-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/lensReviews/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "GetLensReview"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-lens-review))
(common-lisp:progn
 (common-lisp:defun get-lens-review-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-alias milestone-number)
   (common-lisp:declare
    (common-lisp:ignorable workload-id lens-alias milestone-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lens-review-report-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/lensReviews/~A/report"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "GetLensReviewReport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-lens-review-report))
(common-lisp:progn
 (common-lisp:defun get-lens-version-difference
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lens-alias base-lens-version
                     target-lens-version)
   (common-lisp:declare
    (common-lisp:ignorable lens-alias base-lens-version target-lens-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-lens-version-difference-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/lenses/~A/versionDifference"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "GetLensVersionDifference"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-lens-version-difference))
(common-lisp:progn
 (common-lisp:defun get-milestone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id milestone-number)
   (common-lisp:declare (common-lisp:ignorable workload-id milestone-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-milestone-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/milestones/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'milestone-number))))
        "GetMilestone"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-milestone))
(common-lisp:progn
 (common-lisp:defun get-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-arn profile-version)
   (common-lisp:declare (common-lisp:ignorable profile-arn profile-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profiles/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profile-arn))))
        "GetProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-profile))
(common-lisp:progn
 (common-lisp:defun get-profile-template ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'wellarchitected-request :method "GET" :path
                                "/profileTemplate" :operation
                                "GetProfileTemplate"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-profile-template))
(common-lisp:progn
 (common-lisp:defun get-review-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn)
   (common-lisp:declare (common-lisp:ignorable template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-review-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/reviewTemplates/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "GetReviewTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-review-template))
(common-lisp:progn
 (common-lisp:defun get-review-template-answer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn lens-alias question-id)
   (common-lisp:declare
    (common-lisp:ignorable template-arn lens-alias question-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-review-template-answer-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/reviewTemplates/~A/lensReviews/~A/answers/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'question-id))))
        "GetReviewTemplateAnswer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-review-template-answer))
(common-lisp:progn
 (common-lisp:defun get-review-template-lens-review
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn lens-alias)
   (common-lisp:declare (common-lisp:ignorable template-arn lens-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-review-template-lens-review-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/reviewTemplates/~A/lensReviews/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "GetReviewTemplateLensReview"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-review-template-lens-review))
(common-lisp:progn
 (common-lisp:defun get-workload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id)
   (common-lisp:declare (common-lisp:ignorable workload-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workload-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "GetWorkload"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-workload))
(common-lisp:progn
 (common-lisp:defun import-lens
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lens-alias jsonstring
                     client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable lens-alias jsonstring client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-lens-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PUT"
        "/importLens" "ImportLens"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'import-lens))
(common-lisp:progn
 (common-lisp:defun list-answers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-alias pillar-id
                     milestone-number next-token max-results question-priority)
   (common-lisp:declare
    (common-lisp:ignorable workload-id lens-alias pillar-id milestone-number
     next-token max-results question-priority))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-answers-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/lensReviews/~A/answers"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "ListAnswers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-answers))
(common-lisp:progn
 (common-lisp:defun list-check-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id next-token max-results
                     lens-arn pillar-id question-id choice-id)
   (common-lisp:declare
    (common-lisp:ignorable workload-id next-token max-results lens-arn
     pillar-id question-id choice-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-check-details-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/checks"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "ListCheckDetails"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-check-details))
(common-lisp:progn
 (common-lisp:defun list-check-summaries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id next-token max-results
                     lens-arn pillar-id question-id choice-id)
   (common-lisp:declare
    (common-lisp:ignorable workload-id next-token max-results lens-arn
     pillar-id question-id choice-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-check-summaries-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/checkSummaries"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "ListCheckSummaries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-check-summaries))
(common-lisp:progn
 (common-lisp:defun list-lens-review-improvements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-alias pillar-id
                     milestone-number next-token max-results question-priority)
   (common-lisp:declare
    (common-lisp:ignorable workload-id lens-alias pillar-id milestone-number
     next-token max-results question-priority))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-lens-review-improvements-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/lensReviews/~A/improvements"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "ListLensReviewImprovements"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-lens-review-improvements))
(common-lisp:progn
 (common-lisp:defun list-lens-reviews
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id milestone-number next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable workload-id milestone-number next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-lens-reviews-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/lensReviews"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "ListLensReviews"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-lens-reviews))
(common-lisp:progn
 (common-lisp:defun list-lens-shares
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lens-alias shared-with-prefix next-token
                     max-results status)
   (common-lisp:declare
    (common-lisp:ignorable lens-alias shared-with-prefix next-token max-results
     status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-lens-shares-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/lenses/~A/shares"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "ListLensShares"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-lens-shares))
(common-lisp:progn
 (common-lisp:defun list-lenses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results lens-type
                     lens-status lens-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results lens-type lens-status
     lens-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-lenses-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        "/lenses" "ListLenses"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-lenses))
(common-lisp:progn
 (common-lisp:defun list-milestones
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable workload-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-milestones-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/milestonesSummaries"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "ListMilestones"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-milestones))
(common-lisp:progn
 (common-lisp:defun list-notifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id next-token max-results
                     resource-arn)
   (common-lisp:declare
    (common-lisp:ignorable workload-id next-token max-results resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-notifications-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        "/notifications" "ListNotifications"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-notifications))
(common-lisp:progn
 (common-lisp:defun list-profile-notifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable workload-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-profile-notifications-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        "/profileNotifications/" "ListProfileNotifications"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-profile-notifications))
(common-lisp:progn
 (common-lisp:defun list-profile-shares
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-arn shared-with-prefix next-token
                     max-results status)
   (common-lisp:declare
    (common-lisp:ignorable profile-arn shared-with-prefix next-token
     max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-profile-shares-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profiles/~A/shares"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profile-arn))))
        "ListProfileShares"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-profile-shares))
(common-lisp:progn
 (common-lisp:defun list-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-name-prefix profile-owner-type
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable profile-name-prefix profile-owner-type next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-profiles-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        "/profileSummaries" "ListProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-profiles))
(common-lisp:progn
 (common-lisp:defun list-review-template-answers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn lens-alias pillar-id
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable template-arn lens-alias pillar-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-review-template-answers-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/reviewTemplates/~A/lensReviews/~A/answers"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "ListReviewTemplateAnswers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-review-template-answers))
(common-lisp:progn
 (common-lisp:defun list-review-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-review-templates-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        "/reviewTemplates" "ListReviewTemplates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-review-templates))
(common-lisp:progn
 (common-lisp:defun list-share-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-name-prefix lens-name-prefix
                     share-resource-type next-token max-results
                     profile-name-prefix template-name-prefix)
   (common-lisp:declare
    (common-lisp:ignorable workload-name-prefix lens-name-prefix
     share-resource-type next-token max-results profile-name-prefix
     template-name-prefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-share-invitations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        "/shareInvitations" "ListShareInvitations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-share-invitations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-arn)
   (common-lisp:declare (common-lisp:ignorable workload-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-arn))))
        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-template-shares
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn shared-with-prefix
                     next-token max-results status)
   (common-lisp:declare
    (common-lisp:ignorable template-arn shared-with-prefix next-token
     max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-template-shares-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templates/shares/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "ListTemplateShares"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-template-shares))
(common-lisp:progn
 (common-lisp:defun list-workload-shares
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id shared-with-prefix next-token
                     max-results status)
   (common-lisp:declare
    (common-lisp:ignorable workload-id shared-with-prefix next-token
     max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workload-shares-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/shares"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "ListWorkloadShares"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-workload-shares))
(common-lisp:progn
 (common-lisp:defun list-workloads
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-name-prefix next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable workload-name-prefix next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workloads-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        "/workloadsSummaries" "ListWorkloads"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-workloads))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-arn tags)
   (common-lisp:declare (common-lisp:ignorable workload-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-arn))))
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable workload-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-arn))))
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-answer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-alias question-id
                     selected-choices choice-updates notes is-applicable
                     reason)
   (common-lisp:declare
    (common-lisp:ignorable workload-id lens-alias question-id selected-choices
     choice-updates notes is-applicable reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-answer-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/lensReviews/~A/answers/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'question-id))))
        "UpdateAnswer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-answer))
(common-lisp:progn
 (common-lisp:defun update-global-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-sharing-status
                     discovery-integration-status)
   (common-lisp:declare
    (common-lisp:ignorable organization-sharing-status
     discovery-integration-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-global-settings-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        "/global-settings" "UpdateGlobalSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-global-settings))
(common-lisp:progn
 (common-lisp:defun update-lens-review
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-alias lens-notes
                     pillar-notes)
   (common-lisp:declare
    (common-lisp:ignorable workload-id lens-alias lens-notes pillar-notes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-lens-review-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/lensReviews/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "UpdateLensReview"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-lens-review))
(common-lisp:progn
 (common-lisp:defun update-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-arn profile-description
                     profile-questions)
   (common-lisp:declare
    (common-lisp:ignorable profile-arn profile-description profile-questions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profiles/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profile-arn))))
        "UpdateProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-profile))
(common-lisp:progn
 (common-lisp:defun update-review-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn template-name description
                     notes lenses-to-associate lenses-to-disassociate)
   (common-lisp:declare
    (common-lisp:ignorable template-arn template-name description notes
     lenses-to-associate lenses-to-disassociate))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-review-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/reviewTemplates/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "UpdateReviewTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-review-template))
(common-lisp:progn
 (common-lisp:defun update-review-template-answer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn lens-alias question-id
                     selected-choices choice-updates notes is-applicable
                     reason)
   (common-lisp:declare
    (common-lisp:ignorable template-arn lens-alias question-id selected-choices
     choice-updates notes is-applicable reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-review-template-answer-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/reviewTemplates/~A/lensReviews/~A/answers/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'question-id))))
        "UpdateReviewTemplateAnswer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-review-template-answer))
(common-lisp:progn
 (common-lisp:defun update-review-template-lens-review
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn lens-alias lens-notes
                     pillar-notes)
   (common-lisp:declare
    (common-lisp:ignorable template-arn lens-alias lens-notes pillar-notes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-review-template-lens-review-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/reviewTemplates/~A/lensReviews/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "UpdateReviewTemplateLensReview"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-review-template-lens-review))
(common-lisp:progn
 (common-lisp:defun update-share-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key share-invitation-id
                     share-invitation-action)
   (common-lisp:declare
    (common-lisp:ignorable share-invitation-id share-invitation-action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-share-invitation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/shareInvitations/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'share-invitation-id))))
        "UpdateShareInvitation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-share-invitation))
(common-lisp:progn
 (common-lisp:defun update-workload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id workload-name description
                     environment account-ids aws-regions non-aws-regions
                     pillar-priorities architectural-design review-owner
                     is-review-owner-update-acknowledged industry-type industry
                     notes improvement-status discovery-config applications)
   (common-lisp:declare
    (common-lisp:ignorable workload-id workload-name description environment
     account-ids aws-regions non-aws-regions pillar-priorities
     architectural-design review-owner is-review-owner-update-acknowledged
     industry-type industry notes improvement-status discovery-config
     applications))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workload-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))))
        "UpdateWorkload"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-workload))
(common-lisp:progn
 (common-lisp:defun update-workload-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key share-id workload-id permission-type)
   (common-lisp:declare
    (common-lisp:ignorable share-id workload-id permission-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workload-share-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workloads/~A/shares/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'share-id))))
        "UpdateWorkloadShare"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-workload-share))
(common-lisp:progn
 (common-lisp:defun upgrade-lens-review
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id lens-alias milestone-name
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable workload-id lens-alias milestone-name
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upgrade-lens-review-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/lensReviews/~A/upgrade"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "UpgradeLensReview"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'upgrade-lens-review))
(common-lisp:progn
 (common-lisp:defun upgrade-profile-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workload-id profile-arn milestone-name
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable workload-id profile-arn milestone-name
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upgrade-profile-version-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workloads/~A/profiles/~A/upgrade"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workload-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profile-arn))))
        "UpgradeProfileVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'upgrade-profile-version))
(common-lisp:progn
 (common-lisp:defun upgrade-review-template-lens-review
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn lens-alias
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable template-arn lens-alias client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-upgrade-review-template-lens-review-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'wellarchitected-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/reviewTemplates/~A/lensReviews/~A/upgrade"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'lens-alias))))
        "UpgradeReviewTemplateLensReview"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'upgrade-review-template-lens-review))
