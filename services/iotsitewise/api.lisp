;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/iotsitewise/api (:use)
                             (:nicknames #:aws/iotsitewise)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/iotsitewise/api)
(common-lisp:progn
 (common-lisp:define-condition iotsitewise-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'iotsitewise-error))
(common-lisp:progn
 (common-lisp:defclass iotsitewise-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "iotsitewise" :api-version
                        "2019-12-02" :host-prefix "iotsitewise" :signing-name
                        "iotsitewise" :global-host common-lisp:nil))
 (common-lisp:export 'iotsitewise-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictingOperationException" . conflicting-operation-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("QueryTimeoutException" . query-timeout-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("ThrottlingException" . throttling-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("UnauthorizedException" . unauthorized-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:deftype access-policy-summaries ()
   '(trivial-types:proper-list access-policy-summary))
 (common-lisp:defun make-access-policy-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-policy-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass access-policy-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-access-policy-summary-id :shape "ID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (identity :initarg :identity :initform
                         (common-lisp:error ":identity is required") :type
                         (common-lisp:or identity common-lisp:null) :accessor
                         struct-shape-access-policy-summary-identity :shape
                         "Identity" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource :initarg :resource :initform
                         (common-lisp:error ":resource is required") :type
                         (common-lisp:or resource common-lisp:null) :accessor
                         struct-shape-access-policy-summary-resource :shape
                         "Resource" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (permission :initarg :permission :initform
                         (common-lisp:error ":permission is required") :type
                         (common-lisp:or permission common-lisp:null) :accessor
                         struct-shape-access-policy-summary-permission :shape
                         "Permission" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-access-policy-summary-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-date :initarg :last-update-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-access-policy-summary-last-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-policy-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-policy-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-policy-summary 'make-access-policy-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-policy-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-policy-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-policy-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-definition common-lisp:nil
                       ((action-definition-id :initarg :action-definition-id
                         :initform
                         (common-lisp:error ":actiondefinitionid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-action-definition-action-definition-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (action-name :initarg :action-name :initform
                         (common-lisp:error ":actionname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-action-definition-action-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (action-type :initarg :action-type :initform
                         (common-lisp:error ":actiontype is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-action-definition-action-type :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-definition 'make-action-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-definition-id))
      (common-lisp:list
       (common-lisp:cons "actionDefinitionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-definitions ()
   '(trivial-types:proper-list action-definition))
 (common-lisp:defun make-action-definitions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass action-payload common-lisp:nil
                       ((string-value :initarg :string-value :initform
                         (common-lisp:error ":stringvalue is required") :type
                         (common-lisp:or action-payload-string
                                         common-lisp:null)
                         :accessor struct-shape-action-payload-string-value
                         :shape "ActionPayloadString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-payload
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-payload
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'action-payload 'make-action-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-payload))
   common-lisp:nil))
(common-lisp:deftype action-payload-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype action-summaries ()
   '(trivial-types:proper-list action-summary))
 (common-lisp:defun make-action-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass action-summary common-lisp:nil
                       ((action-id :initarg :action-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-action-summary-action-id :shape "ID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (action-definition-id :initarg :action-definition-id
                         :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-action-summary-action-definition-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-resource :initarg :target-resource :initform
                         common-lisp:nil :type
                         (common-lisp:or target-resource common-lisp:null)
                         :accessor struct-shape-action-summary-target-resource
                         :shape "TargetResource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'action-summary 'make-action-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-definition-id))
      (common-lisp:list
       (common-lisp:cons "actionDefinitionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-resource))
      (common-lisp:list
       (common-lisp:cons "targetResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-summary))
   common-lisp:nil))
(common-lisp:deftype adaptive-ingestion () 'common-lisp:boolean)
(common-lisp:deftype aggregate-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aggregate-types ()
   '(trivial-types:proper-list aggregate-type))
 (common-lisp:defun make-aggregate-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aggregate-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aggregated-double-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass aggregated-value common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         (common-lisp:error ":string is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-aggregated-value-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (quality :initarg :quality :initform common-lisp:nil
                         :type (common-lisp:or quality common-lisp:null)
                         :accessor struct-shape-aggregated-value-quality :shape
                         "Quality" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or aggregates common-lisp:null) :accessor
                         struct-shape-aggregated-value-value :shape
                         "Aggregates" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregated-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aggregated-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregated-value 'make-aggregated-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregated-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregated-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality))
      (common-lisp:list
       (common-lisp:cons "quality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregated-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregated-values ()
   '(trivial-types:proper-list aggregated-value))
 (common-lisp:defun make-aggregated-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aggregated-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aggregates common-lisp:nil
                       ((average :initarg :average :initform common-lisp:nil
                         :type
                         (common-lisp:or aggregated-double-value
                                         common-lisp:null)
                         :accessor struct-shape-aggregates-average :shape
                         "AggregatedDoubleValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or aggregated-double-value
                                         common-lisp:null)
                         :accessor struct-shape-aggregates-count :shape
                         "AggregatedDoubleValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum :initarg :maximum :initform common-lisp:nil
                         :type
                         (common-lisp:or aggregated-double-value
                                         common-lisp:null)
                         :accessor struct-shape-aggregates-maximum :shape
                         "AggregatedDoubleValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minimum :initarg :minimum :initform common-lisp:nil
                         :type
                         (common-lisp:or aggregated-double-value
                                         common-lisp:null)
                         :accessor struct-shape-aggregates-minimum :shape
                         "AggregatedDoubleValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sum :initarg :sum :initform common-lisp:nil :type
                         (common-lisp:or aggregated-double-value
                                         common-lisp:null)
                         :accessor struct-shape-aggregates-sum :shape
                         "AggregatedDoubleValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (standard-deviation :initarg :standard-deviation
                         :initform common-lisp:nil :type
                         (common-lisp:or aggregated-double-value
                                         common-lisp:null)
                         :accessor struct-shape-aggregates-standard-deviation
                         :shape "AggregatedDoubleValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregates
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aggregates
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'aggregates 'make-aggregates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'average))
      (common-lisp:list
       (common-lisp:cons "average"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum))
      (common-lisp:list
       (common-lisp:cons "sum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standard-deviation))
      (common-lisp:list
       (common-lisp:cons "standardDeviation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregates))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass alarms common-lisp:nil
                       ((alarm-role-arn :initarg :alarm-role-arn :initform
                         (common-lisp:error ":alarmrolearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-alarms-alarm-role-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (notification-lambda-arn :initarg
                         :notification-lambda-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-alarms-notification-lambda-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-alarms
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'alarms
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'alarms 'make-alarms))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alarms))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alarms))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-role-arn))
      (common-lisp:list
       (common-lisp:cons "alarmRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-lambda-arn))
      (common-lisp:list
       (common-lisp:cons "notificationLambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alarms))
   common-lisp:nil))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass asset-composite-model common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-composite-model-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-asset-composite-model-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-composite-model-type :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (properties :initarg :properties :initform
                         (common-lisp:error ":properties is required") :type
                         (common-lisp:or asset-properties common-lisp:null)
                         :accessor
                         struct-shape-asset-composite-model-properties :shape
                         "AssetProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-composite-model-id :shape "ID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-asset-composite-model-external-id :shape
                         "ExternalId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-composite-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-composite-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-composite-model 'make-asset-composite-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-composite-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-composite-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-composite-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-composite-model-path ()
   '(trivial-types:proper-list asset-composite-model-path-segment))
 (common-lisp:defun make-asset-composite-model-path
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-composite-model-path-segment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-composite-model-path-segment common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-composite-model-path-segment-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-composite-model-path-segment-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-composite-model-path-segment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'asset-composite-model-path-segment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-composite-model-path-segment
                    'make-asset-composite-model-path-segment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-composite-model-path-segment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-composite-model-path-segment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-composite-model-path-segment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-composite-model-summaries ()
   '(trivial-types:proper-list asset-composite-model-summary))
 (common-lisp:defun make-asset-composite-model-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-composite-model-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-composite-model-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-composite-model-summary-id :shape
                         "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-asset-composite-model-summary-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-composite-model-summary-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-composite-model-summary-type :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-asset-composite-model-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or asset-composite-model-path
                                         common-lisp:null)
                         :accessor
                         struct-shape-asset-composite-model-summary-path :shape
                         "AssetCompositeModelPath" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-composite-model-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'asset-composite-model-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-composite-model-summary
                    'make-asset-composite-model-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-composite-model-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-composite-model-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-composite-model-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-composite-models ()
   '(trivial-types:proper-list asset-composite-model))
 (common-lisp:defun make-asset-composite-models
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-composite-model))
   aws-sdk/generator/shape::members))
(common-lisp:deftype asset-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass asset-error-details common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-error-details-asset-id :shape "ID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or asset-error-code common-lisp:null)
                         :accessor struct-shape-asset-error-details-code :shape
                         "AssetErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or asset-error-message common-lisp:null)
                         :accessor struct-shape-asset-error-details-message
                         :shape "AssetErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-error-details 'make-asset-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-error-details))
   common-lisp:nil))
(common-lisp:deftype asset-error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype asset-hierarchies ()
   '(trivial-types:proper-list asset-hierarchy))
 (common-lisp:defun make-asset-hierarchies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-hierarchy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-hierarchy common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-hierarchy-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-hierarchy-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor struct-shape-asset-hierarchy-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-hierarchy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-hierarchy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'asset-hierarchy 'make-asset-hierarchy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-hierarchy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-hierarchy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-hierarchy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass asset-hierarchy-info common-lisp:nil
                       ((parent-asset-id :initarg :parent-asset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-hierarchy-info-parent-asset-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (child-asset-id :initarg :child-asset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-hierarchy-info-child-asset-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-hierarchy-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-hierarchy-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-hierarchy-info 'make-asset-hierarchy-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-hierarchy-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-hierarchy-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-asset-id))
      (common-lisp:list
       (common-lisp:cons "parentAssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-asset-id))
      (common-lisp:list
       (common-lisp:cons "childAssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-hierarchy-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-ids () '(trivial-types:proper-list id))
 (common-lisp:defun make-asset-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-model-composite-model common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-composite-model-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-asset-model-composite-model-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-composite-model-type :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (properties :initarg :properties :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-model-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-asset-model-composite-model-properties
                         :shape "AssetModelProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-asset-model-composite-model-id :shape
                         "CustomID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-asset-model-composite-model-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-model-composite-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-model-composite-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-model-composite-model
                    'make-asset-model-composite-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass asset-model-composite-model-definition common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-composite-model-definition-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-asset-model-composite-model-definition-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-composite-model-definition-type
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (properties :initarg :properties :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-model-property-definitions
                                         common-lisp:null)
                         :accessor
                         struct-shape-asset-model-composite-model-definition-properties
                         :shape "AssetModelPropertyDefinitions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-model-composite-model-definition-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-asset-model-composite-model-definition-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-model-composite-model-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'asset-model-composite-model-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-model-composite-model-definition
                    'make-asset-model-composite-model-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-model-composite-model-definitions ()
   '(trivial-types:proper-list asset-model-composite-model-definition))
 (common-lisp:defun make-asset-model-composite-model-definitions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-model-composite-model-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype asset-model-composite-model-path ()
   '(trivial-types:proper-list asset-model-composite-model-path-segment))
 (common-lisp:defun make-asset-model-composite-model-path
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-model-composite-model-path-segment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-model-composite-model-path-segment common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-model-composite-model-path-segment-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-composite-model-path-segment-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-model-composite-model-path-segment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'asset-model-composite-model-path-segment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-model-composite-model-path-segment
                    'make-asset-model-composite-model-path-segment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model-path-segment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model-path-segment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model-path-segment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-model-composite-model-summaries ()
   '(trivial-types:proper-list asset-model-composite-model-summary))
 (common-lisp:defun make-asset-model-composite-model-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-model-composite-model-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-model-composite-model-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-model-composite-model-summary-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-asset-model-composite-model-summary-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-composite-model-summary-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-composite-model-summary-type
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-asset-model-composite-model-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or asset-model-composite-model-path
                                         common-lisp:null)
                         :accessor
                         struct-shape-asset-model-composite-model-summary-path
                         :shape "AssetModelCompositeModelPath" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-model-composite-model-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'asset-model-composite-model-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-model-composite-model-summary
                    'make-asset-model-composite-model-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-model-composite-models ()
   '(trivial-types:proper-list asset-model-composite-model))
 (common-lisp:defun make-asset-model-composite-models
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-model-composite-model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype asset-model-hierarchies ()
   '(trivial-types:proper-list asset-model-hierarchy))
 (common-lisp:defun make-asset-model-hierarchies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-model-hierarchy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-model-hierarchy common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-asset-model-hierarchy-id :shape
                         "CustomID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-hierarchy-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (child-asset-model-id :initarg :child-asset-model-id
                         :initform
                         (common-lisp:error ":childassetmodelid is required")
                         :type (common-lisp:or custom-id common-lisp:null)
                         :accessor
                         struct-shape-asset-model-hierarchy-child-asset-model-id
                         :shape "CustomID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-asset-model-hierarchy-external-id :shape
                         "ExternalId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-model-hierarchy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-model-hierarchy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-model-hierarchy 'make-asset-model-hierarchy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-hierarchy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-hierarchy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'child-asset-model-id))
      (common-lisp:list
       (common-lisp:cons "childAssetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-hierarchy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass asset-model-hierarchy-definition common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-hierarchy-definition-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (child-asset-model-id :initarg :child-asset-model-id
                         :initform
                         (common-lisp:error ":childassetmodelid is required")
                         :type (common-lisp:or custom-id common-lisp:null)
                         :accessor
                         struct-shape-asset-model-hierarchy-definition-child-asset-model-id
                         :shape "CustomID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-model-hierarchy-definition-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-asset-model-hierarchy-definition-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-model-hierarchy-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'asset-model-hierarchy-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-model-hierarchy-definition
                    'make-asset-model-hierarchy-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-hierarchy-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-hierarchy-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'child-asset-model-id))
      (common-lisp:list
       (common-lisp:cons "childAssetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-hierarchy-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-model-hierarchy-definitions ()
   '(trivial-types:proper-list asset-model-hierarchy-definition))
 (common-lisp:defun make-asset-model-hierarchy-definitions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-model-hierarchy-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype asset-model-properties ()
   '(trivial-types:proper-list asset-model-property))
 (common-lisp:defun make-asset-model-properties
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-model-property))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-model-property common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-asset-model-property-id :shape "CustomID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-property-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         (common-lisp:error ":datatype is required") :type
                         (common-lisp:or property-data-type common-lisp:null)
                         :accessor struct-shape-asset-model-property-data-type
                         :shape "PropertyDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type-spec :initarg :data-type-spec :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-property-data-type-spec
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or property-unit common-lisp:null)
                         :accessor struct-shape-asset-model-property-unit
                         :shape "PropertyUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or property-type common-lisp:null)
                         :accessor struct-shape-asset-model-property-type
                         :shape "PropertyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or asset-model-property-path
                                         common-lisp:null)
                         :accessor struct-shape-asset-model-property-path
                         :shape "AssetModelPropertyPath" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-asset-model-property-external-id :shape
                         "ExternalId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-model-property
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-model-property
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-model-property 'make-asset-model-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-model-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-model-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type-spec))
      (common-lisp:list
       (common-lisp:cons "dataTypeSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-model-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass asset-model-property-definition common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-property-definition-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         (common-lisp:error ":datatype is required") :type
                         (common-lisp:or property-data-type common-lisp:null)
                         :accessor
                         struct-shape-asset-model-property-definition-data-type
                         :shape "PropertyDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type-spec :initarg :data-type-spec :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-property-definition-data-type-spec
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or property-unit common-lisp:null)
                         :accessor
                         struct-shape-asset-model-property-definition-unit
                         :shape "PropertyUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or property-type common-lisp:null)
                         :accessor
                         struct-shape-asset-model-property-definition-type
                         :shape "PropertyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-model-property-definition-id :shape
                         "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-asset-model-property-definition-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-model-property-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'asset-model-property-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-model-property-definition
                    'make-asset-model-property-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-property-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-property-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type-spec))
      (common-lisp:list
       (common-lisp:cons "dataTypeSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-property-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-model-property-definitions ()
   '(trivial-types:proper-list asset-model-property-definition))
 (common-lisp:defun make-asset-model-property-definitions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-model-property-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype asset-model-property-path ()
   '(trivial-types:proper-list asset-model-property-path-segment))
 (common-lisp:defun make-asset-model-property-path
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-model-property-path-segment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-model-property-path-segment common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-model-property-path-segment-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-property-path-segment-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-model-property-path-segment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'asset-model-property-path-segment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-model-property-path-segment
                    'make-asset-model-property-path-segment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-property-path-segment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-property-path-segment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-property-path-segment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-model-property-summaries ()
   '(trivial-types:proper-list asset-model-property-summary))
 (common-lisp:defun make-asset-model-property-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-model-property-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-model-property-summary common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-model-property-summary-id :shape
                         "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-property-summary-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         (common-lisp:error ":datatype is required") :type
                         (common-lisp:or property-data-type common-lisp:null)
                         :accessor
                         struct-shape-asset-model-property-summary-data-type
                         :shape "PropertyDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type-spec :initarg :data-type-spec :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-property-summary-data-type-spec
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or property-unit common-lisp:null)
                         :accessor
                         struct-shape-asset-model-property-summary-unit :shape
                         "PropertyUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or property-type common-lisp:null)
                         :accessor
                         struct-shape-asset-model-property-summary-type :shape
                         "PropertyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-composite-model-id :initarg
                         :asset-model-composite-model-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-model-property-summary-asset-model-composite-model-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or asset-model-property-path
                                         common-lisp:null)
                         :accessor
                         struct-shape-asset-model-property-summary-path :shape
                         "AssetModelPropertyPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-asset-model-property-summary-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-model-property-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-model-property-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-model-property-summary
                    'make-asset-model-property-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-property-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-property-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type-spec))
      (common-lisp:list
       (common-lisp:cons "dataTypeSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-property-summary))
   common-lisp:nil))
(common-lisp:deftype asset-model-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass asset-model-status common-lisp:nil
                       ((state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or asset-model-state common-lisp:null)
                         :accessor struct-shape-asset-model-status-state :shape
                         "AssetModelState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor struct-shape-asset-model-status-error :shape
                         "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-model-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-model-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-model-status 'make-asset-model-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-model-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-model-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-model-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-model-summaries ()
   '(trivial-types:proper-list asset-model-summary))
 (common-lisp:defun make-asset-model-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-model-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-model-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-model-summary-id :shape "ID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-asset-model-summary-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-model-summary-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-asset-model-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creationdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-asset-model-summary-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-date :initarg :last-update-date :initform
                         (common-lisp:error ":lastupdatedate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-asset-model-summary-last-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or asset-model-status common-lisp:null)
                         :accessor struct-shape-asset-model-summary-status
                         :shape "AssetModelStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-type :initarg :asset-model-type :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-model-type common-lisp:null)
                         :accessor
                         struct-shape-asset-model-summary-asset-model-type
                         :shape "AssetModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor struct-shape-asset-model-summary-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-model-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-model-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-model-summary 'make-asset-model-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-model-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-model-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-type))
      (common-lisp:list
       (common-lisp:cons "assetModelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-model-summary))
   common-lisp:nil))
(common-lisp:deftype asset-model-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype asset-properties ()
   '(trivial-types:proper-list asset-property))
 (common-lisp:defun make-asset-properties
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-property))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-property common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-property-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-property-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or property-alias common-lisp:null)
                         :accessor struct-shape-asset-property-alias :shape
                         "PropertyAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification :initarg :notification :initform
                         common-lisp:nil :type
                         (common-lisp:or property-notification
                                         common-lisp:null)
                         :accessor struct-shape-asset-property-notification
                         :shape "PropertyNotification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         (common-lisp:error ":datatype is required") :type
                         (common-lisp:or property-data-type common-lisp:null)
                         :accessor struct-shape-asset-property-data-type :shape
                         "PropertyDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type-spec :initarg :data-type-spec :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-property-data-type-spec :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or property-unit common-lisp:null)
                         :accessor struct-shape-asset-property-unit :shape
                         "PropertyUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or asset-property-path common-lisp:null)
                         :accessor struct-shape-asset-property-path :shape
                         "AssetPropertyPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor struct-shape-asset-property-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-property
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-property
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'asset-property 'make-asset-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type-spec))
      (common-lisp:list
       (common-lisp:cons "dataTypeSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-property))
   common-lisp:nil))
(common-lisp:deftype asset-property-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype asset-property-path ()
   '(trivial-types:proper-list asset-property-path-segment))
 (common-lisp:defun make-asset-property-path
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-property-path-segment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-property-path-segment common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-property-path-segment-id :shape
                         "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-property-path-segment-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-property-path-segment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-property-path-segment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-property-path-segment
                    'make-asset-property-path-segment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-path-segment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-path-segment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-path-segment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-property-summaries ()
   '(trivial-types:proper-list asset-property-summary))
 (common-lisp:defun make-asset-property-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-property-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-property-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-property-summary-id :shape "ID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or property-alias common-lisp:null)
                         :accessor struct-shape-asset-property-summary-alias
                         :shape "PropertyAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or property-unit common-lisp:null)
                         :accessor struct-shape-asset-property-summary-unit
                         :shape "PropertyUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification :initarg :notification :initform
                         common-lisp:nil :type
                         (common-lisp:or property-notification
                                         common-lisp:null)
                         :accessor
                         struct-shape-asset-property-summary-notification
                         :shape "PropertyNotification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-composite-model-id :initarg
                         :asset-composite-model-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-property-summary-asset-composite-model-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or asset-property-path common-lisp:null)
                         :accessor struct-shape-asset-property-summary-path
                         :shape "AssetPropertyPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-asset-property-summary-external-id :shape
                         "ExternalId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-property-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-property-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-property-summary 'make-asset-property-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-composite-model-id))
      (common-lisp:list
       (common-lisp:cons "assetCompositeModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass asset-property-value common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or variant common-lisp:null) :accessor
                         struct-shape-asset-property-value-value :shape
                         "Variant" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         (common-lisp:error ":string is required") :type
                         (common-lisp:or time-in-nanos common-lisp:null)
                         :accessor struct-shape-asset-property-value-timestamp
                         :shape "TimeInNanos" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quality :initarg :quality :initform common-lisp:nil
                         :type (common-lisp:or quality common-lisp:null)
                         :accessor struct-shape-asset-property-value-quality
                         :shape "Quality" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-property-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-property-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-property-value 'make-asset-property-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-property-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-property-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality))
      (common-lisp:list
       (common-lisp:cons "quality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-property-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-property-value-history ()
   '(trivial-types:proper-list asset-property-value))
 (common-lisp:defun make-asset-property-value-history
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-property-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype asset-property-values ()
   '(trivial-types:proper-list asset-property-value))
 (common-lisp:defun make-asset-property-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-property-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype asset-relationship-summaries ()
   '(trivial-types:proper-list asset-relationship-summary))
 (common-lisp:defun make-asset-relationship-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-relationship-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-relationship-summary common-lisp:nil
                       ((hierarchy-info :initarg :hierarchy-info :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-hierarchy-info common-lisp:null)
                         :accessor
                         struct-shape-asset-relationship-summary-hierarchy-info
                         :shape "AssetHierarchyInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relationship-type :initarg :relationship-type
                         :initform
                         (common-lisp:error ":relationshiptype is required")
                         :type
                         (common-lisp:or asset-relationship-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-asset-relationship-summary-relationship-type
                         :shape "AssetRelationshipType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-relationship-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-relationship-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-relationship-summary
                    'make-asset-relationship-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-relationship-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-relationship-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-info))
      (common-lisp:list
       (common-lisp:cons "hierarchyInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-type))
      (common-lisp:list
       (common-lisp:cons "relationshipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-relationship-summary))
   common-lisp:nil))
(common-lisp:deftype asset-relationship-type () 'common-lisp:string)
(common-lisp:deftype asset-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass asset-status common-lisp:nil
                       ((state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or asset-state common-lisp:null)
                         :accessor struct-shape-asset-status-state :shape
                         "AssetState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor struct-shape-asset-status-error :shape
                         "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'asset-status 'make-asset-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-summaries ()
   '(trivial-types:proper-list asset-summary))
 (common-lisp:defun make-asset-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-summary-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-asset-summary-arn :shape "ARN" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-asset-summary-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-asset-summary-asset-model-id :shape "ID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creationdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-asset-summary-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-date :initarg :last-update-date :initform
                         (common-lisp:error ":lastupdatedate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-asset-summary-last-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or asset-status common-lisp:null)
                         :accessor struct-shape-asset-summary-status :shape
                         "AssetStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hierarchies :initarg :hierarchies :initform
                         (common-lisp:error ":hierarchies is required") :type
                         (common-lisp:or asset-hierarchies common-lisp:null)
                         :accessor struct-shape-asset-summary-hierarchies
                         :shape "AssetHierarchies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-asset-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor struct-shape-asset-summary-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'asset-summary 'make-asset-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchies))
      (common-lisp:list
       (common-lisp:cons "hierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-assets-request common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-associate-assets-request-asset-id :shape
                         "CustomID" :location "uri" :location-name "assetId")
                        (hierarchy-id :initarg :hierarchy-id :initform
                         (common-lisp:error ":hierarchyid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-associate-assets-request-hierarchy-id
                         :shape "CustomID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (child-asset-id :initarg :child-asset-id :initform
                         (common-lisp:error ":childassetid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-associate-assets-request-child-asset-id
                         :shape "CustomID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-associate-assets-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-assets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-assets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-assets-request 'make-associate-assets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-assets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "hierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-asset-id))
      (common-lisp:list
       (common-lisp:cons "childAssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-time-series-to-asset-property-request
                       common-lisp:nil
                       ((alias :initarg :alias :initform
                         (common-lisp:error ":alias is required") :type
                         (common-lisp:or property-alias common-lisp:null)
                         :accessor
                         struct-shape-associate-time-series-to-asset-property-request-alias
                         :shape "PropertyAlias" :location "querystring"
                         :location-name "alias")
                        (asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-associate-time-series-to-asset-property-request-asset-id
                         :shape "CustomID" :location "querystring"
                         :location-name "assetId")
                        (property-id :initarg :property-id :initform
                         (common-lisp:error ":propertyid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-associate-time-series-to-asset-property-request-property-id
                         :shape "CustomID" :location "querystring"
                         :location-name "propertyId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-associate-time-series-to-asset-property-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-time-series-to-asset-property-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-time-series-to-asset-property-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-time-series-to-asset-property-request
                    'make-associate-time-series-to-asset-property-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-time-series-to-asset-property-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-time-series-to-asset-property-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-time-series-to-asset-property-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype associated-assets-summaries ()
   '(trivial-types:proper-list associated-assets-summary))
 (common-lisp:defun make-associated-assets-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            associated-assets-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associated-assets-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-associated-assets-summary-id :shape "ID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associated-assets-summary-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-associated-assets-summary-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-associated-assets-summary-asset-model-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creationdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-associated-assets-summary-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-date :initarg :last-update-date :initform
                         (common-lisp:error ":lastupdatedate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-associated-assets-summary-last-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or asset-status common-lisp:null)
                         :accessor
                         struct-shape-associated-assets-summary-status :shape
                         "AssetStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hierarchies :initarg :hierarchies :initform
                         (common-lisp:error ":hierarchies is required") :type
                         (common-lisp:or asset-hierarchies common-lisp:null)
                         :accessor
                         struct-shape-associated-assets-summary-hierarchies
                         :shape "AssetHierarchies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-associated-assets-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-associated-assets-summary-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associated-assets-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associated-assets-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associated-assets-summary
                    'make-associated-assets-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associated-assets-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associated-assets-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchies))
      (common-lisp:list
       (common-lisp:cons "hierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associated-assets-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attribute common-lisp:nil
                       ((default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or default-value common-lisp:null)
                         :accessor struct-shape-attribute-default-value :shape
                         "DefaultValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'attribute 'make-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute))
   common-lisp:nil))
(common-lisp:deftype auth-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-associate-project-assets-errors ()
   '(trivial-types:proper-list asset-error-details))
 (common-lisp:defun make-batch-associate-project-assets-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-error-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-associate-project-assets-request common-lisp:nil
                       ((project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-batch-associate-project-assets-request-project-id
                         :shape "ID" :location "uri" :location-name
                         "projectId")
                        (asset-ids :initarg :asset-ids :initform
                         (common-lisp:error ":assetids is required") :type
                         (common-lisp:or ids common-lisp:null) :accessor
                         struct-shape-batch-associate-project-assets-request-asset-ids
                         :shape "IDs" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-batch-associate-project-assets-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-associate-project-assets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-associate-project-assets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-associate-project-assets-request
                    'make-batch-associate-project-assets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-project-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-project-assets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-ids))
      (common-lisp:list
       (common-lisp:cons "assetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-project-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-associate-project-assets-response common-lisp:nil
                       ((errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-associate-project-assets-errors
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-associate-project-assets-response-errors
                         :shape "BatchAssociateProjectAssetsErrors" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-associate-project-assets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-associate-project-assets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-associate-project-assets-response
                    'make-batch-associate-project-assets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-project-assets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-project-assets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-project-assets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-disassociate-project-assets-errors ()
   '(trivial-types:proper-list asset-error-details))
 (common-lisp:defun make-batch-disassociate-project-assets-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-error-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-disassociate-project-assets-request
                       common-lisp:nil
                       ((project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-batch-disassociate-project-assets-request-project-id
                         :shape "ID" :location "uri" :location-name
                         "projectId")
                        (asset-ids :initarg :asset-ids :initform
                         (common-lisp:error ":assetids is required") :type
                         (common-lisp:or ids common-lisp:null) :accessor
                         struct-shape-batch-disassociate-project-assets-request-asset-ids
                         :shape "IDs" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-batch-disassociate-project-assets-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-disassociate-project-assets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-disassociate-project-assets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-project-assets-request
                    'make-batch-disassociate-project-assets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-project-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-project-assets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-ids))
      (common-lisp:list
       (common-lisp:cons "assetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-project-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-disassociate-project-assets-response
                       common-lisp:nil
                       ((errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          batch-disassociate-project-assets-errors
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-disassociate-project-assets-response-errors
                         :shape "BatchDisassociateProjectAssetsErrors"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-disassociate-project-assets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-disassociate-project-assets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-project-assets-response
                    'make-batch-disassociate-project-assets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-project-assets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-project-assets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-project-assets-response))
   common-lisp:nil))
(common-lisp:deftype batch-entry-completion-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-aggregates-entries ()
   '(trivial-types:proper-list batch-get-asset-property-aggregates-entry))
 (common-lisp:defun make-batch-get-asset-property-aggregates-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-aggregates-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-aggregates-entry
                       common-lisp:nil
                       ((entry-id :initarg :entry-id :initform
                         (common-lisp:error ":entryid is required") :type
                         (common-lisp:or entry-id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-aggregates-entry-entry-id
                         :shape "EntryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-aggregates-entry-asset-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (property-id :initarg :property-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-aggregates-entry-property-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (property-alias :initarg :property-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-property-alias common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-aggregates-entry-property-alias
                         :shape "AssetPropertyAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregate-types :initarg :aggregate-types :initform
                         (common-lisp:error ":aggregatetypes is required")
                         :type
                         (common-lisp:or aggregate-types common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-aggregates-entry-aggregate-types
                         :shape "AggregateTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolution :initarg :resolution :initform
                         (common-lisp:error ":resolution is required") :type
                         (common-lisp:or resolution common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-aggregates-entry-resolution
                         :shape "Resolution" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-date :initarg :start-date :initform
                         (common-lisp:error ":startdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-aggregates-entry-start-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-date :initarg :end-date :initform
                         (common-lisp:error ":enddate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-aggregates-entry-end-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qualities :initarg :qualities :initform
                         common-lisp:nil :type
                         (common-lisp:or qualities common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-aggregates-entry-qualities
                         :shape "Qualities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-ordering :initarg :time-ordering :initform
                         common-lisp:nil :type
                         (common-lisp:or time-ordering common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-aggregates-entry-time-ordering
                         :shape "TimeOrdering" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-aggregates-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-aggregates-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-aggregates-entry
                    'make-batch-get-asset-property-aggregates-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-id))
      (common-lisp:list
       (common-lisp:cons "propertyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-alias))
      (common-lisp:list
       (common-lisp:cons "propertyAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregate-types))
      (common-lisp:list
       (common-lisp:cons "aggregateTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "startDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "endDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qualities))
      (common-lisp:list
       (common-lisp:cons "qualities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-ordering))
      (common-lisp:list
       (common-lisp:cons "timeOrdering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-entry))
   common-lisp:nil))
(common-lisp:deftype batch-get-asset-property-aggregates-error-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-aggregates-error-entries ()
   '(trivial-types:proper-list
     batch-get-asset-property-aggregates-error-entry))
 (common-lisp:defun make-batch-get-asset-property-aggregates-error-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-aggregates-error-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-aggregates-error-entry
                       common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         (common-lisp:error ":errorcode is required") :type
                         (common-lisp:or
                          batch-get-asset-property-aggregates-error-code
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-aggregates-error-entry-error-code
                         :shape "BatchGetAssetPropertyAggregatesErrorCode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         (common-lisp:error ":errormessage is required") :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-aggregates-error-entry-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entry-id :initarg :entry-id :initform
                         (common-lisp:error ":entryid is required") :type
                         (common-lisp:or entry-id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-aggregates-error-entry-entry-id
                         :shape "EntryId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-aggregates-error-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-aggregates-error-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-aggregates-error-entry
                    'make-batch-get-asset-property-aggregates-error-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-error-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-error-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-error-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-aggregates-error-info
                       common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         (common-lisp:error ":errorcode is required") :type
                         (common-lisp:or
                          batch-get-asset-property-aggregates-error-code
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-aggregates-error-info-error-code
                         :shape "BatchGetAssetPropertyAggregatesErrorCode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-timestamp :initarg :error-timestamp :initform
                         (common-lisp:error ":errortimestamp is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-aggregates-error-info-error-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-aggregates-error-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-aggregates-error-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-aggregates-error-info
                    'make-batch-get-asset-property-aggregates-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-timestamp))
      (common-lisp:list
       (common-lisp:cons "errorTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-error-info))
   common-lisp:nil))
(common-lisp:deftype batch-get-asset-property-aggregates-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-aggregates-request
                       common-lisp:nil
                       ((entries :initarg :entries :initform
                         (common-lisp:error ":entries is required") :type
                         (common-lisp:or
                          batch-get-asset-property-aggregates-entries
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-aggregates-request-entries
                         :shape "BatchGetAssetPropertyAggregatesEntries"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-aggregates-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          batch-get-asset-property-aggregates-max-results
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-aggregates-request-max-results
                         :shape "BatchGetAssetPropertyAggregatesMaxResults"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-aggregates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-aggregates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-aggregates-request
                    'make-batch-get-asset-property-aggregates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-aggregates-response
                       common-lisp:nil
                       ((error-entries :initarg :error-entries :initform
                         (common-lisp:error ":errorentries is required") :type
                         (common-lisp:or
                          batch-get-asset-property-aggregates-error-entries
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-aggregates-response-error-entries
                         :shape "BatchGetAssetPropertyAggregatesErrorEntries"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (success-entries :initarg :success-entries :initform
                         (common-lisp:error ":successentries is required")
                         :type
                         (common-lisp:or
                          batch-get-asset-property-aggregates-success-entries
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-aggregates-response-success-entries
                         :shape "BatchGetAssetPropertyAggregatesSuccessEntries"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skipped-entries :initarg :skipped-entries :initform
                         (common-lisp:error ":skippedentries is required")
                         :type
                         (common-lisp:or
                          batch-get-asset-property-aggregates-skipped-entries
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-aggregates-response-skipped-entries
                         :shape "BatchGetAssetPropertyAggregatesSkippedEntries"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-aggregates-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-aggregates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-aggregates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-aggregates-response
                    'make-batch-get-asset-property-aggregates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-entries))
      (common-lisp:list
       (common-lisp:cons "errorEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-entries))
      (common-lisp:list
       (common-lisp:cons "successEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skipped-entries))
      (common-lisp:list
       (common-lisp:cons "skippedEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-aggregates-skipped-entries ()
   '(trivial-types:proper-list
     batch-get-asset-property-aggregates-skipped-entry))
 (common-lisp:defun make-batch-get-asset-property-aggregates-skipped-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-aggregates-skipped-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-aggregates-skipped-entry
                       common-lisp:nil
                       ((entry-id :initarg :entry-id :initform
                         (common-lisp:error ":entryid is required") :type
                         (common-lisp:or entry-id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-aggregates-skipped-entry-entry-id
                         :shape "EntryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completion-status :initarg :completion-status
                         :initform
                         (common-lisp:error ":completionstatus is required")
                         :type
                         (common-lisp:or batch-entry-completion-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-aggregates-skipped-entry-completion-status
                         :shape "BatchEntryCompletionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-info :initarg :error-info :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          batch-get-asset-property-aggregates-error-info
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-aggregates-skipped-entry-error-info
                         :shape "BatchGetAssetPropertyAggregatesErrorInfo"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-aggregates-skipped-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-aggregates-skipped-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-aggregates-skipped-entry
                    'make-batch-get-asset-property-aggregates-skipped-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-skipped-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-skipped-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-status))
      (common-lisp:list
       (common-lisp:cons "completionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-skipped-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-aggregates-success-entries ()
   '(trivial-types:proper-list
     batch-get-asset-property-aggregates-success-entry))
 (common-lisp:defun make-batch-get-asset-property-aggregates-success-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-aggregates-success-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-aggregates-success-entry
                       common-lisp:nil
                       ((entry-id :initarg :entry-id :initform
                         (common-lisp:error ":entryid is required") :type
                         (common-lisp:or entry-id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-aggregates-success-entry-entry-id
                         :shape "EntryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregated-values :initarg :aggregated-values
                         :initform
                         (common-lisp:error ":aggregatedvalues is required")
                         :type
                         (common-lisp:or aggregated-values common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-aggregates-success-entry-aggregated-values
                         :shape "AggregatedValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-aggregates-success-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-aggregates-success-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-aggregates-success-entry
                    'make-batch-get-asset-property-aggregates-success-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-success-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-success-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregated-values))
      (common-lisp:list
       (common-lisp:cons "aggregatedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-success-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-value-entries ()
   '(trivial-types:proper-list batch-get-asset-property-value-entry))
 (common-lisp:defun make-batch-get-asset-property-value-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-value-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-value-entry common-lisp:nil
                       ((entry-id :initarg :entry-id :initform
                         (common-lisp:error ":entryid is required") :type
                         (common-lisp:or entry-id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-entry-entry-id
                         :shape "EntryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-entry-asset-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (property-id :initarg :property-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-entry-property-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (property-alias :initarg :property-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-property-alias common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-entry-property-alias
                         :shape "AssetPropertyAlias" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-value-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-value-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-entry
                    'make-batch-get-asset-property-value-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-id))
      (common-lisp:list
       (common-lisp:cons "propertyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-alias))
      (common-lisp:list
       (common-lisp:cons "propertyAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-entry))
   common-lisp:nil))
(common-lisp:deftype batch-get-asset-property-value-error-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-value-error-entries ()
   '(trivial-types:proper-list batch-get-asset-property-value-error-entry))
 (common-lisp:defun make-batch-get-asset-property-value-error-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-value-error-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-value-error-entry
                       common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         (common-lisp:error ":errorcode is required") :type
                         (common-lisp:or
                          batch-get-asset-property-value-error-code
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-error-entry-error-code
                         :shape "BatchGetAssetPropertyValueErrorCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         (common-lisp:error ":errormessage is required") :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-error-entry-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entry-id :initarg :entry-id :initform
                         (common-lisp:error ":entryid is required") :type
                         (common-lisp:or entry-id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-error-entry-entry-id
                         :shape "EntryId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-value-error-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-value-error-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-error-entry
                    'make-batch-get-asset-property-value-error-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-error-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-error-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-error-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-value-error-info
                       common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         (common-lisp:error ":errorcode is required") :type
                         (common-lisp:or
                          batch-get-asset-property-value-error-code
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-error-info-error-code
                         :shape "BatchGetAssetPropertyValueErrorCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-timestamp :initarg :error-timestamp :initform
                         (common-lisp:error ":errortimestamp is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-error-info-error-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-value-error-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-value-error-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-error-info
                    'make-batch-get-asset-property-value-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-timestamp))
      (common-lisp:list
       (common-lisp:cons "errorTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-error-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-value-history-entries ()
   '(trivial-types:proper-list batch-get-asset-property-value-history-entry))
 (common-lisp:defun make-batch-get-asset-property-value-history-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-value-history-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-value-history-entry
                       common-lisp:nil
                       ((entry-id :initarg :entry-id :initform
                         (common-lisp:error ":entryid is required") :type
                         (common-lisp:or entry-id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-history-entry-entry-id
                         :shape "EntryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-history-entry-asset-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (property-id :initarg :property-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-history-entry-property-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (property-alias :initarg :property-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-property-alias common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-history-entry-property-alias
                         :shape "AssetPropertyAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-date :initarg :start-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-history-entry-start-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-date :initarg :end-date :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-history-entry-end-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qualities :initarg :qualities :initform
                         common-lisp:nil :type
                         (common-lisp:or qualities common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-history-entry-qualities
                         :shape "Qualities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-ordering :initarg :time-ordering :initform
                         common-lisp:nil :type
                         (common-lisp:or time-ordering common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-history-entry-time-ordering
                         :shape "TimeOrdering" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-value-history-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-value-history-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-history-entry
                    'make-batch-get-asset-property-value-history-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-id))
      (common-lisp:list
       (common-lisp:cons "propertyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-alias))
      (common-lisp:list
       (common-lisp:cons "propertyAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "startDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "endDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qualities))
      (common-lisp:list
       (common-lisp:cons "qualities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-ordering))
      (common-lisp:list
       (common-lisp:cons "timeOrdering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-entry))
   common-lisp:nil))
(common-lisp:deftype batch-get-asset-property-value-history-error-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-value-history-error-entries ()
   '(trivial-types:proper-list
     batch-get-asset-property-value-history-error-entry))
 (common-lisp:defun make-batch-get-asset-property-value-history-error-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-value-history-error-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-value-history-error-entry
                       common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         (common-lisp:error ":errorcode is required") :type
                         (common-lisp:or
                          batch-get-asset-property-value-history-error-code
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-history-error-entry-error-code
                         :shape "BatchGetAssetPropertyValueHistoryErrorCode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         (common-lisp:error ":errormessage is required") :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-history-error-entry-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entry-id :initarg :entry-id :initform
                         (common-lisp:error ":entryid is required") :type
                         (common-lisp:or entry-id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-history-error-entry-entry-id
                         :shape "EntryId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-value-history-error-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-value-history-error-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-history-error-entry
                    'make-batch-get-asset-property-value-history-error-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-error-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-error-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-error-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-value-history-error-info
                       common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         (common-lisp:error ":errorcode is required") :type
                         (common-lisp:or
                          batch-get-asset-property-value-history-error-code
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-history-error-info-error-code
                         :shape "BatchGetAssetPropertyValueHistoryErrorCode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-timestamp :initarg :error-timestamp :initform
                         (common-lisp:error ":errortimestamp is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-history-error-info-error-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-value-history-error-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-value-history-error-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-history-error-info
                    'make-batch-get-asset-property-value-history-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-timestamp))
      (common-lisp:list
       (common-lisp:cons "errorTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-error-info))
   common-lisp:nil))
(common-lisp:deftype batch-get-asset-property-value-history-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-value-history-request
                       common-lisp:nil
                       ((entries :initarg :entries :initform
                         (common-lisp:error ":entries is required") :type
                         (common-lisp:or
                          batch-get-asset-property-value-history-entries
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-history-request-entries
                         :shape "BatchGetAssetPropertyValueHistoryEntries"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-history-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          batch-get-asset-property-value-history-max-results
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-history-request-max-results
                         :shape "BatchGetAssetPropertyValueHistoryMaxResults"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-value-history-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-value-history-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-history-request
                    'make-batch-get-asset-property-value-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-value-history-response
                       common-lisp:nil
                       ((error-entries :initarg :error-entries :initform
                         (common-lisp:error ":errorentries is required") :type
                         (common-lisp:or
                          batch-get-asset-property-value-history-error-entries
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-history-response-error-entries
                         :shape "BatchGetAssetPropertyValueHistoryErrorEntries"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (success-entries :initarg :success-entries :initform
                         (common-lisp:error ":successentries is required")
                         :type
                         (common-lisp:or
                          batch-get-asset-property-value-history-success-entries
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-history-response-success-entries
                         :shape
                         "BatchGetAssetPropertyValueHistorySuccessEntries"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skipped-entries :initarg :skipped-entries :initform
                         (common-lisp:error ":skippedentries is required")
                         :type
                         (common-lisp:or
                          batch-get-asset-property-value-history-skipped-entries
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-history-response-skipped-entries
                         :shape
                         "BatchGetAssetPropertyValueHistorySkippedEntries"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-history-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-value-history-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-value-history-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-history-response
                    'make-batch-get-asset-property-value-history-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-entries))
      (common-lisp:list
       (common-lisp:cons "errorEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-entries))
      (common-lisp:list
       (common-lisp:cons "successEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skipped-entries))
      (common-lisp:list
       (common-lisp:cons "skippedEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-value-history-skipped-entries ()
   '(trivial-types:proper-list
     batch-get-asset-property-value-history-skipped-entry))
 (common-lisp:defun make-batch-get-asset-property-value-history-skipped-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-value-history-skipped-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-value-history-skipped-entry
                       common-lisp:nil
                       ((entry-id :initarg :entry-id :initform
                         (common-lisp:error ":entryid is required") :type
                         (common-lisp:or entry-id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-history-skipped-entry-entry-id
                         :shape "EntryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completion-status :initarg :completion-status
                         :initform
                         (common-lisp:error ":completionstatus is required")
                         :type
                         (common-lisp:or batch-entry-completion-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-history-skipped-entry-completion-status
                         :shape "BatchEntryCompletionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-info :initarg :error-info :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          batch-get-asset-property-value-history-error-info
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-history-skipped-entry-error-info
                         :shape "BatchGetAssetPropertyValueHistoryErrorInfo"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-value-history-skipped-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-value-history-skipped-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-history-skipped-entry
                    'make-batch-get-asset-property-value-history-skipped-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-skipped-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-skipped-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-status))
      (common-lisp:list
       (common-lisp:cons "completionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-skipped-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-value-history-success-entries ()
   '(trivial-types:proper-list
     batch-get-asset-property-value-history-success-entry))
 (common-lisp:defun make-batch-get-asset-property-value-history-success-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-value-history-success-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-value-history-success-entry
                       common-lisp:nil
                       ((entry-id :initarg :entry-id :initform
                         (common-lisp:error ":entryid is required") :type
                         (common-lisp:or entry-id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-history-success-entry-entry-id
                         :shape "EntryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-property-value-history :initarg
                         :asset-property-value-history :initform
                         (common-lisp:error
                          ":assetpropertyvaluehistory is required")
                         :type
                         (common-lisp:or asset-property-value-history
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-history-success-entry-asset-property-value-history
                         :shape "AssetPropertyValueHistory" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-value-history-success-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-value-history-success-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-history-success-entry
                    'make-batch-get-asset-property-value-history-success-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-success-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-success-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-property-value-history))
      (common-lisp:list
       (common-lisp:cons "assetPropertyValueHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-success-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-value-request common-lisp:nil
                       ((entries :initarg :entries :initform
                         (common-lisp:error ":entries is required") :type
                         (common-lisp:or batch-get-asset-property-value-entries
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-request-entries
                         :shape "BatchGetAssetPropertyValueEntries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-value-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-value-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-request
                    'make-batch-get-asset-property-value-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-value-response common-lisp:nil
                       ((error-entries :initarg :error-entries :initform
                         (common-lisp:error ":errorentries is required") :type
                         (common-lisp:or
                          batch-get-asset-property-value-error-entries
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-response-error-entries
                         :shape "BatchGetAssetPropertyValueErrorEntries"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (success-entries :initarg :success-entries :initform
                         (common-lisp:error ":successentries is required")
                         :type
                         (common-lisp:or
                          batch-get-asset-property-value-success-entries
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-response-success-entries
                         :shape "BatchGetAssetPropertyValueSuccessEntries"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skipped-entries :initarg :skipped-entries :initform
                         (common-lisp:error ":skippedentries is required")
                         :type
                         (common-lisp:or
                          batch-get-asset-property-value-skipped-entries
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-response-skipped-entries
                         :shape "BatchGetAssetPropertyValueSkippedEntries"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-value-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-value-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-response
                    'make-batch-get-asset-property-value-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-entries))
      (common-lisp:list
       (common-lisp:cons "errorEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-entries))
      (common-lisp:list
       (common-lisp:cons "successEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skipped-entries))
      (common-lisp:list
       (common-lisp:cons "skippedEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-value-skipped-entries ()
   '(trivial-types:proper-list batch-get-asset-property-value-skipped-entry))
 (common-lisp:defun make-batch-get-asset-property-value-skipped-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-value-skipped-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-value-skipped-entry
                       common-lisp:nil
                       ((entry-id :initarg :entry-id :initform
                         (common-lisp:error ":entryid is required") :type
                         (common-lisp:or entry-id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-skipped-entry-entry-id
                         :shape "EntryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completion-status :initarg :completion-status
                         :initform
                         (common-lisp:error ":completionstatus is required")
                         :type
                         (common-lisp:or batch-entry-completion-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-skipped-entry-completion-status
                         :shape "BatchEntryCompletionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-info :initarg :error-info :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          batch-get-asset-property-value-error-info
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-skipped-entry-error-info
                         :shape "BatchGetAssetPropertyValueErrorInfo" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-value-skipped-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-value-skipped-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-skipped-entry
                    'make-batch-get-asset-property-value-skipped-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-skipped-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-skipped-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-status))
      (common-lisp:list
       (common-lisp:cons "completionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-skipped-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-value-success-entries ()
   '(trivial-types:proper-list batch-get-asset-property-value-success-entry))
 (common-lisp:defun make-batch-get-asset-property-value-success-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-value-success-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-asset-property-value-success-entry
                       common-lisp:nil
                       ((entry-id :initarg :entry-id :initform
                         (common-lisp:error ":entryid is required") :type
                         (common-lisp:or entry-id common-lisp:null) :accessor
                         struct-shape-batch-get-asset-property-value-success-entry-entry-id
                         :shape "EntryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-property-value :initarg :asset-property-value
                         :initform common-lisp:nil :type
                         (common-lisp:or asset-property-value common-lisp:null)
                         :accessor
                         struct-shape-batch-get-asset-property-value-success-entry-asset-property-value
                         :shape "AssetPropertyValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-asset-property-value-success-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-asset-property-value-success-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-success-entry
                    'make-batch-get-asset-property-value-success-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-success-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-success-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-property-value))
      (common-lisp:list
       (common-lisp:cons "assetPropertyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-success-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-put-asset-property-error common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         (common-lisp:error ":errorcode is required") :type
                         (common-lisp:or
                          batch-put-asset-property-value-error-code
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-put-asset-property-error-error-code
                         :shape "BatchPutAssetPropertyValueErrorCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         (common-lisp:error ":errormessage is required") :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-batch-put-asset-property-error-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamps :initarg :timestamps :initform
                         (common-lisp:error ":timestamps is required") :type
                         (common-lisp:or timestamps common-lisp:null) :accessor
                         struct-shape-batch-put-asset-property-error-timestamps
                         :shape "Timestamps" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-put-asset-property-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-put-asset-property-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-put-asset-property-error
                    'make-batch-put-asset-property-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamps))
      (common-lisp:list
       (common-lisp:cons "timestamps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-put-asset-property-error-entries ()
   '(trivial-types:proper-list batch-put-asset-property-error-entry))
 (common-lisp:defun make-batch-put-asset-property-error-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-put-asset-property-error-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-put-asset-property-error-entry common-lisp:nil
                       ((entry-id :initarg :entry-id :initform
                         (common-lisp:error ":entryid is required") :type
                         (common-lisp:or entry-id common-lisp:null) :accessor
                         struct-shape-batch-put-asset-property-error-entry-entry-id
                         :shape "EntryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (errors :initarg :errors :initform
                         (common-lisp:error ":errors is required") :type
                         (common-lisp:or batch-put-asset-property-errors
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-put-asset-property-error-entry-errors
                         :shape "BatchPutAssetPropertyErrors" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-put-asset-property-error-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-put-asset-property-error-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-put-asset-property-error-entry
                    'make-batch-put-asset-property-error-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-error-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-error-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-error-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-put-asset-property-errors ()
   '(trivial-types:proper-list batch-put-asset-property-error))
 (common-lisp:defun make-batch-put-asset-property-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-put-asset-property-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype batch-put-asset-property-value-error-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-put-asset-property-value-request common-lisp:nil
                       ((entries :initarg :entries :initform
                         (common-lisp:error ":entries is required") :type
                         (common-lisp:or put-asset-property-value-entries
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-put-asset-property-value-request-entries
                         :shape "PutAssetPropertyValueEntries" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-put-asset-property-value-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-put-asset-property-value-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-put-asset-property-value-request
                    'make-batch-put-asset-property-value-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-value-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-value-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-value-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-put-asset-property-value-response common-lisp:nil
                       ((error-entries :initarg :error-entries :initform
                         (common-lisp:error ":errorentries is required") :type
                         (common-lisp:or batch-put-asset-property-error-entries
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-put-asset-property-value-response-error-entries
                         :shape "BatchPutAssetPropertyErrorEntries" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-put-asset-property-value-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-put-asset-property-value-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-put-asset-property-value-response
                    'make-batch-put-asset-property-value-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-value-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-value-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-entries))
      (common-lisp:list
       (common-lisp:cons "errorEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-value-response))
   common-lisp:nil))
(common-lisp:deftype bucket () 'common-lisp:string)
(common-lisp:deftype capability-configuration () 'common-lisp:string)
(common-lisp:deftype capability-namespace () 'common-lisp:string)
(common-lisp:deftype capability-sync-status () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass column-info common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-column-info-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or column-type common-lisp:null)
                         :accessor struct-shape-column-info-type :shape
                         "ColumnType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'column-info 'make-column-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-info))
   common-lisp:nil))
(common-lisp:deftype column-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype column-names () '(trivial-types:proper-list column-name))
 (common-lisp:defun make-column-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass column-type common-lisp:nil
                       ((scalar-type :initarg :scalar-type :initform
                         common-lisp:nil :type
                         (common-lisp:or scalar-type common-lisp:null)
                         :accessor struct-shape-column-type-scalar-type :shape
                         "ScalarType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'column-type 'make-column-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalar-type))
      (common-lisp:list
       (common-lisp:cons "scalarType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype columns-list () '(trivial-types:proper-list column-info))
 (common-lisp:defun make-columns-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass composite-model-property common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-composite-model-property-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-composite-model-property-type :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-property :initarg :asset-property :initform
                         (common-lisp:error ":assetproperty is required") :type
                         (common-lisp:or property common-lisp:null) :accessor
                         struct-shape-composite-model-property-asset-property
                         :shape "Property" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-composite-model-property-id :shape "ID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-composite-model-property-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-composite-model-property
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'composite-model-property
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'composite-model-property 'make-composite-model-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          composite-model-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          composite-model-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-property))
      (common-lisp:list
       (common-lisp:cons "assetProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          composite-model-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass composition-details common-lisp:nil
                       ((composition-relationship :initarg
                         :composition-relationship :initform common-lisp:nil
                         :type
                         (common-lisp:or composition-relationship
                                         common-lisp:null)
                         :accessor
                         struct-shape-composition-details-composition-relationship
                         :shape "CompositionRelationship" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-composition-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'composition-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'composition-details 'make-composition-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input composition-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input composition-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composition-relationship))
      (common-lisp:list
       (common-lisp:cons "compositionRelationship"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input composition-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype composition-relationship ()
   '(trivial-types:proper-list composition-relationship-item))
 (common-lisp:defun make-composition-relationship
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            composition-relationship-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass composition-relationship-item common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-composition-relationship-item-id :shape
                         "ID" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-composition-relationship-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'composition-relationship-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'composition-relationship-item
                    'make-composition-relationship-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          composition-relationship-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          composition-relationship-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          composition-relationship-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype composition-relationship-summaries ()
   '(trivial-types:proper-list composition-relationship-summary))
 (common-lisp:defun make-composition-relationship-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            composition-relationship-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass composition-relationship-summary common-lisp:nil
                       ((asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-composition-relationship-summary-asset-model-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-composite-model-id :initarg
                         :asset-model-composite-model-id :initform
                         (common-lisp:error
                          ":assetmodelcompositemodelid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-composition-relationship-summary-asset-model-composite-model-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-composite-model-type :initarg
                         :asset-model-composite-model-type :initform
                         (common-lisp:error
                          ":assetmodelcompositemodeltype is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-composition-relationship-summary-asset-model-composite-model-type
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-composition-relationship-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'composition-relationship-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'composition-relationship-summary
                    'make-composition-relationship-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          composition-relationship-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          composition-relationship-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-type))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          composition-relationship-summary))
   common-lisp:nil))
(common-lisp:deftype compute-location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configuration-error-details common-lisp:nil
                       ((code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-configuration-error-details-code :shape
                         "ErrorCode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-configuration-error-details-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configuration-error-details
                    'make-configuration-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-error-details))
   common-lisp:nil))
(common-lisp:deftype configuration-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configuration-status common-lisp:nil
                       ((state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or configuration-state common-lisp:null)
                         :accessor struct-shape-configuration-status-state
                         :shape "ConfigurationState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or configuration-error-details
                                         common-lisp:null)
                         :accessor struct-shape-configuration-status-error
                         :shape "ConfigurationErrorDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configuration-status 'make-configuration-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflicting-operation-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflicting-operation-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflicting-operation-exception-resource-id)
      (resource-arn :initarg :resource-arn :initform common-lisp:nil :reader
       conflicting-operation-exception-resource-arn)))
 (common-lisp:export
  (common-lisp:list 'conflicting-operation-exception
                    'conflicting-operation-exception-message
                    'conflicting-operation-exception-resource-id
                    'conflicting-operation-exception-resource-arn)))
(common-lisp:deftype core-device-thing-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-access-policy-request common-lisp:nil
                       ((access-policy-identity :initarg
                         :access-policy-identity :initform
                         (common-lisp:error
                          ":accesspolicyidentity is required")
                         :type (common-lisp:or identity common-lisp:null)
                         :accessor
                         struct-shape-create-access-policy-request-access-policy-identity
                         :shape "Identity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-policy-resource :initarg
                         :access-policy-resource :initform
                         (common-lisp:error
                          ":accesspolicyresource is required")
                         :type (common-lisp:or resource common-lisp:null)
                         :accessor
                         struct-shape-create-access-policy-request-access-policy-resource
                         :shape "Resource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-policy-permission :initarg
                         :access-policy-permission :initform
                         (common-lisp:error
                          ":accesspolicypermission is required")
                         :type (common-lisp:or permission common-lisp:null)
                         :accessor
                         struct-shape-create-access-policy-request-access-policy-permission
                         :shape "Permission" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-access-policy-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-access-policy-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-access-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-access-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-access-policy-request
                    'make-create-access-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-identity))
      (common-lisp:list
       (common-lisp:cons "accessPolicyIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-resource))
      (common-lisp:list
       (common-lisp:cons "accessPolicyResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-permission))
      (common-lisp:list
       (common-lisp:cons "accessPolicyPermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-access-policy-response common-lisp:nil
                       ((access-policy-id :initarg :access-policy-id :initform
                         (common-lisp:error ":accesspolicyid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-access-policy-response-access-policy-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (access-policy-arn :initarg :access-policy-arn
                         :initform
                         (common-lisp:error ":accesspolicyarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-access-policy-response-access-policy-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-access-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-access-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-access-policy-response
                    'make-create-access-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policy-id))
      (common-lisp:list
       (common-lisp:cons "accessPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policy-arn))
      (common-lisp:list
       (common-lisp:cons "accessPolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-asset-model-composite-model-request
                       common-lisp:nil
                       ((asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-create-asset-model-composite-model-request-asset-model-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetModelId")
                        (parent-asset-model-composite-model-id :initarg
                         :parent-asset-model-composite-model-id :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-create-asset-model-composite-model-request-parent-asset-model-composite-model-id
                         :shape "CustomID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-composite-model-external-id :initarg
                         :asset-model-composite-model-external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-create-asset-model-composite-model-request-asset-model-composite-model-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-composite-model-id :initarg
                         :asset-model-composite-model-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-asset-model-composite-model-request-asset-model-composite-model-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-composite-model-description :initarg
                         :asset-model-composite-model-description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-asset-model-composite-model-request-asset-model-composite-model-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-composite-model-name :initarg
                         :asset-model-composite-model-name :initform
                         (common-lisp:error
                          ":assetmodelcompositemodelname is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-asset-model-composite-model-request-asset-model-composite-model-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-composite-model-type :initarg
                         :asset-model-composite-model-type :initform
                         (common-lisp:error
                          ":assetmodelcompositemodeltype is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-asset-model-composite-model-request-asset-model-composite-model-type
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-asset-model-composite-model-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (composed-asset-model-id :initarg
                         :composed-asset-model-id :initform common-lisp:nil
                         :type (common-lisp:or custom-id common-lisp:null)
                         :accessor
                         struct-shape-create-asset-model-composite-model-request-composed-asset-model-id
                         :shape "CustomID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-composite-model-properties :initarg
                         :asset-model-composite-model-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-model-property-definitions
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-asset-model-composite-model-request-asset-model-composite-model-properties
                         :shape "AssetModelPropertyDefinitions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-asset-model-composite-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-asset-model-composite-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-asset-model-composite-model-request
                    'make-create-asset-model-composite-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-composite-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-composite-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-asset-model-composite-model-id))
      (common-lisp:list
       (common-lisp:cons "parentAssetModelCompositeModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-external-id))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-description))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-name))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-type))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composed-asset-model-id))
      (common-lisp:list
       (common-lisp:cons "composedAssetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-properties))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-composite-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-asset-model-composite-model-response
                       common-lisp:nil
                       ((asset-model-composite-model-id :initarg
                         :asset-model-composite-model-id :initform
                         (common-lisp:error
                          ":assetmodelcompositemodelid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-asset-model-composite-model-response-asset-model-composite-model-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-composite-model-path :initarg
                         :asset-model-composite-model-path :initform
                         (common-lisp:error
                          ":assetmodelcompositemodelpath is required")
                         :type
                         (common-lisp:or asset-model-composite-model-path
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-asset-model-composite-model-response-asset-model-composite-model-path
                         :shape "AssetModelCompositeModelPath" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-model-status :initarg :asset-model-status
                         :initform
                         (common-lisp:error ":assetmodelstatus is required")
                         :type
                         (common-lisp:or asset-model-status common-lisp:null)
                         :accessor
                         struct-shape-create-asset-model-composite-model-response-asset-model-status
                         :shape "AssetModelStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-asset-model-composite-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-asset-model-composite-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-asset-model-composite-model-response
                    'make-create-asset-model-composite-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-composite-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-composite-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-path))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-status))
      (common-lisp:list
       (common-lisp:cons "assetModelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-composite-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-asset-model-request common-lisp:nil
                       ((asset-model-name :initarg :asset-model-name :initform
                         (common-lisp:error ":assetmodelname is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-asset-model-request-asset-model-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-description :initarg
                         :asset-model-description :initform common-lisp:nil
                         :type (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-asset-model-request-asset-model-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-properties :initarg
                         :asset-model-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or asset-model-property-definitions
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-asset-model-request-asset-model-properties
                         :shape "AssetModelPropertyDefinitions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-model-hierarchies :initarg
                         :asset-model-hierarchies :initform common-lisp:nil
                         :type
                         (common-lisp:or asset-model-hierarchy-definitions
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-asset-model-request-asset-model-hierarchies
                         :shape "AssetModelHierarchyDefinitions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-model-composite-models :initarg
                         :asset-model-composite-models :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          asset-model-composite-model-definitions
                          common-lisp:null)
                         :accessor
                         struct-shape-create-asset-model-request-asset-model-composite-models
                         :shape "AssetModelCompositeModelDefinitions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-asset-model-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-asset-model-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-id :initarg :asset-model-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-asset-model-request-asset-model-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-external-id :initarg
                         :asset-model-external-id :initform common-lisp:nil
                         :type (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-create-asset-model-request-asset-model-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-type :initarg :asset-model-type :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-model-type common-lisp:null)
                         :accessor
                         struct-shape-create-asset-model-request-asset-model-type
                         :shape "AssetModelType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-asset-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-asset-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-asset-model-request
                    'make-create-asset-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-name))
      (common-lisp:list
       (common-lisp:cons "assetModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-description))
      (common-lisp:list
       (common-lisp:cons "assetModelDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-properties))
      (common-lisp:list
       (common-lisp:cons "assetModelProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-hierarchies))
      (common-lisp:list
       (common-lisp:cons "assetModelHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-models))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-external-id))
      (common-lisp:list
       (common-lisp:cons "assetModelExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-type))
      (common-lisp:list
       (common-lisp:cons "assetModelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-asset-model-response common-lisp:nil
                       ((asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-asset-model-response-asset-model-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-arn :initarg :asset-model-arn :initform
                         (common-lisp:error ":assetmodelarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-asset-model-response-asset-model-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-status :initarg :asset-model-status
                         :initform
                         (common-lisp:error ":assetmodelstatus is required")
                         :type
                         (common-lisp:or asset-model-status common-lisp:null)
                         :accessor
                         struct-shape-create-asset-model-response-asset-model-status
                         :shape "AssetModelStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-asset-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-asset-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-asset-model-response
                    'make-create-asset-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-arn))
      (common-lisp:list
       (common-lisp:cons "assetModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-status))
      (common-lisp:list
       (common-lisp:cons "assetModelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-asset-request common-lisp:nil
                       ((asset-name :initarg :asset-name :initform
                         (common-lisp:error ":assetname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-asset-request-asset-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-create-asset-request-asset-model-id
                         :shape "CustomID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-asset-request-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-asset-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-description :initarg :asset-description
                         :initform common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-asset-request-asset-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-asset-request-asset-id :shape "ID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-external-id :initarg :asset-external-id
                         :initform common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-create-asset-request-asset-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-asset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-asset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-asset-request 'make-create-asset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-asset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-name))
      (common-lisp:list
       (common-lisp:cons "assetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-description))
      (common-lisp:list
       (common-lisp:cons "assetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-external-id))
      (common-lisp:list
       (common-lisp:cons "assetExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-asset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-asset-response common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-asset-response-asset-id :shape
                         "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-arn :initarg :asset-arn :initform
                         (common-lisp:error ":assetarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-asset-response-asset-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-status :initarg :asset-status :initform
                         (common-lisp:error ":assetstatus is required") :type
                         (common-lisp:or asset-status common-lisp:null)
                         :accessor
                         struct-shape-create-asset-response-asset-status :shape
                         "AssetStatus" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-asset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-asset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-asset-response 'make-create-asset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-arn))
      (common-lisp:list
       (common-lisp:cons "assetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-status))
      (common-lisp:list
       (common-lisp:cons "assetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bulk-import-job-request common-lisp:nil
                       ((job-name :initarg :job-name :initform
                         (common-lisp:error ":jobname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-bulk-import-job-request-job-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-role-arn :initarg :job-role-arn :initform
                         (common-lisp:error ":jobrolearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-bulk-import-job-request-job-role-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (files :initarg :files :initform
                         (common-lisp:error ":files is required") :type
                         (common-lisp:or files common-lisp:null) :accessor
                         struct-shape-create-bulk-import-job-request-files
                         :shape "Files" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-report-location :initarg :error-report-location
                         :initform
                         (common-lisp:error ":errorreportlocation is required")
                         :type
                         (common-lisp:or error-report-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bulk-import-job-request-error-report-location
                         :shape "ErrorReportLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-configuration :initarg :job-configuration
                         :initform
                         (common-lisp:error ":jobconfiguration is required")
                         :type
                         (common-lisp:or job-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-bulk-import-job-request-job-configuration
                         :shape "JobConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (adaptive-ingestion :initarg :adaptive-ingestion
                         :initform common-lisp:nil :type
                         (common-lisp:or adaptive-ingestion common-lisp:null)
                         :accessor
                         struct-shape-create-bulk-import-job-request-adaptive-ingestion
                         :shape "AdaptiveIngestion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-files-after-import :initarg
                         :delete-files-after-import :initform common-lisp:nil
                         :type
                         (common-lisp:or delete-files-after-import
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bulk-import-job-request-delete-files-after-import
                         :shape "DeleteFilesAfterImport" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bulk-import-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-bulk-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bulk-import-job-request
                    'make-create-bulk-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bulk-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bulk-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-role-arn))
      (common-lisp:list
       (common-lisp:cons "jobRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files))
      (common-lisp:list
       (common-lisp:cons "files"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-report-location))
      (common-lisp:list
       (common-lisp:cons "errorReportLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-configuration))
      (common-lisp:list
       (common-lisp:cons "jobConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adaptive-ingestion))
      (common-lisp:list
       (common-lisp:cons "adaptiveIngestion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-files-after-import))
      (common-lisp:list
       (common-lisp:cons "deleteFilesAfterImport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bulk-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bulk-import-job-response common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-bulk-import-job-response-job-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-name :initarg :job-name :initform
                         (common-lisp:error ":jobname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-bulk-import-job-response-job-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-status :initarg :job-status :initform
                         (common-lisp:error ":jobstatus is required") :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         struct-shape-create-bulk-import-job-response-job-status
                         :shape "JobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bulk-import-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-bulk-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bulk-import-job-response
                    'make-create-bulk-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bulk-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bulk-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bulk-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dashboard-request common-lisp:nil
                       ((project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-dashboard-request-project-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dashboard-name :initarg :dashboard-name :initform
                         (common-lisp:error ":dashboardname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-dashboard-request-dashboard-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dashboard-description :initarg :dashboard-description
                         :initform common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-dashboard-request-dashboard-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dashboard-definition :initarg :dashboard-definition
                         :initform
                         (common-lisp:error ":dashboarddefinition is required")
                         :type
                         (common-lisp:or dashboard-definition common-lisp:null)
                         :accessor
                         struct-shape-create-dashboard-request-dashboard-definition
                         :shape "DashboardDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-dashboard-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-dashboard-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dashboard-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dashboard-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dashboard-request 'make-create-dashboard-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-name))
      (common-lisp:list
       (common-lisp:cons "dashboardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-description))
      (common-lisp:list
       (common-lisp:cons "dashboardDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-definition))
      (common-lisp:list
       (common-lisp:cons "dashboardDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dashboard-response common-lisp:nil
                       ((dashboard-id :initarg :dashboard-id :initform
                         (common-lisp:error ":dashboardid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-dashboard-response-dashboard-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dashboard-arn :initarg :dashboard-arn :initform
                         (common-lisp:error ":dashboardarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-dashboard-response-dashboard-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dashboard-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dashboard-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dashboard-response
                    'make-create-dashboard-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "dashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-arn))
      (common-lisp:list
       (common-lisp:cons "dashboardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-gateway-request common-lisp:nil
                       ((gateway-name :initarg :gateway-name :initform
                         (common-lisp:error ":gatewayname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-gateway-request-gateway-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (gateway-platform :initarg :gateway-platform :initform
                         (common-lisp:error ":gatewayplatform is required")
                         :type
                         (common-lisp:or gateway-platform common-lisp:null)
                         :accessor
                         struct-shape-create-gateway-request-gateway-platform
                         :shape "GatewayPlatform" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-gateway-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-gateway-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-gateway-request 'make-create-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-name))
      (common-lisp:list
       (common-lisp:cons "gatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-platform))
      (common-lisp:list
       (common-lisp:cons "gatewayPlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-gateway-response common-lisp:nil
                       ((gateway-id :initarg :gateway-id :initform
                         (common-lisp:error ":gatewayid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-gateway-response-gateway-id :shape
                         "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (gateway-arn :initarg :gateway-arn :initform
                         (common-lisp:error ":gatewayarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-gateway-response-gateway-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-gateway-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-gateway-response 'make-create-gateway-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "gatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-arn))
      (common-lisp:list
       (common-lisp:cons "gatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-portal-request common-lisp:nil
                       ((portal-name :initarg :portal-name :initform
                         (common-lisp:error ":portalname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-portal-request-portal-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-description :initarg :portal-description
                         :initform common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-portal-request-portal-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (portal-contact-email :initarg :portal-contact-email
                         :initform
                         (common-lisp:error ":portalcontactemail is required")
                         :type (common-lisp:or email common-lisp:null)
                         :accessor
                         struct-shape-create-portal-request-portal-contact-email
                         :shape "Email" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-portal-request-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-logo-image-file :initarg
                         :portal-logo-image-file :initform common-lisp:nil
                         :type (common-lisp:or image-file common-lisp:null)
                         :accessor
                         struct-shape-create-portal-request-portal-logo-image-file
                         :shape "ImageFile" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-portal-request-role-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-portal-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-auth-mode :initarg :portal-auth-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-mode common-lisp:null) :accessor
                         struct-shape-create-portal-request-portal-auth-mode
                         :shape "AuthMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-sender-email :initarg
                         :notification-sender-email :initform common-lisp:nil
                         :type (common-lisp:or email common-lisp:null)
                         :accessor
                         struct-shape-create-portal-request-notification-sender-email
                         :shape "Email" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alarms :initarg :alarms :initform common-lisp:nil
                         :type (common-lisp:or alarms common-lisp:null)
                         :accessor struct-shape-create-portal-request-alarms
                         :shape "Alarms" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-portal-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-portal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-portal-request 'make-create-portal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-name))
      (common-lisp:list
       (common-lisp:cons "portalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-description))
      (common-lisp:list
       (common-lisp:cons "portalDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portal-contact-email))
      (common-lisp:list
       (common-lisp:cons "portalContactEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portal-logo-image-file))
      (common-lisp:list
       (common-lisp:cons "portalLogoImageFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-auth-mode))
      (common-lisp:list
       (common-lisp:cons "portalAuthMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-sender-email))
      (common-lisp:list
       (common-lisp:cons "notificationSenderEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-portal-response common-lisp:nil
                       ((portal-id :initarg :portal-id :initform
                         (common-lisp:error ":portalid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-portal-response-portal-id :shape
                         "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-portal-response-portal-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-start-url :initarg :portal-start-url :initform
                         (common-lisp:error ":portalstarturl is required")
                         :type (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-create-portal-response-portal-start-url
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-status :initarg :portal-status :initform
                         (common-lisp:error ":portalstatus is required") :type
                         (common-lisp:or portal-status common-lisp:null)
                         :accessor
                         struct-shape-create-portal-response-portal-status
                         :shape "PortalStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sso-application-id :initarg :sso-application-id
                         :initform
                         (common-lisp:error ":ssoapplicationid is required")
                         :type
                         (common-lisp:or ssoapplication-id common-lisp:null)
                         :accessor
                         struct-shape-create-portal-response-sso-application-id
                         :shape "SSOApplicationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-portal-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-portal-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-portal-response 'make-create-portal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-id))
      (common-lisp:list
       (common-lisp:cons "portalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-start-url))
      (common-lisp:list
       (common-lisp:cons "portalStartUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-status))
      (common-lisp:list
       (common-lisp:cons "portalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sso-application-id))
      (common-lisp:list
       (common-lisp:cons "ssoApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-request common-lisp:nil
                       ((portal-id :initarg :portal-id :initform
                         (common-lisp:error ":portalid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-project-request-portal-id :shape
                         "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-name :initarg :project-name :initform
                         (common-lisp:error ":projectname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-project-request-project-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-description :initarg :project-description
                         :initform common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-project-request-project-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-project-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-project-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-project-request 'make-create-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-id))
      (common-lisp:list
       (common-lisp:cons "portalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-description))
      (common-lisp:list
       (common-lisp:cons "projectDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-response common-lisp:nil
                       ((project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-project-response-project-id :shape
                         "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-arn :initarg :project-arn :initform
                         (common-lisp:error ":projectarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-project-response-project-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-project-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-project-response 'make-create-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass csv common-lisp:nil
                       ((column-names :initarg :column-names :initform
                         (common-lisp:error ":columnnames is required") :type
                         (common-lisp:or column-names common-lisp:null)
                         :accessor struct-shape-csv-column-names :shape
                         "ColumnNames" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-csv (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'csv
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'csv 'make-csv))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input csv))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input csv))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-names))
      (common-lisp:list
       (common-lisp:cons "columnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input csv))
   common-lisp:nil))
(common-lisp:deftype custom-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass customer-managed-s3storage common-lisp:nil
                       ((s3resource-arn :initarg :s3resource-arn :initform
                         (common-lisp:error ":s3resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-customer-managed-s3storage-s3resource-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-customer-managed-s3storage-role-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customer-managed-s3storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'customer-managed-s3storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customer-managed-s3storage
                    'make-customer-managed-s3storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-s3storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-s3storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3resource-arn))
      (common-lisp:list
       (common-lisp:cons "s3ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-s3storage))
   common-lisp:nil))
(common-lisp:deftype dashboard-definition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dashboard-summaries ()
   '(trivial-types:proper-list dashboard-summary))
 (common-lisp:defun make-dashboard-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dashboard-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dashboard-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-dashboard-summary-id :shape "ID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-dashboard-summary-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-dashboard-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-dashboard-summary-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-date :initarg :last-update-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-dashboard-summary-last-update-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dashboard-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dashboard-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dashboard-summary 'make-dashboard-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dashboard-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dashboard-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dashboard-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass datum common-lisp:nil
                       ((scalar-value :initarg :scalar-value :initform
                         common-lisp:nil :type
                         (common-lisp:or scalar-value common-lisp:null)
                         :accessor struct-shape-datum-scalar-value :shape
                         "ScalarValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (array-value :initarg :array-value :initform
                         common-lisp:nil :type
                         (common-lisp:or datum-list common-lisp:null) :accessor
                         struct-shape-datum-array-value :shape "DatumList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (row-value :initarg :row-value :initform
                         common-lisp:nil :type
                         (common-lisp:or row common-lisp:null) :accessor
                         struct-shape-datum-row-value :shape "Row" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (null-value :initarg :null-value :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor struct-shape-datum-null-value :shape
                         "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datum
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'datum
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'datum 'make-datum))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datum))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datum))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalar-value))
      (common-lisp:list
       (common-lisp:cons "scalarValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'array-value))
      (common-lisp:list
       (common-lisp:cons "arrayValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-value))
      (common-lisp:list
       (common-lisp:cons "rowValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-value))
      (common-lisp:list
       (common-lisp:cons "nullValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datum))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype datum-list () '(trivial-types:proper-list datum))
 (common-lisp:defun make-datum-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list datum))
   aws-sdk/generator/shape::members))
(common-lisp:deftype default-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-access-policy-request common-lisp:nil
                       ((access-policy-id :initarg :access-policy-id :initform
                         (common-lisp:error ":accesspolicyid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-access-policy-request-access-policy-id
                         :shape "ID" :location "uri" :location-name
                         "accessPolicyId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-access-policy-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-access-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-access-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-access-policy-request
                    'make-delete-access-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-access-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-access-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-access-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-access-policy-response
                    'make-delete-access-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-asset-model-composite-model-request
                       common-lisp:nil
                       ((asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-delete-asset-model-composite-model-request-asset-model-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetModelId")
                        (asset-model-composite-model-id :initarg
                         :asset-model-composite-model-id :initform
                         (common-lisp:error
                          ":assetmodelcompositemodelid is required")
                         :type (common-lisp:or custom-id common-lisp:null)
                         :accessor
                         struct-shape-delete-asset-model-composite-model-request-asset-model-composite-model-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetModelCompositeModelId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-asset-model-composite-model-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-asset-model-composite-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-asset-model-composite-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-asset-model-composite-model-request
                    'make-delete-asset-model-composite-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-composite-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-composite-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-composite-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-asset-model-composite-model-response
                       common-lisp:nil
                       ((asset-model-status :initarg :asset-model-status
                         :initform
                         (common-lisp:error ":assetmodelstatus is required")
                         :type
                         (common-lisp:or asset-model-status common-lisp:null)
                         :accessor
                         struct-shape-delete-asset-model-composite-model-response-asset-model-status
                         :shape "AssetModelStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-asset-model-composite-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-asset-model-composite-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-asset-model-composite-model-response
                    'make-delete-asset-model-composite-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-composite-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-composite-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-status))
      (common-lisp:list
       (common-lisp:cons "assetModelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-composite-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-asset-model-request common-lisp:nil
                       ((asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-delete-asset-model-request-asset-model-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetModelId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-asset-model-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-asset-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-asset-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-asset-model-request
                    'make-delete-asset-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-asset-model-response common-lisp:nil
                       ((asset-model-status :initarg :asset-model-status
                         :initform
                         (common-lisp:error ":assetmodelstatus is required")
                         :type
                         (common-lisp:or asset-model-status common-lisp:null)
                         :accessor
                         struct-shape-delete-asset-model-response-asset-model-status
                         :shape "AssetModelStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-asset-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-asset-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-asset-model-response
                    'make-delete-asset-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-status))
      (common-lisp:list
       (common-lisp:cons "assetModelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-asset-request common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-delete-asset-request-asset-id :shape
                         "CustomID" :location "uri" :location-name "assetId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-asset-request-client-token :shape
                         "ClientToken" :location "querystring" :location-name
                         "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-asset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-asset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-asset-request 'make-delete-asset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-asset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-asset-response common-lisp:nil
                       ((asset-status :initarg :asset-status :initform
                         (common-lisp:error ":assetstatus is required") :type
                         (common-lisp:or asset-status common-lisp:null)
                         :accessor
                         struct-shape-delete-asset-response-asset-status :shape
                         "AssetStatus" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-asset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-asset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-asset-response 'make-delete-asset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-status))
      (common-lisp:list
       (common-lisp:cons "assetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dashboard-request common-lisp:nil
                       ((dashboard-id :initarg :dashboard-id :initform
                         (common-lisp:error ":dashboardid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-dashboard-request-dashboard-id
                         :shape "ID" :location "uri" :location-name
                         "dashboardId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-dashboard-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dashboard-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dashboard-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dashboard-request 'make-delete-dashboard-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dashboard-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dashboard-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dashboard-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dashboard-response
                    'make-delete-dashboard-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-response))
   common-lisp:nil))
(common-lisp:deftype delete-files-after-import () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass delete-gateway-request common-lisp:nil
                       ((gateway-id :initarg :gateway-id :initform
                         (common-lisp:error ":gatewayid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-gateway-request-gateway-id :shape
                         "ID" :location "uri" :location-name "gatewayId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-gateway-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-gateway-request 'make-delete-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-portal-request common-lisp:nil
                       ((portal-id :initarg :portal-id :initform
                         (common-lisp:error ":portalid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-portal-request-portal-id :shape
                         "ID" :location "uri" :location-name "portalId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-portal-request-client-token :shape
                         "ClientToken" :location "querystring" :location-name
                         "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-portal-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-portal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-portal-request 'make-delete-portal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-portal-response common-lisp:nil
                       ((portal-status :initarg :portal-status :initform
                         (common-lisp:error ":portalstatus is required") :type
                         (common-lisp:or portal-status common-lisp:null)
                         :accessor
                         struct-shape-delete-portal-response-portal-status
                         :shape "PortalStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-portal-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-portal-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-portal-response 'make-delete-portal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-status))
      (common-lisp:list
       (common-lisp:cons "portalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-request common-lisp:nil
                       ((project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-project-request-project-id :shape
                         "ID" :location "uri" :location-name "projectId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-project-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-request 'make-delete-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-response 'make-delete-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-time-series-request common-lisp:nil
                       ((alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or property-alias common-lisp:null)
                         :accessor
                         struct-shape-delete-time-series-request-alias :shape
                         "PropertyAlias" :location "querystring" :location-name
                         "alias")
                        (asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or custom-id common-lisp:null)
                         :accessor
                         struct-shape-delete-time-series-request-asset-id
                         :shape "CustomID" :location "querystring"
                         :location-name "assetId")
                        (property-id :initarg :property-id :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-delete-time-series-request-property-id
                         :shape "CustomID" :location "querystring"
                         :location-name "propertyId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-time-series-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-time-series-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-time-series-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-time-series-request
                    'make-delete-time-series-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-time-series-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-time-series-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-time-series-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-access-policy-request common-lisp:nil
                       ((access-policy-id :initarg :access-policy-id :initform
                         (common-lisp:error ":accesspolicyid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-access-policy-request-access-policy-id
                         :shape "ID" :location "uri" :location-name
                         "accessPolicyId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-access-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-access-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-access-policy-request
                    'make-describe-access-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-access-policy-response common-lisp:nil
                       ((access-policy-id :initarg :access-policy-id :initform
                         (common-lisp:error ":accesspolicyid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-access-policy-response-access-policy-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (access-policy-arn :initarg :access-policy-arn
                         :initform
                         (common-lisp:error ":accesspolicyarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-access-policy-response-access-policy-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (access-policy-identity :initarg
                         :access-policy-identity :initform
                         (common-lisp:error
                          ":accesspolicyidentity is required")
                         :type (common-lisp:or identity common-lisp:null)
                         :accessor
                         struct-shape-describe-access-policy-response-access-policy-identity
                         :shape "Identity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-policy-resource :initarg
                         :access-policy-resource :initform
                         (common-lisp:error
                          ":accesspolicyresource is required")
                         :type (common-lisp:or resource common-lisp:null)
                         :accessor
                         struct-shape-describe-access-policy-response-access-policy-resource
                         :shape "Resource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-policy-permission :initarg
                         :access-policy-permission :initform
                         (common-lisp:error
                          ":accesspolicypermission is required")
                         :type (common-lisp:or permission common-lisp:null)
                         :accessor
                         struct-shape-describe-access-policy-response-access-policy-permission
                         :shape "Permission" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-policy-creation-date :initarg
                         :access-policy-creation-date :initform
                         (common-lisp:error
                          ":accesspolicycreationdate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-access-policy-response-access-policy-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-policy-last-update-date :initarg
                         :access-policy-last-update-date :initform
                         (common-lisp:error
                          ":accesspolicylastupdatedate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-access-policy-response-access-policy-last-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-access-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-access-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-access-policy-response
                    'make-describe-access-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policy-id))
      (common-lisp:list
       (common-lisp:cons "accessPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policy-arn))
      (common-lisp:list
       (common-lisp:cons "accessPolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-identity))
      (common-lisp:list
       (common-lisp:cons "accessPolicyIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-resource))
      (common-lisp:list
       (common-lisp:cons "accessPolicyResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-permission))
      (common-lisp:list
       (common-lisp:cons "accessPolicyPermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-creation-date))
      (common-lisp:list
       (common-lisp:cons "accessPolicyCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-last-update-date))
      (common-lisp:list
       (common-lisp:cons "accessPolicyLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-action-request common-lisp:nil
                       ((action-id :initarg :action-id :initform
                         (common-lisp:error ":actionid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-action-request-action-id :shape
                         "ID" :location "uri" :location-name "actionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-action-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-action-request 'make-describe-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-action-response common-lisp:nil
                       ((action-id :initarg :action-id :initform
                         (common-lisp:error ":actionid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-action-response-action-id :shape
                         "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-resource :initarg :target-resource :initform
                         (common-lisp:error ":targetresource is required")
                         :type
                         (common-lisp:or target-resource common-lisp:null)
                         :accessor
                         struct-shape-describe-action-response-target-resource
                         :shape "TargetResource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-definition-id :initarg :action-definition-id
                         :initform
                         (common-lisp:error ":actiondefinitionid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-action-response-action-definition-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (action-payload :initarg :action-payload :initform
                         (common-lisp:error ":actionpayload is required") :type
                         (common-lisp:or action-payload common-lisp:null)
                         :accessor
                         struct-shape-describe-action-response-action-payload
                         :shape "ActionPayload" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-time :initarg :execution-time :initform
                         (common-lisp:error ":executiontime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-action-response-execution-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-action-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-action-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-action-response 'make-describe-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-resource))
      (common-lisp:list
       (common-lisp:cons "targetResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-definition-id))
      (common-lisp:list
       (common-lisp:cons "actionDefinitionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-payload))
      (common-lisp:list
       (common-lisp:cons "actionPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-time))
      (common-lisp:list
       (common-lisp:cons "executionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-asset-composite-model-request common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-describe-asset-composite-model-request-asset-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetId")
                        (asset-composite-model-id :initarg
                         :asset-composite-model-id :initform
                         (common-lisp:error
                          ":assetcompositemodelid is required")
                         :type (common-lisp:or custom-id common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-composite-model-request-asset-composite-model-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetCompositeModelId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-asset-composite-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-asset-composite-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-asset-composite-model-request
                    'make-describe-asset-composite-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-composite-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-composite-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-composite-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-asset-composite-model-response common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-asset-composite-model-response-asset-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-composite-model-id :initarg
                         :asset-composite-model-id :initform
                         (common-lisp:error
                          ":assetcompositemodelid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-asset-composite-model-response-asset-composite-model-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-composite-model-external-id :initarg
                         :asset-composite-model-external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-composite-model-response-asset-composite-model-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-composite-model-path :initarg
                         :asset-composite-model-path :initform
                         (common-lisp:error
                          ":assetcompositemodelpath is required")
                         :type
                         (common-lisp:or asset-composite-model-path
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-composite-model-response-asset-composite-model-path
                         :shape "AssetCompositeModelPath" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-composite-model-name :initarg
                         :asset-composite-model-name :initform
                         (common-lisp:error
                          ":assetcompositemodelname is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-asset-composite-model-response-asset-composite-model-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-composite-model-description :initarg
                         :asset-composite-model-description :initform
                         (common-lisp:error
                          ":assetcompositemodeldescription is required")
                         :type (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-composite-model-response-asset-composite-model-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-composite-model-type :initarg
                         :asset-composite-model-type :initform
                         (common-lisp:error
                          ":assetcompositemodeltype is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-asset-composite-model-response-asset-composite-model-type
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-composite-model-properties :initarg
                         :asset-composite-model-properties :initform
                         (common-lisp:error
                          ":assetcompositemodelproperties is required")
                         :type
                         (common-lisp:or asset-properties common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-composite-model-response-asset-composite-model-properties
                         :shape "AssetProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-composite-model-summaries :initarg
                         :asset-composite-model-summaries :initform
                         (common-lisp:error
                          ":assetcompositemodelsummaries is required")
                         :type
                         (common-lisp:or asset-composite-model-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-composite-model-response-asset-composite-model-summaries
                         :shape "AssetCompositeModelSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (action-definitions :initarg :action-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or action-definitions common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-composite-model-response-action-definitions
                         :shape "ActionDefinitions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-asset-composite-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-asset-composite-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-asset-composite-model-response
                    'make-describe-asset-composite-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-composite-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-composite-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-composite-model-id))
      (common-lisp:list
       (common-lisp:cons "assetCompositeModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-composite-model-external-id))
      (common-lisp:list
       (common-lisp:cons "assetCompositeModelExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-composite-model-path))
      (common-lisp:list
       (common-lisp:cons "assetCompositeModelPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-composite-model-name))
      (common-lisp:list
       (common-lisp:cons "assetCompositeModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-composite-model-description))
      (common-lisp:list
       (common-lisp:cons "assetCompositeModelDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-composite-model-type))
      (common-lisp:list
       (common-lisp:cons "assetCompositeModelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-composite-model-properties))
      (common-lisp:list
       (common-lisp:cons "assetCompositeModelProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-composite-model-summaries))
      (common-lisp:list
       (common-lisp:cons "assetCompositeModelSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-definitions))
      (common-lisp:list
       (common-lisp:cons "actionDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-composite-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-asset-model-composite-model-request
                       common-lisp:nil
                       ((asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-describe-asset-model-composite-model-request-asset-model-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetModelId")
                        (asset-model-composite-model-id :initarg
                         :asset-model-composite-model-id :initform
                         (common-lisp:error
                          ":assetmodelcompositemodelid is required")
                         :type (common-lisp:or custom-id common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-composite-model-request-asset-model-composite-model-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetModelCompositeModelId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-asset-model-composite-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-asset-model-composite-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-asset-model-composite-model-request
                    'make-describe-asset-model-composite-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-composite-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-composite-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-composite-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-asset-model-composite-model-response
                       common-lisp:nil
                       ((asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-asset-model-composite-model-response-asset-model-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-composite-model-id :initarg
                         :asset-model-composite-model-id :initform
                         (common-lisp:error
                          ":assetmodelcompositemodelid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-asset-model-composite-model-response-asset-model-composite-model-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-composite-model-external-id :initarg
                         :asset-model-composite-model-external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-composite-model-response-asset-model-composite-model-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-composite-model-path :initarg
                         :asset-model-composite-model-path :initform
                         (common-lisp:error
                          ":assetmodelcompositemodelpath is required")
                         :type
                         (common-lisp:or asset-model-composite-model-path
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-composite-model-response-asset-model-composite-model-path
                         :shape "AssetModelCompositeModelPath" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-model-composite-model-name :initarg
                         :asset-model-composite-model-name :initform
                         (common-lisp:error
                          ":assetmodelcompositemodelname is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-asset-model-composite-model-response-asset-model-composite-model-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-composite-model-description :initarg
                         :asset-model-composite-model-description :initform
                         (common-lisp:error
                          ":assetmodelcompositemodeldescription is required")
                         :type (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-composite-model-response-asset-model-composite-model-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-composite-model-type :initarg
                         :asset-model-composite-model-type :initform
                         (common-lisp:error
                          ":assetmodelcompositemodeltype is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-asset-model-composite-model-response-asset-model-composite-model-type
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-composite-model-properties :initarg
                         :asset-model-composite-model-properties :initform
                         (common-lisp:error
                          ":assetmodelcompositemodelproperties is required")
                         :type
                         (common-lisp:or asset-model-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-composite-model-response-asset-model-composite-model-properties
                         :shape "AssetModelProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (composition-details :initarg :composition-details
                         :initform common-lisp:nil :type
                         (common-lisp:or composition-details common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-composite-model-response-composition-details
                         :shape "CompositionDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-composite-model-summaries :initarg
                         :asset-model-composite-model-summaries :initform
                         (common-lisp:error
                          ":assetmodelcompositemodelsummaries is required")
                         :type
                         (common-lisp:or asset-model-composite-model-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-composite-model-response-asset-model-composite-model-summaries
                         :shape "AssetModelCompositeModelSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (action-definitions :initarg :action-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or action-definitions common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-composite-model-response-action-definitions
                         :shape "ActionDefinitions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-asset-model-composite-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-asset-model-composite-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-asset-model-composite-model-response
                    'make-describe-asset-model-composite-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-composite-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-composite-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-external-id))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-path))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-name))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-description))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-type))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-properties))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'composition-details))
      (common-lisp:list
       (common-lisp:cons "compositionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-summaries))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-definitions))
      (common-lisp:list
       (common-lisp:cons "actionDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-composite-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-asset-model-request common-lisp:nil
                       ((asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-describe-asset-model-request-asset-model-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetModelId")
                        (exclude-properties :initarg :exclude-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or exclude-properties common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-request-exclude-properties
                         :shape "ExcludeProperties" :location "querystring"
                         :location-name "excludeProperties"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-asset-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-asset-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-asset-model-request
                    'make-describe-asset-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-asset-model-response common-lisp:nil
                       ((asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-asset-model-response-asset-model-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-arn :initarg :asset-model-arn :initform
                         (common-lisp:error ":assetmodelarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-asset-model-response-asset-model-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-name :initarg :asset-model-name :initform
                         (common-lisp:error ":assetmodelname is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-asset-model-response-asset-model-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-description :initarg
                         :asset-model-description :initform
                         (common-lisp:error
                          ":assetmodeldescription is required")
                         :type (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-response-asset-model-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-properties :initarg
                         :asset-model-properties :initform
                         (common-lisp:error
                          ":assetmodelproperties is required")
                         :type
                         (common-lisp:or asset-model-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-response-asset-model-properties
                         :shape "AssetModelProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-model-hierarchies :initarg
                         :asset-model-hierarchies :initform
                         (common-lisp:error
                          ":assetmodelhierarchies is required")
                         :type
                         (common-lisp:or asset-model-hierarchies
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-response-asset-model-hierarchies
                         :shape "AssetModelHierarchies" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-model-composite-models :initarg
                         :asset-model-composite-models :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-model-composite-models
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-response-asset-model-composite-models
                         :shape "AssetModelCompositeModels" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-model-creation-date :initarg
                         :asset-model-creation-date :initform
                         (common-lisp:error
                          ":assetmodelcreationdate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-response-asset-model-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-last-update-date :initarg
                         :asset-model-last-update-date :initform
                         (common-lisp:error
                          ":assetmodellastupdatedate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-response-asset-model-last-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-status :initarg :asset-model-status
                         :initform
                         (common-lisp:error ":assetmodelstatus is required")
                         :type
                         (common-lisp:or asset-model-status common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-response-asset-model-status
                         :shape "AssetModelStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-type :initarg :asset-model-type :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-model-type common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-response-asset-model-type
                         :shape "AssetModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-composite-model-summaries :initarg
                         :asset-model-composite-model-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-model-composite-model-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-response-asset-model-composite-model-summaries
                         :shape "AssetModelCompositeModelSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-model-external-id :initarg
                         :asset-model-external-id :initform common-lisp:nil
                         :type (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-model-response-asset-model-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-asset-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-asset-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-asset-model-response
                    'make-describe-asset-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-arn))
      (common-lisp:list
       (common-lisp:cons "assetModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-name))
      (common-lisp:list
       (common-lisp:cons "assetModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-description))
      (common-lisp:list
       (common-lisp:cons "assetModelDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-properties))
      (common-lisp:list
       (common-lisp:cons "assetModelProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-hierarchies))
      (common-lisp:list
       (common-lisp:cons "assetModelHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-models))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-creation-date))
      (common-lisp:list
       (common-lisp:cons "assetModelCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-last-update-date))
      (common-lisp:list
       (common-lisp:cons "assetModelLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-status))
      (common-lisp:list
       (common-lisp:cons "assetModelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-type))
      (common-lisp:list
       (common-lisp:cons "assetModelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-summaries))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-external-id))
      (common-lisp:list
       (common-lisp:cons "assetModelExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-asset-property-request common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-describe-asset-property-request-asset-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetId")
                        (property-id :initarg :property-id :initform
                         (common-lisp:error ":propertyid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-describe-asset-property-request-property-id
                         :shape "CustomID" :location "uri" :location-name
                         "propertyId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-asset-property-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-asset-property-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-asset-property-request
                    'make-describe-asset-property-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-property-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-property-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-property-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-asset-property-response common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-asset-property-response-asset-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-name :initarg :asset-name :initform
                         (common-lisp:error ":assetname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-asset-property-response-asset-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-asset-property-response-asset-model-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-property :initarg :asset-property :initform
                         common-lisp:nil :type
                         (common-lisp:or property common-lisp:null) :accessor
                         struct-shape-describe-asset-property-response-asset-property
                         :shape "Property" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (composite-model :initarg :composite-model :initform
                         common-lisp:nil :type
                         (common-lisp:or composite-model-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-property-response-composite-model
                         :shape "CompositeModelProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-external-id :initarg :asset-external-id
                         :initform common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-property-response-asset-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-asset-property-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-asset-property-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-asset-property-response
                    'make-describe-asset-property-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-property-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-property-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-name))
      (common-lisp:list
       (common-lisp:cons "assetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-property))
      (common-lisp:list
       (common-lisp:cons "assetProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'composite-model))
      (common-lisp:list
       (common-lisp:cons "compositeModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-external-id))
      (common-lisp:list
       (common-lisp:cons "assetExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-property-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-asset-request common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-describe-asset-request-asset-id :shape
                         "CustomID" :location "uri" :location-name "assetId")
                        (exclude-properties :initarg :exclude-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or exclude-properties common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-request-exclude-properties
                         :shape "ExcludeProperties" :location "querystring"
                         :location-name "excludeProperties"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-asset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-asset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-asset-request 'make-describe-asset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-asset-response common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-asset-response-asset-id :shape
                         "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-arn :initarg :asset-arn :initform
                         (common-lisp:error ":assetarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-asset-response-asset-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-name :initarg :asset-name :initform
                         (common-lisp:error ":assetname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-asset-response-asset-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-asset-response-asset-model-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-properties :initarg :asset-properties :initform
                         (common-lisp:error ":assetproperties is required")
                         :type
                         (common-lisp:or asset-properties common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-response-asset-properties
                         :shape "AssetProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-hierarchies :initarg :asset-hierarchies
                         :initform
                         (common-lisp:error ":assethierarchies is required")
                         :type
                         (common-lisp:or asset-hierarchies common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-response-asset-hierarchies
                         :shape "AssetHierarchies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-composite-models :initarg
                         :asset-composite-models :initform common-lisp:nil
                         :type
                         (common-lisp:or asset-composite-models
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-response-asset-composite-models
                         :shape "AssetCompositeModels" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-creation-date :initarg :asset-creation-date
                         :initform
                         (common-lisp:error ":assetcreationdate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-response-asset-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-last-update-date :initarg
                         :asset-last-update-date :initform
                         (common-lisp:error ":assetlastupdatedate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-response-asset-last-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-status :initarg :asset-status :initform
                         (common-lisp:error ":assetstatus is required") :type
                         (common-lisp:or asset-status common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-response-asset-status
                         :shape "AssetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-description :initarg :asset-description
                         :initform common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-response-asset-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-composite-model-summaries :initarg
                         :asset-composite-model-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-composite-model-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-response-asset-composite-model-summaries
                         :shape "AssetCompositeModelSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-external-id :initarg :asset-external-id
                         :initform common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-describe-asset-response-asset-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-asset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-asset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-asset-response 'make-describe-asset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-arn))
      (common-lisp:list
       (common-lisp:cons "assetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-name))
      (common-lisp:list
       (common-lisp:cons "assetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-properties))
      (common-lisp:list
       (common-lisp:cons "assetProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-hierarchies))
      (common-lisp:list
       (common-lisp:cons "assetHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-composite-models))
      (common-lisp:list
       (common-lisp:cons "assetCompositeModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-creation-date))
      (common-lisp:list
       (common-lisp:cons "assetCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-last-update-date))
      (common-lisp:list
       (common-lisp:cons "assetLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-status))
      (common-lisp:list
       (common-lisp:cons "assetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-description))
      (common-lisp:list
       (common-lisp:cons "assetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-composite-model-summaries))
      (common-lisp:list
       (common-lisp:cons "assetCompositeModelSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-external-id))
      (common-lisp:list
       (common-lisp:cons "assetExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bulk-import-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bulk-import-job-request-job-id
                         :shape "ID" :location "uri" :location-name "jobId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bulk-import-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-bulk-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bulk-import-job-request
                    'make-describe-bulk-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bulk-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bulk-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bulk-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bulk-import-job-response common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bulk-import-job-response-job-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-name :initarg :job-name :initform
                         (common-lisp:error ":jobname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-bulk-import-job-response-job-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-status :initarg :job-status :initform
                         (common-lisp:error ":jobstatus is required") :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         struct-shape-describe-bulk-import-job-response-job-status
                         :shape "JobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-role-arn :initarg :job-role-arn :initform
                         (common-lisp:error ":jobrolearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-bulk-import-job-response-job-role-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (files :initarg :files :initform
                         (common-lisp:error ":files is required") :type
                         (common-lisp:or files common-lisp:null) :accessor
                         struct-shape-describe-bulk-import-job-response-files
                         :shape "Files" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-report-location :initarg :error-report-location
                         :initform
                         (common-lisp:error ":errorreportlocation is required")
                         :type
                         (common-lisp:or error-report-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-bulk-import-job-response-error-report-location
                         :shape "ErrorReportLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-configuration :initarg :job-configuration
                         :initform
                         (common-lisp:error ":jobconfiguration is required")
                         :type
                         (common-lisp:or job-configuration common-lisp:null)
                         :accessor
                         struct-shape-describe-bulk-import-job-response-job-configuration
                         :shape "JobConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-creation-date :initarg :job-creation-date
                         :initform
                         (common-lisp:error ":jobcreationdate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-bulk-import-job-response-job-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-last-update-date :initarg :job-last-update-date
                         :initform
                         (common-lisp:error ":joblastupdatedate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-bulk-import-job-response-job-last-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (adaptive-ingestion :initarg :adaptive-ingestion
                         :initform common-lisp:nil :type
                         (common-lisp:or adaptive-ingestion common-lisp:null)
                         :accessor
                         struct-shape-describe-bulk-import-job-response-adaptive-ingestion
                         :shape "AdaptiveIngestion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-files-after-import :initarg
                         :delete-files-after-import :initform common-lisp:nil
                         :type
                         (common-lisp:or delete-files-after-import
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-bulk-import-job-response-delete-files-after-import
                         :shape "DeleteFilesAfterImport" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bulk-import-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-bulk-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bulk-import-job-response
                    'make-describe-bulk-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bulk-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bulk-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-role-arn))
      (common-lisp:list
       (common-lisp:cons "jobRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files))
      (common-lisp:list
       (common-lisp:cons "files"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-report-location))
      (common-lisp:list
       (common-lisp:cons "errorReportLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-configuration))
      (common-lisp:list
       (common-lisp:cons "jobConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-creation-date))
      (common-lisp:list
       (common-lisp:cons "jobCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-last-update-date))
      (common-lisp:list
       (common-lisp:cons "jobLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adaptive-ingestion))
      (common-lisp:list
       (common-lisp:cons "adaptiveIngestion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-files-after-import))
      (common-lisp:list
       (common-lisp:cons "deleteFilesAfterImport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bulk-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dashboard-request common-lisp:nil
                       ((dashboard-id :initarg :dashboard-id :initform
                         (common-lisp:error ":dashboardid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-dashboard-request-dashboard-id
                         :shape "ID" :location "uri" :location-name
                         "dashboardId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dashboard-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dashboard-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dashboard-request
                    'make-describe-dashboard-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dashboard-response common-lisp:nil
                       ((dashboard-id :initarg :dashboard-id :initform
                         (common-lisp:error ":dashboardid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-dashboard-response-dashboard-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dashboard-arn :initarg :dashboard-arn :initform
                         (common-lisp:error ":dashboardarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-dashboard-response-dashboard-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dashboard-name :initarg :dashboard-name :initform
                         (common-lisp:error ":dashboardname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-dashboard-response-dashboard-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-dashboard-response-project-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dashboard-description :initarg :dashboard-description
                         :initform common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-dashboard-response-dashboard-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dashboard-definition :initarg :dashboard-definition
                         :initform
                         (common-lisp:error ":dashboarddefinition is required")
                         :type
                         (common-lisp:or dashboard-definition common-lisp:null)
                         :accessor
                         struct-shape-describe-dashboard-response-dashboard-definition
                         :shape "DashboardDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dashboard-creation-date :initarg
                         :dashboard-creation-date :initform
                         (common-lisp:error
                          ":dashboardcreationdate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-dashboard-response-dashboard-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dashboard-last-update-date :initarg
                         :dashboard-last-update-date :initform
                         (common-lisp:error
                          ":dashboardlastupdatedate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-dashboard-response-dashboard-last-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dashboard-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dashboard-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dashboard-response
                    'make-describe-dashboard-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "dashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-arn))
      (common-lisp:list
       (common-lisp:cons "dashboardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-name))
      (common-lisp:list
       (common-lisp:cons "dashboardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-description))
      (common-lisp:list
       (common-lisp:cons "dashboardDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-definition))
      (common-lisp:list
       (common-lisp:cons "dashboardDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-creation-date))
      (common-lisp:list
       (common-lisp:cons "dashboardCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-last-update-date))
      (common-lisp:list
       (common-lisp:cons "dashboardLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-default-encryption-configuration-request
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-default-encryption-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-default-encryption-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-default-encryption-configuration-request
                    'make-describe-default-encryption-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-encryption-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-encryption-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-encryption-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-default-encryption-configuration-response
                       common-lisp:nil
                       ((encryption-type :initarg :encryption-type :initform
                         (common-lisp:error ":encryptiontype is required")
                         :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor
                         struct-shape-describe-default-encryption-configuration-response-encryption-type
                         :shape "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-default-encryption-configuration-response-kms-key-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-status :initarg :configuration-status
                         :initform
                         (common-lisp:error ":configurationstatus is required")
                         :type
                         (common-lisp:or configuration-status common-lisp:null)
                         :accessor
                         struct-shape-describe-default-encryption-configuration-response-configuration-status
                         :shape "ConfigurationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-default-encryption-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-default-encryption-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-default-encryption-configuration-response
                    'make-describe-default-encryption-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-encryption-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-encryption-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "encryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-status))
      (common-lisp:list
       (common-lisp:cons "configurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-encryption-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-gateway-capability-configuration-request
                       common-lisp:nil
                       ((gateway-id :initarg :gateway-id :initform
                         (common-lisp:error ":gatewayid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-gateway-capability-configuration-request-gateway-id
                         :shape "ID" :location "uri" :location-name
                         "gatewayId")
                        (capability-namespace :initarg :capability-namespace
                         :initform
                         (common-lisp:error ":capabilitynamespace is required")
                         :type
                         (common-lisp:or capability-namespace common-lisp:null)
                         :accessor
                         struct-shape-describe-gateway-capability-configuration-request-capability-namespace
                         :shape "CapabilityNamespace" :location "uri"
                         :location-name "capabilityNamespace"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-gateway-capability-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-gateway-capability-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-capability-configuration-request
                    'make-describe-gateway-capability-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-capability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-capability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-capability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-gateway-capability-configuration-response
                       common-lisp:nil
                       ((gateway-id :initarg :gateway-id :initform
                         (common-lisp:error ":gatewayid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-gateway-capability-configuration-response-gateway-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (capability-namespace :initarg :capability-namespace
                         :initform
                         (common-lisp:error ":capabilitynamespace is required")
                         :type
                         (common-lisp:or capability-namespace common-lisp:null)
                         :accessor
                         struct-shape-describe-gateway-capability-configuration-response-capability-namespace
                         :shape "CapabilityNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capability-configuration :initarg
                         :capability-configuration :initform
                         (common-lisp:error
                          ":capabilityconfiguration is required")
                         :type
                         (common-lisp:or capability-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-gateway-capability-configuration-response-capability-configuration
                         :shape "CapabilityConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (capability-sync-status :initarg
                         :capability-sync-status :initform
                         (common-lisp:error
                          ":capabilitysyncstatus is required")
                         :type
                         (common-lisp:or capability-sync-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-gateway-capability-configuration-response-capability-sync-status
                         :shape "CapabilitySyncStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-gateway-capability-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-gateway-capability-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-capability-configuration-response
                    'make-describe-gateway-capability-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-capability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-capability-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "gatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-namespace))
      (common-lisp:list
       (common-lisp:cons "capabilityNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-configuration))
      (common-lisp:list
       (common-lisp:cons "capabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-sync-status))
      (common-lisp:list
       (common-lisp:cons "capabilitySyncStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-capability-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-gateway-request common-lisp:nil
                       ((gateway-id :initarg :gateway-id :initform
                         (common-lisp:error ":gatewayid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-gateway-request-gateway-id
                         :shape "ID" :location "uri" :location-name
                         "gatewayId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-gateway-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-request 'make-describe-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-gateway-response common-lisp:nil
                       ((gateway-id :initarg :gateway-id :initform
                         (common-lisp:error ":gatewayid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-gateway-response-gateway-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (gateway-name :initarg :gateway-name :initform
                         (common-lisp:error ":gatewayname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-gateway-response-gateway-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (gateway-arn :initarg :gateway-arn :initform
                         (common-lisp:error ":gatewayarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-gateway-response-gateway-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (gateway-platform :initarg :gateway-platform :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-platform common-lisp:null)
                         :accessor
                         struct-shape-describe-gateway-response-gateway-platform
                         :shape "GatewayPlatform" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (gateway-capability-summaries :initarg
                         :gateway-capability-summaries :initform
                         (common-lisp:error
                          ":gatewaycapabilitysummaries is required")
                         :type
                         (common-lisp:or gateway-capability-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-gateway-response-gateway-capability-summaries
                         :shape "GatewayCapabilitySummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creationdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-gateway-response-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-date :initarg :last-update-date :initform
                         (common-lisp:error ":lastupdatedate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-gateway-response-last-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-gateway-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-response
                    'make-describe-gateway-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "gatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-name))
      (common-lisp:list
       (common-lisp:cons "gatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-arn))
      (common-lisp:list
       (common-lisp:cons "gatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-platform))
      (common-lisp:list
       (common-lisp:cons "gatewayPlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-capability-summaries))
      (common-lisp:list
       (common-lisp:cons "gatewayCapabilitySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-logging-options-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-logging-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-logging-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-logging-options-request
                    'make-describe-logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-logging-options-response common-lisp:nil
                       ((logging-options :initarg :logging-options :initform
                         (common-lisp:error ":loggingoptions is required")
                         :type
                         (common-lisp:or logging-options common-lisp:null)
                         :accessor
                         struct-shape-describe-logging-options-response-logging-options
                         :shape "LoggingOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-logging-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-logging-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-logging-options-response
                    'make-describe-logging-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-options))
      (common-lisp:list
       (common-lisp:cons "loggingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-portal-request common-lisp:nil
                       ((portal-id :initarg :portal-id :initform
                         (common-lisp:error ":portalid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-portal-request-portal-id :shape
                         "ID" :location "uri" :location-name "portalId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-portal-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-portal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-portal-request 'make-describe-portal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-portal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-portal-response common-lisp:nil
                       ((portal-id :initarg :portal-id :initform
                         (common-lisp:error ":portalid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-portal-response-portal-id :shape
                         "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-arn :initarg :portal-arn :initform
                         (common-lisp:error ":portalarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-portal-response-portal-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-name :initarg :portal-name :initform
                         (common-lisp:error ":portalname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-portal-response-portal-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-description :initarg :portal-description
                         :initform common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-portal-response-portal-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (portal-client-id :initarg :portal-client-id :initform
                         (common-lisp:error ":portalclientid is required")
                         :type
                         (common-lisp:or portal-client-id common-lisp:null)
                         :accessor
                         struct-shape-describe-portal-response-portal-client-id
                         :shape "PortalClientId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (portal-start-url :initarg :portal-start-url :initform
                         (common-lisp:error ":portalstarturl is required")
                         :type (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-describe-portal-response-portal-start-url
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-contact-email :initarg :portal-contact-email
                         :initform
                         (common-lisp:error ":portalcontactemail is required")
                         :type (common-lisp:or email common-lisp:null)
                         :accessor
                         struct-shape-describe-portal-response-portal-contact-email
                         :shape "Email" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (portal-status :initarg :portal-status :initform
                         (common-lisp:error ":portalstatus is required") :type
                         (common-lisp:or portal-status common-lisp:null)
                         :accessor
                         struct-shape-describe-portal-response-portal-status
                         :shape "PortalStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (portal-creation-date :initarg :portal-creation-date
                         :initform
                         (common-lisp:error ":portalcreationdate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-portal-response-portal-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (portal-last-update-date :initarg
                         :portal-last-update-date :initform
                         (common-lisp:error
                          ":portallastupdatedate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-portal-response-portal-last-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (portal-logo-image-location :initarg
                         :portal-logo-image-location :initform common-lisp:nil
                         :type (common-lisp:or image-location common-lisp:null)
                         :accessor
                         struct-shape-describe-portal-response-portal-logo-image-location
                         :shape "ImageLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-portal-response-role-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-auth-mode :initarg :portal-auth-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-mode common-lisp:null) :accessor
                         struct-shape-describe-portal-response-portal-auth-mode
                         :shape "AuthMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-sender-email :initarg
                         :notification-sender-email :initform common-lisp:nil
                         :type (common-lisp:or email common-lisp:null)
                         :accessor
                         struct-shape-describe-portal-response-notification-sender-email
                         :shape "Email" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alarms :initarg :alarms :initform common-lisp:nil
                         :type (common-lisp:or alarms common-lisp:null)
                         :accessor struct-shape-describe-portal-response-alarms
                         :shape "Alarms" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-portal-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-portal-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-portal-response 'make-describe-portal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-portal-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-id))
      (common-lisp:list
       (common-lisp:cons "portalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-name))
      (common-lisp:list
       (common-lisp:cons "portalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-description))
      (common-lisp:list
       (common-lisp:cons "portalDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-client-id))
      (common-lisp:list
       (common-lisp:cons "portalClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-start-url))
      (common-lisp:list
       (common-lisp:cons "portalStartUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portal-contact-email))
      (common-lisp:list
       (common-lisp:cons "portalContactEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-status))
      (common-lisp:list
       (common-lisp:cons "portalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portal-creation-date))
      (common-lisp:list
       (common-lisp:cons "portalCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portal-last-update-date))
      (common-lisp:list
       (common-lisp:cons "portalLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portal-logo-image-location))
      (common-lisp:list
       (common-lisp:cons "portalLogoImageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-auth-mode))
      (common-lisp:list
       (common-lisp:cons "portalAuthMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-sender-email))
      (common-lisp:list
       (common-lisp:cons "notificationSenderEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-portal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-project-request common-lisp:nil
                       ((project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-project-request-project-id
                         :shape "ID" :location "uri" :location-name
                         "projectId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-project-request 'make-describe-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-project-response common-lisp:nil
                       ((project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-project-response-project-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-arn :initarg :project-arn :initform
                         (common-lisp:error ":projectarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-project-response-project-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-name :initarg :project-name :initform
                         (common-lisp:error ":projectname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-project-response-project-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-id :initarg :portal-id :initform
                         (common-lisp:error ":portalid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-project-response-portal-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-description :initarg :project-description
                         :initform common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-project-response-project-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-creation-date :initarg :project-creation-date
                         :initform
                         (common-lisp:error ":projectcreationdate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-project-response-project-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-last-update-date :initarg
                         :project-last-update-date :initform
                         (common-lisp:error
                          ":projectlastupdatedate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-project-response-project-last-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-project-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-project-response
                    'make-describe-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-id))
      (common-lisp:list
       (common-lisp:cons "portalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-description))
      (common-lisp:list
       (common-lisp:cons "projectDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'project-creation-date))
      (common-lisp:list
       (common-lisp:cons "projectCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'project-last-update-date))
      (common-lisp:list
       (common-lisp:cons "projectLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-storage-configuration-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-storage-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-storage-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-storage-configuration-request
                    'make-describe-storage-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-storage-configuration-response common-lisp:nil
                       ((storage-type :initarg :storage-type :initform
                         (common-lisp:error ":storagetype is required") :type
                         (common-lisp:or storage-type common-lisp:null)
                         :accessor
                         struct-shape-describe-storage-configuration-response-storage-type
                         :shape "StorageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-layer-storage :initarg :multi-layer-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or multi-layer-storage common-lisp:null)
                         :accessor
                         struct-shape-describe-storage-configuration-response-multi-layer-storage
                         :shape "MultiLayerStorage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disassociated-data-storage :initarg
                         :disassociated-data-storage :initform common-lisp:nil
                         :type
                         (common-lisp:or disassociated-data-storage-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-storage-configuration-response-disassociated-data-storage
                         :shape "DisassociatedDataStorageState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-period common-lisp:null)
                         :accessor
                         struct-shape-describe-storage-configuration-response-retention-period
                         :shape "RetentionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-status :initarg :configuration-status
                         :initform
                         (common-lisp:error ":configurationstatus is required")
                         :type
                         (common-lisp:or configuration-status common-lisp:null)
                         :accessor
                         struct-shape-describe-storage-configuration-response-configuration-status
                         :shape "ConfigurationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-date :initarg :last-update-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-storage-configuration-response-last-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (warm-tier :initarg :warm-tier :initform
                         common-lisp:nil :type
                         (common-lisp:or warm-tier-state common-lisp:null)
                         :accessor
                         struct-shape-describe-storage-configuration-response-warm-tier
                         :shape "WarmTierState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (warm-tier-retention-period :initarg
                         :warm-tier-retention-period :initform common-lisp:nil
                         :type
                         (common-lisp:or warm-tier-retention-period
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-storage-configuration-response-warm-tier-retention-period
                         :shape "WarmTierRetentionPeriod" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-storage-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-storage-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-storage-configuration-response
                    'make-describe-storage-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "storageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-layer-storage))
      (common-lisp:list
       (common-lisp:cons "multiLayerStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociated-data-storage))
      (common-lisp:list
       (common-lisp:cons "disassociatedDataStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-status))
      (common-lisp:list
       (common-lisp:cons "configurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-tier))
      (common-lisp:list
       (common-lisp:cons "warmTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'warm-tier-retention-period))
      (common-lisp:list
       (common-lisp:cons "warmTierRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-time-series-request common-lisp:nil
                       ((alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or property-alias common-lisp:null)
                         :accessor
                         struct-shape-describe-time-series-request-alias :shape
                         "PropertyAlias" :location "querystring" :location-name
                         "alias")
                        (asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or custom-id common-lisp:null)
                         :accessor
                         struct-shape-describe-time-series-request-asset-id
                         :shape "CustomID" :location "querystring"
                         :location-name "assetId")
                        (property-id :initarg :property-id :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-describe-time-series-request-property-id
                         :shape "CustomID" :location "querystring"
                         :location-name "propertyId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-time-series-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-time-series-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-time-series-request
                    'make-describe-time-series-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-series-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-series-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-series-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-time-series-response common-lisp:nil
                       ((asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-time-series-response-asset-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (property-id :initarg :property-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-time-series-response-property-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or property-alias common-lisp:null)
                         :accessor
                         struct-shape-describe-time-series-response-alias
                         :shape "PropertyAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-series-id :initarg :time-series-id :initform
                         (common-lisp:error ":timeseriesid is required") :type
                         (common-lisp:or time-series-id common-lisp:null)
                         :accessor
                         struct-shape-describe-time-series-response-time-series-id
                         :shape "TimeSeriesId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         (common-lisp:error ":datatype is required") :type
                         (common-lisp:or property-data-type common-lisp:null)
                         :accessor
                         struct-shape-describe-time-series-response-data-type
                         :shape "PropertyDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type-spec :initarg :data-type-spec :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-time-series-response-data-type-spec
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (time-series-creation-date :initarg
                         :time-series-creation-date :initform
                         (common-lisp:error
                          ":timeseriescreationdate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-time-series-response-time-series-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-series-last-update-date :initarg
                         :time-series-last-update-date :initform
                         (common-lisp:error
                          ":timeserieslastupdatedate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-time-series-response-time-series-last-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-series-arn :initarg :time-series-arn :initform
                         (common-lisp:error ":timeseriesarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-time-series-response-time-series-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-time-series-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-time-series-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-time-series-response
                    'make-describe-time-series-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-series-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-series-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-id))
      (common-lisp:list
       (common-lisp:cons "propertyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-series-id))
      (common-lisp:list
       (common-lisp:cons "timeSeriesId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type-spec))
      (common-lisp:list
       (common-lisp:cons "dataTypeSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-creation-date))
      (common-lisp:list
       (common-lisp:cons "timeSeriesCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-last-update-date))
      (common-lisp:list
       (common-lisp:cons "timeSeriesLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-series-arn))
      (common-lisp:list
       (common-lisp:cons "timeSeriesArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-series-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass detailed-error common-lisp:nil
                       ((code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or detailed-error-code common-lisp:null)
                         :accessor struct-shape-detailed-error-code :shape
                         "DetailedErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or detailed-error-message
                                         common-lisp:null)
                         :accessor struct-shape-detailed-error-message :shape
                         "DetailedErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detailed-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detailed-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'detailed-error 'make-detailed-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detailed-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detailed-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detailed-error))
   common-lisp:nil))
(common-lisp:deftype detailed-error-code () 'common-lisp:string)
(common-lisp:deftype detailed-error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype detailed-errors ()
   '(trivial-types:proper-list detailed-error))
 (common-lisp:defun make-detailed-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list detailed-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass disassociate-assets-request common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-disassociate-assets-request-asset-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetId")
                        (hierarchy-id :initarg :hierarchy-id :initform
                         (common-lisp:error ":hierarchyid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-disassociate-assets-request-hierarchy-id
                         :shape "CustomID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (child-asset-id :initarg :child-asset-id :initform
                         (common-lisp:error ":childassetid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-disassociate-assets-request-child-asset-id
                         :shape "CustomID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-disassociate-assets-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-assets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-assets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-assets-request
                    'make-disassociate-assets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "hierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-asset-id))
      (common-lisp:list
       (common-lisp:cons "childAssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-time-series-from-asset-property-request
                       common-lisp:nil
                       ((alias :initarg :alias :initform
                         (common-lisp:error ":alias is required") :type
                         (common-lisp:or property-alias common-lisp:null)
                         :accessor
                         struct-shape-disassociate-time-series-from-asset-property-request-alias
                         :shape "PropertyAlias" :location "querystring"
                         :location-name "alias")
                        (asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-disassociate-time-series-from-asset-property-request-asset-id
                         :shape "CustomID" :location "querystring"
                         :location-name "assetId")
                        (property-id :initarg :property-id :initform
                         (common-lisp:error ":propertyid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-disassociate-time-series-from-asset-property-request-property-id
                         :shape "CustomID" :location "querystring"
                         :location-name "propertyId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-disassociate-time-series-from-asset-property-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-time-series-from-asset-property-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-time-series-from-asset-property-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-time-series-from-asset-property-request
                    'make-disassociate-time-series-from-asset-property-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-time-series-from-asset-property-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-time-series-from-asset-property-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-time-series-from-asset-property-request))
   common-lisp:nil))
(common-lisp:deftype disassociated-data-storage-state () 'common-lisp:string)
(common-lisp:deftype email () 'common-lisp:string)
(common-lisp:deftype encryption-type () 'common-lisp:string)
(common-lisp:deftype entry-id () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-details common-lisp:nil
                       ((code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-error-details-code :shape "ErrorCode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor struct-shape-error-details-message :shape
                         "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (details :initarg :details :initform common-lisp:nil
                         :type
                         (common-lisp:or detailed-errors common-lisp:null)
                         :accessor struct-shape-error-details-details :shape
                         "DetailedErrors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-details 'make-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-details))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-report-location common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket common-lisp:null) :accessor
                         struct-shape-error-report-location-bucket :shape
                         "Bucket" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (prefix :initarg :prefix :initform
                         (common-lisp:error ":prefix is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-error-report-location-prefix :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-report-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-report-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'error-report-location 'make-error-report-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          error-report-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          error-report-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          error-report-location))
   common-lisp:nil))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:deftype exclude-properties () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass execute-action-request common-lisp:nil
                       ((target-resource :initarg :target-resource :initform
                         (common-lisp:error ":targetresource is required")
                         :type
                         (common-lisp:or target-resource common-lisp:null)
                         :accessor
                         struct-shape-execute-action-request-target-resource
                         :shape "TargetResource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-definition-id :initarg :action-definition-id
                         :initform
                         (common-lisp:error ":actiondefinitionid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-execute-action-request-action-definition-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (action-payload :initarg :action-payload :initform
                         (common-lisp:error ":actionpayload is required") :type
                         (common-lisp:or action-payload common-lisp:null)
                         :accessor
                         struct-shape-execute-action-request-action-payload
                         :shape "ActionPayload" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-execute-action-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-action-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-action-request 'make-execute-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-resource))
      (common-lisp:list
       (common-lisp:cons "targetResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-definition-id))
      (common-lisp:list
       (common-lisp:cons "actionDefinitionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-payload))
      (common-lisp:list
       (common-lisp:cons "actionPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-action-response common-lisp:nil
                       ((action-id :initarg :action-id :initform
                         (common-lisp:error ":actionid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-execute-action-response-action-id :shape
                         "ID" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-action-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-action-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-action-response 'make-execute-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-action-response))
   common-lisp:nil))
(common-lisp:deftype execute-query-max-results () 'common-lisp:integer)
(common-lisp:deftype execute-query-next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execute-query-request common-lisp:nil
                       ((query-statement :initarg :query-statement :initform
                         (common-lisp:error ":querystatement is required")
                         :type
                         (common-lisp:or query-statement common-lisp:null)
                         :accessor
                         struct-shape-execute-query-request-query-statement
                         :shape "QueryStatement" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or execute-query-next-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-execute-query-request-next-token :shape
                         "ExecuteQueryNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or execute-query-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-execute-query-request-max-results :shape
                         "ExecuteQueryMaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-query-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-query-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-query-request 'make-execute-query-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-statement))
      (common-lisp:list
       (common-lisp:cons "queryStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-query-response common-lisp:nil
                       ((columns :initarg :columns :initform common-lisp:nil
                         :type (common-lisp:or columns-list common-lisp:null)
                         :accessor struct-shape-execute-query-response-columns
                         :shape "ColumnsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rows :initarg :rows :initform common-lisp:nil :type
                         (common-lisp:or rows common-lisp:null) :accessor
                         struct-shape-execute-query-response-rows :shape "Rows"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or execute-query-next-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-execute-query-response-next-token :shape
                         "ExecuteQueryNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-query-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-query-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-query-response 'make-execute-query-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-response))
   common-lisp:nil))
(common-lisp:deftype expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass expression-variable common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or variable-name common-lisp:null)
                         :accessor struct-shape-expression-variable-name :shape
                         "VariableName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or variable-value common-lisp:null)
                         :accessor struct-shape-expression-variable-value
                         :shape "VariableValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-expression-variable
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'expression-variable
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'expression-variable 'make-expression-variable))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input expression-variable))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input expression-variable))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input expression-variable))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype expression-variables ()
   '(trivial-types:proper-list expression-variable))
 (common-lisp:defun make-expression-variables
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list expression-variable))
   aws-sdk/generator/shape::members))
(common-lisp:deftype external-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass file common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket common-lisp:null) :accessor
                         struct-shape-file-bucket :shape "Bucket" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-file-key :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-file-version-id :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-file (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'file
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'file 'make-file))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass file-format common-lisp:nil
                       ((csv :initarg :csv :initform common-lisp:nil :type
                         (common-lisp:or csv common-lisp:null) :accessor
                         struct-shape-file-format-csv :shape "Csv" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (parquet :initarg :parquet :initform common-lisp:nil
                         :type (common-lisp:or parquet common-lisp:null)
                         :accessor struct-shape-file-format-parquet :shape
                         "Parquet" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-file-format
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'file-format
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'file-format 'make-file-format))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv))
      (common-lisp:list
       (common-lisp:cons "csv"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parquet))
      (common-lisp:list
       (common-lisp:cons "parquet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-format))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype files () '(trivial-types:proper-list file))
 (common-lisp:defun make-files
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list file))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass forwarding-config common-lisp:nil
                       ((state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or forwarding-config-state
                                         common-lisp:null)
                         :accessor struct-shape-forwarding-config-state :shape
                         "ForwardingConfigState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-forwarding-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'forwarding-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'forwarding-config 'make-forwarding-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input forwarding-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input forwarding-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input forwarding-config))
   common-lisp:nil))
(common-lisp:deftype forwarding-config-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype gateway-capability-summaries ()
   '(trivial-types:proper-list gateway-capability-summary))
 (common-lisp:defun make-gateway-capability-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            gateway-capability-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass gateway-capability-summary common-lisp:nil
                       ((capability-namespace :initarg :capability-namespace
                         :initform
                         (common-lisp:error ":capabilitynamespace is required")
                         :type
                         (common-lisp:or capability-namespace common-lisp:null)
                         :accessor
                         struct-shape-gateway-capability-summary-capability-namespace
                         :shape "CapabilityNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capability-sync-status :initarg
                         :capability-sync-status :initform
                         (common-lisp:error
                          ":capabilitysyncstatus is required")
                         :type
                         (common-lisp:or capability-sync-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-gateway-capability-summary-capability-sync-status
                         :shape "CapabilitySyncStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-capability-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-capability-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'gateway-capability-summary
                    'make-gateway-capability-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gateway-capability-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gateway-capability-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-namespace))
      (common-lisp:list
       (common-lisp:cons "capabilityNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-sync-status))
      (common-lisp:list
       (common-lisp:cons "capabilitySyncStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gateway-capability-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-platform common-lisp:nil
                       ((greengrass :initarg :greengrass :initform
                         common-lisp:nil :type
                         (common-lisp:or greengrass common-lisp:null) :accessor
                         struct-shape-gateway-platform-greengrass :shape
                         "Greengrass" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (greengrass-v2 :initarg :greengrass-v2 :initform
                         common-lisp:nil :type
                         (common-lisp:or greengrass-v2 common-lisp:null)
                         :accessor struct-shape-gateway-platform-greengrass-v2
                         :shape "GreengrassV2" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-platform
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-platform
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'gateway-platform 'make-gateway-platform))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-platform))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-platform))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greengrass))
      (common-lisp:list
       (common-lisp:cons "greengrass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greengrass-v2))
      (common-lisp:list
       (common-lisp:cons "greengrassV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-platform))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype gateway-summaries ()
   '(trivial-types:proper-list gateway-summary))
 (common-lisp:defun make-gateway-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gateway-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass gateway-summary common-lisp:nil
                       ((gateway-id :initarg :gateway-id :initform
                         (common-lisp:error ":gatewayid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-gateway-summary-gateway-id :shape "ID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (gateway-name :initarg :gateway-name :initform
                         (common-lisp:error ":gatewayname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-gateway-summary-gateway-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (gateway-platform :initarg :gateway-platform :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-platform common-lisp:null)
                         :accessor
                         struct-shape-gateway-summary-gateway-platform :shape
                         "GatewayPlatform" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (gateway-capability-summaries :initarg
                         :gateway-capability-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-capability-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-gateway-summary-gateway-capability-summaries
                         :shape "GatewayCapabilitySummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creationdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-gateway-summary-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-date :initarg :last-update-date :initform
                         (common-lisp:error ":lastupdatedate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-gateway-summary-last-update-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'gateway-summary 'make-gateway-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "gatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-name))
      (common-lisp:list
       (common-lisp:cons "gatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-platform))
      (common-lisp:list
       (common-lisp:cons "gatewayPlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-capability-summaries))
      (common-lisp:list
       (common-lisp:cons "gatewayCapabilitySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-asset-property-aggregates-request common-lisp:nil
                       ((asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-asset-property-aggregates-request-asset-id
                         :shape "ID" :location "querystring" :location-name
                         "assetId")
                        (property-id :initarg :property-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-asset-property-aggregates-request-property-id
                         :shape "ID" :location "querystring" :location-name
                         "propertyId")
                        (property-alias :initarg :property-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-property-alias common-lisp:null)
                         :accessor
                         struct-shape-get-asset-property-aggregates-request-property-alias
                         :shape "AssetPropertyAlias" :location "querystring"
                         :location-name "propertyAlias")
                        (aggregate-types :initarg :aggregate-types :initform
                         (common-lisp:error ":aggregatetypes is required")
                         :type
                         (common-lisp:or aggregate-types common-lisp:null)
                         :accessor
                         struct-shape-get-asset-property-aggregates-request-aggregate-types
                         :shape "AggregateTypes" :location "querystring"
                         :location-name "aggregateTypes")
                        (resolution :initarg :resolution :initform
                         (common-lisp:error ":resolution is required") :type
                         (common-lisp:or resolution common-lisp:null) :accessor
                         struct-shape-get-asset-property-aggregates-request-resolution
                         :shape "Resolution" :location "querystring"
                         :location-name "resolution")
                        (qualities :initarg :qualities :initform
                         common-lisp:nil :type
                         (common-lisp:or qualities common-lisp:null) :accessor
                         struct-shape-get-asset-property-aggregates-request-qualities
                         :shape "Qualities" :location "querystring"
                         :location-name "qualities")
                        (start-date :initarg :start-date :initform
                         (common-lisp:error ":startdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-asset-property-aggregates-request-start-date
                         :shape "Timestamp" :location "querystring"
                         :location-name "startDate")
                        (end-date :initarg :end-date :initform
                         (common-lisp:error ":enddate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-asset-property-aggregates-request-end-date
                         :shape "Timestamp" :location "querystring"
                         :location-name "endDate")
                        (time-ordering :initarg :time-ordering :initform
                         common-lisp:nil :type
                         (common-lisp:or time-ordering common-lisp:null)
                         :accessor
                         struct-shape-get-asset-property-aggregates-request-time-ordering
                         :shape "TimeOrdering" :location "querystring"
                         :location-name "timeOrdering")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-asset-property-aggregates-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          get-asset-property-value-aggregates-max-results
                          common-lisp:null)
                         :accessor
                         struct-shape-get-asset-property-aggregates-request-max-results
                         :shape "GetAssetPropertyValueAggregatesMaxResults"
                         :location "querystring" :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-asset-property-aggregates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-asset-property-aggregates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-asset-property-aggregates-request
                    'make-get-asset-property-aggregates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-aggregates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-aggregates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-aggregates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-asset-property-aggregates-response common-lisp:nil
                       ((aggregated-values :initarg :aggregated-values
                         :initform
                         (common-lisp:error ":aggregatedvalues is required")
                         :type
                         (common-lisp:or aggregated-values common-lisp:null)
                         :accessor
                         struct-shape-get-asset-property-aggregates-response-aggregated-values
                         :shape "AggregatedValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-asset-property-aggregates-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-asset-property-aggregates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-asset-property-aggregates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-asset-property-aggregates-response
                    'make-get-asset-property-aggregates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-aggregates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-aggregates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregated-values))
      (common-lisp:list
       (common-lisp:cons "aggregatedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-aggregates-response))
   common-lisp:nil))
(common-lisp:deftype get-asset-property-value-aggregates-max-results ()
  'common-lisp:integer)
(common-lisp:deftype get-asset-property-value-history-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-asset-property-value-history-request common-lisp:nil
                       ((asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-asset-property-value-history-request-asset-id
                         :shape "ID" :location "querystring" :location-name
                         "assetId")
                        (property-id :initarg :property-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-asset-property-value-history-request-property-id
                         :shape "ID" :location "querystring" :location-name
                         "propertyId")
                        (property-alias :initarg :property-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-property-alias common-lisp:null)
                         :accessor
                         struct-shape-get-asset-property-value-history-request-property-alias
                         :shape "AssetPropertyAlias" :location "querystring"
                         :location-name "propertyAlias")
                        (start-date :initarg :start-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-asset-property-value-history-request-start-date
                         :shape "Timestamp" :location "querystring"
                         :location-name "startDate")
                        (end-date :initarg :end-date :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-asset-property-value-history-request-end-date
                         :shape "Timestamp" :location "querystring"
                         :location-name "endDate")
                        (qualities :initarg :qualities :initform
                         common-lisp:nil :type
                         (common-lisp:or qualities common-lisp:null) :accessor
                         struct-shape-get-asset-property-value-history-request-qualities
                         :shape "Qualities" :location "querystring"
                         :location-name "qualities")
                        (time-ordering :initarg :time-ordering :initform
                         common-lisp:nil :type
                         (common-lisp:or time-ordering common-lisp:null)
                         :accessor
                         struct-shape-get-asset-property-value-history-request-time-ordering
                         :shape "TimeOrdering" :location "querystring"
                         :location-name "timeOrdering")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-asset-property-value-history-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          get-asset-property-value-history-max-results
                          common-lisp:null)
                         :accessor
                         struct-shape-get-asset-property-value-history-request-max-results
                         :shape "GetAssetPropertyValueHistoryMaxResults"
                         :location "querystring" :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-asset-property-value-history-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-asset-property-value-history-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-asset-property-value-history-request
                    'make-get-asset-property-value-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-asset-property-value-history-response
                       common-lisp:nil
                       ((asset-property-value-history :initarg
                         :asset-property-value-history :initform
                         (common-lisp:error
                          ":assetpropertyvaluehistory is required")
                         :type
                         (common-lisp:or asset-property-value-history
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-asset-property-value-history-response-asset-property-value-history
                         :shape "AssetPropertyValueHistory" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-asset-property-value-history-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-asset-property-value-history-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-asset-property-value-history-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-asset-property-value-history-response
                    'make-get-asset-property-value-history-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-property-value-history))
      (common-lisp:list
       (common-lisp:cons "assetPropertyValueHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-asset-property-value-request common-lisp:nil
                       ((asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-asset-property-value-request-asset-id
                         :shape "ID" :location "querystring" :location-name
                         "assetId")
                        (property-id :initarg :property-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-asset-property-value-request-property-id
                         :shape "ID" :location "querystring" :location-name
                         "propertyId")
                        (property-alias :initarg :property-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-property-alias common-lisp:null)
                         :accessor
                         struct-shape-get-asset-property-value-request-property-alias
                         :shape "AssetPropertyAlias" :location "querystring"
                         :location-name "propertyAlias"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-asset-property-value-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-asset-property-value-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-asset-property-value-request
                    'make-get-asset-property-value-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-asset-property-value-response common-lisp:nil
                       ((property-value :initarg :property-value :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-property-value common-lisp:null)
                         :accessor
                         struct-shape-get-asset-property-value-response-property-value
                         :shape "AssetPropertyValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-asset-property-value-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-asset-property-value-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-asset-property-value-response
                    'make-get-asset-property-value-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-value))
      (common-lisp:list
       (common-lisp:cons "propertyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-interpolated-asset-property-values-request
                       common-lisp:nil
                       ((asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-interpolated-asset-property-values-request-asset-id
                         :shape "ID" :location "querystring" :location-name
                         "assetId")
                        (property-id :initarg :property-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-interpolated-asset-property-values-request-property-id
                         :shape "ID" :location "querystring" :location-name
                         "propertyId")
                        (property-alias :initarg :property-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-property-alias common-lisp:null)
                         :accessor
                         struct-shape-get-interpolated-asset-property-values-request-property-alias
                         :shape "AssetPropertyAlias" :location "querystring"
                         :location-name "propertyAlias")
                        (start-time-in-seconds :initarg :start-time-in-seconds
                         :initform
                         (common-lisp:error ":starttimeinseconds is required")
                         :type
                         (common-lisp:or time-in-seconds common-lisp:null)
                         :accessor
                         struct-shape-get-interpolated-asset-property-values-request-start-time-in-seconds
                         :shape "TimeInSeconds" :location "querystring"
                         :location-name "startTimeInSeconds")
                        (start-time-offset-in-nanos :initarg
                         :start-time-offset-in-nanos :initform common-lisp:nil
                         :type
                         (common-lisp:or offset-in-nanos common-lisp:null)
                         :accessor
                         struct-shape-get-interpolated-asset-property-values-request-start-time-offset-in-nanos
                         :shape "OffsetInNanos" :location "querystring"
                         :location-name "startTimeOffsetInNanos")
                        (end-time-in-seconds :initarg :end-time-in-seconds
                         :initform
                         (common-lisp:error ":endtimeinseconds is required")
                         :type
                         (common-lisp:or time-in-seconds common-lisp:null)
                         :accessor
                         struct-shape-get-interpolated-asset-property-values-request-end-time-in-seconds
                         :shape "TimeInSeconds" :location "querystring"
                         :location-name "endTimeInSeconds")
                        (end-time-offset-in-nanos :initarg
                         :end-time-offset-in-nanos :initform common-lisp:nil
                         :type
                         (common-lisp:or offset-in-nanos common-lisp:null)
                         :accessor
                         struct-shape-get-interpolated-asset-property-values-request-end-time-offset-in-nanos
                         :shape "OffsetInNanos" :location "querystring"
                         :location-name "endTimeOffsetInNanos")
                        (quality :initarg :quality :initform
                         (common-lisp:error ":quality is required") :type
                         (common-lisp:or quality common-lisp:null) :accessor
                         struct-shape-get-interpolated-asset-property-values-request-quality
                         :shape "Quality" :location "querystring"
                         :location-name "quality")
                        (interval-in-seconds :initarg :interval-in-seconds
                         :initform
                         (common-lisp:error ":intervalinseconds is required")
                         :type
                         (common-lisp:or interval-in-seconds common-lisp:null)
                         :accessor
                         struct-shape-get-interpolated-asset-property-values-request-interval-in-seconds
                         :shape "IntervalInSeconds" :location "querystring"
                         :location-name "intervalInSeconds")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-interpolated-asset-property-values-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-interpolated-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-interpolated-asset-property-values-request-max-results
                         :shape "MaxInterpolatedResults" :location
                         "querystring" :location-name "maxResults")
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or interpolation-type common-lisp:null)
                         :accessor
                         struct-shape-get-interpolated-asset-property-values-request-type
                         :shape "InterpolationType" :location "querystring"
                         :location-name "type")
                        (interval-window-in-seconds :initarg
                         :interval-window-in-seconds :initform common-lisp:nil
                         :type
                         (common-lisp:or interval-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-interpolated-asset-property-values-request-interval-window-in-seconds
                         :shape "IntervalWindowInSeconds" :location
                         "querystring" :location-name
                         "intervalWindowInSeconds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-interpolated-asset-property-values-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-interpolated-asset-property-values-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-interpolated-asset-property-values-request
                    'make-get-interpolated-asset-property-values-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-interpolated-asset-property-values-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-interpolated-asset-property-values-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-interpolated-asset-property-values-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-interpolated-asset-property-values-response
                       common-lisp:nil
                       ((interpolated-asset-property-values :initarg
                         :interpolated-asset-property-values :initform
                         (common-lisp:error
                          ":interpolatedassetpropertyvalues is required")
                         :type
                         (common-lisp:or interpolated-asset-property-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-interpolated-asset-property-values-response-interpolated-asset-property-values
                         :shape "InterpolatedAssetPropertyValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-interpolated-asset-property-values-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-interpolated-asset-property-values-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-interpolated-asset-property-values-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-interpolated-asset-property-values-response
                    'make-get-interpolated-asset-property-values-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-interpolated-asset-property-values-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-interpolated-asset-property-values-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'interpolated-asset-property-values))
      (common-lisp:list
       (common-lisp:cons "interpolatedAssetPropertyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-interpolated-asset-property-values-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass greengrass common-lisp:nil
                       ((group-arn :initarg :group-arn :initform
                         (common-lisp:error ":grouparn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-greengrass-group-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-greengrass
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'greengrass
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'greengrass 'make-greengrass))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input greengrass))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input greengrass))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-arn))
      (common-lisp:list
       (common-lisp:cons "groupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input greengrass))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass greengrass-v2 common-lisp:nil
                       ((core-device-thing-name :initarg
                         :core-device-thing-name :initform
                         (common-lisp:error ":coredevicethingname is required")
                         :type
                         (common-lisp:or core-device-thing-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-greengrass-v2-core-device-thing-name
                         :shape "CoreDeviceThingName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-greengrass-v2
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'greengrass-v2
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'greengrass-v2 'make-greengrass-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input greengrass-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input greengrass-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'core-device-thing-name))
      (common-lisp:list
       (common-lisp:cons "coreDeviceThingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input greengrass-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass group-identity common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor struct-shape-group-identity-id :shape
                         "IdentityId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-group-identity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'group-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'group-identity 'make-group-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iamrole-identity common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-iamrole-identity-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iamrole-identity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'iamrole-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iamrole-identity 'make-iamrole-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iamrole-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iamrole-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iamrole-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iamuser-identity common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-iamuser-identity-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iamuser-identity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'iamuser-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iamuser-identity 'make-iamuser-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iamuser-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iamuser-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iamuser-identity))
   common-lisp:nil))
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ids () '(trivial-types:proper-list id))
 (common-lisp:defun make-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass identity common-lisp:nil
                       ((user :initarg :user :initform common-lisp:nil :type
                         (common-lisp:or user-identity common-lisp:null)
                         :accessor struct-shape-identity-user :shape
                         "UserIdentity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or group-identity common-lisp:null)
                         :accessor struct-shape-identity-group :shape
                         "GroupIdentity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-user :initarg :iam-user :initform common-lisp:nil
                         :type
                         (common-lisp:or iamuser-identity common-lisp:null)
                         :accessor struct-shape-identity-iam-user :shape
                         "IAMUserIdentity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-role :initarg :iam-role :initform common-lisp:nil
                         :type
                         (common-lisp:or iamrole-identity common-lisp:null)
                         :accessor struct-shape-identity-iam-role :shape
                         "IAMRoleIdentity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'identity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'identity 'make-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "user"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user))
      (common-lisp:list
       (common-lisp:cons "iamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity))
   common-lisp:nil))
(common-lisp:deftype identity-id () 'common-lisp:string)
(common-lisp:deftype identity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-image-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (file :initarg :file :initform common-lisp:nil :type
                         (common-lisp:or image-file common-lisp:null) :accessor
                         struct-shape-image-file :shape "ImageFile" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'image 'make-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image-file common-lisp:nil
                       ((data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or image-file-data common-lisp:null)
                         :accessor struct-shape-image-file-data :shape
                         "ImageFileData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or image-file-type common-lisp:null)
                         :accessor struct-shape-image-file-type :shape
                         "ImageFileType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-file
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-file
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'image-file 'make-image-file))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-file))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-file))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-file))
   common-lisp:nil))
(common-lisp:deftype image-file-data ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype image-file-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-location common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-image-location-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (url :initarg :url :initform
                         (common-lisp:error ":url is required") :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-image-location-url :shape "Url" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'image-location 'make-image-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:defclass interpolated-asset-property-value common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         (common-lisp:error ":string is required") :type
                         (common-lisp:or time-in-nanos common-lisp:null)
                         :accessor
                         struct-shape-interpolated-asset-property-value-timestamp
                         :shape "TimeInNanos" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or variant common-lisp:null) :accessor
                         struct-shape-interpolated-asset-property-value-value
                         :shape "Variant" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-interpolated-asset-property-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'interpolated-asset-property-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'interpolated-asset-property-value
                    'make-interpolated-asset-property-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          interpolated-asset-property-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          interpolated-asset-property-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          interpolated-asset-property-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype interpolated-asset-property-values ()
   '(trivial-types:proper-list interpolated-asset-property-value))
 (common-lisp:defun make-interpolated-asset-property-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            interpolated-asset-property-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype interpolation-type () 'common-lisp:string)
(common-lisp:deftype interval () 'common-lisp:string)
(common-lisp:deftype interval-in-seconds () 'common-lisp:integer)
(common-lisp:deftype interval-window-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass job-configuration common-lisp:nil
                       ((file-format :initarg :file-format :initform
                         (common-lisp:error ":fileformat is required") :type
                         (common-lisp:or file-format common-lisp:null)
                         :accessor struct-shape-job-configuration-file-format
                         :shape "FileFormat" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-configuration 'make-job-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-configuration))
   common-lisp:nil))
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-summaries ()
   '(trivial-types:proper-list job-summary))
 (common-lisp:defun make-job-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-job-summary-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-job-summary-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         struct-shape-job-summary-status :shape "JobStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-summary 'make-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-summary))
   common-lisp:nil))
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-access-policies-request common-lisp:nil
                       ((identity-type :initarg :identity-type :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-type common-lisp:null)
                         :accessor
                         struct-shape-list-access-policies-request-identity-type
                         :shape "IdentityType" :location "querystring"
                         :location-name "identityType")
                        (identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor
                         struct-shape-list-access-policies-request-identity-id
                         :shape "IdentityId" :location "querystring"
                         :location-name "identityId")
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-list-access-policies-request-resource-type
                         :shape "ResourceType" :location "querystring"
                         :location-name "resourceType")
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-access-policies-request-resource-id
                         :shape "ID" :location "querystring" :location-name
                         "resourceId")
                        (iam-arn :initarg :iam-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-access-policies-request-iam-arn
                         :shape "ARN" :location "querystring" :location-name
                         "iamArn")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-access-policies-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-access-policies-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-access-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-access-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-access-policies-request
                    'make-list-access-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-access-policies-response common-lisp:nil
                       ((access-policy-summaries :initarg
                         :access-policy-summaries :initform
                         (common-lisp:error
                          ":accesspolicysummaries is required")
                         :type
                         (common-lisp:or access-policy-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-access-policies-response-access-policy-summaries
                         :shape "AccessPolicySummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-access-policies-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-access-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-access-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-access-policies-response
                    'make-list-access-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-summaries))
      (common-lisp:list
       (common-lisp:cons "accessPolicySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-actions-request common-lisp:nil
                       ((target-resource-type :initarg :target-resource-type
                         :initform
                         (common-lisp:error ":targetresourcetype is required")
                         :type
                         (common-lisp:or target-resource-type common-lisp:null)
                         :accessor
                         struct-shape-list-actions-request-target-resource-type
                         :shape "TargetResourceType" :location "querystring"
                         :location-name "targetResourceType")
                        (target-resource-id :initarg :target-resource-id
                         :initform
                         (common-lisp:error ":targetresourceid is required")
                         :type (common-lisp:or custom-id common-lisp:null)
                         :accessor
                         struct-shape-list-actions-request-target-resource-id
                         :shape "CustomID" :location "querystring"
                         :location-name "targetResourceId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-actions-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-actions-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-actions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-actions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-actions-request 'make-list-actions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-actions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-actions-response common-lisp:nil
                       ((action-summaries :initarg :action-summaries :initform
                         (common-lisp:error ":actionsummaries is required")
                         :type
                         (common-lisp:or action-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-actions-response-action-summaries
                         :shape "ActionSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         (common-lisp:error ":nexttoken is required") :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-actions-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-actions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-actions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-actions-response 'make-list-actions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-actions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-actions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-summaries))
      (common-lisp:list
       (common-lisp:cons "actionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-actions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-asset-model-composite-models-request
                       common-lisp:nil
                       ((asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-list-asset-model-composite-models-request-asset-model-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetModelId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-asset-model-composite-models-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-asset-model-composite-models-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-asset-model-composite-models-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-asset-model-composite-models-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-asset-model-composite-models-request
                    'make-list-asset-model-composite-models-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-composite-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-composite-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-composite-models-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-asset-model-composite-models-response
                       common-lisp:nil
                       ((asset-model-composite-model-summaries :initarg
                         :asset-model-composite-model-summaries :initform
                         (common-lisp:error
                          ":assetmodelcompositemodelsummaries is required")
                         :type
                         (common-lisp:or asset-model-composite-model-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-asset-model-composite-models-response-asset-model-composite-model-summaries
                         :shape "AssetModelCompositeModelSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-asset-model-composite-models-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-asset-model-composite-models-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-asset-model-composite-models-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-asset-model-composite-models-response
                    'make-list-asset-model-composite-models-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-composite-models-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-composite-models-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-summaries))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-composite-models-response))
   common-lisp:nil))
(common-lisp:deftype list-asset-model-properties-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-asset-model-properties-request common-lisp:nil
                       ((asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-list-asset-model-properties-request-asset-model-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetModelId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-asset-model-properties-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-asset-model-properties-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or list-asset-model-properties-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-asset-model-properties-request-filter
                         :shape "ListAssetModelPropertiesFilter" :location
                         "querystring" :location-name "filter"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-asset-model-properties-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-asset-model-properties-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-asset-model-properties-request
                    'make-list-asset-model-properties-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-asset-model-properties-response common-lisp:nil
                       ((asset-model-property-summaries :initarg
                         :asset-model-property-summaries :initform
                         (common-lisp:error
                          ":assetmodelpropertysummaries is required")
                         :type
                         (common-lisp:or asset-model-property-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-asset-model-properties-response-asset-model-property-summaries
                         :shape "AssetModelPropertySummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-asset-model-properties-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-asset-model-properties-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-asset-model-properties-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-asset-model-properties-response
                    'make-list-asset-model-properties-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-properties-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-properties-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-property-summaries))
      (common-lisp:list
       (common-lisp:cons "assetModelPropertySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-properties-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-asset-models-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-asset-models-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-asset-models-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (asset-model-types :initarg :asset-model-types
                         :initform common-lisp:nil :type
                         (common-lisp:or list-asset-models-type-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-asset-models-request-asset-model-types
                         :shape "ListAssetModelsTypeFilter" :location
                         "querystring" :location-name "assetModelTypes"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-asset-models-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-asset-models-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-asset-models-request
                    'make-list-asset-models-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-models-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-asset-models-response common-lisp:nil
                       ((asset-model-summaries :initarg :asset-model-summaries
                         :initform
                         (common-lisp:error ":assetmodelsummaries is required")
                         :type
                         (common-lisp:or asset-model-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-asset-models-response-asset-model-summaries
                         :shape "AssetModelSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-asset-models-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-asset-models-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-asset-models-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-asset-models-response
                    'make-list-asset-models-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-models-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-models-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-summaries))
      (common-lisp:list
       (common-lisp:cons "assetModelSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-models-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-asset-models-type-filter ()
   '(trivial-types:proper-list asset-model-type))
 (common-lisp:defun make-list-asset-models-type-filter
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-model-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype list-asset-properties-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-asset-properties-request common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-list-asset-properties-request-asset-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-asset-properties-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-asset-properties-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or list-asset-properties-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-asset-properties-request-filter
                         :shape "ListAssetPropertiesFilter" :location
                         "querystring" :location-name "filter"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-asset-properties-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-asset-properties-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-asset-properties-request
                    'make-list-asset-properties-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-asset-properties-response common-lisp:nil
                       ((asset-property-summaries :initarg
                         :asset-property-summaries :initform
                         (common-lisp:error
                          ":assetpropertysummaries is required")
                         :type
                         (common-lisp:or asset-property-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-asset-properties-response-asset-property-summaries
                         :shape "AssetPropertySummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-asset-properties-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-asset-properties-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-asset-properties-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-asset-properties-response
                    'make-list-asset-properties-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-properties-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-properties-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-property-summaries))
      (common-lisp:list
       (common-lisp:cons "assetPropertySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-properties-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-asset-relationships-request common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-list-asset-relationships-request-asset-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetId")
                        (traversal-type :initarg :traversal-type :initform
                         (common-lisp:error ":traversaltype is required") :type
                         (common-lisp:or traversal-type common-lisp:null)
                         :accessor
                         struct-shape-list-asset-relationships-request-traversal-type
                         :shape "TraversalType" :location "querystring"
                         :location-name "traversalType")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-asset-relationships-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-asset-relationships-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-asset-relationships-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-asset-relationships-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-asset-relationships-request
                    'make-list-asset-relationships-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-relationships-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-relationships-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-relationships-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-asset-relationships-response common-lisp:nil
                       ((asset-relationship-summaries :initarg
                         :asset-relationship-summaries :initform
                         (common-lisp:error
                          ":assetrelationshipsummaries is required")
                         :type
                         (common-lisp:or asset-relationship-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-asset-relationships-response-asset-relationship-summaries
                         :shape "AssetRelationshipSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-asset-relationships-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-asset-relationships-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-asset-relationships-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-asset-relationships-response
                    'make-list-asset-relationships-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-relationships-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-relationships-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-relationship-summaries))
      (common-lisp:list
       (common-lisp:cons "assetRelationshipSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-relationships-response))
   common-lisp:nil))
(common-lisp:deftype list-assets-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-assets-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-assets-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-assets-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (asset-model-id :initarg :asset-model-id :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-list-assets-request-asset-model-id :shape
                         "CustomID" :location "querystring" :location-name
                         "assetModelId")
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or list-assets-filter common-lisp:null)
                         :accessor struct-shape-list-assets-request-filter
                         :shape "ListAssetsFilter" :location "querystring"
                         :location-name "filter"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-assets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assets-request 'make-list-assets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assets-response common-lisp:nil
                       ((asset-summaries :initarg :asset-summaries :initform
                         (common-lisp:error ":assetsummaries is required")
                         :type
                         (common-lisp:or asset-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-assets-response-asset-summaries
                         :shape "AssetSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-assets-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-assets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assets-response 'make-list-assets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-assets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-assets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-summaries))
      (common-lisp:list
       (common-lisp:cons "assetSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-assets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-associated-assets-request common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-list-associated-assets-request-asset-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetId")
                        (hierarchy-id :initarg :hierarchy-id :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-list-associated-assets-request-hierarchy-id
                         :shape "CustomID" :location "querystring"
                         :location-name "hierarchyId")
                        (traversal-direction :initarg :traversal-direction
                         :initform common-lisp:nil :type
                         (common-lisp:or traversal-direction common-lisp:null)
                         :accessor
                         struct-shape-list-associated-assets-request-traversal-direction
                         :shape "TraversalDirection" :location "querystring"
                         :location-name "traversalDirection")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-associated-assets-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-associated-assets-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-associated-assets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-associated-assets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-associated-assets-request
                    'make-list-associated-assets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-associated-assets-response common-lisp:nil
                       ((asset-summaries :initarg :asset-summaries :initform
                         (common-lisp:error ":assetsummaries is required")
                         :type
                         (common-lisp:or associated-assets-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-associated-assets-response-asset-summaries
                         :shape "AssociatedAssetsSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-associated-assets-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-associated-assets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-associated-assets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-associated-assets-response
                    'make-list-associated-assets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-assets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-assets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-summaries))
      (common-lisp:list
       (common-lisp:cons "assetSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-assets-response))
   common-lisp:nil))
(common-lisp:deftype list-bulk-import-jobs-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-bulk-import-jobs-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bulk-import-jobs-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-bulk-import-jobs-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or list-bulk-import-jobs-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-bulk-import-jobs-request-filter
                         :shape "ListBulkImportJobsFilter" :location
                         "querystring" :location-name "filter"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bulk-import-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bulk-import-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bulk-import-jobs-request
                    'make-list-bulk-import-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bulk-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bulk-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bulk-import-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bulk-import-jobs-response common-lisp:nil
                       ((job-summaries :initarg :job-summaries :initform
                         (common-lisp:error ":jobsummaries is required") :type
                         (common-lisp:or job-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-bulk-import-jobs-response-job-summaries
                         :shape "JobSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bulk-import-jobs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bulk-import-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bulk-import-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bulk-import-jobs-response
                    'make-list-bulk-import-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bulk-import-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bulk-import-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-summaries))
      (common-lisp:list
       (common-lisp:cons "jobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bulk-import-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-composition-relationships-request common-lisp:nil
                       ((asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-composition-relationships-request-asset-model-id
                         :shape "ID" :location "uri" :location-name
                         "assetModelId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-composition-relationships-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-composition-relationships-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-composition-relationships-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-composition-relationships-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-composition-relationships-request
                    'make-list-composition-relationships-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-composition-relationships-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-composition-relationships-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-composition-relationships-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-composition-relationships-response common-lisp:nil
                       ((composition-relationship-summaries :initarg
                         :composition-relationship-summaries :initform
                         (common-lisp:error
                          ":compositionrelationshipsummaries is required")
                         :type
                         (common-lisp:or composition-relationship-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-composition-relationships-response-composition-relationship-summaries
                         :shape "CompositionRelationshipSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-composition-relationships-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-composition-relationships-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-composition-relationships-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-composition-relationships-response
                    'make-list-composition-relationships-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-composition-relationships-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-composition-relationships-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composition-relationship-summaries))
      (common-lisp:list
       (common-lisp:cons "compositionRelationshipSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-composition-relationships-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dashboards-request common-lisp:nil
                       ((project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-dashboards-request-project-id :shape
                         "ID" :location "querystring" :location-name
                         "projectId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-dashboards-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-dashboards-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dashboards-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-dashboards-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dashboards-request 'make-list-dashboards-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dashboards-response common-lisp:nil
                       ((dashboard-summaries :initarg :dashboard-summaries
                         :initform
                         (common-lisp:error ":dashboardsummaries is required")
                         :type
                         (common-lisp:or dashboard-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-dashboards-response-dashboard-summaries
                         :shape "DashboardSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-dashboards-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dashboards-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-dashboards-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dashboards-response 'make-list-dashboards-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-summaries))
      (common-lisp:list
       (common-lisp:cons "dashboardSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-gateways-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-gateways-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-gateways-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-gateways-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-gateways-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-gateways-request 'make-list-gateways-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-gateways-response common-lisp:nil
                       ((gateway-summaries :initarg :gateway-summaries
                         :initform
                         (common-lisp:error ":gatewaysummaries is required")
                         :type
                         (common-lisp:or gateway-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-gateways-response-gateway-summaries
                         :shape "GatewaySummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-gateways-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-gateways-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-gateways-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-gateways-response 'make-list-gateways-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-summaries))
      (common-lisp:list
       (common-lisp:cons "gatewaySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-portals-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-portals-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-portals-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-portals-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-portals-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-portals-request 'make-list-portals-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-portals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-portals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-portals-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-portals-response common-lisp:nil
                       ((portal-summaries :initarg :portal-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or portal-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-portals-response-portal-summaries
                         :shape "PortalSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-portals-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-portals-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-portals-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-portals-response 'make-list-portals-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-portals-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-portals-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-summaries))
      (common-lisp:list
       (common-lisp:cons "portalSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-portals-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-project-assets-request common-lisp:nil
                       ((project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-project-assets-request-project-id
                         :shape "ID" :location "uri" :location-name
                         "projectId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-project-assets-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-project-assets-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-project-assets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-project-assets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-project-assets-request
                    'make-list-project-assets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-project-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-project-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-project-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-project-assets-response common-lisp:nil
                       ((asset-ids :initarg :asset-ids :initform
                         (common-lisp:error ":assetids is required") :type
                         (common-lisp:or asset-ids common-lisp:null) :accessor
                         struct-shape-list-project-assets-response-asset-ids
                         :shape "AssetIDs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-project-assets-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-project-assets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-project-assets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-project-assets-response
                    'make-list-project-assets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-project-assets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-project-assets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-ids))
      (common-lisp:list
       (common-lisp:cons "assetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-project-assets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-projects-request common-lisp:nil
                       ((portal-id :initarg :portal-id :initform
                         (common-lisp:error ":portalid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-projects-request-portal-id :shape
                         "ID" :location "querystring" :location-name
                         "portalId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-projects-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-projects-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-projects-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-projects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-projects-request 'make-list-projects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-projects-response common-lisp:nil
                       ((project-summaries :initarg :project-summaries
                         :initform
                         (common-lisp:error ":projectsummaries is required")
                         :type
                         (common-lisp:or project-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-projects-response-project-summaries
                         :shape "ProjectSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-projects-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-projects-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-projects-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-projects-response 'make-list-projects-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-summaries))
      (common-lisp:list
       (common-lisp:cons "projectSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "AmazonResourceName" :location "querystring"
                         :location-name "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-time-series-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-time-series-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-time-series-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or custom-id common-lisp:null)
                         :accessor
                         struct-shape-list-time-series-request-asset-id :shape
                         "CustomID" :location "querystring" :location-name
                         "assetId")
                        (alias-prefix :initarg :alias-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or property-alias common-lisp:null)
                         :accessor
                         struct-shape-list-time-series-request-alias-prefix
                         :shape "PropertyAlias" :location "querystring"
                         :location-name "aliasPrefix")
                        (time-series-type :initarg :time-series-type :initform
                         common-lisp:nil :type
                         (common-lisp:or list-time-series-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-time-series-request-time-series-type
                         :shape "ListTimeSeriesType" :location "querystring"
                         :location-name "timeSeriesType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-time-series-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-time-series-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-time-series-request 'make-list-time-series-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-time-series-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-time-series-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-time-series-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-time-series-response common-lisp:nil
                       ((time-series-summaries :initarg :time-series-summaries
                         :initform
                         (common-lisp:error
                          ":time-series-summaries is required")
                         :type
                         (common-lisp:or time-series-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-time-series-response-time-series-summaries
                         :shape "TimeSeriesSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-time-series-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-time-series-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-time-series-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-time-series-response
                    'make-list-time-series-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-time-series-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-time-series-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-summaries))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-time-series-response))
   common-lisp:nil))
(common-lisp:deftype list-time-series-type () 'common-lisp:string)
(common-lisp:deftype logging-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass logging-options common-lisp:nil
                       ((level :initarg :level :initform
                         (common-lisp:error ":level is required") :type
                         (common-lisp:or logging-level common-lisp:null)
                         :accessor struct-shape-logging-options-level :shape
                         "LoggingLevel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-logging-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'logging-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'logging-options 'make-logging-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-options))
   common-lisp:nil))
(common-lisp:deftype macro () 'common-lisp:string)
(common-lisp:deftype max-interpolated-results () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass measurement common-lisp:nil
                       ((processing-config :initarg :processing-config
                         :initform common-lisp:nil :type
                         (common-lisp:or measurement-processing-config
                                         common-lisp:null)
                         :accessor struct-shape-measurement-processing-config
                         :shape "MeasurementProcessingConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-measurement
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'measurement
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'measurement 'make-measurement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input measurement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input measurement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-config))
      (common-lisp:list
       (common-lisp:cons "processingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input measurement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass measurement-processing-config common-lisp:nil
                       ((forwarding-config :initarg :forwarding-config
                         :initform
                         (common-lisp:error ":forwardingconfig is required")
                         :type
                         (common-lisp:or forwarding-config common-lisp:null)
                         :accessor
                         struct-shape-measurement-processing-config-forwarding-config
                         :shape "ForwardingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-measurement-processing-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'measurement-processing-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'measurement-processing-config
                    'make-measurement-processing-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          measurement-processing-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          measurement-processing-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forwarding-config))
      (common-lisp:list
       (common-lisp:cons "forwardingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          measurement-processing-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass metric common-lisp:nil
                       ((expression :initarg :expression :initform
                         (common-lisp:error ":expression is required") :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         struct-shape-metric-expression :shape "Expression"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (variables :initarg :variables :initform
                         (common-lisp:error ":variables is required") :type
                         (common-lisp:or expression-variables common-lisp:null)
                         :accessor struct-shape-metric-variables :shape
                         "ExpressionVariables" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (window :initarg :window :initform
                         (common-lisp:error ":window is required") :type
                         (common-lisp:or metric-window common-lisp:null)
                         :accessor struct-shape-metric-window :shape
                         "MetricWindow" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processing-config :initarg :processing-config
                         :initform common-lisp:nil :type
                         (common-lisp:or metric-processing-config
                                         common-lisp:null)
                         :accessor struct-shape-metric-processing-config :shape
                         "MetricProcessingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'metric 'make-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window))
      (common-lisp:list
       (common-lisp:cons "window"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-config))
      (common-lisp:list
       (common-lisp:cons "processingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass metric-processing-config common-lisp:nil
                       ((compute-location :initarg :compute-location :initform
                         (common-lisp:error ":computelocation is required")
                         :type
                         (common-lisp:or compute-location common-lisp:null)
                         :accessor
                         struct-shape-metric-processing-config-compute-location
                         :shape "ComputeLocation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-processing-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-processing-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metric-processing-config 'make-metric-processing-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-processing-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-processing-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-location))
      (common-lisp:list
       (common-lisp:cons "computeLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-processing-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass metric-window common-lisp:nil
                       ((tumbling :initarg :tumbling :initform common-lisp:nil
                         :type
                         (common-lisp:or tumbling-window common-lisp:null)
                         :accessor struct-shape-metric-window-tumbling :shape
                         "TumblingWindow" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-window
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-window
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'metric-window 'make-metric-window))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tumbling))
      (common-lisp:list
       (common-lisp:cons "tumbling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-window))
   common-lisp:nil))
(common-lisp:deftype monitor-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass monitor-error-details common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or monitor-error-code common-lisp:null)
                         :accessor struct-shape-monitor-error-details-code
                         :shape "MonitorErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or monitor-error-message
                                         common-lisp:null)
                         :accessor struct-shape-monitor-error-details-message
                         :shape "MonitorErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-monitor-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'monitor-error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'monitor-error-details 'make-monitor-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitor-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitor-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitor-error-details))
   common-lisp:nil))
(common-lisp:deftype monitor-error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass multi-layer-storage common-lisp:nil
                       ((customer-managed-s3storage :initarg
                         :customer-managed-s3storage :initform
                         (common-lisp:error
                          ":customermanageds3storage is required")
                         :type
                         (common-lisp:or customer-managed-s3storage
                                         common-lisp:null)
                         :accessor
                         struct-shape-multi-layer-storage-customer-managed-s3storage
                         :shape "CustomerManagedS3Storage" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multi-layer-storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multi-layer-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multi-layer-storage 'make-multi-layer-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multi-layer-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multi-layer-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-managed-s3storage))
      (common-lisp:list
       (common-lisp:cons "customerManagedS3Storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multi-layer-storage))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:deftype number-of-days () 'common-lisp:integer)
(common-lisp:deftype offset () 'common-lisp:string)
(common-lisp:deftype offset-in-nanos () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass parquet common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parquet
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parquet
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'parquet 'make-parquet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parquet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parquet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parquet))
   common-lisp:nil))
(common-lisp:deftype permission () 'common-lisp:string)
(common-lisp:deftype portal-client-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass portal-resource common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-portal-resource-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-portal-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'portal-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'portal-resource 'make-portal-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input portal-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input portal-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input portal-resource))
   common-lisp:nil))
(common-lisp:deftype portal-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass portal-status common-lisp:nil
                       ((state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or portal-state common-lisp:null)
                         :accessor struct-shape-portal-status-state :shape
                         "PortalState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or monitor-error-details
                                         common-lisp:null)
                         :accessor struct-shape-portal-status-error :shape
                         "MonitorErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-portal-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'portal-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'portal-status 'make-portal-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input portal-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input portal-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input portal-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype portal-summaries ()
   '(trivial-types:proper-list portal-summary))
 (common-lisp:defun make-portal-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list portal-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass portal-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-portal-summary-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-portal-summary-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-portal-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-url :initarg :start-url :initform
                         (common-lisp:error ":starturl is required") :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-portal-summary-start-url :shape "Url"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-portal-summary-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-date :initarg :last-update-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-portal-summary-last-update-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-portal-summary-role-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or portal-status common-lisp:null)
                         :accessor struct-shape-portal-summary-status :shape
                         "PortalStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-portal-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'portal-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'portal-summary 'make-portal-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input portal-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input portal-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-url))
      (common-lisp:list
       (common-lisp:cons "startUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input portal-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass project-resource common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-project-resource-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-project-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'project-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'project-resource 'make-project-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype project-summaries ()
   '(trivial-types:proper-list project-summary))
 (common-lisp:defun make-project-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass project-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-project-summary-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-project-summary-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-project-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-project-summary-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-date :initarg :last-update-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-project-summary-last-update-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-project-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'project-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'project-summary 'make-project-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass property common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-property-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-property-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or property-alias common-lisp:null)
                         :accessor struct-shape-property-alias :shape
                         "PropertyAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification :initarg :notification :initform
                         common-lisp:nil :type
                         (common-lisp:or property-notification
                                         common-lisp:null)
                         :accessor struct-shape-property-notification :shape
                         "PropertyNotification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         (common-lisp:error ":datatype is required") :type
                         (common-lisp:or property-data-type common-lisp:null)
                         :accessor struct-shape-property-data-type :shape
                         "PropertyDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or property-unit common-lisp:null)
                         :accessor struct-shape-property-unit :shape
                         "PropertyUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or property-type common-lisp:null)
                         :accessor struct-shape-property-type :shape
                         "PropertyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or asset-property-path common-lisp:null)
                         :accessor struct-shape-property-path :shape
                         "AssetPropertyPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor struct-shape-property-external-id :shape
                         "ExternalId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'property 'make-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property))
   common-lisp:nil))
(common-lisp:deftype property-alias () 'common-lisp:string)
(common-lisp:deftype property-data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass property-notification common-lisp:nil
                       ((topic :initarg :topic :initform
                         (common-lisp:error ":topic is required") :type
                         (common-lisp:or property-notification-topic
                                         common-lisp:null)
                         :accessor struct-shape-property-notification-topic
                         :shape "PropertyNotificationTopic" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or property-notification-state
                                         common-lisp:null)
                         :accessor struct-shape-property-notification-state
                         :shape "PropertyNotificationState" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-notification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-notification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'property-notification 'make-property-notification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          property-notification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          property-notification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic))
      (common-lisp:list
       (common-lisp:cons "topic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          property-notification))
   common-lisp:nil))
(common-lisp:deftype property-notification-state () 'common-lisp:string)
(common-lisp:deftype property-notification-topic () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass property-type common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute common-lisp:null) :accessor
                         struct-shape-property-type-attribute :shape
                         "Attribute" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (measurement :initarg :measurement :initform
                         common-lisp:nil :type
                         (common-lisp:or measurement common-lisp:null)
                         :accessor struct-shape-property-type-measurement
                         :shape "Measurement" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transform :initarg :transform :initform
                         common-lisp:nil :type
                         (common-lisp:or transform common-lisp:null) :accessor
                         struct-shape-property-type-transform :shape
                         "Transform" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metric :initarg :metric :initform common-lisp:nil
                         :type (common-lisp:or metric common-lisp:null)
                         :accessor struct-shape-property-type-metric :shape
                         "Metric" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'property-type 'make-property-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measurement))
      (common-lisp:list
       (common-lisp:cons "measurement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform))
      (common-lisp:list
       (common-lisp:cons "transform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-type))
   common-lisp:nil))
(common-lisp:deftype property-unit () 'common-lisp:string)
(common-lisp:deftype property-value-boolean-value () 'common-lisp:boolean)
(common-lisp:deftype property-value-double-value () 'common-lisp:double-float)
(common-lisp:deftype property-value-integer-value () 'common-lisp:integer)
(common-lisp:deftype property-value-string-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype put-asset-property-value-entries ()
   '(trivial-types:proper-list put-asset-property-value-entry))
 (common-lisp:defun make-put-asset-property-value-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            put-asset-property-value-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-asset-property-value-entry common-lisp:nil
                       ((entry-id :initarg :entry-id :initform
                         (common-lisp:error ":entryid is required") :type
                         (common-lisp:or entry-id common-lisp:null) :accessor
                         struct-shape-put-asset-property-value-entry-entry-id
                         :shape "EntryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-put-asset-property-value-entry-asset-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (property-id :initarg :property-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-put-asset-property-value-entry-property-id
                         :shape "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (property-alias :initarg :property-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-property-alias common-lisp:null)
                         :accessor
                         struct-shape-put-asset-property-value-entry-property-alias
                         :shape "AssetPropertyAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-values :initarg :property-values :initform
                         (common-lisp:error ":propertyvalues is required")
                         :type
                         (common-lisp:or asset-property-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-asset-property-value-entry-property-values
                         :shape "AssetPropertyValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-asset-property-value-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-asset-property-value-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-asset-property-value-entry
                    'make-put-asset-property-value-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-asset-property-value-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-asset-property-value-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-id))
      (common-lisp:list
       (common-lisp:cons "propertyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-alias))
      (common-lisp:list
       (common-lisp:cons "propertyAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-values))
      (common-lisp:list
       (common-lisp:cons "propertyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-asset-property-value-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-default-encryption-configuration-request
                       common-lisp:nil
                       ((encryption-type :initarg :encryption-type :initform
                         (common-lisp:error ":encryptiontype is required")
                         :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor
                         struct-shape-put-default-encryption-configuration-request-encryption-type
                         :shape "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-put-default-encryption-configuration-request-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-default-encryption-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-default-encryption-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-default-encryption-configuration-request
                    'make-put-default-encryption-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-default-encryption-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-default-encryption-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "encryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-default-encryption-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-default-encryption-configuration-response
                       common-lisp:nil
                       ((encryption-type :initarg :encryption-type :initform
                         (common-lisp:error ":encryptiontype is required")
                         :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor
                         struct-shape-put-default-encryption-configuration-response-encryption-type
                         :shape "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-put-default-encryption-configuration-response-kms-key-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-status :initarg :configuration-status
                         :initform
                         (common-lisp:error ":configurationstatus is required")
                         :type
                         (common-lisp:or configuration-status common-lisp:null)
                         :accessor
                         struct-shape-put-default-encryption-configuration-response-configuration-status
                         :shape "ConfigurationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-default-encryption-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-default-encryption-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-default-encryption-configuration-response
                    'make-put-default-encryption-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-default-encryption-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-default-encryption-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "encryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-status))
      (common-lisp:list
       (common-lisp:cons "configurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-default-encryption-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-logging-options-request common-lisp:nil
                       ((logging-options :initarg :logging-options :initform
                         (common-lisp:error ":loggingoptions is required")
                         :type
                         (common-lisp:or logging-options common-lisp:null)
                         :accessor
                         struct-shape-put-logging-options-request-logging-options
                         :shape "LoggingOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-logging-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-logging-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-logging-options-request
                    'make-put-logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-options))
      (common-lisp:list
       (common-lisp:cons "loggingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-logging-options-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-logging-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-logging-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-logging-options-response
                    'make-put-logging-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-storage-configuration-request common-lisp:nil
                       ((storage-type :initarg :storage-type :initform
                         (common-lisp:error ":storagetype is required") :type
                         (common-lisp:or storage-type common-lisp:null)
                         :accessor
                         struct-shape-put-storage-configuration-request-storage-type
                         :shape "StorageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-layer-storage :initarg :multi-layer-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or multi-layer-storage common-lisp:null)
                         :accessor
                         struct-shape-put-storage-configuration-request-multi-layer-storage
                         :shape "MultiLayerStorage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disassociated-data-storage :initarg
                         :disassociated-data-storage :initform common-lisp:nil
                         :type
                         (common-lisp:or disassociated-data-storage-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-storage-configuration-request-disassociated-data-storage
                         :shape "DisassociatedDataStorageState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-period common-lisp:null)
                         :accessor
                         struct-shape-put-storage-configuration-request-retention-period
                         :shape "RetentionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (warm-tier :initarg :warm-tier :initform
                         common-lisp:nil :type
                         (common-lisp:or warm-tier-state common-lisp:null)
                         :accessor
                         struct-shape-put-storage-configuration-request-warm-tier
                         :shape "WarmTierState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (warm-tier-retention-period :initarg
                         :warm-tier-retention-period :initform common-lisp:nil
                         :type
                         (common-lisp:or warm-tier-retention-period
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-storage-configuration-request-warm-tier-retention-period
                         :shape "WarmTierRetentionPeriod" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-storage-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-storage-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-storage-configuration-request
                    'make-put-storage-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "storageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-layer-storage))
      (common-lisp:list
       (common-lisp:cons "multiLayerStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociated-data-storage))
      (common-lisp:list
       (common-lisp:cons "disassociatedDataStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-tier))
      (common-lisp:list
       (common-lisp:cons "warmTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'warm-tier-retention-period))
      (common-lisp:list
       (common-lisp:cons "warmTierRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-storage-configuration-response common-lisp:nil
                       ((storage-type :initarg :storage-type :initform
                         (common-lisp:error ":storagetype is required") :type
                         (common-lisp:or storage-type common-lisp:null)
                         :accessor
                         struct-shape-put-storage-configuration-response-storage-type
                         :shape "StorageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-layer-storage :initarg :multi-layer-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or multi-layer-storage common-lisp:null)
                         :accessor
                         struct-shape-put-storage-configuration-response-multi-layer-storage
                         :shape "MultiLayerStorage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disassociated-data-storage :initarg
                         :disassociated-data-storage :initform common-lisp:nil
                         :type
                         (common-lisp:or disassociated-data-storage-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-storage-configuration-response-disassociated-data-storage
                         :shape "DisassociatedDataStorageState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-period common-lisp:null)
                         :accessor
                         struct-shape-put-storage-configuration-response-retention-period
                         :shape "RetentionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-status :initarg :configuration-status
                         :initform
                         (common-lisp:error ":configurationstatus is required")
                         :type
                         (common-lisp:or configuration-status common-lisp:null)
                         :accessor
                         struct-shape-put-storage-configuration-response-configuration-status
                         :shape "ConfigurationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (warm-tier :initarg :warm-tier :initform
                         common-lisp:nil :type
                         (common-lisp:or warm-tier-state common-lisp:null)
                         :accessor
                         struct-shape-put-storage-configuration-response-warm-tier
                         :shape "WarmTierState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (warm-tier-retention-period :initarg
                         :warm-tier-retention-period :initform common-lisp:nil
                         :type
                         (common-lisp:or warm-tier-retention-period
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-storage-configuration-response-warm-tier-retention-period
                         :shape "WarmTierRetentionPeriod" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-storage-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-storage-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-storage-configuration-response
                    'make-put-storage-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "storageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-layer-storage))
      (common-lisp:list
       (common-lisp:cons "multiLayerStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociated-data-storage))
      (common-lisp:list
       (common-lisp:cons "disassociatedDataStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-status))
      (common-lisp:list
       (common-lisp:cons "configurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-tier))
      (common-lisp:list
       (common-lisp:cons "warmTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'warm-tier-retention-period))
      (common-lisp:list
       (common-lisp:cons "warmTierRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype qualities () '(trivial-types:proper-list quality))
 (common-lisp:defun make-qualities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list quality))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quality () 'common-lisp:string)
(common-lisp:deftype query-statement () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition query-timeout-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       query-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'query-timeout-exception 'query-timeout-exception-message)))
(common-lisp:deftype resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource common-lisp:nil
                       ((portal :initarg :portal :initform common-lisp:nil
                         :type
                         (common-lisp:or portal-resource common-lisp:null)
                         :accessor struct-shape-resource-portal :shape
                         "PortalResource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project :initarg :project :initform common-lisp:nil
                         :type
                         (common-lisp:or project-resource common-lisp:null)
                         :accessor struct-shape-resource-project :shape
                         "ProjectResource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal))
      (common-lisp:list
       (common-lisp:cons "portal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exists-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-already-exists-exception-resource-id)
      (resource-arn :initarg :resource-arn :initform common-lisp:nil :reader
       resource-already-exists-exception-resource-arn)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message
                    'resource-already-exists-exception-resource-id
                    'resource-already-exists-exception-resource-arn)))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass retention-period common-lisp:nil
                       ((number-of-days :initarg :number-of-days :initform
                         common-lisp:nil :type
                         (common-lisp:or number-of-days common-lisp:null)
                         :accessor struct-shape-retention-period-number-of-days
                         :shape "NumberOfDays" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unlimited :initarg :unlimited :initform
                         common-lisp:nil :type
                         (common-lisp:or unlimited common-lisp:null) :accessor
                         struct-shape-retention-period-unlimited :shape
                         "Unlimited" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retention-period
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retention-period
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retention-period 'make-retention-period))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retention-period))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retention-period))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-days))
      (common-lisp:list
       (common-lisp:cons "numberOfDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unlimited))
      (common-lisp:list
       (common-lisp:cons "unlimited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retention-period))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass row common-lisp:nil
                       ((data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or datum-list common-lisp:null) :accessor
                         struct-shape-row-data :shape "DatumList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-row (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'row
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'row 'make-row))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input row))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input row))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input row))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rows () '(trivial-types:proper-list row))
 (common-lisp:defun make-rows
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list row))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ssoapplication-id () 'common-lisp:string)
(common-lisp:deftype scalar-type () 'common-lisp:string)
(common-lisp:deftype scalar-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype storage-type () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "AmazonResourceName" :location "querystring"
                         :location-name "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-resource common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-target-resource-asset-id :shape
                         "CustomID" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'target-resource 'make-target-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-resource))
   common-lisp:nil))
(common-lisp:deftype target-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defclass time-in-nanos common-lisp:nil
                       ((time-in-seconds :initarg :time-in-seconds :initform
                         (common-lisp:error ":timeinseconds is required") :type
                         (common-lisp:or time-in-seconds common-lisp:null)
                         :accessor struct-shape-time-in-nanos-time-in-seconds
                         :shape "TimeInSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offset-in-nanos :initarg :offset-in-nanos :initform
                         common-lisp:nil :type
                         (common-lisp:or offset-in-nanos common-lisp:null)
                         :accessor struct-shape-time-in-nanos-offset-in-nanos
                         :shape "OffsetInNanos" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-in-nanos
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'time-in-nanos
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'time-in-nanos 'make-time-in-nanos))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-in-nanos))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-in-nanos))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset-in-nanos))
      (common-lisp:list
       (common-lisp:cons "offsetInNanos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-in-nanos))
   common-lisp:nil))
(common-lisp:deftype time-in-seconds () 'common-lisp:integer)
(common-lisp:deftype time-ordering () 'common-lisp:string)
(common-lisp:deftype time-series-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype time-series-summaries ()
   '(trivial-types:proper-list time-series-summary))
 (common-lisp:defun make-time-series-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list time-series-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass time-series-summary common-lisp:nil
                       ((asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-time-series-summary-asset-id :shape "ID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (property-id :initarg :property-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-time-series-summary-property-id :shape
                         "ID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or property-alias common-lisp:null)
                         :accessor struct-shape-time-series-summary-alias
                         :shape "PropertyAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-series-id :initarg :time-series-id :initform
                         (common-lisp:error ":timeseriesid is required") :type
                         (common-lisp:or time-series-id common-lisp:null)
                         :accessor
                         struct-shape-time-series-summary-time-series-id :shape
                         "TimeSeriesId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         (common-lisp:error ":datatype is required") :type
                         (common-lisp:or property-data-type common-lisp:null)
                         :accessor struct-shape-time-series-summary-data-type
                         :shape "PropertyDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type-spec :initarg :data-type-spec :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-time-series-summary-data-type-spec :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (time-series-creation-date :initarg
                         :time-series-creation-date :initform
                         (common-lisp:error
                          ":timeseriescreationdate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-time-series-summary-time-series-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-series-last-update-date :initarg
                         :time-series-last-update-date :initform
                         (common-lisp:error
                          ":timeserieslastupdatedate is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-time-series-summary-time-series-last-update-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-series-arn :initarg :time-series-arn :initform
                         (common-lisp:error ":timeseriesarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-time-series-summary-time-series-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-series-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'time-series-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'time-series-summary 'make-time-series-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-series-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-series-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-id))
      (common-lisp:list
       (common-lisp:cons "propertyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-series-id))
      (common-lisp:list
       (common-lisp:cons "timeSeriesId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type-spec))
      (common-lisp:list
       (common-lisp:cons "dataTypeSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-creation-date))
      (common-lisp:list
       (common-lisp:cons "timeSeriesCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-last-update-date))
      (common-lisp:list
       (common-lisp:cons "timeSeriesLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-series-arn))
      (common-lisp:list
       (common-lisp:cons "timeSeriesArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-series-summary))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype timestamps () '(trivial-types:proper-list time-in-nanos))
 (common-lisp:defun make-timestamps
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list time-in-nanos))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defclass transform common-lisp:nil
                       ((expression :initarg :expression :initform
                         (common-lisp:error ":expression is required") :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         struct-shape-transform-expression :shape "Expression"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (variables :initarg :variables :initform
                         (common-lisp:error ":variables is required") :type
                         (common-lisp:or expression-variables common-lisp:null)
                         :accessor struct-shape-transform-variables :shape
                         "ExpressionVariables" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processing-config :initarg :processing-config
                         :initform common-lisp:nil :type
                         (common-lisp:or transform-processing-config
                                         common-lisp:null)
                         :accessor struct-shape-transform-processing-config
                         :shape "TransformProcessingConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transform
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transform
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'transform 'make-transform))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transform))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transform))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-config))
      (common-lisp:list
       (common-lisp:cons "processingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transform))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transform-processing-config common-lisp:nil
                       ((compute-location :initarg :compute-location :initform
                         (common-lisp:error ":computelocation is required")
                         :type
                         (common-lisp:or compute-location common-lisp:null)
                         :accessor
                         struct-shape-transform-processing-config-compute-location
                         :shape "ComputeLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forwarding-config :initarg :forwarding-config
                         :initform common-lisp:nil :type
                         (common-lisp:or forwarding-config common-lisp:null)
                         :accessor
                         struct-shape-transform-processing-config-forwarding-config
                         :shape "ForwardingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transform-processing-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transform-processing-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transform-processing-config
                    'make-transform-processing-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transform-processing-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transform-processing-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-location))
      (common-lisp:list
       (common-lisp:cons "computeLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forwarding-config))
      (common-lisp:list
       (common-lisp:cons "forwardingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transform-processing-config))
   common-lisp:nil))
(common-lisp:deftype traversal-direction () 'common-lisp:string)
(common-lisp:deftype traversal-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tumbling-window common-lisp:nil
                       ((interval :initarg :interval :initform
                         (common-lisp:error ":interval is required") :type
                         (common-lisp:or interval common-lisp:null) :accessor
                         struct-shape-tumbling-window-interval :shape
                         "Interval" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (offset :initarg :offset :initform common-lisp:nil
                         :type (common-lisp:or offset common-lisp:null)
                         :accessor struct-shape-tumbling-window-offset :shape
                         "Offset" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tumbling-window
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tumbling-window
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tumbling-window 'make-tumbling-window))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tumbling-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tumbling-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tumbling-window))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-message)))
(common-lisp:deftype unlimited () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "AmazonResourceName" :location "querystring"
                         :location-name "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-access-policy-request common-lisp:nil
                       ((access-policy-id :initarg :access-policy-id :initform
                         (common-lisp:error ":accesspolicyid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-access-policy-request-access-policy-id
                         :shape "ID" :location "uri" :location-name
                         "accessPolicyId")
                        (access-policy-identity :initarg
                         :access-policy-identity :initform
                         (common-lisp:error
                          ":accesspolicyidentity is required")
                         :type (common-lisp:or identity common-lisp:null)
                         :accessor
                         struct-shape-update-access-policy-request-access-policy-identity
                         :shape "Identity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-policy-resource :initarg
                         :access-policy-resource :initform
                         (common-lisp:error
                          ":accesspolicyresource is required")
                         :type (common-lisp:or resource common-lisp:null)
                         :accessor
                         struct-shape-update-access-policy-request-access-policy-resource
                         :shape "Resource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-policy-permission :initarg
                         :access-policy-permission :initform
                         (common-lisp:error
                          ":accesspolicypermission is required")
                         :type (common-lisp:or permission common-lisp:null)
                         :accessor
                         struct-shape-update-access-policy-request-access-policy-permission
                         :shape "Permission" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-access-policy-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-access-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-access-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-access-policy-request
                    'make-update-access-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-identity))
      (common-lisp:list
       (common-lisp:cons "accessPolicyIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-resource))
      (common-lisp:list
       (common-lisp:cons "accessPolicyResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-permission))
      (common-lisp:list
       (common-lisp:cons "accessPolicyPermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-access-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-access-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-access-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-access-policy-response
                    'make-update-access-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-asset-model-composite-model-request
                       common-lisp:nil
                       ((asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-update-asset-model-composite-model-request-asset-model-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetModelId")
                        (asset-model-composite-model-id :initarg
                         :asset-model-composite-model-id :initform
                         (common-lisp:error
                          ":assetmodelcompositemodelid is required")
                         :type (common-lisp:or custom-id common-lisp:null)
                         :accessor
                         struct-shape-update-asset-model-composite-model-request-asset-model-composite-model-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetModelCompositeModelId")
                        (asset-model-composite-model-external-id :initarg
                         :asset-model-composite-model-external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-update-asset-model-composite-model-request-asset-model-composite-model-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-composite-model-description :initarg
                         :asset-model-composite-model-description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-asset-model-composite-model-request-asset-model-composite-model-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-composite-model-name :initarg
                         :asset-model-composite-model-name :initform
                         (common-lisp:error
                          ":assetmodelcompositemodelname is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-asset-model-composite-model-request-asset-model-composite-model-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-asset-model-composite-model-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-composite-model-properties :initarg
                         :asset-model-composite-model-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-model-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-asset-model-composite-model-request-asset-model-composite-model-properties
                         :shape "AssetModelProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-asset-model-composite-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-asset-model-composite-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-asset-model-composite-model-request
                    'make-update-asset-model-composite-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-composite-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-composite-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-external-id))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-description))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-name))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-properties))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-composite-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-asset-model-composite-model-response
                       common-lisp:nil
                       ((asset-model-composite-model-path :initarg
                         :asset-model-composite-model-path :initform
                         (common-lisp:error
                          ":assetmodelcompositemodelpath is required")
                         :type
                         (common-lisp:or asset-model-composite-model-path
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-asset-model-composite-model-response-asset-model-composite-model-path
                         :shape "AssetModelCompositeModelPath" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-model-status :initarg :asset-model-status
                         :initform
                         (common-lisp:error ":assetmodelstatus is required")
                         :type
                         (common-lisp:or asset-model-status common-lisp:null)
                         :accessor
                         struct-shape-update-asset-model-composite-model-response-asset-model-status
                         :shape "AssetModelStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-asset-model-composite-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-asset-model-composite-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-asset-model-composite-model-response
                    'make-update-asset-model-composite-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-composite-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-composite-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-path))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-status))
      (common-lisp:list
       (common-lisp:cons "assetModelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-composite-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-asset-model-request common-lisp:nil
                       ((asset-model-id :initarg :asset-model-id :initform
                         (common-lisp:error ":assetmodelid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-update-asset-model-request-asset-model-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetModelId")
                        (asset-model-name :initarg :asset-model-name :initform
                         (common-lisp:error ":assetmodelname is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-asset-model-request-asset-model-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-model-description :initarg
                         :asset-model-description :initform common-lisp:nil
                         :type (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-asset-model-request-asset-model-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-properties :initarg
                         :asset-model-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or asset-model-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-asset-model-request-asset-model-properties
                         :shape "AssetModelProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-model-hierarchies :initarg
                         :asset-model-hierarchies :initform common-lisp:nil
                         :type
                         (common-lisp:or asset-model-hierarchies
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-asset-model-request-asset-model-hierarchies
                         :shape "AssetModelHierarchies" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-model-composite-models :initarg
                         :asset-model-composite-models :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-model-composite-models
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-asset-model-request-asset-model-composite-models
                         :shape "AssetModelCompositeModels" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-asset-model-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-external-id :initarg
                         :asset-model-external-id :initform common-lisp:nil
                         :type (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-update-asset-model-request-asset-model-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-asset-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-asset-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-asset-model-request
                    'make-update-asset-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-name))
      (common-lisp:list
       (common-lisp:cons "assetModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-description))
      (common-lisp:list
       (common-lisp:cons "assetModelDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-properties))
      (common-lisp:list
       (common-lisp:cons "assetModelProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-hierarchies))
      (common-lisp:list
       (common-lisp:cons "assetModelHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-models))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-external-id))
      (common-lisp:list
       (common-lisp:cons "assetModelExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-asset-model-response common-lisp:nil
                       ((asset-model-status :initarg :asset-model-status
                         :initform
                         (common-lisp:error ":assetmodelstatus is required")
                         :type
                         (common-lisp:or asset-model-status common-lisp:null)
                         :accessor
                         struct-shape-update-asset-model-response-asset-model-status
                         :shape "AssetModelStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-asset-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-asset-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-asset-model-response
                    'make-update-asset-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-status))
      (common-lisp:list
       (common-lisp:cons "assetModelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-asset-property-request common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-update-asset-property-request-asset-id
                         :shape "CustomID" :location "uri" :location-name
                         "assetId")
                        (property-id :initarg :property-id :initform
                         (common-lisp:error ":propertyid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-update-asset-property-request-property-id
                         :shape "CustomID" :location "uri" :location-name
                         "propertyId")
                        (property-alias :initarg :property-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or property-alias common-lisp:null)
                         :accessor
                         struct-shape-update-asset-property-request-property-alias
                         :shape "PropertyAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-notification-state :initarg
                         :property-notification-state :initform common-lisp:nil
                         :type
                         (common-lisp:or property-notification-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-asset-property-request-property-notification-state
                         :shape "PropertyNotificationState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-asset-property-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-unit :initarg :property-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or property-unit common-lisp:null)
                         :accessor
                         struct-shape-update-asset-property-request-property-unit
                         :shape "PropertyUnit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-asset-property-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-asset-property-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-asset-property-request
                    'make-update-asset-property-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-property-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-property-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-alias))
      (common-lisp:list
       (common-lisp:cons "propertyAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'property-notification-state))
      (common-lisp:list
       (common-lisp:cons "propertyNotificationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-unit))
      (common-lisp:list
       (common-lisp:cons "propertyUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-property-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-asset-request common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or custom-id common-lisp:null) :accessor
                         struct-shape-update-asset-request-asset-id :shape
                         "CustomID" :location "uri" :location-name "assetId")
                        (asset-name :initarg :asset-name :initform
                         (common-lisp:error ":assetname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-asset-request-asset-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-asset-request-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-description :initarg :asset-description
                         :initform common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-asset-request-asset-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-external-id :initarg :asset-external-id
                         :initform common-lisp:nil :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         struct-shape-update-asset-request-asset-external-id
                         :shape "ExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-asset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-asset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-asset-request 'make-update-asset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-asset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-name))
      (common-lisp:list
       (common-lisp:cons "assetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-description))
      (common-lisp:list
       (common-lisp:cons "assetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-external-id))
      (common-lisp:list
       (common-lisp:cons "assetExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-asset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-asset-response common-lisp:nil
                       ((asset-status :initarg :asset-status :initform
                         (common-lisp:error ":assetstatus is required") :type
                         (common-lisp:or asset-status common-lisp:null)
                         :accessor
                         struct-shape-update-asset-response-asset-status :shape
                         "AssetStatus" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-asset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-asset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-asset-response 'make-update-asset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-status))
      (common-lisp:list
       (common-lisp:cons "assetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dashboard-request common-lisp:nil
                       ((dashboard-id :initarg :dashboard-id :initform
                         (common-lisp:error ":dashboardid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-dashboard-request-dashboard-id
                         :shape "ID" :location "uri" :location-name
                         "dashboardId")
                        (dashboard-name :initarg :dashboard-name :initform
                         (common-lisp:error ":dashboardname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-dashboard-request-dashboard-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dashboard-description :initarg :dashboard-description
                         :initform common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-dashboard-request-dashboard-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dashboard-definition :initarg :dashboard-definition
                         :initform
                         (common-lisp:error ":dashboarddefinition is required")
                         :type
                         (common-lisp:or dashboard-definition common-lisp:null)
                         :accessor
                         struct-shape-update-dashboard-request-dashboard-definition
                         :shape "DashboardDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-dashboard-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dashboard-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-dashboard-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dashboard-request 'make-update-dashboard-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-name))
      (common-lisp:list
       (common-lisp:cons "dashboardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-description))
      (common-lisp:list
       (common-lisp:cons "dashboardDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-definition))
      (common-lisp:list
       (common-lisp:cons "dashboardDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dashboard-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dashboard-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-dashboard-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dashboard-response
                    'make-update-dashboard-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-capability-configuration-request
                       common-lisp:nil
                       ((gateway-id :initarg :gateway-id :initform
                         (common-lisp:error ":gatewayid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-gateway-capability-configuration-request-gateway-id
                         :shape "ID" :location "uri" :location-name
                         "gatewayId")
                        (capability-namespace :initarg :capability-namespace
                         :initform
                         (common-lisp:error ":capabilitynamespace is required")
                         :type
                         (common-lisp:or capability-namespace common-lisp:null)
                         :accessor
                         struct-shape-update-gateway-capability-configuration-request-capability-namespace
                         :shape "CapabilityNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capability-configuration :initarg
                         :capability-configuration :initform
                         (common-lisp:error
                          ":capabilityconfiguration is required")
                         :type
                         (common-lisp:or capability-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-gateway-capability-configuration-request-capability-configuration
                         :shape "CapabilityConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-gateway-capability-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-gateway-capability-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-gateway-capability-configuration-request
                    'make-update-gateway-capability-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-capability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-capability-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-namespace))
      (common-lisp:list
       (common-lisp:cons "capabilityNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-configuration))
      (common-lisp:list
       (common-lisp:cons "capabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-capability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-capability-configuration-response
                       common-lisp:nil
                       ((capability-namespace :initarg :capability-namespace
                         :initform
                         (common-lisp:error ":capabilitynamespace is required")
                         :type
                         (common-lisp:or capability-namespace common-lisp:null)
                         :accessor
                         struct-shape-update-gateway-capability-configuration-response-capability-namespace
                         :shape "CapabilityNamespace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capability-sync-status :initarg
                         :capability-sync-status :initform
                         (common-lisp:error
                          ":capabilitysyncstatus is required")
                         :type
                         (common-lisp:or capability-sync-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-gateway-capability-configuration-response-capability-sync-status
                         :shape "CapabilitySyncStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-gateway-capability-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-gateway-capability-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-gateway-capability-configuration-response
                    'make-update-gateway-capability-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-capability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-capability-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-namespace))
      (common-lisp:list
       (common-lisp:cons "capabilityNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-sync-status))
      (common-lisp:list
       (common-lisp:cons "capabilitySyncStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-capability-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-request common-lisp:nil
                       ((gateway-id :initarg :gateway-id :initform
                         (common-lisp:error ":gatewayid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-gateway-request-gateway-id :shape
                         "ID" :location "uri" :location-name "gatewayId")
                        (gateway-name :initarg :gateway-name :initform
                         (common-lisp:error ":gatewayname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-gateway-request-gateway-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-gateway-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-gateway-request 'make-update-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-name))
      (common-lisp:list
       (common-lisp:cons "gatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-portal-request common-lisp:nil
                       ((portal-id :initarg :portal-id :initform
                         (common-lisp:error ":portalid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-portal-request-portal-id :shape
                         "ID" :location "uri" :location-name "portalId")
                        (portal-name :initarg :portal-name :initform
                         (common-lisp:error ":portalname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-portal-request-portal-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-description :initarg :portal-description
                         :initform common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-portal-request-portal-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (portal-contact-email :initarg :portal-contact-email
                         :initform
                         (common-lisp:error ":portalcontactemail is required")
                         :type (common-lisp:or email common-lisp:null)
                         :accessor
                         struct-shape-update-portal-request-portal-contact-email
                         :shape "Email" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (portal-logo-image :initarg :portal-logo-image
                         :initform common-lisp:nil :type
                         (common-lisp:or image common-lisp:null) :accessor
                         struct-shape-update-portal-request-portal-logo-image
                         :shape "Image" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-portal-request-role-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-portal-request-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (notification-sender-email :initarg
                         :notification-sender-email :initform common-lisp:nil
                         :type (common-lisp:or email common-lisp:null)
                         :accessor
                         struct-shape-update-portal-request-notification-sender-email
                         :shape "Email" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alarms :initarg :alarms :initform common-lisp:nil
                         :type (common-lisp:or alarms common-lisp:null)
                         :accessor struct-shape-update-portal-request-alarms
                         :shape "Alarms" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-portal-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-portal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-portal-request 'make-update-portal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-name))
      (common-lisp:list
       (common-lisp:cons "portalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-description))
      (common-lisp:list
       (common-lisp:cons "portalDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portal-contact-email))
      (common-lisp:list
       (common-lisp:cons "portalContactEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-logo-image))
      (common-lisp:list
       (common-lisp:cons "portalLogoImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-sender-email))
      (common-lisp:list
       (common-lisp:cons "notificationSenderEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-portal-response common-lisp:nil
                       ((portal-status :initarg :portal-status :initform
                         (common-lisp:error ":portalstatus is required") :type
                         (common-lisp:or portal-status common-lisp:null)
                         :accessor
                         struct-shape-update-portal-response-portal-status
                         :shape "PortalStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-portal-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-portal-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-portal-response 'make-update-portal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-status))
      (common-lisp:list
       (common-lisp:cons "portalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-project-request common-lisp:nil
                       ((project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-project-request-project-id :shape
                         "ID" :location "uri" :location-name "projectId")
                        (project-name :initarg :project-name :initform
                         (common-lisp:error ":projectname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-project-request-project-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-description :initarg :project-description
                         :initform common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-project-request-project-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-project-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-project-request 'make-update-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-description))
      (common-lisp:list
       (common-lisp:cons "projectDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-project-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-project-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-project-response 'make-update-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-response))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-identity common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor struct-shape-user-identity-id :shape
                         "IdentityId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-identity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user-identity 'make-user-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype variable-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass variable-value common-lisp:nil
                       ((property-id :initarg :property-id :initform
                         common-lisp:nil :type
                         (common-lisp:or macro common-lisp:null) :accessor
                         struct-shape-variable-value-property-id :shape "Macro"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hierarchy-id :initarg :hierarchy-id :initform
                         common-lisp:nil :type
                         (common-lisp:or macro common-lisp:null) :accessor
                         struct-shape-variable-value-hierarchy-id :shape
                         "Macro" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (property-path :initarg :property-path :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-model-property-path
                                         common-lisp:null)
                         :accessor struct-shape-variable-value-property-path
                         :shape "AssetModelPropertyPath" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-variable-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'variable-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'variable-value 'make-variable-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input variable-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input variable-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-id))
      (common-lisp:list
       (common-lisp:cons "propertyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "hierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-path))
      (common-lisp:list
       (common-lisp:cons "propertyPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input variable-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass variant common-lisp:nil
                       ((string-value :initarg :string-value :initform
                         common-lisp:nil :type
                         (common-lisp:or property-value-string-value
                                         common-lisp:null)
                         :accessor struct-shape-variant-string-value :shape
                         "PropertyValueStringValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (integer-value :initarg :integer-value :initform
                         common-lisp:nil :type
                         (common-lisp:or property-value-integer-value
                                         common-lisp:null)
                         :accessor struct-shape-variant-integer-value :shape
                         "PropertyValueIntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (double-value :initarg :double-value :initform
                         common-lisp:nil :type
                         (common-lisp:or property-value-double-value
                                         common-lisp:null)
                         :accessor struct-shape-variant-double-value :shape
                         "PropertyValueDoubleValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (boolean-value :initarg :boolean-value :initform
                         common-lisp:nil :type
                         (common-lisp:or property-value-boolean-value
                                         common-lisp:null)
                         :accessor struct-shape-variant-boolean-value :shape
                         "PropertyValueBooleanValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-variant
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'variant
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'variant 'make-variant))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input variant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input variant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-value))
      (common-lisp:list
       (common-lisp:cons "integerValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean-value))
      (common-lisp:list
       (common-lisp:cons "booleanValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input variant))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass warm-tier-retention-period common-lisp:nil
                       ((number-of-days :initarg :number-of-days :initform
                         common-lisp:nil :type
                         (common-lisp:or number-of-days common-lisp:null)
                         :accessor
                         struct-shape-warm-tier-retention-period-number-of-days
                         :shape "NumberOfDays" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unlimited :initarg :unlimited :initform
                         common-lisp:nil :type
                         (common-lisp:or unlimited common-lisp:null) :accessor
                         struct-shape-warm-tier-retention-period-unlimited
                         :shape "Unlimited" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-warm-tier-retention-period
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'warm-tier-retention-period
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'warm-tier-retention-period
                    'make-warm-tier-retention-period))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          warm-tier-retention-period))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          warm-tier-retention-period))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-days))
      (common-lisp:list
       (common-lisp:cons "numberOfDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unlimited))
      (common-lisp:list
       (common-lisp:cons "unlimited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          warm-tier-retention-period))
   common-lisp:nil))
(common-lisp:deftype warm-tier-state () 'common-lisp:string)
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id hierarchy-id child-asset-id
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable asset-id hierarchy-id child-asset-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-assets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A/associate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "AssociateAssets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-assets))
(common-lisp:progn
 (common-lisp:defun associate-time-series-to-asset-property
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias asset-id property-id client-token)
   (common-lisp:declare
    (common-lisp:ignorable alias asset-id property-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-time-series-to-asset-property-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/timeseries/associate/"
                                                        "AssociateTimeSeriesToAssetProperty"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-time-series-to-asset-property))
(common-lisp:progn
 (common-lisp:defun batch-associate-project-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id asset-ids client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-id asset-ids client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-associate-project-assets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/assets/associate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-id))))
                                                        "BatchAssociateProjectAssets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-associate-project-assets))
(common-lisp:progn
 (common-lisp:defun batch-disassociate-project-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id asset-ids client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-id asset-ids client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-disassociate-project-assets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/assets/disassociate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-id))))
                                                        "BatchDisassociateProjectAssets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-disassociate-project-assets))
(common-lisp:progn
 (common-lisp:defun batch-get-asset-property-aggregates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entries next-token max-results)
   (common-lisp:declare (common-lisp:ignorable entries next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-asset-property-aggregates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/properties/batch/aggregates"
                                                        "BatchGetAssetPropertyAggregates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-asset-property-aggregates))
(common-lisp:progn
 (common-lisp:defun batch-get-asset-property-value
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entries next-token)
   (common-lisp:declare (common-lisp:ignorable entries next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-asset-property-value-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/properties/batch/latest"
                                                        "BatchGetAssetPropertyValue"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-asset-property-value))
(common-lisp:progn
 (common-lisp:defun batch-get-asset-property-value-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entries next-token max-results)
   (common-lisp:declare (common-lisp:ignorable entries next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-asset-property-value-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/properties/batch/history"
                                                        "BatchGetAssetPropertyValueHistory"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-asset-property-value-history))
(common-lisp:progn
 (common-lisp:defun batch-put-asset-property-value
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entries)
   (common-lisp:declare (common-lisp:ignorable entries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-put-asset-property-value-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/properties"
                                                        "BatchPutAssetPropertyValue"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-put-asset-property-value))
(common-lisp:progn
 (common-lisp:defun create-access-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-policy-identity
                     access-policy-resource access-policy-permission
                     client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable access-policy-identity access-policy-resource
     access-policy-permission client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/access-policies"
                                                        "CreateAccessPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-access-policy))
(common-lisp:progn
 (common-lisp:defun create-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-name asset-model-id client-token
                     tags asset-description asset-id asset-external-id)
   (common-lisp:declare
    (common-lisp:ignorable asset-name asset-model-id client-token tags
     asset-description asset-id asset-external-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-asset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/assets"
                                                        "CreateAsset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-asset))
(common-lisp:progn
 (common-lisp:defun create-asset-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-model-name asset-model-description
                     asset-model-properties asset-model-hierarchies
                     asset-model-composite-models client-token tags
                     asset-model-id asset-model-external-id asset-model-type)
   (common-lisp:declare
    (common-lisp:ignorable asset-model-name asset-model-description
     asset-model-properties asset-model-hierarchies
     asset-model-composite-models client-token tags asset-model-id
     asset-model-external-id asset-model-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-asset-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/asset-models"
                                                        "CreateAssetModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-asset-model))
(common-lisp:progn
 (common-lisp:defun create-asset-model-composite-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-model-id
                     parent-asset-model-composite-model-id
                     asset-model-composite-model-external-id
                     asset-model-composite-model-id
                     asset-model-composite-model-description
                     asset-model-composite-model-name
                     asset-model-composite-model-type client-token
                     composed-asset-model-id
                     asset-model-composite-model-properties)
   (common-lisp:declare
    (common-lisp:ignorable asset-model-id parent-asset-model-composite-model-id
     asset-model-composite-model-external-id asset-model-composite-model-id
     asset-model-composite-model-description asset-model-composite-model-name
     asset-model-composite-model-type client-token composed-asset-model-id
     asset-model-composite-model-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-asset-model-composite-model-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/asset-models/~A/composite-models"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-id))))
                                                        "CreateAssetModelCompositeModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-asset-model-composite-model))
(common-lisp:progn
 (common-lisp:defun create-bulk-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name job-role-arn files
                     error-report-location job-configuration adaptive-ingestion
                     delete-files-after-import)
   (common-lisp:declare
    (common-lisp:ignorable job-name job-role-arn files error-report-location
     job-configuration adaptive-ingestion delete-files-after-import))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bulk-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/jobs"
                                                        "CreateBulkImportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-bulk-import-job))
(common-lisp:progn
 (common-lisp:defun create-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id dashboard-name
                     dashboard-description dashboard-definition client-token
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable project-id dashboard-name dashboard-description
     dashboard-definition client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dashboard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/dashboards"
                                                        "CreateDashboard"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-dashboard))
(common-lisp:progn
 (common-lisp:defun create-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-name gateway-platform tags)
   (common-lisp:declare
    (common-lisp:ignorable gateway-name gateway-platform tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/20200301/gateways"
                                                        "CreateGateway"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-gateway))
(common-lisp:progn
 (common-lisp:defun create-portal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-name portal-description
                     portal-contact-email client-token portal-logo-image-file
                     role-arn tags portal-auth-mode notification-sender-email
                     alarms)
   (common-lisp:declare
    (common-lisp:ignorable portal-name portal-description portal-contact-email
     client-token portal-logo-image-file role-arn tags portal-auth-mode
     notification-sender-email alarms))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-portal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/portals"
                                                        "CreatePortal"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-portal))
(common-lisp:progn
 (common-lisp:defun create-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-id project-name
                     project-description client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable portal-id project-name project-description
     client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/projects"
                                                        "CreateProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-project))
(common-lisp:progn
 (common-lisp:defun delete-access-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-policy-id client-token)
   (common-lisp:declare (common-lisp:ignorable access-policy-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-access-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/access-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'access-policy-id))))
                                                        "DeleteAccessPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-access-policy))
(common-lisp:progn
 (common-lisp:defun delete-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id client-token)
   (common-lisp:declare (common-lisp:ignorable asset-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-asset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "DeleteAsset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-asset))
(common-lisp:progn
 (common-lisp:defun delete-asset-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-model-id client-token)
   (common-lisp:declare (common-lisp:ignorable asset-model-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-asset-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/asset-models/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-id))))
                                                        "DeleteAssetModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-asset-model))
(common-lisp:progn
 (common-lisp:defun delete-asset-model-composite-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-model-id
                     asset-model-composite-model-id client-token)
   (common-lisp:declare
    (common-lisp:ignorable asset-model-id asset-model-composite-model-id
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-asset-model-composite-model-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/asset-models/~A/composite-models/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-composite-model-id))))
                                                        "DeleteAssetModelCompositeModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-asset-model-composite-model))
(common-lisp:progn
 (common-lisp:defun delete-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dashboard-id client-token)
   (common-lisp:declare (common-lisp:ignorable dashboard-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dashboard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dashboards/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "DeleteDashboard"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-dashboard))
(common-lisp:progn
 (common-lisp:defun delete-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-id)
   (common-lisp:declare (common-lisp:ignorable gateway-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/20200301/gateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-id))))
                                                        "DeleteGateway"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-gateway))
(common-lisp:progn
 (common-lisp:defun delete-portal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-id client-token)
   (common-lisp:declare (common-lisp:ignorable portal-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-portal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'portal-id))))
                                                        "DeletePortal"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-portal))
(common-lisp:progn
 (common-lisp:defun delete-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id client-token)
   (common-lisp:declare (common-lisp:ignorable project-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-id))))
                                                        "DeleteProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-project))
(common-lisp:progn
 (common-lisp:defun delete-time-series
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias asset-id property-id client-token)
   (common-lisp:declare
    (common-lisp:ignorable alias asset-id property-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-time-series-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/timeseries/delete/"
                                                        "DeleteTimeSeries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-time-series))
(common-lisp:progn
 (common-lisp:defun describe-access-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-policy-id)
   (common-lisp:declare (common-lisp:ignorable access-policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-access-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/access-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'access-policy-id))))
                                                        "DescribeAccessPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-access-policy))
(common-lisp:progn
 (common-lisp:defun describe-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-id)
   (common-lisp:declare (common-lisp:ignorable action-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/actions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'action-id))))
                                                        "DescribeAction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-action))
(common-lisp:progn
 (common-lisp:defun describe-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id exclude-properties)
   (common-lisp:declare (common-lisp:ignorable asset-id exclude-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-asset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "DescribeAsset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-asset))
(common-lisp:progn
 (common-lisp:defun describe-asset-composite-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id asset-composite-model-id)
   (common-lisp:declare
    (common-lisp:ignorable asset-id asset-composite-model-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-asset-composite-model-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A/composite-models/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-composite-model-id))))
                                                        "DescribeAssetCompositeModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-asset-composite-model))
(common-lisp:progn
 (common-lisp:defun describe-asset-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-model-id exclude-properties)
   (common-lisp:declare
    (common-lisp:ignorable asset-model-id exclude-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-asset-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/asset-models/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-id))))
                                                        "DescribeAssetModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-asset-model))
(common-lisp:progn
 (common-lisp:defun describe-asset-model-composite-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-model-id
                     asset-model-composite-model-id)
   (common-lisp:declare
    (common-lisp:ignorable asset-model-id asset-model-composite-model-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-asset-model-composite-model-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/asset-models/~A/composite-models/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-composite-model-id))))
                                                        "DescribeAssetModelCompositeModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-asset-model-composite-model))
(common-lisp:progn
 (common-lisp:defun describe-asset-property
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id property-id)
   (common-lisp:declare (common-lisp:ignorable asset-id property-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-asset-property-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A/properties/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'property-id))))
                                                        "DescribeAssetProperty"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-asset-property))
(common-lisp:progn
 (common-lisp:defun describe-bulk-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-bulk-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DescribeBulkImportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-bulk-import-job))
(common-lisp:progn
 (common-lisp:defun describe-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dashboard-id)
   (common-lisp:declare (common-lisp:ignorable dashboard-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dashboard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dashboards/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "DescribeDashboard"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-dashboard))
(common-lisp:progn
 (common-lisp:defun describe-default-encryption-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iotsitewise-request :method "GET" :path
                                "/configuration/account/encryption" :operation
                                "DescribeDefaultEncryptionConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-default-encryption-configuration))
(common-lisp:progn
 (common-lisp:defun describe-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-id)
   (common-lisp:declare (common-lisp:ignorable gateway-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/20200301/gateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-id))))
                                                        "DescribeGateway"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-gateway))
(common-lisp:progn
 (common-lisp:defun describe-gateway-capability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-id capability-namespace)
   (common-lisp:declare
    (common-lisp:ignorable gateway-id capability-namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-gateway-capability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/20200301/gateways/~A/capability/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'capability-namespace))))
                                                        "DescribeGatewayCapabilityConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-gateway-capability-configuration))
(common-lisp:progn
 (common-lisp:defun describe-logging-options ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iotsitewise-request :method "GET" :path
                                "/logging" :operation
                                "DescribeLoggingOptions"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-logging-options))
(common-lisp:progn
 (common-lisp:defun describe-portal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-id)
   (common-lisp:declare (common-lisp:ignorable portal-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-portal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'portal-id))))
                                                        "DescribePortal"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-portal))
(common-lisp:progn
 (common-lisp:defun describe-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id)
   (common-lisp:declare (common-lisp:ignorable project-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-id))))
                                                        "DescribeProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-project))
(common-lisp:progn
 (common-lisp:defun describe-storage-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iotsitewise-request :method "GET" :path
                                "/configuration/account/storage" :operation
                                "DescribeStorageConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-storage-configuration))
(common-lisp:progn
 (common-lisp:defun describe-time-series
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias asset-id property-id)
   (common-lisp:declare (common-lisp:ignorable alias asset-id property-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-time-series-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/timeseries/describe/"
                                                        "DescribeTimeSeries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-time-series))
(common-lisp:progn
 (common-lisp:defun disassociate-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id hierarchy-id child-asset-id
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable asset-id hierarchy-id child-asset-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-assets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A/disassociate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "DisassociateAssets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-assets))
(common-lisp:progn
 (common-lisp:defun disassociate-time-series-from-asset-property
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias asset-id property-id client-token)
   (common-lisp:declare
    (common-lisp:ignorable alias asset-id property-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-time-series-from-asset-property-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/timeseries/disassociate/"
                                                        "DisassociateTimeSeriesFromAssetProperty"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-time-series-from-asset-property))
(common-lisp:progn
 (common-lisp:defun execute-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-resource action-definition-id
                     action-payload client-token)
   (common-lisp:declare
    (common-lisp:ignorable target-resource action-definition-id action-payload
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/actions"
                                                        "ExecuteAction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'execute-action))
(common-lisp:progn
 (common-lisp:defun execute-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-statement next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable query-statement next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/queries/execution"
                                                        "ExecuteQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'execute-query))
(common-lisp:progn
 (common-lisp:defun get-asset-property-aggregates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id property-id property-alias
                     aggregate-types resolution qualities start-date end-date
                     time-ordering next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable asset-id property-id property-alias aggregate-types
     resolution qualities start-date end-date time-ordering next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-asset-property-aggregates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/properties/aggregates"
                                                        "GetAssetPropertyAggregates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-asset-property-aggregates))
(common-lisp:progn
 (common-lisp:defun get-asset-property-value
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id property-id property-alias)
   (common-lisp:declare
    (common-lisp:ignorable asset-id property-id property-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-asset-property-value-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/properties/latest"
                                                        "GetAssetPropertyValue"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-asset-property-value))
(common-lisp:progn
 (common-lisp:defun get-asset-property-value-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id property-id property-alias
                     start-date end-date qualities time-ordering next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable asset-id property-id property-alias start-date
     end-date qualities time-ordering next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-asset-property-value-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/properties/history"
                                                        "GetAssetPropertyValueHistory"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-asset-property-value-history))
(common-lisp:progn
 (common-lisp:defun get-interpolated-asset-property-values
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id property-id property-alias
                     start-time-in-seconds start-time-offset-in-nanos
                     end-time-in-seconds end-time-offset-in-nanos quality
                     interval-in-seconds next-token max-results type
                     interval-window-in-seconds)
   (common-lisp:declare
    (common-lisp:ignorable asset-id property-id property-alias
     start-time-in-seconds start-time-offset-in-nanos end-time-in-seconds
     end-time-offset-in-nanos quality interval-in-seconds next-token
     max-results type interval-window-in-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-interpolated-asset-property-values-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/properties/interpolated"
                                                        "GetInterpolatedAssetPropertyValues"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-interpolated-asset-property-values))
(common-lisp:progn
 (common-lisp:defun list-access-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-type identity-id resource-type
                     resource-id iam-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable identity-type identity-id resource-type resource-id
     iam-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-access-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/access-policies"
                                                        "ListAccessPolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-access-policies))
(common-lisp:progn
 (common-lisp:defun list-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-resource-type target-resource-id
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable target-resource-type target-resource-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-actions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/actions"
                                                        "ListActions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-actions))
(common-lisp:progn
 (common-lisp:defun list-asset-model-composite-models
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-model-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable asset-model-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-asset-model-composite-models-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/asset-models/~A/composite-models"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-id))))
                                                        "ListAssetModelCompositeModels"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-asset-model-composite-models))
(common-lisp:progn
 (common-lisp:defun list-asset-model-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-model-id next-token max-results
                     filter)
   (common-lisp:declare
    (common-lisp:ignorable asset-model-id next-token max-results filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-asset-model-properties-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/asset-models/~A/properties"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-id))))
                                                        "ListAssetModelProperties"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-asset-model-properties))
(common-lisp:progn
 (common-lisp:defun list-asset-models
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results asset-model-types)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results asset-model-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-asset-models-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/asset-models"
                                                        "ListAssetModels"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-asset-models))
(common-lisp:progn
 (common-lisp:defun list-asset-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id next-token max-results filter)
   (common-lisp:declare
    (common-lisp:ignorable asset-id next-token max-results filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-asset-properties-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A/properties"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "ListAssetProperties"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-asset-properties))
(common-lisp:progn
 (common-lisp:defun list-asset-relationships
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id traversal-type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable asset-id traversal-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-asset-relationships-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A/assetRelationships"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "ListAssetRelationships"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-asset-relationships))
(common-lisp:progn
 (common-lisp:defun list-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results asset-model-id
                     filter)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results asset-model-id filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-assets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/assets"
                                                        "ListAssets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-assets))
(common-lisp:progn
 (common-lisp:defun list-associated-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id hierarchy-id traversal-direction
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable asset-id hierarchy-id traversal-direction next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-associated-assets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A/hierarchies"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "ListAssociatedAssets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-associated-assets))
(common-lisp:progn
 (common-lisp:defun list-bulk-import-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filter)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bulk-import-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/jobs"
                                                        "ListBulkImportJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-bulk-import-jobs))
(common-lisp:progn
 (common-lisp:defun list-composition-relationships
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-model-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable asset-model-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-composition-relationships-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/asset-models/~A/composition-relationships"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-id))))
                                                        "ListCompositionRelationships"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-composition-relationships))
(common-lisp:progn
 (common-lisp:defun list-dashboards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable project-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dashboards-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/dashboards"
                                                        "ListDashboards"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-dashboards))
(common-lisp:progn
 (common-lisp:defun list-gateways
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-gateways-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/20200301/gateways"
                                                        "ListGateways"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-gateways))
(common-lisp:progn
 (common-lisp:defun list-portals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-portals-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/portals"
                                                        "ListPortals"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-portals))
(common-lisp:progn
 (common-lisp:defun list-project-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable project-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-project-assets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/assets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-id))))
                                                        "ListProjectAssets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-project-assets))
(common-lisp:progn
 (common-lisp:defun list-projects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable portal-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-projects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/projects"
                                                        "ListProjects"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-projects))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/tags"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-time-series
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results asset-id
                     alias-prefix time-series-type)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results asset-id alias-prefix
     time-series-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-time-series-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/timeseries/"
                                                        "ListTimeSeries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-time-series))
(common-lisp:progn
 (common-lisp:defun put-default-encryption-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key encryption-type kms-key-id)
   (common-lisp:declare (common-lisp:ignorable encryption-type kms-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-default-encryption-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/configuration/account/encryption"
                                                        "PutDefaultEncryptionConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-default-encryption-configuration))
(common-lisp:progn
 (common-lisp:defun put-logging-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key logging-options)
   (common-lisp:declare (common-lisp:ignorable logging-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-logging-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/logging"
                                                        "PutLoggingOptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-logging-options))
(common-lisp:progn
 (common-lisp:defun put-storage-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key storage-type multi-layer-storage
                     disassociated-data-storage retention-period warm-tier
                     warm-tier-retention-period)
   (common-lisp:declare
    (common-lisp:ignorable storage-type multi-layer-storage
     disassociated-data-storage retention-period warm-tier
     warm-tier-retention-period))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-storage-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/configuration/account/storage"
                                                        "PutStorageConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-storage-configuration))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/tags"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" "/tags"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-access-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-policy-id access-policy-identity
                     access-policy-resource access-policy-permission
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable access-policy-id access-policy-identity
     access-policy-resource access-policy-permission client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-access-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/access-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'access-policy-id))))
                                                        "UpdateAccessPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-access-policy))
(common-lisp:progn
 (common-lisp:defun update-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id asset-name client-token
                     asset-description asset-external-id)
   (common-lisp:declare
    (common-lisp:ignorable asset-id asset-name client-token asset-description
     asset-external-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-asset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "UpdateAsset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-asset))
(common-lisp:progn
 (common-lisp:defun update-asset-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-model-id asset-model-name
                     asset-model-description asset-model-properties
                     asset-model-hierarchies asset-model-composite-models
                     client-token asset-model-external-id)
   (common-lisp:declare
    (common-lisp:ignorable asset-model-id asset-model-name
     asset-model-description asset-model-properties asset-model-hierarchies
     asset-model-composite-models client-token asset-model-external-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-asset-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/asset-models/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-id))))
                                                        "UpdateAssetModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-asset-model))
(common-lisp:progn
 (common-lisp:defun update-asset-model-composite-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-model-id
                     asset-model-composite-model-id
                     asset-model-composite-model-external-id
                     asset-model-composite-model-description
                     asset-model-composite-model-name client-token
                     asset-model-composite-model-properties)
   (common-lisp:declare
    (common-lisp:ignorable asset-model-id asset-model-composite-model-id
     asset-model-composite-model-external-id
     asset-model-composite-model-description asset-model-composite-model-name
     client-token asset-model-composite-model-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-asset-model-composite-model-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/asset-models/~A/composite-models/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-composite-model-id))))
                                                        "UpdateAssetModelCompositeModel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-asset-model-composite-model))
(common-lisp:progn
 (common-lisp:defun update-asset-property
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id property-id property-alias
                     property-notification-state client-token property-unit)
   (common-lisp:declare
    (common-lisp:ignorable asset-id property-id property-alias
     property-notification-state client-token property-unit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-asset-property-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A/properties/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'property-id))))
                                                        "UpdateAssetProperty"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-asset-property))
(common-lisp:progn
 (common-lisp:defun update-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dashboard-id dashboard-name
                     dashboard-description dashboard-definition client-token)
   (common-lisp:declare
    (common-lisp:ignorable dashboard-id dashboard-name dashboard-description
     dashboard-definition client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dashboard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dashboards/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "UpdateDashboard"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-dashboard))
(common-lisp:progn
 (common-lisp:defun update-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-id gateway-name)
   (common-lisp:declare (common-lisp:ignorable gateway-id gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/20200301/gateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-id))))
                                                        "UpdateGateway"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-gateway))
(common-lisp:progn
 (common-lisp:defun update-gateway-capability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-id capability-namespace
                     capability-configuration)
   (common-lisp:declare
    (common-lisp:ignorable gateway-id capability-namespace
     capability-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-gateway-capability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/20200301/gateways/~A/capability"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-id))))
                                                        "UpdateGatewayCapabilityConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-gateway-capability-configuration))
(common-lisp:progn
 (common-lisp:defun update-portal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-id portal-name portal-description
                     portal-contact-email portal-logo-image role-arn
                     client-token notification-sender-email alarms)
   (common-lisp:declare
    (common-lisp:ignorable portal-id portal-name portal-description
     portal-contact-email portal-logo-image role-arn client-token
     notification-sender-email alarms))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-portal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'portal-id))))
                                                        "UpdatePortal"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-portal))
(common-lisp:progn
 (common-lisp:defun update-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id project-name
                     project-description client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-id project-name project-description
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-id))))
                                                        "UpdateProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-project))
