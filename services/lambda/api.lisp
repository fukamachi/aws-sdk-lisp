;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/lambda/api
  (:use)
  (:nicknames #:aws/lambda)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/lambda/api)
(common-lisp:progn
 (common-lisp:define-condition lambda-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'lambda-error))
(common-lisp:progn
 (common-lisp:defclass lambda-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "lambda" :api-version
                        "2015-03-31" :host-prefix "lambda" :signing-name
                        common-lisp:nil :global-host common-lisp:nil))
 (common-lisp:export 'lambda-request))
(common-lisp:defvar *error-map*
  '(("CodeSigningConfigNotFoundException"
     . code-signing-config-not-found-exception)
    ("CodeStorageExceededException" . code-storage-exceeded-exception)
    ("CodeVerificationFailedException" . code-verification-failed-exception)
    ("EC2AccessDeniedException" . ec2access-denied-exception)
    ("EC2ThrottledException" . ec2throttled-exception)
    ("EC2UnexpectedException" . ec2unexpected-exception)
    ("EFSIOException" . efsioexception)
    ("EFSMountConnectivityException" . efsmount-connectivity-exception)
    ("EFSMountFailureException" . efsmount-failure-exception)
    ("EFSMountTimeoutException" . efsmount-timeout-exception)
    ("ENILimitReachedException" . enilimit-reached-exception)
    ("InvalidCodeSignatureException" . invalid-code-signature-exception)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidRequestContentException" . invalid-request-content-exception)
    ("InvalidRuntimeException" . invalid-runtime-exception)
    ("InvalidSecurityGroupIDException" . invalid-security-group-idexception)
    ("InvalidSubnetIDException" . invalid-subnet-idexception)
    ("InvalidZipFileException" . invalid-zip-file-exception)
    ("KMSAccessDeniedException" . kmsaccess-denied-exception)
    ("KMSDisabledException" . kmsdisabled-exception)
    ("KMSInvalidStateException" . kmsinvalid-state-exception)
    ("KMSNotFoundException" . kmsnot-found-exception)
    ("PolicyLengthExceededException" . policy-length-exceeded-exception)
    ("PreconditionFailedException" . precondition-failed-exception)
    ("ProvisionedConcurrencyConfigNotFoundException"
     . provisioned-concurrency-config-not-found-exception)
    ("RecursiveInvocationException" . recursive-invocation-exception)
    ("RequestTooLargeException" . request-too-large-exception)
    ("ResourceConflictException" . resource-conflict-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceNotReadyException" . resource-not-ready-exception)
    ("ServiceException" . service-exception)
    ("SnapStartException" . snap-start-exception)
    ("SnapStartNotReadyException" . snap-start-not-ready-exception)
    ("SnapStartTimeoutException" . snap-start-timeout-exception)
    ("SubnetIPAddressLimitReachedException"
     . subnet-ipaddress-limit-reached-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("UnsupportedMediaTypeException" . unsupported-media-type-exception)))
(common-lisp:progn
 (common-lisp:defclass account-limit common-lisp:nil
                       ((total-code-size :initarg :total-code-size :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-account-limit-total-code-size :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (code-size-unzipped :initarg :code-size-unzipped
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-account-limit-code-size-unzipped :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (code-size-zipped :initarg :code-size-zipped :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-account-limit-code-size-zipped :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (concurrent-executions :initarg :concurrent-executions
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-account-limit-concurrent-executions
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unreserved-concurrent-executions :initarg
                         :unreserved-concurrent-executions :initform
                         common-lisp:nil :type
                         (common-lisp:or unreserved-concurrent-executions
                                         common-lisp:null)
                         :accessor
                         struct-shape-account-limit-unreserved-concurrent-executions
                         :shape "UnreservedConcurrentExecutions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-limit
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-limit
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'account-limit 'make-account-limit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-code-size))
      (common-lisp:list
       (common-lisp:cons "TotalCodeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-size-unzipped))
      (common-lisp:list
       (common-lisp:cons "CodeSizeUnzipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-size-zipped))
      (common-lisp:list
       (common-lisp:cons "CodeSizeZipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "ConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unreserved-concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "UnreservedConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass account-usage common-lisp:nil
                       ((total-code-size :initarg :total-code-size :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-account-usage-total-code-size :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (function-count :initarg :function-count :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-account-usage-function-count :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-usage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-usage
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'account-usage 'make-account-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-code-size))
      (common-lisp:list
       (common-lisp:cons "TotalCodeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-count))
      (common-lisp:list
       (common-lisp:cons "FunctionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-usage))
   common-lisp:nil))
(common-lisp:deftype action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass add-layer-version-permission-request common-lisp:nil
                       ((layer-name :initarg :layer-name :initform
                         (common-lisp:error ":layer-name is required") :type
                         (common-lisp:or layer-name common-lisp:null) :accessor
                         struct-shape-add-layer-version-permission-request-layer-name
                         :shape "LayerName" :location "uri" :location-name
                         "LayerName")
                        (version-number :initarg :version-number :initform
                         (common-lisp:error ":version-number is required")
                         :type
                         (common-lisp:or layer-version-number common-lisp:null)
                         :accessor
                         struct-shape-add-layer-version-permission-request-version-number
                         :shape "LayerVersionNumber" :location "uri"
                         :location-name "VersionNumber")
                        (statement-id :initarg :statement-id :initform
                         (common-lisp:error ":statement-id is required") :type
                         (common-lisp:or statement-id common-lisp:null)
                         :accessor
                         struct-shape-add-layer-version-permission-request-statement-id
                         :shape "StatementId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or layer-permission-allowed-action
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-layer-version-permission-request-action
                         :shape "LayerPermissionAllowedAction" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (principal :initarg :principal :initform
                         (common-lisp:error ":principal is required") :type
                         (common-lisp:or layer-permission-allowed-principal
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-layer-version-permission-request-principal
                         :shape "LayerPermissionAllowedPrincipal" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-id :initarg :organization-id :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-add-layer-version-permission-request-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-add-layer-version-permission-request-revision-id
                         :shape "String" :location "querystring" :location-name
                         "RevisionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-layer-version-permission-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-layer-version-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-layer-version-permission-request
                    'make-add-layer-version-permission-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-layer-version-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-layer-version-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-id))
      (common-lisp:list
       (common-lisp:cons "StatementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-layer-version-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-layer-version-permission-response common-lisp:nil
                       ((statement :initarg :statement :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-add-layer-version-permission-response-statement
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-add-layer-version-permission-response-revision-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-layer-version-permission-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-layer-version-permission-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-layer-version-permission-response
                    'make-add-layer-version-permission-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-layer-version-permission-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-layer-version-permission-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement))
      (common-lisp:list
       (common-lisp:cons "Statement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-layer-version-permission-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-permission-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-add-permission-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (statement-id :initarg :statement-id :initform
                         (common-lisp:error ":statement-id is required") :type
                         (common-lisp:or statement-id common-lisp:null)
                         :accessor
                         struct-shape-add-permission-request-statement-id
                         :shape "StatementId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or action common-lisp:null) :accessor
                         struct-shape-add-permission-request-action :shape
                         "Action" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (principal :initarg :principal :initform
                         (common-lisp:error ":principal is required") :type
                         (common-lisp:or principal common-lisp:null) :accessor
                         struct-shape-add-permission-request-principal :shape
                         "Principal" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-arn :initarg :source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-add-permission-request-source-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-account :initarg :source-account :initform
                         common-lisp:nil :type
                         (common-lisp:or source-owner common-lisp:null)
                         :accessor
                         struct-shape-add-permission-request-source-account
                         :shape "SourceOwner" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-source-token :initarg :event-source-token
                         :initform common-lisp:nil :type
                         (common-lisp:or event-source-token common-lisp:null)
                         :accessor
                         struct-shape-add-permission-request-event-source-token
                         :shape "EventSourceToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-add-permission-request-qualifier :shape
                         "Qualifier" :location "querystring" :location-name
                         "Qualifier")
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-add-permission-request-revision-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (principal-org-id :initarg :principal-org-id :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-org-id common-lisp:null)
                         :accessor
                         struct-shape-add-permission-request-principal-org-id
                         :shape "PrincipalOrgID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-url-auth-type :initarg
                         :function-url-auth-type :initform common-lisp:nil
                         :type
                         (common-lisp:or function-url-auth-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-permission-request-function-url-auth-type
                         :shape "FunctionUrlAuthType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-permission-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-permission-request 'make-add-permission-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-id))
      (common-lisp:list
       (common-lisp:cons "StatementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-account))
      (common-lisp:list
       (common-lisp:cons "SourceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-token))
      (common-lisp:list
       (common-lisp:cons "EventSourceToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-org-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalOrgID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'function-url-auth-type))
      (common-lisp:list
       (common-lisp:cons "FunctionUrlAuthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-permission-response common-lisp:nil
                       ((statement :initarg :statement :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-add-permission-response-statement :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-permission-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-permission-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-permission-response 'make-add-permission-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-permission-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-permission-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement))
      (common-lisp:list
       (common-lisp:cons "Statement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-permission-response))
   common-lisp:nil))
(common-lisp:deftype additional-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype additional-version-weights () 'common-lisp:hash-table)
 (common-lisp:defun make-additional-version-weights
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass alias-configuration common-lisp:nil
                       ((alias-arn :initarg :alias-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or function-arn common-lisp:null)
                         :accessor struct-shape-alias-configuration-alias-arn
                         :shape "FunctionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or alias common-lisp:null) :accessor
                         struct-shape-alias-configuration-name :shape "Alias"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (function-version :initarg :function-version :initform
                         common-lisp:nil :type
                         (common-lisp:or version common-lisp:null) :accessor
                         struct-shape-alias-configuration-function-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-alias-configuration-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (routing-config :initarg :routing-config :initform
                         common-lisp:nil :type
                         (common-lisp:or alias-routing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-alias-configuration-routing-config :shape
                         "AliasRoutingConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-alias-configuration-revision-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-alias-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'alias-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'alias-configuration 'make-alias-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alias-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alias-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-arn))
      (common-lisp:list
       (common-lisp:cons "AliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-version))
      (common-lisp:list
       (common-lisp:cons "FunctionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-config))
      (common-lisp:list
       (common-lisp:cons "RoutingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alias-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alias-list ()
   '(trivial-types:proper-list alias-configuration))
 (common-lisp:defun make-alias-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alias-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass alias-routing-configuration common-lisp:nil
                       ((additional-version-weights :initarg
                         :additional-version-weights :initform common-lisp:nil
                         :type
                         (common-lisp:or additional-version-weights
                                         common-lisp:null)
                         :accessor
                         struct-shape-alias-routing-configuration-additional-version-weights
                         :shape "AdditionalVersionWeights" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-alias-routing-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'alias-routing-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'alias-routing-configuration
                    'make-alias-routing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          alias-routing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          alias-routing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-version-weights))
      (common-lisp:list
       (common-lisp:cons "AdditionalVersionWeights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          alias-routing-configuration))
   common-lisp:nil))
(common-lisp:deftype allow-credentials () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype allow-methods-list ()
   '(trivial-types:proper-list method))
 (common-lisp:defun make-allow-methods-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list method))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype allow-origins-list ()
   '(trivial-types:proper-list origin))
 (common-lisp:defun make-allow-origins-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list origin))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass allowed-publishers common-lisp:nil
                       ((signing-profile-version-arns :initarg
                         :signing-profile-version-arns :initform
                         (common-lisp:error
                          ":signing-profile-version-arns is required")
                         :type
                         (common-lisp:or signing-profile-version-arns
                                         common-lisp:null)
                         :accessor
                         struct-shape-allowed-publishers-signing-profile-version-arns
                         :shape "SigningProfileVersionArns" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-allowed-publishers
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'allowed-publishers
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'allowed-publishers 'make-allowed-publishers))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input allowed-publishers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input allowed-publishers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signing-profile-version-arns))
      (common-lisp:list
       (common-lisp:cons "SigningProfileVersionArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input allowed-publishers))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass amazon-managed-kafka-event-source-config common-lisp:nil
                       ((consumer-group-id :initarg :consumer-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-amazon-managed-kafka-event-source-config-consumer-group-id
                         :shape "URI" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-amazon-managed-kafka-event-source-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'amazon-managed-kafka-event-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'amazon-managed-kafka-event-source-config
                    'make-amazon-managed-kafka-event-source-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amazon-managed-kafka-event-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amazon-managed-kafka-event-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-group-id))
      (common-lisp:list
       (common-lisp:cons "ConsumerGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amazon-managed-kafka-event-source-config))
   common-lisp:nil))
(common-lisp:deftype application-log-level () 'common-lisp:string)
(common-lisp:deftype architecture () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype architectures-list ()
   '(trivial-types:proper-list architecture))
 (common-lisp:defun make-architectures-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list architecture))
   aws-sdk/generator/shape::members))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype batch-size () 'common-lisp:integer)
(common-lisp:deftype bisect-batch-on-function-error () 'common-lisp:boolean)
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype blob-stream ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass code-signing-config common-lisp:nil
                       ((code-signing-config-id :initarg
                         :code-signing-config-id :initform
                         (common-lisp:error
                          ":code-signing-config-id is required")
                         :type
                         (common-lisp:or code-signing-config-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-signing-config-code-signing-config-id
                         :shape "CodeSigningConfigId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-signing-config-arn :initarg
                         :code-signing-config-arn :initform
                         (common-lisp:error
                          ":code-signing-config-arn is required")
                         :type
                         (common-lisp:or code-signing-config-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-signing-config-code-signing-config-arn
                         :shape "CodeSigningConfigArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-code-signing-config-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-publishers :initarg :allowed-publishers
                         :initform
                         (common-lisp:error ":allowed-publishers is required")
                         :type
                         (common-lisp:or allowed-publishers common-lisp:null)
                         :accessor
                         struct-shape-code-signing-config-allowed-publishers
                         :shape "AllowedPublishers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-signing-policies :initarg :code-signing-policies
                         :initform
                         (common-lisp:error
                          ":code-signing-policies is required")
                         :type
                         (common-lisp:or code-signing-policies
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-signing-config-code-signing-policies
                         :shape "CodeSigningPolicies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         (common-lisp:error ":last-modified is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-code-signing-config-last-modified :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-signing-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-signing-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'code-signing-config 'make-code-signing-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-signing-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-signing-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-signing-config-id))
      (common-lisp:list
       (common-lisp:cons "CodeSigningConfigId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-signing-config-arn))
      (common-lisp:list
       (common-lisp:cons "CodeSigningConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-publishers))
      (common-lisp:list
       (common-lisp:cons "AllowedPublishers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-signing-policies))
      (common-lisp:list
       (common-lisp:cons "CodeSigningPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-signing-config))
   common-lisp:nil))
(common-lisp:deftype code-signing-config-arn () 'common-lisp:string)
(common-lisp:deftype code-signing-config-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype code-signing-config-list ()
   '(trivial-types:proper-list code-signing-config))
 (common-lisp:defun make-code-signing-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-signing-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition code-signing-config-not-found-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       code-signing-config-not-found-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       code-signing-config-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'code-signing-config-not-found-exception
                    'code-signing-config-not-found-exception-type
                    'code-signing-config-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass code-signing-policies common-lisp:nil
                       ((untrusted-artifact-on-deployment :initarg
                         :untrusted-artifact-on-deployment :initform
                         common-lisp:nil :type
                         (common-lisp:or code-signing-policy common-lisp:null)
                         :accessor
                         struct-shape-code-signing-policies-untrusted-artifact-on-deployment
                         :shape "CodeSigningPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-signing-policies
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-signing-policies
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'code-signing-policies 'make-code-signing-policies))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-signing-policies))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-signing-policies))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'untrusted-artifact-on-deployment))
      (common-lisp:list
       (common-lisp:cons "UntrustedArtifactOnDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-signing-policies))
   common-lisp:nil))
(common-lisp:deftype code-signing-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition code-storage-exceeded-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       code-storage-exceeded-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       code-storage-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'code-storage-exceeded-exception
                    'code-storage-exceeded-exception-type
                    'code-storage-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition code-verification-failed-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       code-verification-failed-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       code-verification-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'code-verification-failed-exception
                    'code-verification-failed-exception-type
                    'code-verification-failed-exception-message)))
(common-lisp:deftype collection-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compatible-architectures ()
   '(trivial-types:proper-list architecture))
 (common-lisp:defun make-compatible-architectures
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list architecture))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype compatible-runtimes ()
   '(trivial-types:proper-list runtime))
 (common-lisp:defun make-compatible-runtimes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list runtime))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass concurrency common-lisp:nil
                       ((reserved-concurrent-executions :initarg
                         :reserved-concurrent-executions :initform
                         common-lisp:nil :type
                         (common-lisp:or reserved-concurrent-executions
                                         common-lisp:null)
                         :accessor
                         struct-shape-concurrency-reserved-concurrent-executions
                         :shape "ReservedConcurrentExecutions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-concurrency
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'concurrency
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'concurrency 'make-concurrency))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input concurrency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input concurrency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "ReservedConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input concurrency))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cors common-lisp:nil
                       ((allow-credentials :initarg :allow-credentials
                         :initform common-lisp:nil :type
                         (common-lisp:or allow-credentials common-lisp:null)
                         :accessor struct-shape-cors-allow-credentials :shape
                         "AllowCredentials" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-headers :initarg :allow-headers :initform
                         common-lisp:nil :type
                         (common-lisp:or headers-list common-lisp:null)
                         :accessor struct-shape-cors-allow-headers :shape
                         "HeadersList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allow-methods :initarg :allow-methods :initform
                         common-lisp:nil :type
                         (common-lisp:or allow-methods-list common-lisp:null)
                         :accessor struct-shape-cors-allow-methods :shape
                         "AllowMethodsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-origins :initarg :allow-origins :initform
                         common-lisp:nil :type
                         (common-lisp:or allow-origins-list common-lisp:null)
                         :accessor struct-shape-cors-allow-origins :shape
                         "AllowOriginsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expose-headers :initarg :expose-headers :initform
                         common-lisp:nil :type
                         (common-lisp:or headers-list common-lisp:null)
                         :accessor struct-shape-cors-expose-headers :shape
                         "HeadersList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-age :initarg :max-age :initform common-lisp:nil
                         :type (common-lisp:or max-age common-lisp:null)
                         :accessor struct-shape-cors-max-age :shape "MaxAge"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cors (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cors
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cors 'make-cors))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cors))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cors))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-credentials))
      (common-lisp:list
       (common-lisp:cons "AllowCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-headers))
      (common-lisp:list
       (common-lisp:cons "AllowHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-methods))
      (common-lisp:list
       (common-lisp:cons "AllowMethods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-origins))
      (common-lisp:list
       (common-lisp:cons "AllowOrigins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expose-headers))
      (common-lisp:list
       (common-lisp:cons "ExposeHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-age))
      (common-lisp:list
       (common-lisp:cons "MaxAge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cors))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-alias-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-create-alias-request-function-name :shape
                         "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or alias common-lisp:null) :accessor
                         struct-shape-create-alias-request-name :shape "Alias"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (function-version :initarg :function-version :initform
                         (common-lisp:error ":function-version is required")
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         struct-shape-create-alias-request-function-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-alias-request-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (routing-config :initarg :routing-config :initform
                         common-lisp:nil :type
                         (common-lisp:or alias-routing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-alias-request-routing-config
                         :shape "AliasRoutingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-alias-request 'make-create-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-version))
      (common-lisp:list
       (common-lisp:cons "FunctionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-config))
      (common-lisp:list
       (common-lisp:cons "RoutingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-code-signing-config-request common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-code-signing-config-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-publishers :initarg :allowed-publishers
                         :initform
                         (common-lisp:error ":allowed-publishers is required")
                         :type
                         (common-lisp:or allowed-publishers common-lisp:null)
                         :accessor
                         struct-shape-create-code-signing-config-request-allowed-publishers
                         :shape "AllowedPublishers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-signing-policies :initarg :code-signing-policies
                         :initform common-lisp:nil :type
                         (common-lisp:or code-signing-policies
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-code-signing-config-request-code-signing-policies
                         :shape "CodeSigningPolicies" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-code-signing-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-code-signing-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-code-signing-config-request
                    'make-create-code-signing-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-code-signing-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-code-signing-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-publishers))
      (common-lisp:list
       (common-lisp:cons "AllowedPublishers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-signing-policies))
      (common-lisp:list
       (common-lisp:cons "CodeSigningPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-code-signing-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-code-signing-config-response common-lisp:nil
                       ((code-signing-config :initarg :code-signing-config
                         :initform
                         (common-lisp:error ":code-signing-config is required")
                         :type
                         (common-lisp:or code-signing-config common-lisp:null)
                         :accessor
                         struct-shape-create-code-signing-config-response-code-signing-config
                         :shape "CodeSigningConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-code-signing-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-code-signing-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-code-signing-config-response
                    'make-create-code-signing-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-code-signing-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-code-signing-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-signing-config))
      (common-lisp:list
       (common-lisp:cons "CodeSigningConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-code-signing-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-source-mapping-request common-lisp:nil
                       ((event-source-arn :initarg :event-source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-event-source-mapping-request-event-source-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-function-name
                         :shape "FunctionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (batch-size :initarg :batch-size :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-size common-lisp:null) :accessor
                         struct-shape-create-event-source-mapping-request-batch-size
                         :shape "BatchSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-criteria :initarg :filter-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-criteria common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-filter-criteria
                         :shape "FilterCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-maximum-batching-window-in-seconds
                         :shape "MaximumBatchingWindowInSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (parallelization-factor :initarg
                         :parallelization-factor :initform common-lisp:nil
                         :type
                         (common-lisp:or parallelization-factor
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-parallelization-factor
                         :shape "ParallelizationFactor" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (starting-position :initarg :starting-position
                         :initform common-lisp:nil :type
                         (common-lisp:or event-source-position
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-starting-position
                         :shape "EventSourcePosition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (starting-position-timestamp :initarg
                         :starting-position-timestamp :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-create-event-source-mapping-request-starting-position-timestamp
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination-config :initarg :destination-config
                         :initform common-lisp:nil :type
                         (common-lisp:or destination-config common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-destination-config
                         :shape "DestinationConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-record-age-in-seconds :initarg
                         :maximum-record-age-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or maximum-record-age-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-maximum-record-age-in-seconds
                         :shape "MaximumRecordAgeInSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bisect-batch-on-function-error :initarg
                         :bisect-batch-on-function-error :initform
                         common-lisp:nil :type
                         (common-lisp:or bisect-batch-on-function-error
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-bisect-batch-on-function-error
                         :shape "BisectBatchOnFunctionError" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-retry-attempts :initarg
                         :maximum-retry-attempts :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          maximum-retry-attempts-event-source-mapping
                          common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-maximum-retry-attempts
                         :shape "MaximumRetryAttemptsEventSourceMapping"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tumbling-window-in-seconds :initarg
                         :tumbling-window-in-seconds :initform common-lisp:nil
                         :type
                         (common-lisp:or tumbling-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-tumbling-window-in-seconds
                         :shape "TumblingWindowInSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (topics :initarg :topics :initform common-lisp:nil
                         :type (common-lisp:or topics common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-topics
                         :shape "Topics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (queues :initarg :queues :initform common-lisp:nil
                         :type (common-lisp:or queues common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-queues
                         :shape "Queues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-access-configurations :initarg
                         :source-access-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or source-access-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-source-access-configurations
                         :shape "SourceAccessConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (self-managed-event-source :initarg
                         :self-managed-event-source :initform common-lisp:nil
                         :type
                         (common-lisp:or self-managed-event-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-self-managed-event-source
                         :shape "SelfManagedEventSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (function-response-types :initarg
                         :function-response-types :initform common-lisp:nil
                         :type
                         (common-lisp:or function-response-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-function-response-types
                         :shape "FunctionResponseTypeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (amazon-managed-kafka-event-source-config :initarg
                         :amazon-managed-kafka-event-source-config :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          amazon-managed-kafka-event-source-config
                          common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-amazon-managed-kafka-event-source-config
                         :shape "AmazonManagedKafkaEventSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (self-managed-kafka-event-source-config :initarg
                         :self-managed-kafka-event-source-config :initform
                         common-lisp:nil :type
                         (common-lisp:or self-managed-kafka-event-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-self-managed-kafka-event-source-config
                         :shape "SelfManagedKafkaEventSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scaling-config :initarg :scaling-config :initform
                         common-lisp:nil :type
                         (common-lisp:or scaling-config common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-scaling-config
                         :shape "ScalingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-dbevent-source-config :initarg
                         :document-dbevent-source-config :initform
                         common-lisp:nil :type
                         (common-lisp:or document-dbevent-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-event-source-mapping-request-document-dbevent-source-config
                         :shape "DocumentDBEventSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-event-source-mapping-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-event-source-mapping-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-event-source-mapping-request
                    'make-create-event-source-mapping-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-source-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-source-mapping-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-arn))
      (common-lisp:list
       (common-lisp:cons "EventSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "FilterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelization-factor))
      (common-lisp:list
       (common-lisp:cons "ParallelizationFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-position))
      (common-lisp:list
       (common-lisp:cons "StartingPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'starting-position-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartingPositionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-config))
      (common-lisp:list
       (common-lisp:cons "DestinationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-record-age-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumRecordAgeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bisect-batch-on-function-error))
      (common-lisp:list
       (common-lisp:cons "BisectBatchOnFunctionError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-retry-attempts))
      (common-lisp:list
       (common-lisp:cons "MaximumRetryAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tumbling-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TumblingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topics))
      (common-lisp:list
       (common-lisp:cons "Topics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queues))
      (common-lisp:list
       (common-lisp:cons "Queues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-access-configurations))
      (common-lisp:list
       (common-lisp:cons "SourceAccessConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-event-source))
      (common-lisp:list
       (common-lisp:cons "SelfManagedEventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'function-response-types))
      (common-lisp:list
       (common-lisp:cons "FunctionResponseTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amazon-managed-kafka-event-source-config))
      (common-lisp:list
       (common-lisp:cons "AmazonManagedKafkaEventSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-kafka-event-source-config))
      (common-lisp:list
       (common-lisp:cons "SelfManagedKafkaEventSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-config))
      (common-lisp:list
       (common-lisp:cons "ScalingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-dbevent-source-config))
      (common-lisp:list
       (common-lisp:cons "DocumentDBEventSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-source-mapping-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-function-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-function-name
                         :shape "FunctionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime :initarg :runtime :initform common-lisp:nil
                         :type (common-lisp:or runtime common-lisp:null)
                         :accessor struct-shape-create-function-request-runtime
                         :shape "Runtime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform
                         (common-lisp:error ":role is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-function-request-role :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (handler :initarg :handler :initform common-lisp:nil
                         :type (common-lisp:or handler common-lisp:null)
                         :accessor struct-shape-create-function-request-handler
                         :shape "Handler" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or function-code common-lisp:null)
                         :accessor struct-shape-create-function-request-code
                         :shape "FunctionCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor struct-shape-create-function-request-timeout
                         :shape "Timeout" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (memory-size :initarg :memory-size :initform
                         common-lisp:nil :type
                         (common-lisp:or memory-size common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-memory-size
                         :shape "MemorySize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publish :initarg :publish :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-create-function-request-publish
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-config :initarg :vpc-config :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-config common-lisp:null) :accessor
                         struct-shape-create-function-request-vpc-config :shape
                         "VpcConfig" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (package-type :initarg :package-type :initform
                         common-lisp:nil :type
                         (common-lisp:or package-type common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-package-type
                         :shape "PackageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dead-letter-config :initarg :dead-letter-config
                         :initform common-lisp:nil :type
                         (common-lisp:or dead-letter-config common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-dead-letter-config
                         :shape "DeadLetterConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment :initarg :environment :initform
                         common-lisp:nil :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-environment
                         :shape "Environment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kmskey-arn :initarg :kmskey-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kmskey-arn common-lisp:null) :accessor
                         struct-shape-create-function-request-kmskey-arn :shape
                         "KMSKeyArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tracing-config :initarg :tracing-config :initform
                         common-lisp:nil :type
                         (common-lisp:or tracing-config common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-tracing-config
                         :shape "TracingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-function-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (layers :initarg :layers :initform common-lisp:nil
                         :type (common-lisp:or layer-list common-lisp:null)
                         :accessor struct-shape-create-function-request-layers
                         :shape "LayerList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-system-configs :initarg :file-system-configs
                         :initform common-lisp:nil :type
                         (common-lisp:or file-system-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-file-system-configs
                         :shape "FileSystemConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (image-config :initarg :image-config :initform
                         common-lisp:nil :type
                         (common-lisp:or image-config common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-image-config
                         :shape "ImageConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-signing-config-arn :initarg
                         :code-signing-config-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or code-signing-config-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-code-signing-config-arn
                         :shape "CodeSigningConfigArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (architectures :initarg :architectures :initform
                         common-lisp:nil :type
                         (common-lisp:or architectures-list common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-architectures
                         :shape "ArchitecturesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ephemeral-storage :initarg :ephemeral-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or ephemeral-storage common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-ephemeral-storage
                         :shape "EphemeralStorage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snap-start :initarg :snap-start :initform
                         common-lisp:nil :type
                         (common-lisp:or snap-start common-lisp:null) :accessor
                         struct-shape-create-function-request-snap-start :shape
                         "SnapStart" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (logging-config :initarg :logging-config :initform
                         common-lisp:nil :type
                         (common-lisp:or logging-config common-lisp:null)
                         :accessor
                         struct-shape-create-function-request-logging-config
                         :shape "LoggingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-function-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-function-request 'make-create-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "Runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handler))
      (common-lisp:list
       (common-lisp:cons "Handler"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-size))
      (common-lisp:list
       (common-lisp:cons "MemorySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish))
      (common-lisp:list
       (common-lisp:cons "Publish"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-type))
      (common-lisp:list
       (common-lisp:cons "PackageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dead-letter-config))
      (common-lisp:list
       (common-lisp:cons "DeadLetterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-arn))
      (common-lisp:list
       (common-lisp:cons "KMSKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracing-config))
      (common-lisp:list
       (common-lisp:cons "TracingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layers))
      (common-lisp:list
       (common-lisp:cons "Layers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-configs))
      (common-lisp:list
       (common-lisp:cons "FileSystemConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-config))
      (common-lisp:list
       (common-lisp:cons "ImageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-signing-config-arn))
      (common-lisp:list
       (common-lisp:cons "CodeSigningConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architectures))
      (common-lisp:list
       (common-lisp:cons "Architectures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeral-storage))
      (common-lisp:list
       (common-lisp:cons "EphemeralStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snap-start))
      (common-lisp:list
       (common-lisp:cons "SnapStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-config))
      (common-lisp:list
       (common-lisp:cons "LoggingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-function-url-config-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-create-function-url-config-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or function-url-qualifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-function-url-config-request-qualifier
                         :shape "FunctionUrlQualifier" :location "querystring"
                         :location-name "Qualifier")
                        (auth-type :initarg :auth-type :initform
                         (common-lisp:error ":auth-type is required") :type
                         (common-lisp:or function-url-auth-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-function-url-config-request-auth-type
                         :shape "FunctionUrlAuthType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cors :initarg :cors :initform common-lisp:nil :type
                         (common-lisp:or cors common-lisp:null) :accessor
                         struct-shape-create-function-url-config-request-cors
                         :shape "Cors" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (invoke-mode :initarg :invoke-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or invoke-mode common-lisp:null)
                         :accessor
                         struct-shape-create-function-url-config-request-invoke-mode
                         :shape "InvokeMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-function-url-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-function-url-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-function-url-config-request
                    'make-create-function-url-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-function-url-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-function-url-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-type))
      (common-lisp:list
       (common-lisp:cons "AuthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cors))
      (common-lisp:list
       (common-lisp:cons "Cors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invoke-mode))
      (common-lisp:list
       (common-lisp:cons "InvokeMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-function-url-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-function-url-config-response common-lisp:nil
                       ((function-url :initarg :function-url :initform
                         (common-lisp:error ":function-url is required") :type
                         (common-lisp:or function-url common-lisp:null)
                         :accessor
                         struct-shape-create-function-url-config-response-function-url
                         :shape "FunctionUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-arn :initarg :function-arn :initform
                         (common-lisp:error ":function-arn is required") :type
                         (common-lisp:or function-arn common-lisp:null)
                         :accessor
                         struct-shape-create-function-url-config-response-function-arn
                         :shape "FunctionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-type :initarg :auth-type :initform
                         (common-lisp:error ":auth-type is required") :type
                         (common-lisp:or function-url-auth-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-function-url-config-response-auth-type
                         :shape "FunctionUrlAuthType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cors :initarg :cors :initform common-lisp:nil :type
                         (common-lisp:or cors common-lisp:null) :accessor
                         struct-shape-create-function-url-config-response-cors
                         :shape "Cors" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-function-url-config-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (invoke-mode :initarg :invoke-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or invoke-mode common-lisp:null)
                         :accessor
                         struct-shape-create-function-url-config-response-invoke-mode
                         :shape "InvokeMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-function-url-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-function-url-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-function-url-config-response
                    'make-create-function-url-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-function-url-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-function-url-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-url))
      (common-lisp:list
       (common-lisp:cons "FunctionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-type))
      (common-lisp:list
       (common-lisp:cons "AuthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cors))
      (common-lisp:list
       (common-lisp:cons "Cors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invoke-mode))
      (common-lisp:list
       (common-lisp:cons "InvokeMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-function-url-config-response))
   common-lisp:nil))
(common-lisp:deftype database-name () 'common-lisp:string)
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dead-letter-config common-lisp:nil
                       ((target-arn :initarg :target-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor struct-shape-dead-letter-config-target-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dead-letter-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dead-letter-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dead-letter-config 'make-dead-letter-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dead-letter-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dead-letter-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dead-letter-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-alias-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-delete-alias-request-function-name :shape
                         "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or alias common-lisp:null) :accessor
                         struct-shape-delete-alias-request-name :shape "Alias"
                         :location "uri" :location-name "Name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-alias-request 'make-delete-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-code-signing-config-request common-lisp:nil
                       ((code-signing-config-arn :initarg
                         :code-signing-config-arn :initform
                         (common-lisp:error
                          ":code-signing-config-arn is required")
                         :type
                         (common-lisp:or code-signing-config-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-code-signing-config-request-code-signing-config-arn
                         :shape "CodeSigningConfigArn" :location "uri"
                         :location-name "CodeSigningConfigArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-code-signing-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-code-signing-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-code-signing-config-request
                    'make-delete-code-signing-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-code-signing-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-code-signing-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-code-signing-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-code-signing-config-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-code-signing-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-code-signing-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-code-signing-config-response
                    'make-delete-code-signing-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-code-signing-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-code-signing-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-code-signing-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-source-mapping-request common-lisp:nil
                       ((uuid :initarg :uuid :initform
                         (common-lisp:error ":uuid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-event-source-mapping-request-uuid
                         :shape "String" :location "uri" :location-name
                         "UUID"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-event-source-mapping-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-event-source-mapping-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-event-source-mapping-request
                    'make-delete-event-source-mapping-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-source-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-source-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-source-mapping-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-function-code-signing-config-request
                       common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-delete-function-code-signing-config-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-function-code-signing-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-function-code-signing-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-function-code-signing-config-request
                    'make-delete-function-code-signing-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-code-signing-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-code-signing-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-code-signing-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-function-concurrency-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-delete-function-concurrency-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-function-concurrency-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-function-concurrency-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-function-concurrency-request
                    'make-delete-function-concurrency-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-concurrency-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-concurrency-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-concurrency-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-function-event-invoke-config-request
                       common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-delete-function-event-invoke-config-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-delete-function-event-invoke-config-request-qualifier
                         :shape "Qualifier" :location "querystring"
                         :location-name "Qualifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-function-event-invoke-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-function-event-invoke-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-function-event-invoke-config-request
                    'make-delete-function-event-invoke-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-event-invoke-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-event-invoke-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-event-invoke-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-function-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-delete-function-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-delete-function-request-qualifier :shape
                         "Qualifier" :location "querystring" :location-name
                         "Qualifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-function-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-function-request 'make-delete-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-function-url-config-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-delete-function-url-config-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or function-url-qualifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-function-url-config-request-qualifier
                         :shape "FunctionUrlQualifier" :location "querystring"
                         :location-name "Qualifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-function-url-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-function-url-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-function-url-config-request
                    'make-delete-function-url-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-url-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-url-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-url-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-layer-version-request common-lisp:nil
                       ((layer-name :initarg :layer-name :initform
                         (common-lisp:error ":layer-name is required") :type
                         (common-lisp:or layer-name common-lisp:null) :accessor
                         struct-shape-delete-layer-version-request-layer-name
                         :shape "LayerName" :location "uri" :location-name
                         "LayerName")
                        (version-number :initarg :version-number :initform
                         (common-lisp:error ":version-number is required")
                         :type
                         (common-lisp:or layer-version-number common-lisp:null)
                         :accessor
                         struct-shape-delete-layer-version-request-version-number
                         :shape "LayerVersionNumber" :location "uri"
                         :location-name "VersionNumber"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-layer-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-layer-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-layer-version-request
                    'make-delete-layer-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-layer-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-layer-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-layer-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-provisioned-concurrency-config-request
                       common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-delete-provisioned-concurrency-config-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         (common-lisp:error ":qualifier is required") :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-delete-provisioned-concurrency-config-request-qualifier
                         :shape "Qualifier" :location "querystring"
                         :location-name "Qualifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-provisioned-concurrency-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-provisioned-concurrency-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-provisioned-concurrency-config-request
                    'make-delete-provisioned-concurrency-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioned-concurrency-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioned-concurrency-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioned-concurrency-config-request))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype destination-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass destination-config common-lisp:nil
                       ((on-success :initarg :on-success :initform
                         common-lisp:nil :type
                         (common-lisp:or on-success common-lisp:null) :accessor
                         struct-shape-destination-config-on-success :shape
                         "OnSuccess" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (on-failure :initarg :on-failure :initform
                         common-lisp:nil :type
                         (common-lisp:or on-failure common-lisp:null) :accessor
                         struct-shape-destination-config-on-failure :shape
                         "OnFailure" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-destination-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'destination-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'destination-config 'make-destination-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-success))
      (common-lisp:list
       (common-lisp:cons "OnSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-failure))
      (common-lisp:list
       (common-lisp:cons "OnFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass document-dbevent-source-config common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-document-dbevent-source-config-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collection-name :initarg :collection-name :initform
                         common-lisp:nil :type
                         (common-lisp:or collection-name common-lisp:null)
                         :accessor
                         struct-shape-document-dbevent-source-config-collection-name
                         :shape "CollectionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (full-document :initarg :full-document :initform
                         common-lisp:nil :type
                         (common-lisp:or full-document common-lisp:null)
                         :accessor
                         struct-shape-document-dbevent-source-config-full-document
                         :shape "FullDocument" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document-dbevent-source-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'document-dbevent-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'document-dbevent-source-config
                    'make-document-dbevent-source-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-dbevent-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-dbevent-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-name))
      (common-lisp:list
       (common-lisp:cons "CollectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'full-document))
      (common-lisp:list
       (common-lisp:cons "FullDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-dbevent-source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition ec2access-denied-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       ec2access-denied-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       ec2access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ec2access-denied-exception
                    'ec2access-denied-exception-type
                    'ec2access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition ec2throttled-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       ec2throttled-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       ec2throttled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ec2throttled-exception 'ec2throttled-exception-type
                    'ec2throttled-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition ec2unexpected-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       ec2unexpected-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       ec2unexpected-exception-message)
      (ec2error-code :initarg :ec2error-code :initform common-lisp:nil :reader
       ec2unexpected-exception-ec2error-code)))
 (common-lisp:export
  (common-lisp:list 'ec2unexpected-exception 'ec2unexpected-exception-type
                    'ec2unexpected-exception-message
                    'ec2unexpected-exception-ec2error-code)))
(common-lisp:progn
 (common-lisp:define-condition efsioexception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       efsioexception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       efsioexception-message)))
 (common-lisp:export
  (common-lisp:list 'efsioexception 'efsioexception-type
                    'efsioexception-message)))
(common-lisp:progn
 (common-lisp:define-condition efsmount-connectivity-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       efsmount-connectivity-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       efsmount-connectivity-exception-message)))
 (common-lisp:export
  (common-lisp:list 'efsmount-connectivity-exception
                    'efsmount-connectivity-exception-type
                    'efsmount-connectivity-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition efsmount-failure-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       efsmount-failure-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       efsmount-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'efsmount-failure-exception
                    'efsmount-failure-exception-type
                    'efsmount-failure-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition efsmount-timeout-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       efsmount-timeout-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       efsmount-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'efsmount-timeout-exception
                    'efsmount-timeout-exception-type
                    'efsmount-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition enilimit-reached-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       enilimit-reached-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       enilimit-reached-exception-message)))
 (common-lisp:export
  (common-lisp:list 'enilimit-reached-exception
                    'enilimit-reached-exception-type
                    'enilimit-reached-exception-message)))
(common-lisp:deftype enabled () 'common-lisp:boolean)
(common-lisp:deftype end-point-type () 'common-lisp:string)
(common-lisp:deftype endpoint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype endpoint-lists () '(trivial-types:proper-list endpoint))
 (common-lisp:defun make-endpoint-lists
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype endpoints () 'common-lisp:hash-table)
 (common-lisp:defun make-endpoints (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass environment common-lisp:nil
                       ((variables :initarg :variables :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-variables
                                         common-lisp:null)
                         :accessor struct-shape-environment-variables :shape
                         "EnvironmentVariables" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'environment 'make-environment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "Variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass environment-error common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-environment-error-error-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor struct-shape-environment-error-message
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-error 'make-environment-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass environment-response common-lisp:nil
                       ((variables :initarg :variables :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-variables
                                         common-lisp:null)
                         :accessor struct-shape-environment-response-variables
                         :shape "EnvironmentVariables" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or environment-error common-lisp:null)
                         :accessor struct-shape-environment-response-error
                         :shape "EnvironmentError" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-response 'make-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "Variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-response))
   common-lisp:nil))
(common-lisp:deftype environment-variable-name () 'common-lisp:string)
(common-lisp:deftype environment-variable-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-variables () 'common-lisp:hash-table)
 (common-lisp:defun make-environment-variables
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass ephemeral-storage common-lisp:nil
                       ((size :initarg :size :initform
                         (common-lisp:error ":size is required") :type
                         (common-lisp:or ephemeral-storage-size
                                         common-lisp:null)
                         :accessor struct-shape-ephemeral-storage-size :shape
                         "EphemeralStorageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ephemeral-storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ephemeral-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ephemeral-storage 'make-ephemeral-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ephemeral-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ephemeral-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ephemeral-storage))
   common-lisp:nil))
(common-lisp:deftype ephemeral-storage-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass event-source-mapping-configuration common-lisp:nil
                       ((uuid :initarg :uuid :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-source-mapping-configuration-uuid
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (starting-position :initarg :starting-position
                         :initform common-lisp:nil :type
                         (common-lisp:or event-source-position
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-starting-position
                         :shape "EventSourcePosition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (starting-position-timestamp :initarg
                         :starting-position-timestamp :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-event-source-mapping-configuration-starting-position-timestamp
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (batch-size :initarg :batch-size :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-size common-lisp:null) :accessor
                         struct-shape-event-source-mapping-configuration-batch-size
                         :shape "BatchSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-maximum-batching-window-in-seconds
                         :shape "MaximumBatchingWindowInSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (parallelization-factor :initarg
                         :parallelization-factor :initform common-lisp:nil
                         :type
                         (common-lisp:or parallelization-factor
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-parallelization-factor
                         :shape "ParallelizationFactor" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (event-source-arn :initarg :event-source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-event-source-mapping-configuration-event-source-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter-criteria :initarg :filter-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-criteria common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-filter-criteria
                         :shape "FilterCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-arn :initarg :function-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or function-arn common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-function-arn
                         :shape "FunctionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-event-source-mapping-configuration-last-modified
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-processing-result :initarg
                         :last-processing-result :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-last-processing-result
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-source-mapping-configuration-state
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-transition-reason :initarg
                         :state-transition-reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-state-transition-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-config :initarg :destination-config
                         :initform common-lisp:nil :type
                         (common-lisp:or destination-config common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-destination-config
                         :shape "DestinationConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (topics :initarg :topics :initform common-lisp:nil
                         :type (common-lisp:or topics common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-topics
                         :shape "Topics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (queues :initarg :queues :initform common-lisp:nil
                         :type (common-lisp:or queues common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-queues
                         :shape "Queues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-access-configurations :initarg
                         :source-access-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or source-access-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-source-access-configurations
                         :shape "SourceAccessConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (self-managed-event-source :initarg
                         :self-managed-event-source :initform common-lisp:nil
                         :type
                         (common-lisp:or self-managed-event-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-self-managed-event-source
                         :shape "SelfManagedEventSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-record-age-in-seconds :initarg
                         :maximum-record-age-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or maximum-record-age-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-maximum-record-age-in-seconds
                         :shape "MaximumRecordAgeInSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bisect-batch-on-function-error :initarg
                         :bisect-batch-on-function-error :initform
                         common-lisp:nil :type
                         (common-lisp:or bisect-batch-on-function-error
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-bisect-batch-on-function-error
                         :shape "BisectBatchOnFunctionError" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-retry-attempts :initarg
                         :maximum-retry-attempts :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          maximum-retry-attempts-event-source-mapping
                          common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-maximum-retry-attempts
                         :shape "MaximumRetryAttemptsEventSourceMapping"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tumbling-window-in-seconds :initarg
                         :tumbling-window-in-seconds :initform common-lisp:nil
                         :type
                         (common-lisp:or tumbling-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-tumbling-window-in-seconds
                         :shape "TumblingWindowInSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (function-response-types :initarg
                         :function-response-types :initform common-lisp:nil
                         :type
                         (common-lisp:or function-response-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-function-response-types
                         :shape "FunctionResponseTypeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (amazon-managed-kafka-event-source-config :initarg
                         :amazon-managed-kafka-event-source-config :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          amazon-managed-kafka-event-source-config
                          common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-amazon-managed-kafka-event-source-config
                         :shape "AmazonManagedKafkaEventSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (self-managed-kafka-event-source-config :initarg
                         :self-managed-kafka-event-source-config :initform
                         common-lisp:nil :type
                         (common-lisp:or self-managed-kafka-event-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-self-managed-kafka-event-source-config
                         :shape "SelfManagedKafkaEventSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scaling-config :initarg :scaling-config :initform
                         common-lisp:nil :type
                         (common-lisp:or scaling-config common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-scaling-config
                         :shape "ScalingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-dbevent-source-config :initarg
                         :document-dbevent-source-config :initform
                         common-lisp:nil :type
                         (common-lisp:or document-dbevent-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-source-mapping-configuration-document-dbevent-source-config
                         :shape "DocumentDBEventSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-source-mapping-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'event-source-mapping-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-source-mapping-configuration
                    'make-event-source-mapping-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-source-mapping-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-source-mapping-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uuid))
      (common-lisp:list
       (common-lisp:cons "UUID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-position))
      (common-lisp:list
       (common-lisp:cons "StartingPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'starting-position-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartingPositionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelization-factor))
      (common-lisp:list
       (common-lisp:cons "ParallelizationFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-arn))
      (common-lisp:list
       (common-lisp:cons "EventSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "FilterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-processing-result))
      (common-lisp:list
       (common-lisp:cons "LastProcessingResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-transition-reason))
      (common-lisp:list
       (common-lisp:cons "StateTransitionReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-config))
      (common-lisp:list
       (common-lisp:cons "DestinationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topics))
      (common-lisp:list
       (common-lisp:cons "Topics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queues))
      (common-lisp:list
       (common-lisp:cons "Queues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-access-configurations))
      (common-lisp:list
       (common-lisp:cons "SourceAccessConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-event-source))
      (common-lisp:list
       (common-lisp:cons "SelfManagedEventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-record-age-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumRecordAgeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bisect-batch-on-function-error))
      (common-lisp:list
       (common-lisp:cons "BisectBatchOnFunctionError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-retry-attempts))
      (common-lisp:list
       (common-lisp:cons "MaximumRetryAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tumbling-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TumblingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'function-response-types))
      (common-lisp:list
       (common-lisp:cons "FunctionResponseTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amazon-managed-kafka-event-source-config))
      (common-lisp:list
       (common-lisp:cons "AmazonManagedKafkaEventSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-kafka-event-source-config))
      (common-lisp:list
       (common-lisp:cons "SelfManagedKafkaEventSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-config))
      (common-lisp:list
       (common-lisp:cons "ScalingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-dbevent-source-config))
      (common-lisp:list
       (common-lisp:cons "DocumentDBEventSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-source-mapping-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-source-mappings-list ()
   '(trivial-types:proper-list event-source-mapping-configuration))
 (common-lisp:defun make-event-source-mappings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            event-source-mapping-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-source-position () 'common-lisp:string)
(common-lisp:deftype event-source-token () 'common-lisp:string)
(common-lisp:deftype file-system-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass file-system-config common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or file-system-arn common-lisp:null)
                         :accessor struct-shape-file-system-config-arn :shape
                         "FileSystemArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (local-mount-path :initarg :local-mount-path :initform
                         (common-lisp:error ":local-mount-path is required")
                         :type
                         (common-lisp:or local-mount-path common-lisp:null)
                         :accessor
                         struct-shape-file-system-config-local-mount-path
                         :shape "LocalMountPath" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-file-system-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'file-system-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'file-system-config 'make-file-system-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-system-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-system-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-mount-path))
      (common-lisp:list
       (common-lisp:cons "LocalMountPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-system-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype file-system-config-list ()
   '(trivial-types:proper-list file-system-config))
 (common-lisp:defun make-file-system-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list file-system-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((pattern :initarg :pattern :initform common-lisp:nil
                         :type (common-lisp:or pattern common-lisp:null)
                         :accessor struct-shape-filter-pattern :shape "Pattern"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "Pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-criteria common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor struct-shape-filter-criteria-filters :shape
                         "FilterList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter-criteria 'make-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype full-document () 'common-lisp:string)
(common-lisp:deftype function-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype function-arn-list ()
   '(trivial-types:proper-list function-arn))
 (common-lisp:defun make-function-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list function-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass function-code common-lisp:nil
                       ((zip-file :initarg :zip-file :initform common-lisp:nil
                         :type (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-function-code-zip-file :shape "Blob"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3bucket :initarg :s3bucket :initform common-lisp:nil
                         :type (common-lisp:or s3bucket common-lisp:null)
                         :accessor struct-shape-function-code-s3bucket :shape
                         "S3Bucket" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3key :initarg :s3key :initform common-lisp:nil :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-function-code-s3key :shape "S3Key"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3object-version :initarg :s3object-version :initform
                         common-lisp:nil :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor struct-shape-function-code-s3object-version
                         :shape "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-uri :initarg :image-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-function-code-image-uri :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-function-code
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'function-code
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'function-code 'make-function-code))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input function-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input function-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zip-file))
      (common-lisp:list
       (common-lisp:cons "ZipFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-version))
      (common-lisp:list
       (common-lisp:cons "S3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-uri))
      (common-lisp:list
       (common-lisp:cons "ImageUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input function-code))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass function-code-location common-lisp:nil
                       ((repository-type :initarg :repository-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-function-code-location-repository-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-function-code-location-location
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-uri :initarg :image-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-function-code-location-image-uri :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resolved-image-uri :initarg :resolved-image-uri
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-function-code-location-resolved-image-uri
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-function-code-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'function-code-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'function-code-location 'make-function-code-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          function-code-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          function-code-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-type))
      (common-lisp:list
       (common-lisp:cons "RepositoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-uri))
      (common-lisp:list
       (common-lisp:cons "ImageUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-image-uri))
      (common-lisp:list
       (common-lisp:cons "ResolvedImageUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          function-code-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass function-configuration common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         common-lisp:nil :type
                         (common-lisp:or namespaced-function-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-function-name
                         :shape "NamespacedFunctionName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (function-arn :initarg :function-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or name-spaced-function-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-function-arn
                         :shape "NameSpacedFunctionArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (runtime :initarg :runtime :initform common-lisp:nil
                         :type (common-lisp:or runtime common-lisp:null)
                         :accessor struct-shape-function-configuration-runtime
                         :shape "Runtime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-function-configuration-role :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (handler :initarg :handler :initform common-lisp:nil
                         :type (common-lisp:or handler common-lisp:null)
                         :accessor struct-shape-function-configuration-handler
                         :shape "Handler" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-size :initarg :code-size :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-function-configuration-code-size :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor struct-shape-function-configuration-timeout
                         :shape "Timeout" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (memory-size :initarg :memory-size :initform
                         common-lisp:nil :type
                         (common-lisp:or memory-size common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-memory-size :shape
                         "MemorySize" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-function-configuration-last-modified
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-sha256 :initarg :code-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-function-configuration-code-sha256 :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor struct-shape-function-configuration-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-config :initarg :vpc-config :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-config-response common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-vpc-config :shape
                         "VpcConfigResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dead-letter-config :initarg :dead-letter-config
                         :initform common-lisp:nil :type
                         (common-lisp:or dead-letter-config common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-dead-letter-config
                         :shape "DeadLetterConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment :initarg :environment :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-response common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-environment :shape
                         "EnvironmentResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kmskey-arn :initarg :kmskey-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kmskey-arn common-lisp:null) :accessor
                         struct-shape-function-configuration-kmskey-arn :shape
                         "KMSKeyArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tracing-config :initarg :tracing-config :initform
                         common-lisp:nil :type
                         (common-lisp:or tracing-config-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-tracing-config
                         :shape "TracingConfigResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (master-arn :initarg :master-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or function-arn common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-master-arn :shape
                         "FunctionArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-function-configuration-revision-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (layers :initarg :layers :initform common-lisp:nil
                         :type
                         (common-lisp:or layers-reference-list
                                         common-lisp:null)
                         :accessor struct-shape-function-configuration-layers
                         :shape "LayersReferenceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-function-configuration-state :shape
                         "State" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state-reason :initarg :state-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or state-reason common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-state-reason
                         :shape "StateReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-reason-code :initarg :state-reason-code
                         :initform common-lisp:nil :type
                         (common-lisp:or state-reason-code common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-state-reason-code
                         :shape "StateReasonCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-status :initarg :last-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or last-update-status common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-last-update-status
                         :shape "LastUpdateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-status-reason :initarg
                         :last-update-status-reason :initform common-lisp:nil
                         :type
                         (common-lisp:or last-update-status-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-last-update-status-reason
                         :shape "LastUpdateStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-update-status-reason-code :initarg
                         :last-update-status-reason-code :initform
                         common-lisp:nil :type
                         (common-lisp:or last-update-status-reason-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-last-update-status-reason-code
                         :shape "LastUpdateStatusReasonCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (file-system-configs :initarg :file-system-configs
                         :initform common-lisp:nil :type
                         (common-lisp:or file-system-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-file-system-configs
                         :shape "FileSystemConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (package-type :initarg :package-type :initform
                         common-lisp:nil :type
                         (common-lisp:or package-type common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-package-type
                         :shape "PackageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-config-response :initarg :image-config-response
                         :initform common-lisp:nil :type
                         (common-lisp:or image-config-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-image-config-response
                         :shape "ImageConfigResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signing-profile-version-arn :initarg
                         :signing-profile-version-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-function-configuration-signing-profile-version-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signing-job-arn :initarg :signing-job-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-function-configuration-signing-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (architectures :initarg :architectures :initform
                         common-lisp:nil :type
                         (common-lisp:or architectures-list common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-architectures
                         :shape "ArchitecturesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ephemeral-storage :initarg :ephemeral-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or ephemeral-storage common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-ephemeral-storage
                         :shape "EphemeralStorage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snap-start :initarg :snap-start :initform
                         common-lisp:nil :type
                         (common-lisp:or snap-start-response common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-snap-start :shape
                         "SnapStartResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime-version-config :initarg
                         :runtime-version-config :initform common-lisp:nil
                         :type
                         (common-lisp:or runtime-version-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-runtime-version-config
                         :shape "RuntimeVersionConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (logging-config :initarg :logging-config :initform
                         common-lisp:nil :type
                         (common-lisp:or logging-config common-lisp:null)
                         :accessor
                         struct-shape-function-configuration-logging-config
                         :shape "LoggingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-function-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'function-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'function-configuration 'make-function-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          function-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          function-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "Runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handler))
      (common-lisp:list
       (common-lisp:cons "Handler"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-size))
      (common-lisp:list
       (common-lisp:cons "CodeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-size))
      (common-lisp:list
       (common-lisp:cons "MemorySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-sha256))
      (common-lisp:list
       (common-lisp:cons "CodeSha256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dead-letter-config))
      (common-lisp:list
       (common-lisp:cons "DeadLetterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-arn))
      (common-lisp:list
       (common-lisp:cons "KMSKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracing-config))
      (common-lisp:list
       (common-lisp:cons "TracingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-arn))
      (common-lisp:list
       (common-lisp:cons "MasterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layers))
      (common-lisp:list
       (common-lisp:cons "Layers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason-code))
      (common-lisp:list
       (common-lisp:cons "StateReasonCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-status))
      (common-lisp:list
       (common-lisp:cons "LastUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-status-reason))
      (common-lisp:list
       (common-lisp:cons "LastUpdateStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-status-reason-code))
      (common-lisp:list
       (common-lisp:cons "LastUpdateStatusReasonCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-configs))
      (common-lisp:list
       (common-lisp:cons "FileSystemConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-type))
      (common-lisp:list
       (common-lisp:cons "PackageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-config-response))
      (common-lisp:list
       (common-lisp:cons "ImageConfigResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signing-profile-version-arn))
      (common-lisp:list
       (common-lisp:cons "SigningProfileVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-job-arn))
      (common-lisp:list
       (common-lisp:cons "SigningJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architectures))
      (common-lisp:list
       (common-lisp:cons "Architectures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeral-storage))
      (common-lisp:list
       (common-lisp:cons "EphemeralStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snap-start))
      (common-lisp:list
       (common-lisp:cons "SnapStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-version-config))
      (common-lisp:list
       (common-lisp:cons "RuntimeVersionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-config))
      (common-lisp:list
       (common-lisp:cons "LoggingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          function-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass function-event-invoke-config common-lisp:nil
                       ((last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-function-event-invoke-config-last-modified
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (function-arn :initarg :function-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or function-arn common-lisp:null)
                         :accessor
                         struct-shape-function-event-invoke-config-function-arn
                         :shape "FunctionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-retry-attempts :initarg
                         :maximum-retry-attempts :initform common-lisp:nil
                         :type
                         (common-lisp:or maximum-retry-attempts
                                         common-lisp:null)
                         :accessor
                         struct-shape-function-event-invoke-config-maximum-retry-attempts
                         :shape "MaximumRetryAttempts" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-event-age-in-seconds :initarg
                         :maximum-event-age-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or maximum-event-age-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-function-event-invoke-config-maximum-event-age-in-seconds
                         :shape "MaximumEventAgeInSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination-config :initarg :destination-config
                         :initform common-lisp:nil :type
                         (common-lisp:or destination-config common-lisp:null)
                         :accessor
                         struct-shape-function-event-invoke-config-destination-config
                         :shape "DestinationConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-function-event-invoke-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'function-event-invoke-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'function-event-invoke-config
                    'make-function-event-invoke-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          function-event-invoke-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          function-event-invoke-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-retry-attempts))
      (common-lisp:list
       (common-lisp:cons "MaximumRetryAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-event-age-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumEventAgeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-config))
      (common-lisp:list
       (common-lisp:cons "DestinationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          function-event-invoke-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype function-event-invoke-config-list ()
   '(trivial-types:proper-list function-event-invoke-config))
 (common-lisp:defun make-function-event-invoke-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            function-event-invoke-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype function-list ()
   '(trivial-types:proper-list function-configuration))
 (common-lisp:defun make-function-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list function-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype function-name () 'common-lisp:string)
(common-lisp:deftype function-response-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype function-response-type-list ()
   '(trivial-types:proper-list function-response-type))
 (common-lisp:defun make-function-response-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list function-response-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype function-url () 'common-lisp:string)
(common-lisp:deftype function-url-auth-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass function-url-config common-lisp:nil
                       ((function-url :initarg :function-url :initform
                         (common-lisp:error ":function-url is required") :type
                         (common-lisp:or function-url common-lisp:null)
                         :accessor
                         struct-shape-function-url-config-function-url :shape
                         "FunctionUrl" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (function-arn :initarg :function-arn :initform
                         (common-lisp:error ":function-arn is required") :type
                         (common-lisp:or function-arn common-lisp:null)
                         :accessor
                         struct-shape-function-url-config-function-arn :shape
                         "FunctionArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-function-url-config-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform
                         (common-lisp:error ":last-modified-time is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-function-url-config-last-modified-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cors :initarg :cors :initform common-lisp:nil :type
                         (common-lisp:or cors common-lisp:null) :accessor
                         struct-shape-function-url-config-cors :shape "Cors"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-type :initarg :auth-type :initform
                         (common-lisp:error ":auth-type is required") :type
                         (common-lisp:or function-url-auth-type
                                         common-lisp:null)
                         :accessor struct-shape-function-url-config-auth-type
                         :shape "FunctionUrlAuthType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (invoke-mode :initarg :invoke-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or invoke-mode common-lisp:null)
                         :accessor struct-shape-function-url-config-invoke-mode
                         :shape "InvokeMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-function-url-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'function-url-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'function-url-config 'make-function-url-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input function-url-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input function-url-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-url))
      (common-lisp:list
       (common-lisp:cons "FunctionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cors))
      (common-lisp:list
       (common-lisp:cons "Cors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-type))
      (common-lisp:list
       (common-lisp:cons "AuthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invoke-mode))
      (common-lisp:list
       (common-lisp:cons "InvokeMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input function-url-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype function-url-config-list ()
   '(trivial-types:proper-list function-url-config))
 (common-lisp:defun make-function-url-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list function-url-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype function-url-qualifier () 'common-lisp:string)
(common-lisp:deftype function-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-account-settings-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-account-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-account-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-account-settings-request
                    'make-get-account-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-account-settings-response common-lisp:nil
                       ((account-limit :initarg :account-limit :initform
                         common-lisp:nil :type
                         (common-lisp:or account-limit common-lisp:null)
                         :accessor
                         struct-shape-get-account-settings-response-account-limit
                         :shape "AccountLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-usage :initarg :account-usage :initform
                         common-lisp:nil :type
                         (common-lisp:or account-usage common-lisp:null)
                         :accessor
                         struct-shape-get-account-settings-response-account-usage
                         :shape "AccountUsage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-account-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-account-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-account-settings-response
                    'make-get-account-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-limit))
      (common-lisp:list
       (common-lisp:cons "AccountLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-usage))
      (common-lisp:list
       (common-lisp:cons "AccountUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-alias-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor struct-shape-get-alias-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or alias common-lisp:null) :accessor
                         struct-shape-get-alias-request-name :shape "Alias"
                         :location "uri" :location-name "Name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-alias-request 'make-get-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-code-signing-config-request common-lisp:nil
                       ((code-signing-config-arn :initarg
                         :code-signing-config-arn :initform
                         (common-lisp:error
                          ":code-signing-config-arn is required")
                         :type
                         (common-lisp:or code-signing-config-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-code-signing-config-request-code-signing-config-arn
                         :shape "CodeSigningConfigArn" :location "uri"
                         :location-name "CodeSigningConfigArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-code-signing-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-code-signing-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-code-signing-config-request
                    'make-get-code-signing-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-code-signing-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-code-signing-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-code-signing-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-code-signing-config-response common-lisp:nil
                       ((code-signing-config :initarg :code-signing-config
                         :initform
                         (common-lisp:error ":code-signing-config is required")
                         :type
                         (common-lisp:or code-signing-config common-lisp:null)
                         :accessor
                         struct-shape-get-code-signing-config-response-code-signing-config
                         :shape "CodeSigningConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-code-signing-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-code-signing-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-code-signing-config-response
                    'make-get-code-signing-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-code-signing-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-code-signing-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-signing-config))
      (common-lisp:list
       (common-lisp:cons "CodeSigningConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-code-signing-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-event-source-mapping-request common-lisp:nil
                       ((uuid :initarg :uuid :initform
                         (common-lisp:error ":uuid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-event-source-mapping-request-uuid
                         :shape "String" :location "uri" :location-name
                         "UUID"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-event-source-mapping-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-event-source-mapping-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-event-source-mapping-request
                    'make-get-event-source-mapping-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-source-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-source-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-source-mapping-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-function-code-signing-config-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-get-function-code-signing-config-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-function-code-signing-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-function-code-signing-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-function-code-signing-config-request
                    'make-get-function-code-signing-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-function-code-signing-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-function-code-signing-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-function-code-signing-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-function-code-signing-config-response
                       common-lisp:nil
                       ((code-signing-config-arn :initarg
                         :code-signing-config-arn :initform
                         (common-lisp:error
                          ":code-signing-config-arn is required")
                         :type
                         (common-lisp:or code-signing-config-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-function-code-signing-config-response-code-signing-config-arn
                         :shape "CodeSigningConfigArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-get-function-code-signing-config-response-function-name
                         :shape "FunctionName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-function-code-signing-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-function-code-signing-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-function-code-signing-config-response
                    'make-get-function-code-signing-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-function-code-signing-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-function-code-signing-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-signing-config-arn))
      (common-lisp:list
       (common-lisp:cons "CodeSigningConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-function-code-signing-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-function-concurrency-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-get-function-concurrency-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-function-concurrency-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-function-concurrency-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-function-concurrency-request
                    'make-get-function-concurrency-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-function-concurrency-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-function-concurrency-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-function-concurrency-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-function-concurrency-response common-lisp:nil
                       ((reserved-concurrent-executions :initarg
                         :reserved-concurrent-executions :initform
                         common-lisp:nil :type
                         (common-lisp:or reserved-concurrent-executions
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-function-concurrency-response-reserved-concurrent-executions
                         :shape "ReservedConcurrentExecutions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-function-concurrency-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-function-concurrency-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-function-concurrency-response
                    'make-get-function-concurrency-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-function-concurrency-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-function-concurrency-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "ReservedConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-function-concurrency-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-function-configuration-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or namespaced-function-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-function-configuration-request-function-name
                         :shape "NamespacedFunctionName" :location "uri"
                         :location-name "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-get-function-configuration-request-qualifier
                         :shape "Qualifier" :location "querystring"
                         :location-name "Qualifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-function-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-function-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-function-configuration-request
                    'make-get-function-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-function-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-function-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-function-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-function-event-invoke-config-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-get-function-event-invoke-config-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-get-function-event-invoke-config-request-qualifier
                         :shape "Qualifier" :location "querystring"
                         :location-name "Qualifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-function-event-invoke-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-function-event-invoke-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-function-event-invoke-config-request
                    'make-get-function-event-invoke-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-function-event-invoke-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-function-event-invoke-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-function-event-invoke-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-function-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or namespaced-function-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-function-request-function-name :shape
                         "NamespacedFunctionName" :location "uri"
                         :location-name "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-get-function-request-qualifier :shape
                         "Qualifier" :location "querystring" :location-name
                         "Qualifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-function-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-function-request 'make-get-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-function-response common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or function-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-function-response-configuration
                         :shape "FunctionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or function-code-location
                                         common-lisp:null)
                         :accessor struct-shape-get-function-response-code
                         :shape "FunctionCodeLocation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-get-function-response-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (concurrency :initarg :concurrency :initform
                         common-lisp:nil :type
                         (common-lisp:or concurrency common-lisp:null)
                         :accessor
                         struct-shape-get-function-response-concurrency :shape
                         "Concurrency" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-function-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-function-response 'make-get-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-function-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'concurrency))
      (common-lisp:list
       (common-lisp:cons "Concurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-function-url-config-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-get-function-url-config-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or function-url-qualifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-function-url-config-request-qualifier
                         :shape "FunctionUrlQualifier" :location "querystring"
                         :location-name "Qualifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-function-url-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-function-url-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-function-url-config-request
                    'make-get-function-url-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-function-url-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-function-url-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-function-url-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-function-url-config-response common-lisp:nil
                       ((function-url :initarg :function-url :initform
                         (common-lisp:error ":function-url is required") :type
                         (common-lisp:or function-url common-lisp:null)
                         :accessor
                         struct-shape-get-function-url-config-response-function-url
                         :shape "FunctionUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-arn :initarg :function-arn :initform
                         (common-lisp:error ":function-arn is required") :type
                         (common-lisp:or function-arn common-lisp:null)
                         :accessor
                         struct-shape-get-function-url-config-response-function-arn
                         :shape "FunctionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-type :initarg :auth-type :initform
                         (common-lisp:error ":auth-type is required") :type
                         (common-lisp:or function-url-auth-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-function-url-config-response-auth-type
                         :shape "FunctionUrlAuthType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cors :initarg :cors :initform common-lisp:nil :type
                         (common-lisp:or cors common-lisp:null) :accessor
                         struct-shape-get-function-url-config-response-cors
                         :shape "Cors" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-function-url-config-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform
                         (common-lisp:error ":last-modified-time is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-function-url-config-response-last-modified-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (invoke-mode :initarg :invoke-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or invoke-mode common-lisp:null)
                         :accessor
                         struct-shape-get-function-url-config-response-invoke-mode
                         :shape "InvokeMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-function-url-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-function-url-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-function-url-config-response
                    'make-get-function-url-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-function-url-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-function-url-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-url))
      (common-lisp:list
       (common-lisp:cons "FunctionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-type))
      (common-lisp:list
       (common-lisp:cons "AuthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cors))
      (common-lisp:list
       (common-lisp:cons "Cors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invoke-mode))
      (common-lisp:list
       (common-lisp:cons "InvokeMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-function-url-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-layer-version-by-arn-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or layer-version-arn common-lisp:null)
                         :accessor
                         struct-shape-get-layer-version-by-arn-request-arn
                         :shape "LayerVersionArn" :location "querystring"
                         :location-name "Arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-layer-version-by-arn-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-layer-version-by-arn-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-layer-version-by-arn-request
                    'make-get-layer-version-by-arn-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-layer-version-by-arn-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-layer-version-by-arn-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-layer-version-by-arn-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-layer-version-policy-request common-lisp:nil
                       ((layer-name :initarg :layer-name :initform
                         (common-lisp:error ":layer-name is required") :type
                         (common-lisp:or layer-name common-lisp:null) :accessor
                         struct-shape-get-layer-version-policy-request-layer-name
                         :shape "LayerName" :location "uri" :location-name
                         "LayerName")
                        (version-number :initarg :version-number :initform
                         (common-lisp:error ":version-number is required")
                         :type
                         (common-lisp:or layer-version-number common-lisp:null)
                         :accessor
                         struct-shape-get-layer-version-policy-request-version-number
                         :shape "LayerVersionNumber" :location "uri"
                         :location-name "VersionNumber"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-layer-version-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-layer-version-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-layer-version-policy-request
                    'make-get-layer-version-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-layer-version-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-layer-version-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-layer-version-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-layer-version-policy-response common-lisp:nil
                       ((policy :initarg :policy :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-layer-version-policy-response-policy
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-layer-version-policy-response-revision-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-layer-version-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-layer-version-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-layer-version-policy-response
                    'make-get-layer-version-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-layer-version-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-layer-version-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-layer-version-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-layer-version-request common-lisp:nil
                       ((layer-name :initarg :layer-name :initform
                         (common-lisp:error ":layer-name is required") :type
                         (common-lisp:or layer-name common-lisp:null) :accessor
                         struct-shape-get-layer-version-request-layer-name
                         :shape "LayerName" :location "uri" :location-name
                         "LayerName")
                        (version-number :initarg :version-number :initform
                         (common-lisp:error ":version-number is required")
                         :type
                         (common-lisp:or layer-version-number common-lisp:null)
                         :accessor
                         struct-shape-get-layer-version-request-version-number
                         :shape "LayerVersionNumber" :location "uri"
                         :location-name "VersionNumber"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-layer-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-layer-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-layer-version-request
                    'make-get-layer-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-layer-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-layer-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-layer-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-layer-version-response common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type
                         (common-lisp:or layer-version-content-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-layer-version-response-content :shape
                         "LayerVersionContentOutput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-arn :initarg :layer-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-arn common-lisp:null) :accessor
                         struct-shape-get-layer-version-response-layer-arn
                         :shape "LayerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-version-arn :initarg :layer-version-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or layer-version-arn common-lisp:null)
                         :accessor
                         struct-shape-get-layer-version-response-layer-version-arn
                         :shape "LayerVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-get-layer-version-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-date :initarg :created-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-layer-version-response-created-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type
                         (common-lisp:or layer-version-number common-lisp:null)
                         :accessor
                         struct-shape-get-layer-version-response-version :shape
                         "LayerVersionNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compatible-runtimes :initarg :compatible-runtimes
                         :initform common-lisp:nil :type
                         (common-lisp:or compatible-runtimes common-lisp:null)
                         :accessor
                         struct-shape-get-layer-version-response-compatible-runtimes
                         :shape "CompatibleRuntimes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-info :initarg :license-info :initform
                         common-lisp:nil :type
                         (common-lisp:or license-info common-lisp:null)
                         :accessor
                         struct-shape-get-layer-version-response-license-info
                         :shape "LicenseInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compatible-architectures :initarg
                         :compatible-architectures :initform common-lisp:nil
                         :type
                         (common-lisp:or compatible-architectures
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-layer-version-response-compatible-architectures
                         :shape "CompatibleArchitectures" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-layer-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-layer-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-layer-version-response
                    'make-get-layer-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-layer-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-layer-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-arn))
      (common-lisp:list
       (common-lisp:cons "LayerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-version-arn))
      (common-lisp:list
       (common-lisp:cons "LayerVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatible-runtimes))
      (common-lisp:list
       (common-lisp:cons "CompatibleRuntimes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-info))
      (common-lisp:list
       (common-lisp:cons "LicenseInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compatible-architectures))
      (common-lisp:list
       (common-lisp:cons "CompatibleArchitectures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-layer-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or namespaced-function-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-policy-request-function-name :shape
                         "NamespacedFunctionName" :location "uri"
                         :location-name "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-get-policy-request-qualifier :shape
                         "Qualifier" :location "querystring" :location-name
                         "Qualifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-policy-request 'make-get-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-response common-lisp:nil
                       ((policy :initarg :policy :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-get-policy-response-policy
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-policy-response-revision-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-policy-response 'make-get-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-provisioned-concurrency-config-request
                       common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-get-provisioned-concurrency-config-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         (common-lisp:error ":qualifier is required") :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-get-provisioned-concurrency-config-request-qualifier
                         :shape "Qualifier" :location "querystring"
                         :location-name "Qualifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-provisioned-concurrency-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-provisioned-concurrency-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-provisioned-concurrency-config-request
                    'make-get-provisioned-concurrency-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-provisioned-concurrency-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-provisioned-concurrency-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-provisioned-concurrency-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-provisioned-concurrency-config-response
                       common-lisp:nil
                       ((requested-provisioned-concurrent-executions :initarg
                         :requested-provisioned-concurrent-executions :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-get-provisioned-concurrency-config-response-requested-provisioned-concurrent-executions
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (available-provisioned-concurrent-executions :initarg
                         :available-provisioned-concurrent-executions :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor
                         struct-shape-get-provisioned-concurrency-config-response-available-provisioned-concurrent-executions
                         :shape "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-provisioned-concurrent-executions :initarg
                         :allocated-provisioned-concurrent-executions :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor
                         struct-shape-get-provisioned-concurrency-config-response-allocated-provisioned-concurrent-executions
                         :shape "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or provisioned-concurrency-status-enum
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-provisioned-concurrency-config-response-status
                         :shape "ProvisionedConcurrencyStatusEnum" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-provisioned-concurrency-config-response-status-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-provisioned-concurrency-config-response-last-modified
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-provisioned-concurrency-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-provisioned-concurrency-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-provisioned-concurrency-config-response
                    'make-get-provisioned-concurrency-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-provisioned-concurrency-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-provisioned-concurrency-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requested-provisioned-concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "RequestedProvisionedConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-provisioned-concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "AvailableProvisionedConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allocated-provisioned-concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "AllocatedProvisionedConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-provisioned-concurrency-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-runtime-management-config-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or namespaced-function-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-runtime-management-config-request-function-name
                         :shape "NamespacedFunctionName" :location "uri"
                         :location-name "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-get-runtime-management-config-request-qualifier
                         :shape "Qualifier" :location "querystring"
                         :location-name "Qualifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-runtime-management-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-runtime-management-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-runtime-management-config-request
                    'make-get-runtime-management-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-runtime-management-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-runtime-management-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-runtime-management-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-runtime-management-config-response common-lisp:nil
                       ((update-runtime-on :initarg :update-runtime-on
                         :initform common-lisp:nil :type
                         (common-lisp:or update-runtime-on common-lisp:null)
                         :accessor
                         struct-shape-get-runtime-management-config-response-update-runtime-on
                         :shape "UpdateRuntimeOn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime-version-arn :initarg :runtime-version-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or runtime-version-arn common-lisp:null)
                         :accessor
                         struct-shape-get-runtime-management-config-response-runtime-version-arn
                         :shape "RuntimeVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-arn :initarg :function-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or name-spaced-function-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-runtime-management-config-response-function-arn
                         :shape "NameSpacedFunctionArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-runtime-management-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-runtime-management-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-runtime-management-config-response
                    'make-get-runtime-management-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-runtime-management-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-runtime-management-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-runtime-on))
      (common-lisp:list
       (common-lisp:cons "UpdateRuntimeOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-version-arn))
      (common-lisp:list
       (common-lisp:cons "RuntimeVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-runtime-management-config-response))
   common-lisp:nil))
(common-lisp:deftype handler () 'common-lisp:string)
(common-lisp:deftype header () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype headers-list () '(trivial-types:proper-list header))
 (common-lisp:defun make-headers-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list header))
   aws-sdk/generator/shape::members))
(common-lisp:deftype http-status () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass image-config common-lisp:nil
                       ((entry-point :initarg :entry-point :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-image-config-entry-point :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (command :initarg :command :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-image-config-command :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (working-directory :initarg :working-directory
                         :initform common-lisp:nil :type
                         (common-lisp:or working-directory common-lisp:null)
                         :accessor struct-shape-image-config-working-directory
                         :shape "WorkingDirectory" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'image-config 'make-image-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-point))
      (common-lisp:list
       (common-lisp:cons "EntryPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "WorkingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image-config-error common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-image-config-error-error-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor struct-shape-image-config-error-message
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-config-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-config-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'image-config-error 'make-image-config-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-config-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-config-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-config-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image-config-response common-lisp:nil
                       ((image-config :initarg :image-config :initform
                         common-lisp:nil :type
                         (common-lisp:or image-config common-lisp:null)
                         :accessor
                         struct-shape-image-config-response-image-config :shape
                         "ImageConfig" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or image-config-error common-lisp:null)
                         :accessor struct-shape-image-config-response-error
                         :shape "ImageConfigError" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'image-config-response 'make-image-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-config))
      (common-lisp:list
       (common-lisp:cons "ImageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-config-response))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-code-signature-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       invalid-code-signature-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-code-signature-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-code-signature-exception
                    'invalid-code-signature-exception-type
                    'invalid-code-signature-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       invalid-parameter-value-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-type
                    'invalid-parameter-value-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-content-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       invalid-request-content-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-request-content-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-content-exception
                    'invalid-request-content-exception-type
                    'invalid-request-content-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-runtime-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       invalid-runtime-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-runtime-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-runtime-exception 'invalid-runtime-exception-type
                    'invalid-runtime-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-security-group-idexception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       invalid-security-group-idexception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-security-group-idexception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-security-group-idexception
                    'invalid-security-group-idexception-type
                    'invalid-security-group-idexception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet-idexception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       invalid-subnet-idexception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-subnet-idexception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-subnet-idexception
                    'invalid-subnet-idexception-type
                    'invalid-subnet-idexception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-zip-file-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       invalid-zip-file-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-zip-file-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-zip-file-exception
                    'invalid-zip-file-exception-type
                    'invalid-zip-file-exception-message)))
(common-lisp:progn
 (common-lisp:defclass invocation-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or namespaced-function-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-invocation-request-function-name :shape
                         "NamespacedFunctionName" :location "uri"
                         :location-name "FunctionName")
                        (invocation-type :initarg :invocation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or invocation-type common-lisp:null)
                         :accessor
                         struct-shape-invocation-request-invocation-type :shape
                         "InvocationType" :location "header" :location-name
                         "X-Amz-Invocation-Type")
                        (log-type :initarg :log-type :initform common-lisp:nil
                         :type (common-lisp:or log-type common-lisp:null)
                         :accessor struct-shape-invocation-request-log-type
                         :shape "LogType" :location "header" :location-name
                         "X-Amz-Log-Type")
                        (client-context :initarg :client-context :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-invocation-request-client-context :shape
                         "String" :location "header" :location-name
                         "X-Amz-Client-Context")
                        (payload :initarg :payload :initform common-lisp:nil
                         :type (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-invocation-request-payload :shape "Blob"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-invocation-request-qualifier :shape
                         "Qualifier" :location "querystring" :location-name
                         "Qualifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invocation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invocation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invocation-request 'make-invocation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invocation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-type))
      (common-lisp:cons "X-Amz-Invocation-Type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-type))
      (common-lisp:cons "X-Amz-Log-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-context))
      (common-lisp:cons "X-Amz-Client-Context"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invocation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invocation-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input invocation-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass invocation-response common-lisp:nil
                       ((status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-invocation-response-status-code :shape
                         "Integer" :location "statusCode" :location-name
                         common-lisp:nil)
                        (function-error :initarg :function-error :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-invocation-response-function-error :shape
                         "String" :location "header" :location-name
                         "X-Amz-Function-Error")
                        (log-result :initarg :log-result :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-invocation-response-log-result :shape
                         "String" :location "header" :location-name
                         "X-Amz-Log-Result")
                        (payload :initarg :payload :initform common-lisp:nil
                         :type (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-invocation-response-payload :shape "Blob"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (executed-version :initarg :executed-version :initform
                         common-lisp:nil :type
                         (common-lisp:or version common-lisp:null) :accessor
                         struct-shape-invocation-response-executed-version
                         :shape "Version" :location "header" :location-name
                         "X-Amz-Executed-Version"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invocation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invocation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invocation-response 'make-invocation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invocation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-error))
      (common-lisp:cons "X-Amz-Function-Error" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-result))
      (common-lisp:cons "X-Amz-Log-Result" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executed-version))
      (common-lisp:cons "X-Amz-Executed-Version"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invocation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invocation-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input invocation-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:deftype invocation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass invoke-async-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or namespaced-function-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-invoke-async-request-function-name :shape
                         "NamespacedFunctionName" :location "uri"
                         :location-name "FunctionName")
                        (invoke-args :initarg :invoke-args :initform
                         (common-lisp:error ":invoke-args is required") :type
                         (common-lisp:or blob-stream common-lisp:null)
                         :accessor
                         struct-shape-invoke-async-request-invoke-args :shape
                         "BlobStream" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invoke-async-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invoke-async-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invoke-async-request 'make-invoke-async-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invoke-async-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invoke-async-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invoke-args))
      (common-lisp:list
       (common-lisp:cons "InvokeArgs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invoke-async-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'invoke-args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input invoke-async-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass invoke-async-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or http-status common-lisp:null)
                         :accessor struct-shape-invoke-async-response-status
                         :shape "HttpStatus" :location "statusCode"
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invoke-async-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invoke-async-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invoke-async-response 'make-invoke-async-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invoke-async-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invoke-async-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invoke-async-response))
   common-lisp:nil))
(common-lisp:deftype invoke-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass invoke-response-stream-update common-lisp:nil
                       ((payload :initarg :payload :initform common-lisp:nil
                         :type (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-invoke-response-stream-update-payload
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invoke-response-stream-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'invoke-response-stream-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invoke-response-stream-update
                    'make-invoke-response-stream-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invoke-response-stream-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invoke-response-stream-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invoke-response-stream-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass invoke-with-response-stream-complete-event
                       common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-invoke-with-response-stream-complete-event-error-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-details :initarg :error-details :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-invoke-with-response-stream-complete-event-error-details
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-result :initarg :log-result :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-invoke-with-response-stream-complete-event-log-result
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invoke-with-response-stream-complete-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'invoke-with-response-stream-complete-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invoke-with-response-stream-complete-event
                    'make-invoke-with-response-stream-complete-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invoke-with-response-stream-complete-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invoke-with-response-stream-complete-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "ErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-result))
      (common-lisp:list
       (common-lisp:cons "LogResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invoke-with-response-stream-complete-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass invoke-with-response-stream-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or namespaced-function-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-invoke-with-response-stream-request-function-name
                         :shape "NamespacedFunctionName" :location "uri"
                         :location-name "FunctionName")
                        (invocation-type :initarg :invocation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or response-streaming-invocation-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-invoke-with-response-stream-request-invocation-type
                         :shape "ResponseStreamingInvocationType" :location
                         "header" :location-name "X-Amz-Invocation-Type")
                        (log-type :initarg :log-type :initform common-lisp:nil
                         :type (common-lisp:or log-type common-lisp:null)
                         :accessor
                         struct-shape-invoke-with-response-stream-request-log-type
                         :shape "LogType" :location "header" :location-name
                         "X-Amz-Log-Type")
                        (client-context :initarg :client-context :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-invoke-with-response-stream-request-client-context
                         :shape "String" :location "header" :location-name
                         "X-Amz-Client-Context")
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-invoke-with-response-stream-request-qualifier
                         :shape "Qualifier" :location "querystring"
                         :location-name "Qualifier")
                        (payload :initarg :payload :initform common-lisp:nil
                         :type (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-invoke-with-response-stream-request-payload
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invoke-with-response-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'invoke-with-response-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invoke-with-response-stream-request
                    'make-invoke-with-response-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invoke-with-response-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-type))
      (common-lisp:cons "X-Amz-Invocation-Type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-type))
      (common-lisp:cons "X-Amz-Log-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-context))
      (common-lisp:cons "X-Amz-Client-Context"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invoke-with-response-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invoke-with-response-stream-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          invoke-with-response-stream-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass invoke-with-response-stream-response common-lisp:nil
                       ((status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-invoke-with-response-stream-response-status-code
                         :shape "Integer" :location "statusCode" :location-name
                         common-lisp:nil)
                        (executed-version :initarg :executed-version :initform
                         common-lisp:nil :type
                         (common-lisp:or version common-lisp:null) :accessor
                         struct-shape-invoke-with-response-stream-response-executed-version
                         :shape "Version" :location "header" :location-name
                         "X-Amz-Executed-Version")
                        (event-stream :initarg :event-stream :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          invoke-with-response-stream-response-event
                          common-lisp:null)
                         :accessor
                         struct-shape-invoke-with-response-stream-response-event-stream
                         :shape "InvokeWithResponseStreamResponseEvent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (response-stream-content-type :initarg
                         :response-stream-content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-invoke-with-response-stream-response-response-stream-content-type
                         :shape "String" :location "header" :location-name
                         "Content-Type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invoke-with-response-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'invoke-with-response-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invoke-with-response-stream-response
                    'make-invoke-with-response-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invoke-with-response-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executed-version))
      (common-lisp:cons "X-Amz-Executed-Version"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-stream-content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invoke-with-response-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-stream))
      (common-lisp:list
       (common-lisp:cons "EventStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invoke-with-response-stream-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'event-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          invoke-with-response-stream-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass invoke-with-response-stream-response-event
                       common-lisp:nil
                       ((payload-chunk :initarg :payload-chunk :initform
                         common-lisp:nil :type
                         (common-lisp:or invoke-response-stream-update
                                         common-lisp:null)
                         :accessor
                         struct-shape-invoke-with-response-stream-response-event-payload-chunk
                         :shape "InvokeResponseStreamUpdate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (invoke-complete :initarg :invoke-complete :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          invoke-with-response-stream-complete-event
                          common-lisp:null)
                         :accessor
                         struct-shape-invoke-with-response-stream-response-event-invoke-complete
                         :shape "InvokeWithResponseStreamCompleteEvent"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invoke-with-response-stream-response-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'invoke-with-response-stream-response-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invoke-with-response-stream-response-event
                    'make-invoke-with-response-stream-response-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invoke-with-response-stream-response-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invoke-with-response-stream-response-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload-chunk))
      (common-lisp:list
       (common-lisp:cons "PayloadChunk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invoke-complete))
      (common-lisp:list
       (common-lisp:cons "InvokeComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invoke-with-response-stream-response-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition kmsaccess-denied-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       kmsaccess-denied-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       kmsaccess-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsaccess-denied-exception
                    'kmsaccess-denied-exception-type
                    'kmsaccess-denied-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsdisabled-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       kmsdisabled-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       kmsdisabled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsdisabled-exception 'kmsdisabled-exception-type
                    'kmsdisabled-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsinvalid-state-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       kmsinvalid-state-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       kmsinvalid-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsinvalid-state-exception
                    'kmsinvalid-state-exception-type
                    'kmsinvalid-state-exception-message)))
(common-lisp:deftype kmskey-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition kmsnot-found-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       kmsnot-found-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       kmsnot-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsnot-found-exception 'kmsnot-found-exception-type
                    'kmsnot-found-exception-message)))
(common-lisp:deftype last-update-status () 'common-lisp:string)
(common-lisp:deftype last-update-status-reason () 'common-lisp:string)
(common-lisp:deftype last-update-status-reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass layer common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or layer-version-arn common-lisp:null)
                         :accessor struct-shape-layer-arn :shape
                         "LayerVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-size :initarg :code-size :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-layer-code-size :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (signing-profile-version-arn :initarg
                         :signing-profile-version-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-layer-signing-profile-version-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signing-job-arn :initarg :signing-job-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-layer-signing-job-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-layer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'layer
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'layer 'make-layer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input layer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input layer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-size))
      (common-lisp:list
       (common-lisp:cons "CodeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signing-profile-version-arn))
      (common-lisp:list
       (common-lisp:cons "SigningProfileVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-job-arn))
      (common-lisp:list
       (common-lisp:cons "SigningJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input layer))
   common-lisp:nil))
(common-lisp:deftype layer-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype layer-list ()
   '(trivial-types:proper-list layer-version-arn))
 (common-lisp:defun make-layer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list layer-version-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype layer-name () 'common-lisp:string)
(common-lisp:deftype layer-permission-allowed-action () 'common-lisp:string)
(common-lisp:deftype layer-permission-allowed-principal () 'common-lisp:string)
(common-lisp:deftype layer-version-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass layer-version-content-input common-lisp:nil
                       ((s3bucket :initarg :s3bucket :initform common-lisp:nil
                         :type (common-lisp:or s3bucket common-lisp:null)
                         :accessor
                         struct-shape-layer-version-content-input-s3bucket
                         :shape "S3Bucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3key :initarg :s3key :initform common-lisp:nil :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-layer-version-content-input-s3key :shape
                         "S3Key" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3object-version :initarg :s3object-version :initform
                         common-lisp:nil :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor
                         struct-shape-layer-version-content-input-s3object-version
                         :shape "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (zip-file :initarg :zip-file :initform common-lisp:nil
                         :type (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-layer-version-content-input-zip-file
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-layer-version-content-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'layer-version-content-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'layer-version-content-input
                    'make-layer-version-content-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          layer-version-content-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          layer-version-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-version))
      (common-lisp:list
       (common-lisp:cons "S3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zip-file))
      (common-lisp:list
       (common-lisp:cons "ZipFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          layer-version-content-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass layer-version-content-output common-lisp:nil
                       ((location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-layer-version-content-output-location
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-sha256 :initarg :code-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-layer-version-content-output-code-sha256
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-size :initarg :code-size :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-layer-version-content-output-code-size
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signing-profile-version-arn :initarg
                         :signing-profile-version-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-layer-version-content-output-signing-profile-version-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signing-job-arn :initarg :signing-job-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-layer-version-content-output-signing-job-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-layer-version-content-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'layer-version-content-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'layer-version-content-output
                    'make-layer-version-content-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          layer-version-content-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          layer-version-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-sha256))
      (common-lisp:list
       (common-lisp:cons "CodeSha256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-size))
      (common-lisp:list
       (common-lisp:cons "CodeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signing-profile-version-arn))
      (common-lisp:list
       (common-lisp:cons "SigningProfileVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-job-arn))
      (common-lisp:list
       (common-lisp:cons "SigningJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          layer-version-content-output))
   common-lisp:nil))
(common-lisp:deftype layer-version-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype layer-versions-list ()
   '(trivial-types:proper-list layer-versions-list-item))
 (common-lisp:defun make-layer-versions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            layer-versions-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass layer-versions-list-item common-lisp:nil
                       ((layer-version-arn :initarg :layer-version-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or layer-version-arn common-lisp:null)
                         :accessor
                         struct-shape-layer-versions-list-item-layer-version-arn
                         :shape "LayerVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type
                         (common-lisp:or layer-version-number common-lisp:null)
                         :accessor
                         struct-shape-layer-versions-list-item-version :shape
                         "LayerVersionNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-layer-versions-list-item-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-date :initarg :created-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-layer-versions-list-item-created-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compatible-runtimes :initarg :compatible-runtimes
                         :initform common-lisp:nil :type
                         (common-lisp:or compatible-runtimes common-lisp:null)
                         :accessor
                         struct-shape-layer-versions-list-item-compatible-runtimes
                         :shape "CompatibleRuntimes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-info :initarg :license-info :initform
                         common-lisp:nil :type
                         (common-lisp:or license-info common-lisp:null)
                         :accessor
                         struct-shape-layer-versions-list-item-license-info
                         :shape "LicenseInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compatible-architectures :initarg
                         :compatible-architectures :initform common-lisp:nil
                         :type
                         (common-lisp:or compatible-architectures
                                         common-lisp:null)
                         :accessor
                         struct-shape-layer-versions-list-item-compatible-architectures
                         :shape "CompatibleArchitectures" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-layer-versions-list-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'layer-versions-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'layer-versions-list-item 'make-layer-versions-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          layer-versions-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          layer-versions-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-version-arn))
      (common-lisp:list
       (common-lisp:cons "LayerVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatible-runtimes))
      (common-lisp:list
       (common-lisp:cons "CompatibleRuntimes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-info))
      (common-lisp:list
       (common-lisp:cons "LicenseInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compatible-architectures))
      (common-lisp:list
       (common-lisp:cons "CompatibleArchitectures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          layer-versions-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype layers-list ()
   '(trivial-types:proper-list layers-list-item))
 (common-lisp:defun make-layers-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list layers-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass layers-list-item common-lisp:nil
                       ((layer-name :initarg :layer-name :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-name common-lisp:null) :accessor
                         struct-shape-layers-list-item-layer-name :shape
                         "LayerName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (layer-arn :initarg :layer-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-arn common-lisp:null) :accessor
                         struct-shape-layers-list-item-layer-arn :shape
                         "LayerArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (latest-matching-version :initarg
                         :latest-matching-version :initform common-lisp:nil
                         :type
                         (common-lisp:or layer-versions-list-item
                                         common-lisp:null)
                         :accessor
                         struct-shape-layers-list-item-latest-matching-version
                         :shape "LayerVersionsListItem" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-layers-list-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'layers-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'layers-list-item 'make-layers-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input layers-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input layers-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-name))
      (common-lisp:list
       (common-lisp:cons "LayerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-arn))
      (common-lisp:list
       (common-lisp:cons "LayerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-matching-version))
      (common-lisp:list
       (common-lisp:cons "LatestMatchingVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input layers-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype layers-reference-list ()
   '(trivial-types:proper-list layer))
 (common-lisp:defun make-layers-reference-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list layer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype license-info () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-aliases-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-list-aliases-request-function-name :shape
                         "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (function-version :initarg :function-version :initform
                         common-lisp:nil :type
                         (common-lisp:or version common-lisp:null) :accessor
                         struct-shape-list-aliases-request-function-version
                         :shape "Version" :location "querystring"
                         :location-name "FunctionVersion")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-list-aliases-request-marker
                         :shape "String" :location "querystring" :location-name
                         "Marker")
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or max-list-items common-lisp:null)
                         :accessor struct-shape-list-aliases-request-max-items
                         :shape "MaxListItems" :location "querystring"
                         :location-name "MaxItems"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-aliases-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-aliases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-aliases-request 'make-list-aliases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-aliases-response common-lisp:nil
                       ((next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-aliases-response-next-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aliases :initarg :aliases :initform common-lisp:nil
                         :type (common-lisp:or alias-list common-lisp:null)
                         :accessor struct-shape-list-aliases-response-aliases
                         :shape "AliasList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-aliases-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-aliases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-aliases-response 'make-list-aliases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-code-signing-configs-request common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-code-signing-configs-request-marker
                         :shape "String" :location "querystring" :location-name
                         "Marker")
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or max-list-items common-lisp:null)
                         :accessor
                         struct-shape-list-code-signing-configs-request-max-items
                         :shape "MaxListItems" :location "querystring"
                         :location-name "MaxItems"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-code-signing-configs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-code-signing-configs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-code-signing-configs-request
                    'make-list-code-signing-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-code-signing-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-code-signing-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-code-signing-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-code-signing-configs-response common-lisp:nil
                       ((next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-code-signing-configs-response-next-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-signing-configs :initarg :code-signing-configs
                         :initform common-lisp:nil :type
                         (common-lisp:or code-signing-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-code-signing-configs-response-code-signing-configs
                         :shape "CodeSigningConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-code-signing-configs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-code-signing-configs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-code-signing-configs-response
                    'make-list-code-signing-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-code-signing-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-code-signing-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-signing-configs))
      (common-lisp:list
       (common-lisp:cons "CodeSigningConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-code-signing-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-event-source-mappings-request common-lisp:nil
                       ((event-source-arn :initarg :event-source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-event-source-mappings-request-event-source-arn
                         :shape "Arn" :location "querystring" :location-name
                         "EventSourceArn")
                        (function-name :initarg :function-name :initform
                         common-lisp:nil :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-list-event-source-mappings-request-function-name
                         :shape "FunctionName" :location "querystring"
                         :location-name "FunctionName")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-event-source-mappings-request-marker
                         :shape "String" :location "querystring" :location-name
                         "Marker")
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or max-list-items common-lisp:null)
                         :accessor
                         struct-shape-list-event-source-mappings-request-max-items
                         :shape "MaxListItems" :location "querystring"
                         :location-name "MaxItems"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-event-source-mappings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-event-source-mappings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-event-source-mappings-request
                    'make-list-event-source-mappings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-source-mappings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-source-mappings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-source-mappings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-event-source-mappings-response common-lisp:nil
                       ((next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-event-source-mappings-response-next-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-source-mappings :initarg :event-source-mappings
                         :initform common-lisp:nil :type
                         (common-lisp:or event-source-mappings-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-event-source-mappings-response-event-source-mappings
                         :shape "EventSourceMappingsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-event-source-mappings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-event-source-mappings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-event-source-mappings-response
                    'make-list-event-source-mappings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-source-mappings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-source-mappings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-source-mappings))
      (common-lisp:list
       (common-lisp:cons "EventSourceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-source-mappings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-function-event-invoke-configs-request
                       common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-list-function-event-invoke-configs-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-function-event-invoke-configs-request-marker
                         :shape "String" :location "querystring" :location-name
                         "Marker")
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          max-function-event-invoke-config-list-items
                          common-lisp:null)
                         :accessor
                         struct-shape-list-function-event-invoke-configs-request-max-items
                         :shape "MaxFunctionEventInvokeConfigListItems"
                         :location "querystring" :location-name "MaxItems"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-function-event-invoke-configs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-function-event-invoke-configs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-function-event-invoke-configs-request
                    'make-list-function-event-invoke-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-function-event-invoke-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-function-event-invoke-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-function-event-invoke-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-function-event-invoke-configs-response
                       common-lisp:nil
                       ((function-event-invoke-configs :initarg
                         :function-event-invoke-configs :initform
                         common-lisp:nil :type
                         (common-lisp:or function-event-invoke-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-function-event-invoke-configs-response-function-event-invoke-configs
                         :shape "FunctionEventInvokeConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-function-event-invoke-configs-response-next-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-function-event-invoke-configs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-function-event-invoke-configs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-function-event-invoke-configs-response
                    'make-list-function-event-invoke-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-function-event-invoke-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-function-event-invoke-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'function-event-invoke-configs))
      (common-lisp:list
       (common-lisp:cons "FunctionEventInvokeConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-function-event-invoke-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-function-url-configs-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-list-function-url-configs-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-function-url-configs-request-marker
                         :shape "String" :location "querystring" :location-name
                         "Marker")
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or max-items common-lisp:null) :accessor
                         struct-shape-list-function-url-configs-request-max-items
                         :shape "MaxItems" :location "querystring"
                         :location-name "MaxItems"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-function-url-configs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-function-url-configs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-function-url-configs-request
                    'make-list-function-url-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-function-url-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-function-url-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-function-url-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-function-url-configs-response common-lisp:nil
                       ((function-url-configs :initarg :function-url-configs
                         :initform
                         (common-lisp:error
                          ":function-url-configs is required")
                         :type
                         (common-lisp:or function-url-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-function-url-configs-response-function-url-configs
                         :shape "FunctionUrlConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-function-url-configs-response-next-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-function-url-configs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-function-url-configs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-function-url-configs-response
                    'make-list-function-url-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-function-url-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-function-url-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'function-url-configs))
      (common-lisp:list
       (common-lisp:cons "FunctionUrlConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-function-url-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-functions-by-code-signing-config-request
                       common-lisp:nil
                       ((code-signing-config-arn :initarg
                         :code-signing-config-arn :initform
                         (common-lisp:error
                          ":code-signing-config-arn is required")
                         :type
                         (common-lisp:or code-signing-config-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-functions-by-code-signing-config-request-code-signing-config-arn
                         :shape "CodeSigningConfigArn" :location "uri"
                         :location-name "CodeSigningConfigArn")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-functions-by-code-signing-config-request-marker
                         :shape "String" :location "querystring" :location-name
                         "Marker")
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or max-list-items common-lisp:null)
                         :accessor
                         struct-shape-list-functions-by-code-signing-config-request-max-items
                         :shape "MaxListItems" :location "querystring"
                         :location-name "MaxItems"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-functions-by-code-signing-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-functions-by-code-signing-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-functions-by-code-signing-config-request
                    'make-list-functions-by-code-signing-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-by-code-signing-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-by-code-signing-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-by-code-signing-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-functions-by-code-signing-config-response
                       common-lisp:nil
                       ((next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-functions-by-code-signing-config-response-next-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-arns :initarg :function-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or function-arn-list common-lisp:null)
                         :accessor
                         struct-shape-list-functions-by-code-signing-config-response-function-arns
                         :shape "FunctionArnList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-functions-by-code-signing-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-functions-by-code-signing-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-functions-by-code-signing-config-response
                    'make-list-functions-by-code-signing-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-by-code-signing-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-by-code-signing-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arns))
      (common-lisp:list
       (common-lisp:cons "FunctionArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-by-code-signing-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-functions-request common-lisp:nil
                       ((master-region :initarg :master-region :initform
                         common-lisp:nil :type
                         (common-lisp:or master-region common-lisp:null)
                         :accessor
                         struct-shape-list-functions-request-master-region
                         :shape "MasterRegion" :location "querystring"
                         :location-name "MasterRegion")
                        (function-version :initarg :function-version :initform
                         common-lisp:nil :type
                         (common-lisp:or function-version common-lisp:null)
                         :accessor
                         struct-shape-list-functions-request-function-version
                         :shape "FunctionVersion" :location "querystring"
                         :location-name "FunctionVersion")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-list-functions-request-marker
                         :shape "String" :location "querystring" :location-name
                         "Marker")
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or max-list-items common-lisp:null)
                         :accessor
                         struct-shape-list-functions-request-max-items :shape
                         "MaxListItems" :location "querystring" :location-name
                         "MaxItems"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-functions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-functions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-functions-request 'make-list-functions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-functions-response common-lisp:nil
                       ((next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-functions-response-next-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (functions :initarg :functions :initform
                         common-lisp:nil :type
                         (common-lisp:or function-list common-lisp:null)
                         :accessor
                         struct-shape-list-functions-response-functions :shape
                         "FunctionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-functions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-functions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-functions-response 'make-list-functions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'functions))
      (common-lisp:list
       (common-lisp:cons "Functions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-layer-versions-request common-lisp:nil
                       ((compatible-runtime :initarg :compatible-runtime
                         :initform common-lisp:nil :type
                         (common-lisp:or runtime common-lisp:null) :accessor
                         struct-shape-list-layer-versions-request-compatible-runtime
                         :shape "Runtime" :location "querystring"
                         :location-name "CompatibleRuntime")
                        (layer-name :initarg :layer-name :initform
                         (common-lisp:error ":layer-name is required") :type
                         (common-lisp:or layer-name common-lisp:null) :accessor
                         struct-shape-list-layer-versions-request-layer-name
                         :shape "LayerName" :location "uri" :location-name
                         "LayerName")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-layer-versions-request-marker :shape
                         "String" :location "querystring" :location-name
                         "Marker")
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or max-layer-list-items common-lisp:null)
                         :accessor
                         struct-shape-list-layer-versions-request-max-items
                         :shape "MaxLayerListItems" :location "querystring"
                         :location-name "MaxItems")
                        (compatible-architecture :initarg
                         :compatible-architecture :initform common-lisp:nil
                         :type (common-lisp:or architecture common-lisp:null)
                         :accessor
                         struct-shape-list-layer-versions-request-compatible-architecture
                         :shape "Architecture" :location "querystring"
                         :location-name "CompatibleArchitecture"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-layer-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-layer-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-layer-versions-request
                    'make-list-layer-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-layer-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-layer-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-layer-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-layer-versions-response common-lisp:nil
                       ((next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-layer-versions-response-next-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-versions :initarg :layer-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-versions-list common-lisp:null)
                         :accessor
                         struct-shape-list-layer-versions-response-layer-versions
                         :shape "LayerVersionsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-layer-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-layer-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-layer-versions-response
                    'make-list-layer-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-layer-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-layer-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-versions))
      (common-lisp:list
       (common-lisp:cons "LayerVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-layer-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-layers-request common-lisp:nil
                       ((compatible-runtime :initarg :compatible-runtime
                         :initform common-lisp:nil :type
                         (common-lisp:or runtime common-lisp:null) :accessor
                         struct-shape-list-layers-request-compatible-runtime
                         :shape "Runtime" :location "querystring"
                         :location-name "CompatibleRuntime")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-list-layers-request-marker
                         :shape "String" :location "querystring" :location-name
                         "Marker")
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or max-layer-list-items common-lisp:null)
                         :accessor struct-shape-list-layers-request-max-items
                         :shape "MaxLayerListItems" :location "querystring"
                         :location-name "MaxItems")
                        (compatible-architecture :initarg
                         :compatible-architecture :initform common-lisp:nil
                         :type (common-lisp:or architecture common-lisp:null)
                         :accessor
                         struct-shape-list-layers-request-compatible-architecture
                         :shape "Architecture" :location "querystring"
                         :location-name "CompatibleArchitecture"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-layers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-layers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-layers-request 'make-list-layers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-layers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-layers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-layers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-layers-response common-lisp:nil
                       ((next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-layers-response-next-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (layers :initarg :layers :initform common-lisp:nil
                         :type (common-lisp:or layers-list common-lisp:null)
                         :accessor struct-shape-list-layers-response-layers
                         :shape "LayersList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-layers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-layers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-layers-response 'make-list-layers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-layers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-layers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layers))
      (common-lisp:list
       (common-lisp:cons "Layers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-layers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-provisioned-concurrency-configs-request
                       common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-list-provisioned-concurrency-configs-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-provisioned-concurrency-configs-request-marker
                         :shape "String" :location "querystring" :location-name
                         "Marker")
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          max-provisioned-concurrency-config-list-items
                          common-lisp:null)
                         :accessor
                         struct-shape-list-provisioned-concurrency-configs-request-max-items
                         :shape "MaxProvisionedConcurrencyConfigListItems"
                         :location "querystring" :location-name "MaxItems"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-provisioned-concurrency-configs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-provisioned-concurrency-configs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-provisioned-concurrency-configs-request
                    'make-list-provisioned-concurrency-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioned-concurrency-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioned-concurrency-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioned-concurrency-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-provisioned-concurrency-configs-response
                       common-lisp:nil
                       ((provisioned-concurrency-configs :initarg
                         :provisioned-concurrency-configs :initform
                         common-lisp:nil :type
                         (common-lisp:or provisioned-concurrency-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-provisioned-concurrency-configs-response-provisioned-concurrency-configs
                         :shape "ProvisionedConcurrencyConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-provisioned-concurrency-configs-response-next-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-provisioned-concurrency-configs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-provisioned-concurrency-configs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-provisioned-concurrency-configs-response
                    'make-list-provisioned-concurrency-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioned-concurrency-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioned-concurrency-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-concurrency-configs))
      (common-lisp:list
       (common-lisp:cons "ProvisionedConcurrencyConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioned-concurrency-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-request common-lisp:nil
                       ((resource :initarg :resource :initform
                         (common-lisp:error ":resource is required") :type
                         (common-lisp:or function-arn common-lisp:null)
                         :accessor struct-shape-list-tags-request-resource
                         :shape "FunctionArn" :location "uri" :location-name
                         "ARN"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-request 'make-list-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-response-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-response 'make-list-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-versions-by-function-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or namespaced-function-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-versions-by-function-request-function-name
                         :shape "NamespacedFunctionName" :location "uri"
                         :location-name "FunctionName")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-versions-by-function-request-marker
                         :shape "String" :location "querystring" :location-name
                         "Marker")
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or max-list-items common-lisp:null)
                         :accessor
                         struct-shape-list-versions-by-function-request-max-items
                         :shape "MaxListItems" :location "querystring"
                         :location-name "MaxItems"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-versions-by-function-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-versions-by-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-versions-by-function-request
                    'make-list-versions-by-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-by-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-by-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-by-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-versions-by-function-response common-lisp:nil
                       ((next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-versions-by-function-response-next-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (versions :initarg :versions :initform common-lisp:nil
                         :type (common-lisp:or function-list common-lisp:null)
                         :accessor
                         struct-shape-list-versions-by-function-response-versions
                         :shape "FunctionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-versions-by-function-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-versions-by-function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-versions-by-function-response
                    'make-list-versions-by-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-by-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-by-function-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "Versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-by-function-response))
   common-lisp:nil))
(common-lisp:deftype local-mount-path () 'common-lisp:string)
(common-lisp:deftype log-format () 'common-lisp:string)
(common-lisp:deftype log-group () 'common-lisp:string)
(common-lisp:deftype log-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass logging-config common-lisp:nil
                       ((log-format :initarg :log-format :initform
                         common-lisp:nil :type
                         (common-lisp:or log-format common-lisp:null) :accessor
                         struct-shape-logging-config-log-format :shape
                         "LogFormat" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (application-log-level :initarg :application-log-level
                         :initform common-lisp:nil :type
                         (common-lisp:or application-log-level
                                         common-lisp:null)
                         :accessor
                         struct-shape-logging-config-application-log-level
                         :shape "ApplicationLogLevel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (system-log-level :initarg :system-log-level :initform
                         common-lisp:nil :type
                         (common-lisp:or system-log-level common-lisp:null)
                         :accessor struct-shape-logging-config-system-log-level
                         :shape "SystemLogLevel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group :initarg :log-group :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group common-lisp:null) :accessor
                         struct-shape-logging-config-log-group :shape
                         "LogGroup" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-logging-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'logging-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'logging-config 'make-logging-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-format))
      (common-lisp:list
       (common-lisp:cons "LogFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-log-level))
      (common-lisp:list
       (common-lisp:cons "ApplicationLogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system-log-level))
      (common-lisp:list
       (common-lisp:cons "SystemLogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "LogGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-config))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype master-region () 'common-lisp:string)
(common-lisp:deftype max-age () 'common-lisp:integer)
(common-lisp:deftype max-function-event-invoke-config-list-items ()
  'common-lisp:integer)
(common-lisp:deftype max-items () 'common-lisp:integer)
(common-lisp:deftype max-layer-list-items () 'common-lisp:integer)
(common-lisp:deftype max-list-items () 'common-lisp:integer)
(common-lisp:deftype max-provisioned-concurrency-config-list-items ()
  'common-lisp:integer)
(common-lisp:deftype maximum-batching-window-in-seconds () 'common-lisp:integer)
(common-lisp:deftype maximum-concurrency () 'common-lisp:integer)
(common-lisp:deftype maximum-event-age-in-seconds () 'common-lisp:integer)
(common-lisp:deftype maximum-record-age-in-seconds () 'common-lisp:integer)
(common-lisp:deftype maximum-retry-attempts () 'common-lisp:integer)
(common-lisp:deftype maximum-retry-attempts-event-source-mapping ()
  'common-lisp:integer)
(common-lisp:deftype memory-size () 'common-lisp:integer)
(common-lisp:deftype method () 'common-lisp:string)
(common-lisp:deftype name-spaced-function-arn () 'common-lisp:string)
(common-lisp:deftype namespaced-function-name () 'common-lisp:string)
(common-lisp:deftype namespaced-statement-id () 'common-lisp:string)
(common-lisp:deftype non-negative-integer () 'common-lisp:integer)
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass on-failure common-lisp:nil
                       ((destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or destination-arn common-lisp:null)
                         :accessor struct-shape-on-failure-destination :shape
                         "DestinationArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-on-failure
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'on-failure
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'on-failure 'make-on-failure))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input on-failure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input on-failure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input on-failure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass on-success common-lisp:nil
                       ((destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or destination-arn common-lisp:null)
                         :accessor struct-shape-on-success-destination :shape
                         "DestinationArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-on-success
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'on-success
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'on-success 'make-on-success))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input on-success))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input on-success))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input on-success))
   common-lisp:nil))
(common-lisp:deftype organization-id () 'common-lisp:string)
(common-lisp:deftype origin () 'common-lisp:string)
(common-lisp:deftype package-type () 'common-lisp:string)
(common-lisp:deftype parallelization-factor () 'common-lisp:integer)
(common-lisp:deftype pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition policy-length-exceeded-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       policy-length-exceeded-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       policy-length-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'policy-length-exceeded-exception
                    'policy-length-exceeded-exception-type
                    'policy-length-exceeded-exception-message)))
(common-lisp:deftype positive-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition precondition-failed-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       precondition-failed-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       precondition-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'precondition-failed-exception
                    'precondition-failed-exception-type
                    'precondition-failed-exception-message)))
(common-lisp:deftype principal () 'common-lisp:string)
(common-lisp:deftype principal-org-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype provisioned-concurrency-config-list ()
   '(trivial-types:proper-list provisioned-concurrency-config-list-item))
 (common-lisp:defun make-provisioned-concurrency-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            provisioned-concurrency-config-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass provisioned-concurrency-config-list-item common-lisp:nil
                       ((function-arn :initarg :function-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or function-arn common-lisp:null)
                         :accessor
                         struct-shape-provisioned-concurrency-config-list-item-function-arn
                         :shape "FunctionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requested-provisioned-concurrent-executions :initarg
                         :requested-provisioned-concurrent-executions :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-provisioned-concurrency-config-list-item-requested-provisioned-concurrent-executions
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (available-provisioned-concurrent-executions :initarg
                         :available-provisioned-concurrent-executions :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor
                         struct-shape-provisioned-concurrency-config-list-item-available-provisioned-concurrent-executions
                         :shape "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-provisioned-concurrent-executions :initarg
                         :allocated-provisioned-concurrent-executions :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor
                         struct-shape-provisioned-concurrency-config-list-item-allocated-provisioned-concurrent-executions
                         :shape "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or provisioned-concurrency-status-enum
                                         common-lisp:null)
                         :accessor
                         struct-shape-provisioned-concurrency-config-list-item-status
                         :shape "ProvisionedConcurrencyStatusEnum" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-provisioned-concurrency-config-list-item-status-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-provisioned-concurrency-config-list-item-last-modified
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provisioned-concurrency-config-list-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'provisioned-concurrency-config-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'provisioned-concurrency-config-list-item
                    'make-provisioned-concurrency-config-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-concurrency-config-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-concurrency-config-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requested-provisioned-concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "RequestedProvisionedConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-provisioned-concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "AvailableProvisionedConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allocated-provisioned-concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "AllocatedProvisionedConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-concurrency-config-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition provisioned-concurrency-config-not-found-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       provisioned-concurrency-config-not-found-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       provisioned-concurrency-config-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'provisioned-concurrency-config-not-found-exception
                    'provisioned-concurrency-config-not-found-exception-type
                    'provisioned-concurrency-config-not-found-exception-message)))
(common-lisp:deftype provisioned-concurrency-status-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass publish-layer-version-request common-lisp:nil
                       ((layer-name :initarg :layer-name :initform
                         (common-lisp:error ":layer-name is required") :type
                         (common-lisp:or layer-name common-lisp:null) :accessor
                         struct-shape-publish-layer-version-request-layer-name
                         :shape "LayerName" :location "uri" :location-name
                         "LayerName")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-publish-layer-version-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content :initarg :content :initform
                         (common-lisp:error ":content is required") :type
                         (common-lisp:or layer-version-content-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-publish-layer-version-request-content
                         :shape "LayerVersionContentInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compatible-runtimes :initarg :compatible-runtimes
                         :initform common-lisp:nil :type
                         (common-lisp:or compatible-runtimes common-lisp:null)
                         :accessor
                         struct-shape-publish-layer-version-request-compatible-runtimes
                         :shape "CompatibleRuntimes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-info :initarg :license-info :initform
                         common-lisp:nil :type
                         (common-lisp:or license-info common-lisp:null)
                         :accessor
                         struct-shape-publish-layer-version-request-license-info
                         :shape "LicenseInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compatible-architectures :initarg
                         :compatible-architectures :initform common-lisp:nil
                         :type
                         (common-lisp:or compatible-architectures
                                         common-lisp:null)
                         :accessor
                         struct-shape-publish-layer-version-request-compatible-architectures
                         :shape "CompatibleArchitectures" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-publish-layer-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'publish-layer-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'publish-layer-version-request
                    'make-publish-layer-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-layer-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-layer-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatible-runtimes))
      (common-lisp:list
       (common-lisp:cons "CompatibleRuntimes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-info))
      (common-lisp:list
       (common-lisp:cons "LicenseInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compatible-architectures))
      (common-lisp:list
       (common-lisp:cons "CompatibleArchitectures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-layer-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass publish-layer-version-response common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type
                         (common-lisp:or layer-version-content-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-publish-layer-version-response-content
                         :shape "LayerVersionContentOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (layer-arn :initarg :layer-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-arn common-lisp:null) :accessor
                         struct-shape-publish-layer-version-response-layer-arn
                         :shape "LayerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-version-arn :initarg :layer-version-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or layer-version-arn common-lisp:null)
                         :accessor
                         struct-shape-publish-layer-version-response-layer-version-arn
                         :shape "LayerVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-publish-layer-version-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-date :initarg :created-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-publish-layer-version-response-created-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type
                         (common-lisp:or layer-version-number common-lisp:null)
                         :accessor
                         struct-shape-publish-layer-version-response-version
                         :shape "LayerVersionNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compatible-runtimes :initarg :compatible-runtimes
                         :initform common-lisp:nil :type
                         (common-lisp:or compatible-runtimes common-lisp:null)
                         :accessor
                         struct-shape-publish-layer-version-response-compatible-runtimes
                         :shape "CompatibleRuntimes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-info :initarg :license-info :initform
                         common-lisp:nil :type
                         (common-lisp:or license-info common-lisp:null)
                         :accessor
                         struct-shape-publish-layer-version-response-license-info
                         :shape "LicenseInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compatible-architectures :initarg
                         :compatible-architectures :initform common-lisp:nil
                         :type
                         (common-lisp:or compatible-architectures
                                         common-lisp:null)
                         :accessor
                         struct-shape-publish-layer-version-response-compatible-architectures
                         :shape "CompatibleArchitectures" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-publish-layer-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'publish-layer-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'publish-layer-version-response
                    'make-publish-layer-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-layer-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-layer-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-arn))
      (common-lisp:list
       (common-lisp:cons "LayerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-version-arn))
      (common-lisp:list
       (common-lisp:cons "LayerVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatible-runtimes))
      (common-lisp:list
       (common-lisp:cons "CompatibleRuntimes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-info))
      (common-lisp:list
       (common-lisp:cons "LicenseInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compatible-architectures))
      (common-lisp:list
       (common-lisp:cons "CompatibleArchitectures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-layer-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass publish-version-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-publish-version-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (code-sha256 :initarg :code-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-publish-version-request-code-sha256
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-publish-version-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-publish-version-request-revision-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-publish-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'publish-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'publish-version-request 'make-publish-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-sha256))
      (common-lisp:list
       (common-lisp:cons "CodeSha256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-function-code-signing-config-request common-lisp:nil
                       ((code-signing-config-arn :initarg
                         :code-signing-config-arn :initform
                         (common-lisp:error
                          ":code-signing-config-arn is required")
                         :type
                         (common-lisp:or code-signing-config-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-function-code-signing-config-request-code-signing-config-arn
                         :shape "CodeSigningConfigArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-put-function-code-signing-config-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-function-code-signing-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-function-code-signing-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-function-code-signing-config-request
                    'make-put-function-code-signing-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-function-code-signing-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-function-code-signing-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-signing-config-arn))
      (common-lisp:list
       (common-lisp:cons "CodeSigningConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-function-code-signing-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-function-code-signing-config-response
                       common-lisp:nil
                       ((code-signing-config-arn :initarg
                         :code-signing-config-arn :initform
                         (common-lisp:error
                          ":code-signing-config-arn is required")
                         :type
                         (common-lisp:or code-signing-config-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-function-code-signing-config-response-code-signing-config-arn
                         :shape "CodeSigningConfigArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-put-function-code-signing-config-response-function-name
                         :shape "FunctionName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-function-code-signing-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-function-code-signing-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-function-code-signing-config-response
                    'make-put-function-code-signing-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-function-code-signing-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-function-code-signing-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-signing-config-arn))
      (common-lisp:list
       (common-lisp:cons "CodeSigningConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-function-code-signing-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-function-concurrency-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-put-function-concurrency-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (reserved-concurrent-executions :initarg
                         :reserved-concurrent-executions :initform
                         (common-lisp:error
                          ":reserved-concurrent-executions is required")
                         :type
                         (common-lisp:or reserved-concurrent-executions
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-function-concurrency-request-reserved-concurrent-executions
                         :shape "ReservedConcurrentExecutions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-function-concurrency-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-function-concurrency-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-function-concurrency-request
                    'make-put-function-concurrency-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-function-concurrency-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-function-concurrency-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "ReservedConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-function-concurrency-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-function-event-invoke-config-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-put-function-event-invoke-config-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-put-function-event-invoke-config-request-qualifier
                         :shape "Qualifier" :location "querystring"
                         :location-name "Qualifier")
                        (maximum-retry-attempts :initarg
                         :maximum-retry-attempts :initform common-lisp:nil
                         :type
                         (common-lisp:or maximum-retry-attempts
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-function-event-invoke-config-request-maximum-retry-attempts
                         :shape "MaximumRetryAttempts" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-event-age-in-seconds :initarg
                         :maximum-event-age-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or maximum-event-age-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-function-event-invoke-config-request-maximum-event-age-in-seconds
                         :shape "MaximumEventAgeInSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination-config :initarg :destination-config
                         :initform common-lisp:nil :type
                         (common-lisp:or destination-config common-lisp:null)
                         :accessor
                         struct-shape-put-function-event-invoke-config-request-destination-config
                         :shape "DestinationConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-function-event-invoke-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-function-event-invoke-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-function-event-invoke-config-request
                    'make-put-function-event-invoke-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-function-event-invoke-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-function-event-invoke-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-retry-attempts))
      (common-lisp:list
       (common-lisp:cons "MaximumRetryAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-event-age-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumEventAgeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-config))
      (common-lisp:list
       (common-lisp:cons "DestinationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-function-event-invoke-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-provisioned-concurrency-config-request
                       common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-put-provisioned-concurrency-config-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         (common-lisp:error ":qualifier is required") :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-put-provisioned-concurrency-config-request-qualifier
                         :shape "Qualifier" :location "querystring"
                         :location-name "Qualifier")
                        (provisioned-concurrent-executions :initarg
                         :provisioned-concurrent-executions :initform
                         (common-lisp:error
                          ":provisioned-concurrent-executions is required")
                         :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-put-provisioned-concurrency-config-request-provisioned-concurrent-executions
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-provisioned-concurrency-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-provisioned-concurrency-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-provisioned-concurrency-config-request
                    'make-put-provisioned-concurrency-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-provisioned-concurrency-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-provisioned-concurrency-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "ProvisionedConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-provisioned-concurrency-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-provisioned-concurrency-config-response
                       common-lisp:nil
                       ((requested-provisioned-concurrent-executions :initarg
                         :requested-provisioned-concurrent-executions :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-put-provisioned-concurrency-config-response-requested-provisioned-concurrent-executions
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (available-provisioned-concurrent-executions :initarg
                         :available-provisioned-concurrent-executions :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor
                         struct-shape-put-provisioned-concurrency-config-response-available-provisioned-concurrent-executions
                         :shape "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-provisioned-concurrent-executions :initarg
                         :allocated-provisioned-concurrent-executions :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor
                         struct-shape-put-provisioned-concurrency-config-response-allocated-provisioned-concurrent-executions
                         :shape "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or provisioned-concurrency-status-enum
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-provisioned-concurrency-config-response-status
                         :shape "ProvisionedConcurrencyStatusEnum" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-provisioned-concurrency-config-response-status-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-put-provisioned-concurrency-config-response-last-modified
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-provisioned-concurrency-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-provisioned-concurrency-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-provisioned-concurrency-config-response
                    'make-put-provisioned-concurrency-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-provisioned-concurrency-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-provisioned-concurrency-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requested-provisioned-concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "RequestedProvisionedConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-provisioned-concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "AvailableProvisionedConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allocated-provisioned-concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "AllocatedProvisionedConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-provisioned-concurrency-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-runtime-management-config-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-put-runtime-management-config-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-put-runtime-management-config-request-qualifier
                         :shape "Qualifier" :location "querystring"
                         :location-name "Qualifier")
                        (update-runtime-on :initarg :update-runtime-on
                         :initform
                         (common-lisp:error ":update-runtime-on is required")
                         :type
                         (common-lisp:or update-runtime-on common-lisp:null)
                         :accessor
                         struct-shape-put-runtime-management-config-request-update-runtime-on
                         :shape "UpdateRuntimeOn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime-version-arn :initarg :runtime-version-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or runtime-version-arn common-lisp:null)
                         :accessor
                         struct-shape-put-runtime-management-config-request-runtime-version-arn
                         :shape "RuntimeVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-runtime-management-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-runtime-management-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-runtime-management-config-request
                    'make-put-runtime-management-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-runtime-management-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-runtime-management-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-runtime-on))
      (common-lisp:list
       (common-lisp:cons "UpdateRuntimeOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-version-arn))
      (common-lisp:list
       (common-lisp:cons "RuntimeVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-runtime-management-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-runtime-management-config-response common-lisp:nil
                       ((update-runtime-on :initarg :update-runtime-on
                         :initform
                         (common-lisp:error ":update-runtime-on is required")
                         :type
                         (common-lisp:or update-runtime-on common-lisp:null)
                         :accessor
                         struct-shape-put-runtime-management-config-response-update-runtime-on
                         :shape "UpdateRuntimeOn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-arn :initarg :function-arn :initform
                         (common-lisp:error ":function-arn is required") :type
                         (common-lisp:or function-arn common-lisp:null)
                         :accessor
                         struct-shape-put-runtime-management-config-response-function-arn
                         :shape "FunctionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime-version-arn :initarg :runtime-version-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or runtime-version-arn common-lisp:null)
                         :accessor
                         struct-shape-put-runtime-management-config-response-runtime-version-arn
                         :shape "RuntimeVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-runtime-management-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-runtime-management-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-runtime-management-config-response
                    'make-put-runtime-management-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-runtime-management-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-runtime-management-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-runtime-on))
      (common-lisp:list
       (common-lisp:cons "UpdateRuntimeOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-version-arn))
      (common-lisp:list
       (common-lisp:cons "RuntimeVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-runtime-management-config-response))
   common-lisp:nil))
(common-lisp:deftype qualifier () 'common-lisp:string)
(common-lisp:deftype queue () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype queues () '(trivial-types:proper-list queue))
 (common-lisp:defun make-queues
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list queue))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition recursive-invocation-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       recursive-invocation-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       recursive-invocation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'recursive-invocation-exception
                    'recursive-invocation-exception-type
                    'recursive-invocation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass remove-layer-version-permission-request common-lisp:nil
                       ((layer-name :initarg :layer-name :initform
                         (common-lisp:error ":layer-name is required") :type
                         (common-lisp:or layer-name common-lisp:null) :accessor
                         struct-shape-remove-layer-version-permission-request-layer-name
                         :shape "LayerName" :location "uri" :location-name
                         "LayerName")
                        (version-number :initarg :version-number :initform
                         (common-lisp:error ":version-number is required")
                         :type
                         (common-lisp:or layer-version-number common-lisp:null)
                         :accessor
                         struct-shape-remove-layer-version-permission-request-version-number
                         :shape "LayerVersionNumber" :location "uri"
                         :location-name "VersionNumber")
                        (statement-id :initarg :statement-id :initform
                         (common-lisp:error ":statement-id is required") :type
                         (common-lisp:or statement-id common-lisp:null)
                         :accessor
                         struct-shape-remove-layer-version-permission-request-statement-id
                         :shape "StatementId" :location "uri" :location-name
                         "StatementId")
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remove-layer-version-permission-request-revision-id
                         :shape "String" :location "querystring" :location-name
                         "RevisionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-layer-version-permission-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-layer-version-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-layer-version-permission-request
                    'make-remove-layer-version-permission-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-layer-version-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-layer-version-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-layer-version-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-permission-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-remove-permission-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (statement-id :initarg :statement-id :initform
                         (common-lisp:error ":statement-id is required") :type
                         (common-lisp:or namespaced-statement-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-remove-permission-request-statement-id
                         :shape "NamespacedStatementId" :location "uri"
                         :location-name "StatementId")
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-remove-permission-request-qualifier
                         :shape "Qualifier" :location "querystring"
                         :location-name "Qualifier")
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remove-permission-request-revision-id
                         :shape "String" :location "querystring" :location-name
                         "RevisionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-permission-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-permission-request
                    'make-remove-permission-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition request-too-large-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       request-too-large-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       request-too-large-exception-message)))
 (common-lisp:export
  (common-lisp:list 'request-too-large-exception
                    'request-too-large-exception-type
                    'request-too-large-exception-message)))
(common-lisp:deftype reserved-concurrent-executions () 'common-lisp:integer)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-conflict-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       resource-conflict-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-conflict-exception
                    'resource-conflict-exception-type
                    'resource-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       resource-in-use-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception 'resource-in-use-exception-type
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       resource-not-found-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-type
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-ready-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       resource-not-ready-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-not-ready-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-ready-exception
                    'resource-not-ready-exception-type
                    'resource-not-ready-exception-message)))
(common-lisp:deftype response-streaming-invocation-type () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype runtime () 'common-lisp:string)
(common-lisp:deftype runtime-version-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass runtime-version-config common-lisp:nil
                       ((runtime-version-arn :initarg :runtime-version-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or runtime-version-arn common-lisp:null)
                         :accessor
                         struct-shape-runtime-version-config-runtime-version-arn
                         :shape "RuntimeVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or runtime-version-error
                                         common-lisp:null)
                         :accessor struct-shape-runtime-version-config-error
                         :shape "RuntimeVersionError" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-runtime-version-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'runtime-version-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'runtime-version-config 'make-runtime-version-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          runtime-version-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          runtime-version-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-version-arn))
      (common-lisp:list
       (common-lisp:cons "RuntimeVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          runtime-version-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass runtime-version-error common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-runtime-version-error-error-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor struct-shape-runtime-version-error-message
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-runtime-version-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'runtime-version-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'runtime-version-error 'make-runtime-version-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          runtime-version-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          runtime-version-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          runtime-version-error))
   common-lisp:nil))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:deftype s3object-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scaling-config common-lisp:nil
                       ((maximum-concurrency :initarg :maximum-concurrency
                         :initform common-lisp:nil :type
                         (common-lisp:or maximum-concurrency common-lisp:null)
                         :accessor
                         struct-shape-scaling-config-maximum-concurrency :shape
                         "MaximumConcurrency" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scaling-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scaling-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scaling-config 'make-scaling-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scaling-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scaling-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaximumConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scaling-config))
   common-lisp:nil))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-security-group-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass self-managed-event-source common-lisp:nil
                       ((endpoints :initarg :endpoints :initform
                         common-lisp:nil :type
                         (common-lisp:or endpoints common-lisp:null) :accessor
                         struct-shape-self-managed-event-source-endpoints
                         :shape "Endpoints" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-self-managed-event-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'self-managed-event-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'self-managed-event-source
                    'make-self-managed-event-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-event-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-event-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-event-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass self-managed-kafka-event-source-config common-lisp:nil
                       ((consumer-group-id :initarg :consumer-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-self-managed-kafka-event-source-config-consumer-group-id
                         :shape "URI" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-self-managed-kafka-event-source-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'self-managed-kafka-event-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'self-managed-kafka-event-source-config
                    'make-self-managed-kafka-event-source-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-kafka-event-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-kafka-event-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-group-id))
      (common-lisp:list
       (common-lisp:cons "ConsumerGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-kafka-event-source-config))
   common-lisp:nil))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       service-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-exception 'service-exception-type
                    'service-exception-message)))
(common-lisp:progn
 (common-lisp:deftype signing-profile-version-arns ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun make-signing-profile-version-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass snap-start common-lisp:nil
                       ((apply-on :initarg :apply-on :initform common-lisp:nil
                         :type
                         (common-lisp:or snap-start-apply-on common-lisp:null)
                         :accessor struct-shape-snap-start-apply-on :shape
                         "SnapStartApplyOn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snap-start
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snap-start
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'snap-start 'make-snap-start))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snap-start))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snap-start))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-on))
      (common-lisp:list
       (common-lisp:cons "ApplyOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snap-start))
   common-lisp:nil))
(common-lisp:deftype snap-start-apply-on () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition snap-start-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       snap-start-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       snap-start-exception-message)))
 (common-lisp:export
  (common-lisp:list 'snap-start-exception 'snap-start-exception-type
                    'snap-start-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition snap-start-not-ready-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       snap-start-not-ready-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       snap-start-not-ready-exception-message)))
 (common-lisp:export
  (common-lisp:list 'snap-start-not-ready-exception
                    'snap-start-not-ready-exception-type
                    'snap-start-not-ready-exception-message)))
(common-lisp:deftype snap-start-optimization-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass snap-start-response common-lisp:nil
                       ((apply-on :initarg :apply-on :initform common-lisp:nil
                         :type
                         (common-lisp:or snap-start-apply-on common-lisp:null)
                         :accessor struct-shape-snap-start-response-apply-on
                         :shape "SnapStartApplyOn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (optimization-status :initarg :optimization-status
                         :initform common-lisp:nil :type
                         (common-lisp:or snap-start-optimization-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-snap-start-response-optimization-status
                         :shape "SnapStartOptimizationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snap-start-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snap-start-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'snap-start-response 'make-snap-start-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snap-start-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snap-start-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-on))
      (common-lisp:list
       (common-lisp:cons "ApplyOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optimization-status))
      (common-lisp:list
       (common-lisp:cons "OptimizationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snap-start-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snap-start-timeout-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       snap-start-timeout-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       snap-start-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'snap-start-timeout-exception
                    'snap-start-timeout-exception-type
                    'snap-start-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:defclass source-access-configuration common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or source-access-type common-lisp:null)
                         :accessor
                         struct-shape-source-access-configuration-type :shape
                         "SourceAccessType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (uri :initarg :uri :initform common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-source-access-configuration-uri :shape
                         "URI" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-access-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-access-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-access-configuration
                    'make-source-access-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-access-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-access-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "URI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-access-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-access-configurations ()
   '(trivial-types:proper-list source-access-configuration))
 (common-lisp:defun make-source-access-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            source-access-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype source-access-type () 'common-lisp:string)
(common-lisp:deftype source-owner () 'common-lisp:string)
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:deftype state-reason () 'common-lisp:string)
(common-lisp:deftype state-reason-code () 'common-lisp:string)
(common-lisp:deftype statement-id () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subnet-ipaddress-limit-reached-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       subnet-ipaddress-limit-reached-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       subnet-ipaddress-limit-reached-exception-message)))
 (common-lisp:export
  (common-lisp:list 'subnet-ipaddress-limit-reached-exception
                    'subnet-ipaddress-limit-reached-exception-type
                    'subnet-ipaddress-limit-reached-exception-message)))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun make-subnet-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype system-log-level () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource :initarg :resource :initform
                         (common-lisp:error ":resource is required") :type
                         (common-lisp:or function-arn common-lisp:null)
                         :accessor struct-shape-tag-resource-request-resource
                         :shape "FunctionArn" :location "uri" :location-name
                         "ARN")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype throttle-reason () 'common-lisp:string)
(common-lisp:deftype timeout () 'common-lisp:integer)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (lambda-error)
     ((retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader too-many-requests-exception-retry-after-seconds)
      (type :initarg :type :initform common-lisp:nil :reader
       too-many-requests-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       too-many-requests-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-retry-after-seconds
                    'too-many-requests-exception-type
                    'too-many-requests-exception-message
                    'too-many-requests-exception-reason)))
(common-lisp:deftype topic () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype topics () '(trivial-types:proper-list topic))
 (common-lisp:defun make-topics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list topic))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tracing-config common-lisp:nil
                       ((mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or tracing-mode common-lisp:null)
                         :accessor struct-shape-tracing-config-mode :shape
                         "TracingMode" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tracing-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tracing-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tracing-config 'make-tracing-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tracing-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tracing-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tracing-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tracing-config-response common-lisp:nil
                       ((mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or tracing-mode common-lisp:null)
                         :accessor struct-shape-tracing-config-response-mode
                         :shape "TracingMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tracing-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tracing-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tracing-config-response 'make-tracing-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tracing-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tracing-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tracing-config-response))
   common-lisp:nil))
(common-lisp:deftype tracing-mode () 'common-lisp:string)
(common-lisp:deftype tumbling-window-in-seconds () 'common-lisp:integer)
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:deftype unreserved-concurrent-executions () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition unsupported-media-type-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       unsupported-media-type-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       unsupported-media-type-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-media-type-exception
                    'unsupported-media-type-exception-type
                    'unsupported-media-type-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource :initarg :resource :initform
                         (common-lisp:error ":resource is required") :type
                         (common-lisp:or function-arn common-lisp:null)
                         :accessor struct-shape-untag-resource-request-resource
                         :shape "FunctionArn" :location "uri" :location-name
                         "ARN")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-alias-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-update-alias-request-function-name :shape
                         "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or alias common-lisp:null) :accessor
                         struct-shape-update-alias-request-name :shape "Alias"
                         :location "uri" :location-name "Name")
                        (function-version :initarg :function-version :initform
                         common-lisp:nil :type
                         (common-lisp:or version common-lisp:null) :accessor
                         struct-shape-update-alias-request-function-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-alias-request-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (routing-config :initarg :routing-config :initform
                         common-lisp:nil :type
                         (common-lisp:or alias-routing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-alias-request-routing-config
                         :shape "AliasRoutingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-alias-request-revision-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-alias-request 'make-update-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-version))
      (common-lisp:list
       (common-lisp:cons "FunctionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-config))
      (common-lisp:list
       (common-lisp:cons "RoutingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-code-signing-config-request common-lisp:nil
                       ((code-signing-config-arn :initarg
                         :code-signing-config-arn :initform
                         (common-lisp:error
                          ":code-signing-config-arn is required")
                         :type
                         (common-lisp:or code-signing-config-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-code-signing-config-request-code-signing-config-arn
                         :shape "CodeSigningConfigArn" :location "uri"
                         :location-name "CodeSigningConfigArn")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-code-signing-config-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-publishers :initarg :allowed-publishers
                         :initform common-lisp:nil :type
                         (common-lisp:or allowed-publishers common-lisp:null)
                         :accessor
                         struct-shape-update-code-signing-config-request-allowed-publishers
                         :shape "AllowedPublishers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-signing-policies :initarg :code-signing-policies
                         :initform common-lisp:nil :type
                         (common-lisp:or code-signing-policies
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-code-signing-config-request-code-signing-policies
                         :shape "CodeSigningPolicies" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-code-signing-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-code-signing-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-code-signing-config-request
                    'make-update-code-signing-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-code-signing-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-code-signing-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-publishers))
      (common-lisp:list
       (common-lisp:cons "AllowedPublishers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-signing-policies))
      (common-lisp:list
       (common-lisp:cons "CodeSigningPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-code-signing-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-code-signing-config-response common-lisp:nil
                       ((code-signing-config :initarg :code-signing-config
                         :initform
                         (common-lisp:error ":code-signing-config is required")
                         :type
                         (common-lisp:or code-signing-config common-lisp:null)
                         :accessor
                         struct-shape-update-code-signing-config-response-code-signing-config
                         :shape "CodeSigningConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-code-signing-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-code-signing-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-code-signing-config-response
                    'make-update-code-signing-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-code-signing-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-code-signing-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-signing-config))
      (common-lisp:list
       (common-lisp:cons "CodeSigningConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-code-signing-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-event-source-mapping-request common-lisp:nil
                       ((uuid :initarg :uuid :initform
                         (common-lisp:error ":uuid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-event-source-mapping-request-uuid
                         :shape "String" :location "uri" :location-name "UUID")
                        (function-name :initarg :function-name :initform
                         common-lisp:nil :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-update-event-source-mapping-request-function-name
                         :shape "FunctionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor
                         struct-shape-update-event-source-mapping-request-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (batch-size :initarg :batch-size :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-size common-lisp:null) :accessor
                         struct-shape-update-event-source-mapping-request-batch-size
                         :shape "BatchSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-criteria :initarg :filter-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-criteria common-lisp:null)
                         :accessor
                         struct-shape-update-event-source-mapping-request-filter-criteria
                         :shape "FilterCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-batching-window-in-seconds :initarg
                         :maximum-batching-window-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or maximum-batching-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-event-source-mapping-request-maximum-batching-window-in-seconds
                         :shape "MaximumBatchingWindowInSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination-config :initarg :destination-config
                         :initform common-lisp:nil :type
                         (common-lisp:or destination-config common-lisp:null)
                         :accessor
                         struct-shape-update-event-source-mapping-request-destination-config
                         :shape "DestinationConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-record-age-in-seconds :initarg
                         :maximum-record-age-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or maximum-record-age-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-event-source-mapping-request-maximum-record-age-in-seconds
                         :shape "MaximumRecordAgeInSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bisect-batch-on-function-error :initarg
                         :bisect-batch-on-function-error :initform
                         common-lisp:nil :type
                         (common-lisp:or bisect-batch-on-function-error
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-event-source-mapping-request-bisect-batch-on-function-error
                         :shape "BisectBatchOnFunctionError" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-retry-attempts :initarg
                         :maximum-retry-attempts :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          maximum-retry-attempts-event-source-mapping
                          common-lisp:null)
                         :accessor
                         struct-shape-update-event-source-mapping-request-maximum-retry-attempts
                         :shape "MaximumRetryAttemptsEventSourceMapping"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parallelization-factor :initarg
                         :parallelization-factor :initform common-lisp:nil
                         :type
                         (common-lisp:or parallelization-factor
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-event-source-mapping-request-parallelization-factor
                         :shape "ParallelizationFactor" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-access-configurations :initarg
                         :source-access-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or source-access-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-event-source-mapping-request-source-access-configurations
                         :shape "SourceAccessConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tumbling-window-in-seconds :initarg
                         :tumbling-window-in-seconds :initform common-lisp:nil
                         :type
                         (common-lisp:or tumbling-window-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-event-source-mapping-request-tumbling-window-in-seconds
                         :shape "TumblingWindowInSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (function-response-types :initarg
                         :function-response-types :initform common-lisp:nil
                         :type
                         (common-lisp:or function-response-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-event-source-mapping-request-function-response-types
                         :shape "FunctionResponseTypeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scaling-config :initarg :scaling-config :initform
                         common-lisp:nil :type
                         (common-lisp:or scaling-config common-lisp:null)
                         :accessor
                         struct-shape-update-event-source-mapping-request-scaling-config
                         :shape "ScalingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-dbevent-source-config :initarg
                         :document-dbevent-source-config :initform
                         common-lisp:nil :type
                         (common-lisp:or document-dbevent-source-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-event-source-mapping-request-document-dbevent-source-config
                         :shape "DocumentDBEventSourceConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-event-source-mapping-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-event-source-mapping-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-event-source-mapping-request
                    'make-update-event-source-mapping-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-source-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-source-mapping-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "FilterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-batching-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumBatchingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-config))
      (common-lisp:list
       (common-lisp:cons "DestinationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-record-age-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumRecordAgeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bisect-batch-on-function-error))
      (common-lisp:list
       (common-lisp:cons "BisectBatchOnFunctionError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-retry-attempts))
      (common-lisp:list
       (common-lisp:cons "MaximumRetryAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelization-factor))
      (common-lisp:list
       (common-lisp:cons "ParallelizationFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-access-configurations))
      (common-lisp:list
       (common-lisp:cons "SourceAccessConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tumbling-window-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TumblingWindowInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'function-response-types))
      (common-lisp:list
       (common-lisp:cons "FunctionResponseTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-config))
      (common-lisp:list
       (common-lisp:cons "ScalingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-dbevent-source-config))
      (common-lisp:list
       (common-lisp:cons "DocumentDBEventSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-source-mapping-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-function-code-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-update-function-code-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (zip-file :initarg :zip-file :initform common-lisp:nil
                         :type (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-update-function-code-request-zip-file
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3bucket :initarg :s3bucket :initform common-lisp:nil
                         :type (common-lisp:or s3bucket common-lisp:null)
                         :accessor
                         struct-shape-update-function-code-request-s3bucket
                         :shape "S3Bucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3key :initarg :s3key :initform common-lisp:nil :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-update-function-code-request-s3key :shape
                         "S3Key" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3object-version :initarg :s3object-version :initform
                         common-lisp:nil :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor
                         struct-shape-update-function-code-request-s3object-version
                         :shape "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-uri :initarg :image-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-function-code-request-image-uri
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publish :initarg :publish :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-function-code-request-publish
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-function-code-request-dry-run
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-function-code-request-revision-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (architectures :initarg :architectures :initform
                         common-lisp:nil :type
                         (common-lisp:or architectures-list common-lisp:null)
                         :accessor
                         struct-shape-update-function-code-request-architectures
                         :shape "ArchitecturesList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-function-code-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-function-code-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-function-code-request
                    'make-update-function-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-function-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-function-code-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zip-file))
      (common-lisp:list
       (common-lisp:cons "ZipFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-version))
      (common-lisp:list
       (common-lisp:cons "S3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-uri))
      (common-lisp:list
       (common-lisp:cons "ImageUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish))
      (common-lisp:list
       (common-lisp:cons "Publish"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architectures))
      (common-lisp:list
       (common-lisp:cons "Architectures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-function-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-function-configuration-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-update-function-configuration-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-update-function-configuration-request-role
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (handler :initarg :handler :initform common-lisp:nil
                         :type (common-lisp:or handler common-lisp:null)
                         :accessor
                         struct-shape-update-function-configuration-request-handler
                         :shape "Handler" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-function-configuration-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor
                         struct-shape-update-function-configuration-request-timeout
                         :shape "Timeout" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (memory-size :initarg :memory-size :initform
                         common-lisp:nil :type
                         (common-lisp:or memory-size common-lisp:null)
                         :accessor
                         struct-shape-update-function-configuration-request-memory-size
                         :shape "MemorySize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-config :initarg :vpc-config :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-config common-lisp:null) :accessor
                         struct-shape-update-function-configuration-request-vpc-config
                         :shape "VpcConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment :initarg :environment :initform
                         common-lisp:nil :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         struct-shape-update-function-configuration-request-environment
                         :shape "Environment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime :initarg :runtime :initform common-lisp:nil
                         :type (common-lisp:or runtime common-lisp:null)
                         :accessor
                         struct-shape-update-function-configuration-request-runtime
                         :shape "Runtime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dead-letter-config :initarg :dead-letter-config
                         :initform common-lisp:nil :type
                         (common-lisp:or dead-letter-config common-lisp:null)
                         :accessor
                         struct-shape-update-function-configuration-request-dead-letter-config
                         :shape "DeadLetterConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kmskey-arn :initarg :kmskey-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kmskey-arn common-lisp:null) :accessor
                         struct-shape-update-function-configuration-request-kmskey-arn
                         :shape "KMSKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tracing-config :initarg :tracing-config :initform
                         common-lisp:nil :type
                         (common-lisp:or tracing-config common-lisp:null)
                         :accessor
                         struct-shape-update-function-configuration-request-tracing-config
                         :shape "TracingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-function-configuration-request-revision-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layers :initarg :layers :initform common-lisp:nil
                         :type (common-lisp:or layer-list common-lisp:null)
                         :accessor
                         struct-shape-update-function-configuration-request-layers
                         :shape "LayerList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-system-configs :initarg :file-system-configs
                         :initform common-lisp:nil :type
                         (common-lisp:or file-system-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-function-configuration-request-file-system-configs
                         :shape "FileSystemConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (image-config :initarg :image-config :initform
                         common-lisp:nil :type
                         (common-lisp:or image-config common-lisp:null)
                         :accessor
                         struct-shape-update-function-configuration-request-image-config
                         :shape "ImageConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ephemeral-storage :initarg :ephemeral-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or ephemeral-storage common-lisp:null)
                         :accessor
                         struct-shape-update-function-configuration-request-ephemeral-storage
                         :shape "EphemeralStorage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snap-start :initarg :snap-start :initform
                         common-lisp:nil :type
                         (common-lisp:or snap-start common-lisp:null) :accessor
                         struct-shape-update-function-configuration-request-snap-start
                         :shape "SnapStart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (logging-config :initarg :logging-config :initform
                         common-lisp:nil :type
                         (common-lisp:or logging-config common-lisp:null)
                         :accessor
                         struct-shape-update-function-configuration-request-logging-config
                         :shape "LoggingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-function-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-function-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-function-configuration-request
                    'make-update-function-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-function-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-function-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handler))
      (common-lisp:list
       (common-lisp:cons "Handler"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-size))
      (common-lisp:list
       (common-lisp:cons "MemorySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "Runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dead-letter-config))
      (common-lisp:list
       (common-lisp:cons "DeadLetterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-arn))
      (common-lisp:list
       (common-lisp:cons "KMSKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracing-config))
      (common-lisp:list
       (common-lisp:cons "TracingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layers))
      (common-lisp:list
       (common-lisp:cons "Layers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-configs))
      (common-lisp:list
       (common-lisp:cons "FileSystemConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-config))
      (common-lisp:list
       (common-lisp:cons "ImageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeral-storage))
      (common-lisp:list
       (common-lisp:cons "EphemeralStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snap-start))
      (common-lisp:list
       (common-lisp:cons "SnapStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-config))
      (common-lisp:list
       (common-lisp:cons "LoggingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-function-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-function-event-invoke-config-request
                       common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-update-function-event-invoke-config-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-update-function-event-invoke-config-request-qualifier
                         :shape "Qualifier" :location "querystring"
                         :location-name "Qualifier")
                        (maximum-retry-attempts :initarg
                         :maximum-retry-attempts :initform common-lisp:nil
                         :type
                         (common-lisp:or maximum-retry-attempts
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-function-event-invoke-config-request-maximum-retry-attempts
                         :shape "MaximumRetryAttempts" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-event-age-in-seconds :initarg
                         :maximum-event-age-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or maximum-event-age-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-function-event-invoke-config-request-maximum-event-age-in-seconds
                         :shape "MaximumEventAgeInSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination-config :initarg :destination-config
                         :initform common-lisp:nil :type
                         (common-lisp:or destination-config common-lisp:null)
                         :accessor
                         struct-shape-update-function-event-invoke-config-request-destination-config
                         :shape "DestinationConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-function-event-invoke-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-function-event-invoke-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-function-event-invoke-config-request
                    'make-update-function-event-invoke-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-function-event-invoke-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-function-event-invoke-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-retry-attempts))
      (common-lisp:list
       (common-lisp:cons "MaximumRetryAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-event-age-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumEventAgeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-config))
      (common-lisp:list
       (common-lisp:cons "DestinationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-function-event-invoke-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-function-url-config-request common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor
                         struct-shape-update-function-url-config-request-function-name
                         :shape "FunctionName" :location "uri" :location-name
                         "FunctionName")
                        (qualifier :initarg :qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or function-url-qualifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-function-url-config-request-qualifier
                         :shape "FunctionUrlQualifier" :location "querystring"
                         :location-name "Qualifier")
                        (auth-type :initarg :auth-type :initform
                         common-lisp:nil :type
                         (common-lisp:or function-url-auth-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-function-url-config-request-auth-type
                         :shape "FunctionUrlAuthType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cors :initarg :cors :initform common-lisp:nil :type
                         (common-lisp:or cors common-lisp:null) :accessor
                         struct-shape-update-function-url-config-request-cors
                         :shape "Cors" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (invoke-mode :initarg :invoke-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or invoke-mode common-lisp:null)
                         :accessor
                         struct-shape-update-function-url-config-request-invoke-mode
                         :shape "InvokeMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-function-url-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-function-url-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-function-url-config-request
                    'make-update-function-url-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-function-url-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-function-url-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-type))
      (common-lisp:list
       (common-lisp:cons "AuthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cors))
      (common-lisp:list
       (common-lisp:cons "Cors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invoke-mode))
      (common-lisp:list
       (common-lisp:cons "InvokeMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-function-url-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-function-url-config-response common-lisp:nil
                       ((function-url :initarg :function-url :initform
                         (common-lisp:error ":function-url is required") :type
                         (common-lisp:or function-url common-lisp:null)
                         :accessor
                         struct-shape-update-function-url-config-response-function-url
                         :shape "FunctionUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-arn :initarg :function-arn :initform
                         (common-lisp:error ":function-arn is required") :type
                         (common-lisp:or function-arn common-lisp:null)
                         :accessor
                         struct-shape-update-function-url-config-response-function-arn
                         :shape "FunctionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-type :initarg :auth-type :initform
                         (common-lisp:error ":auth-type is required") :type
                         (common-lisp:or function-url-auth-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-function-url-config-response-auth-type
                         :shape "FunctionUrlAuthType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cors :initarg :cors :initform common-lisp:nil :type
                         (common-lisp:or cors common-lisp:null) :accessor
                         struct-shape-update-function-url-config-response-cors
                         :shape "Cors" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-function-url-config-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform
                         (common-lisp:error ":last-modified-time is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-function-url-config-response-last-modified-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (invoke-mode :initarg :invoke-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or invoke-mode common-lisp:null)
                         :accessor
                         struct-shape-update-function-url-config-response-invoke-mode
                         :shape "InvokeMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-function-url-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-function-url-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-function-url-config-response
                    'make-update-function-url-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-function-url-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-function-url-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-url))
      (common-lisp:list
       (common-lisp:cons "FunctionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-type))
      (common-lisp:list
       (common-lisp:cons "AuthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cors))
      (common-lisp:list
       (common-lisp:cons "Cors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invoke-mode))
      (common-lisp:list
       (common-lisp:cons "InvokeMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-function-url-config-response))
   common-lisp:nil))
(common-lisp:deftype update-runtime-on () 'common-lisp:string)
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-config common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         struct-shape-vpc-config-subnet-ids :shape "SubnetIds"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor struct-shape-vpc-config-security-group-ids
                         :shape "SecurityGroupIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ipv6allowed-for-dual-stack :initarg
                         :ipv6allowed-for-dual-stack :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-vpc-config-ipv6allowed-for-dual-stack
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vpc-config 'make-vpc-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ipv6allowed-for-dual-stack))
      (common-lisp:list
       (common-lisp:cons "Ipv6AllowedForDualStack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-config-response common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         struct-shape-vpc-config-response-subnet-ids :shape
                         "SubnetIds" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor
                         struct-shape-vpc-config-response-security-group-ids
                         :shape "SecurityGroupIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or vpc-id common-lisp:null)
                         :accessor struct-shape-vpc-config-response-vpc-id
                         :shape "VpcId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ipv6allowed-for-dual-stack :initarg
                         :ipv6allowed-for-dual-stack :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-vpc-config-response-ipv6allowed-for-dual-stack
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-config-response 'make-vpc-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ipv6allowed-for-dual-stack))
      (common-lisp:list
       (common-lisp:cons "Ipv6AllowedForDualStack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-config-response))
   common-lisp:nil))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:deftype weight () 'common-lisp:double-float)
(common-lisp:deftype working-directory () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-layer-version-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key layer-name version-number statement-id
                     action principal organization-id revision-id)
   (common-lisp:declare
    (common-lisp:ignorable layer-name version-number statement-id action
     principal organization-id revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-layer-version-permission-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2018-10-31/layers/~A/versions/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'layer-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-number))))
                                                        "AddLayerVersionPermission"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-layer-version-permission))
(common-lisp:progn
 (common-lisp:defun add-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name statement-id action
                     principal source-arn source-account event-source-token
                     qualifier revision-id principal-org-id
                     function-url-auth-type)
   (common-lisp:declare
    (common-lisp:ignorable function-name statement-id action principal
     source-arn source-account event-source-token qualifier revision-id
     principal-org-id function-url-auth-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-permission-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "AddPermission"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-permission))
(common-lisp:progn
 (common-lisp:defun create-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name name function-version
                     description routing-config)
   (common-lisp:declare
    (common-lisp:ignorable function-name name function-version description
     routing-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/aliases"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "CreateAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-alias))
(common-lisp:progn
 (common-lisp:defun create-code-signing-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description allowed-publishers
                     code-signing-policies)
   (common-lisp:declare
    (common-lisp:ignorable description allowed-publishers
     code-signing-policies))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-code-signing-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2020-04-22/code-signing-configs/"
                                                        "CreateCodeSigningConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-code-signing-config))
(common-lisp:progn
 (common-lisp:defun create-event-source-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-source-arn function-name enabled
                     batch-size filter-criteria
                     maximum-batching-window-in-seconds parallelization-factor
                     starting-position starting-position-timestamp
                     destination-config maximum-record-age-in-seconds
                     bisect-batch-on-function-error maximum-retry-attempts
                     tumbling-window-in-seconds topics queues
                     source-access-configurations self-managed-event-source
                     function-response-types
                     amazon-managed-kafka-event-source-config
                     self-managed-kafka-event-source-config scaling-config
                     document-dbevent-source-config)
   (common-lisp:declare
    (common-lisp:ignorable event-source-arn function-name enabled batch-size
     filter-criteria maximum-batching-window-in-seconds parallelization-factor
     starting-position starting-position-timestamp destination-config
     maximum-record-age-in-seconds bisect-batch-on-function-error
     maximum-retry-attempts tumbling-window-in-seconds topics queues
     source-access-configurations self-managed-event-source
     function-response-types amazon-managed-kafka-event-source-config
     self-managed-kafka-event-source-config scaling-config
     document-dbevent-source-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-event-source-mapping-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-03-31/event-source-mappings/"
                                                        "CreateEventSourceMapping"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-event-source-mapping))
(common-lisp:progn
 (common-lisp:defun create-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name runtime role handler code
                     description timeout memory-size publish vpc-config
                     package-type dead-letter-config environment kmskey-arn
                     tracing-config tags layers file-system-configs
                     image-config code-signing-config-arn architectures
                     ephemeral-storage snap-start logging-config)
   (common-lisp:declare
    (common-lisp:ignorable function-name runtime role handler code description
     timeout memory-size publish vpc-config package-type dead-letter-config
     environment kmskey-arn tracing-config tags layers file-system-configs
     image-config code-signing-config-arn architectures ephemeral-storage
     snap-start logging-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-03-31/functions"
                                                        "CreateFunction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-function))
(common-lisp:progn
 (common-lisp:defun create-function-url-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier auth-type cors
                     invoke-mode)
   (common-lisp:declare
    (common-lisp:ignorable function-name qualifier auth-type cors invoke-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-function-url-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-10-31/functions/~A/url"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "CreateFunctionUrlConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-function-url-config))
(common-lisp:progn
 (common-lisp:defun delete-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name name)
   (common-lisp:declare (common-lisp:ignorable function-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-alias))
(common-lisp:progn
 (common-lisp:defun delete-code-signing-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key code-signing-config-arn)
   (common-lisp:declare (common-lisp:ignorable code-signing-config-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-code-signing-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-04-22/code-signing-configs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'code-signing-config-arn))))
                                                        "DeleteCodeSigningConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-code-signing-config))
(common-lisp:progn
 (common-lisp:defun delete-event-source-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key uuid)
   (common-lisp:declare (common-lisp:ignorable uuid))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-event-source-mapping-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/event-source-mappings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'uuid))))
                                                        "DeleteEventSourceMapping"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-event-source-mapping))
(common-lisp:progn
 (common-lisp:defun delete-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier)
   (common-lisp:declare (common-lisp:ignorable function-name qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "DeleteFunction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-function))
(common-lisp:progn
 (common-lisp:defun delete-function-code-signing-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name)
   (common-lisp:declare (common-lisp:ignorable function-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-function-code-signing-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-06-30/functions/~A/code-signing-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "DeleteFunctionCodeSigningConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-function-code-signing-config))
(common-lisp:progn
 (common-lisp:defun delete-function-concurrency
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name)
   (common-lisp:declare (common-lisp:ignorable function-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-function-concurrency-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-10-31/functions/~A/concurrency"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "DeleteFunctionConcurrency"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-function-concurrency))
(common-lisp:progn
 (common-lisp:defun delete-function-event-invoke-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier)
   (common-lisp:declare (common-lisp:ignorable function-name qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-function-event-invoke-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2019-09-25/functions/~A/event-invoke-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "DeleteFunctionEventInvokeConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-function-event-invoke-config))
(common-lisp:progn
 (common-lisp:defun delete-function-url-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier)
   (common-lisp:declare (common-lisp:ignorable function-name qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-function-url-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-10-31/functions/~A/url"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "DeleteFunctionUrlConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-function-url-config))
(common-lisp:progn
 (common-lisp:defun delete-layer-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key layer-name version-number)
   (common-lisp:declare (common-lisp:ignorable layer-name version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-layer-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2018-10-31/layers/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'layer-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-number))))
                                                        "DeleteLayerVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-layer-version))
(common-lisp:progn
 (common-lisp:defun delete-provisioned-concurrency-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier)
   (common-lisp:declare (common-lisp:ignorable function-name qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-provisioned-concurrency-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2019-09-30/functions/~A/provisioned-concurrency"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "DeleteProvisionedConcurrencyConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-provisioned-concurrency-config))
(common-lisp:progn
 (common-lisp:defun get-account-settings ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lambda-request :method "GET" :path
                                "/2016-08-19/account-settings/" :operation
                                "GetAccountSettings"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-account-settings))
(common-lisp:progn
 (common-lisp:defun get-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name name)
   (common-lisp:declare (common-lisp:ignorable function-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-alias))
(common-lisp:progn
 (common-lisp:defun get-code-signing-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key code-signing-config-arn)
   (common-lisp:declare (common-lisp:ignorable code-signing-config-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-code-signing-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-04-22/code-signing-configs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'code-signing-config-arn))))
                                                        "GetCodeSigningConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-code-signing-config))
(common-lisp:progn
 (common-lisp:defun get-event-source-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key uuid)
   (common-lisp:declare (common-lisp:ignorable uuid))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-event-source-mapping-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/event-source-mappings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'uuid))))
                                                        "GetEventSourceMapping"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-event-source-mapping))
(common-lisp:progn
 (common-lisp:defun get-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier)
   (common-lisp:declare (common-lisp:ignorable function-name qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "GetFunction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-function))
(common-lisp:progn
 (common-lisp:defun get-function-code-signing-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name)
   (common-lisp:declare (common-lisp:ignorable function-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-function-code-signing-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-06-30/functions/~A/code-signing-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "GetFunctionCodeSigningConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-function-code-signing-config))
(common-lisp:progn
 (common-lisp:defun get-function-concurrency
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name)
   (common-lisp:declare (common-lisp:ignorable function-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-function-concurrency-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2019-09-30/functions/~A/concurrency"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "GetFunctionConcurrency"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-function-concurrency))
(common-lisp:progn
 (common-lisp:defun get-function-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier)
   (common-lisp:declare (common-lisp:ignorable function-name qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-function-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "GetFunctionConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-function-configuration))
(common-lisp:progn
 (common-lisp:defun get-function-event-invoke-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier)
   (common-lisp:declare (common-lisp:ignorable function-name qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-function-event-invoke-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2019-09-25/functions/~A/event-invoke-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "GetFunctionEventInvokeConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-function-event-invoke-config))
(common-lisp:progn
 (common-lisp:defun get-function-url-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier)
   (common-lisp:declare (common-lisp:ignorable function-name qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-function-url-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-10-31/functions/~A/url"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "GetFunctionUrlConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-function-url-config))
(common-lisp:progn
 (common-lisp:defun get-layer-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key layer-name version-number)
   (common-lisp:declare (common-lisp:ignorable layer-name version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-layer-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2018-10-31/layers/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'layer-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-number))))
                                                        "GetLayerVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-layer-version))
(common-lisp:progn
 (common-lisp:defun get-layer-version-by-arn
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-layer-version-by-arn-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2018-10-31/layers?find=LayerVersion"
                                                        "GetLayerVersionByArn"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-layer-version-by-arn))
(common-lisp:progn
 (common-lisp:defun get-layer-version-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key layer-name version-number)
   (common-lisp:declare (common-lisp:ignorable layer-name version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-layer-version-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2018-10-31/layers/~A/versions/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'layer-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-number))))
                                                        "GetLayerVersionPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-layer-version-policy))
(common-lisp:progn
 (common-lisp:defun get-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier)
   (common-lisp:declare (common-lisp:ignorable function-name qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "GetPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-policy))
(common-lisp:progn
 (common-lisp:defun get-provisioned-concurrency-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier)
   (common-lisp:declare (common-lisp:ignorable function-name qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-provisioned-concurrency-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2019-09-30/functions/~A/provisioned-concurrency"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "GetProvisionedConcurrencyConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-provisioned-concurrency-config))
(common-lisp:progn
 (common-lisp:defun get-runtime-management-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier)
   (common-lisp:declare (common-lisp:ignorable function-name qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-runtime-management-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-07-20/functions/~A/runtime-management-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "GetRuntimeManagementConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-runtime-management-config))
(common-lisp:progn
 (common-lisp:defun invoke
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name invocation-type log-type
                     client-context payload qualifier)
   (common-lisp:declare
    (common-lisp:ignorable function-name invocation-type log-type
     client-context payload qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-invocation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/invocations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "Invoke")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'invoke))
(common-lisp:progn
 (common-lisp:defun invoke-async
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name invoke-args)
   (common-lisp:declare (common-lisp:ignorable function-name invoke-args))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-invoke-async-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2014-11-13/functions/~A/invoke-async/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "InvokeAsync"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'invoke-async))
(common-lisp:progn
 (common-lisp:defun invoke-with-response-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name invocation-type log-type
                     client-context qualifier payload)
   (common-lisp:declare
    (common-lisp:ignorable function-name invocation-type log-type
     client-context qualifier payload))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-invoke-with-response-stream-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-11-15/functions/~A/response-streaming-invocations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "InvokeWithResponseStream"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'invoke-with-response-stream))
(common-lisp:progn
 (common-lisp:defun list-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name function-version marker
                     max-items)
   (common-lisp:declare
    (common-lisp:ignorable function-name function-version marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/aliases"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "ListAliases"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-aliases))
(common-lisp:progn
 (common-lisp:defun list-code-signing-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-code-signing-configs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2020-04-22/code-signing-configs/"
                                                        "ListCodeSigningConfigs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-code-signing-configs))
(common-lisp:progn
 (common-lisp:defun list-event-source-mappings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-source-arn function-name marker
                     max-items)
   (common-lisp:declare
    (common-lisp:ignorable event-source-arn function-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-event-source-mappings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2015-03-31/event-source-mappings/"
                                                        "ListEventSourceMappings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-event-source-mappings))
(common-lisp:progn
 (common-lisp:defun list-function-event-invoke-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable function-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-function-event-invoke-configs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2019-09-25/functions/~A/event-invoke-config/list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "ListFunctionEventInvokeConfigs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-function-event-invoke-configs))
(common-lisp:progn
 (common-lisp:defun list-function-url-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable function-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-function-url-configs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-10-31/functions/~A/urls"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "ListFunctionUrlConfigs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-function-url-configs))
(common-lisp:progn
 (common-lisp:defun list-functions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key master-region function-version marker
                     max-items)
   (common-lisp:declare
    (common-lisp:ignorable master-region function-version marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-functions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2015-03-31/functions/"
                                                        "ListFunctions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-functions))
(common-lisp:progn
 (common-lisp:defun list-functions-by-code-signing-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key code-signing-config-arn marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable code-signing-config-arn marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-functions-by-code-signing-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-04-22/code-signing-configs/~A/functions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'code-signing-config-arn))))
                                                        "ListFunctionsByCodeSigningConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-functions-by-code-signing-config))
(common-lisp:progn
 (common-lisp:defun list-layer-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key compatible-runtime layer-name marker
                     max-items compatible-architecture)
   (common-lisp:declare
    (common-lisp:ignorable compatible-runtime layer-name marker max-items
     compatible-architecture))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-layer-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2018-10-31/layers/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'layer-name))))
                                                        "ListLayerVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-layer-versions))
(common-lisp:progn
 (common-lisp:defun list-layers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key compatible-runtime marker max-items
                     compatible-architecture)
   (common-lisp:declare
    (common-lisp:ignorable compatible-runtime marker max-items
     compatible-architecture))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-layers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2018-10-31/layers"
                                                        "ListLayers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-layers))
(common-lisp:progn
 (common-lisp:defun list-provisioned-concurrency-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable function-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-provisioned-concurrency-configs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2019-09-30/functions/~A/provisioned-concurrency?List=ALL"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "ListProvisionedConcurrencyConfigs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-provisioned-concurrency-configs))
(common-lisp:progn
 (common-lisp:defun list-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource)
   (common-lisp:declare (common-lisp:ignorable resource))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-03-31/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "ListTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags))
(common-lisp:progn
 (common-lisp:defun list-versions-by-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable function-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-versions-by-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "ListVersionsByFunction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-versions-by-function))
(common-lisp:progn
 (common-lisp:defun publish-layer-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key layer-name description content
                     compatible-runtimes license-info compatible-architectures)
   (common-lisp:declare
    (common-lisp:ignorable layer-name description content compatible-runtimes
     license-info compatible-architectures))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-publish-layer-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2018-10-31/layers/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'layer-name))))
                                                        "PublishLayerVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'publish-layer-version))
(common-lisp:progn
 (common-lisp:defun publish-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name code-sha256 description
                     revision-id)
   (common-lisp:declare
    (common-lisp:ignorable function-name code-sha256 description revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-publish-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "PublishVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'publish-version))
(common-lisp:progn
 (common-lisp:defun put-function-code-signing-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key code-signing-config-arn function-name)
   (common-lisp:declare
    (common-lisp:ignorable code-signing-config-arn function-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-function-code-signing-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-06-30/functions/~A/code-signing-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "PutFunctionCodeSigningConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-function-code-signing-config))
(common-lisp:progn
 (common-lisp:defun put-function-concurrency
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name
                     reserved-concurrent-executions)
   (common-lisp:declare
    (common-lisp:ignorable function-name reserved-concurrent-executions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-function-concurrency-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-10-31/functions/~A/concurrency"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "PutFunctionConcurrency"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-function-concurrency))
(common-lisp:progn
 (common-lisp:defun put-function-event-invoke-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier
                     maximum-retry-attempts maximum-event-age-in-seconds
                     destination-config)
   (common-lisp:declare
    (common-lisp:ignorable function-name qualifier maximum-retry-attempts
     maximum-event-age-in-seconds destination-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-function-event-invoke-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2019-09-25/functions/~A/event-invoke-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "PutFunctionEventInvokeConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-function-event-invoke-config))
(common-lisp:progn
 (common-lisp:defun put-provisioned-concurrency-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier
                     provisioned-concurrent-executions)
   (common-lisp:declare
    (common-lisp:ignorable function-name qualifier
     provisioned-concurrent-executions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-provisioned-concurrency-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2019-09-30/functions/~A/provisioned-concurrency"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "PutProvisionedConcurrencyConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-provisioned-concurrency-config))
(common-lisp:progn
 (common-lisp:defun put-runtime-management-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier update-runtime-on
                     runtime-version-arn)
   (common-lisp:declare
    (common-lisp:ignorable function-name qualifier update-runtime-on
     runtime-version-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-runtime-management-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-07-20/functions/~A/runtime-management-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "PutRuntimeManagementConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-runtime-management-config))
(common-lisp:progn
 (common-lisp:defun remove-layer-version-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key layer-name version-number statement-id
                     revision-id)
   (common-lisp:declare
    (common-lisp:ignorable layer-name version-number statement-id revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-layer-version-permission-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2018-10-31/layers/~A/versions/~A/policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'layer-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-number))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'statement-id))))
                                                        "RemoveLayerVersionPermission"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-layer-version-permission))
(common-lisp:progn
 (common-lisp:defun remove-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name statement-id qualifier
                     revision-id)
   (common-lisp:declare
    (common-lisp:ignorable function-name statement-id qualifier revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-permission-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'statement-id))))
                                                        "RemovePermission"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-permission))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource tags)
   (common-lisp:declare (common-lisp:ignorable resource tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-03-31/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-03-31/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name name function-version
                     description routing-config revision-id)
   (common-lisp:declare
    (common-lisp:ignorable function-name name function-version description
     routing-config revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-alias))
(common-lisp:progn
 (common-lisp:defun update-code-signing-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key code-signing-config-arn description
                     allowed-publishers code-signing-policies)
   (common-lisp:declare
    (common-lisp:ignorable code-signing-config-arn description
     allowed-publishers code-signing-policies))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-code-signing-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-04-22/code-signing-configs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'code-signing-config-arn))))
                                                        "UpdateCodeSigningConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-code-signing-config))
(common-lisp:progn
 (common-lisp:defun update-event-source-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key uuid function-name enabled batch-size
                     filter-criteria maximum-batching-window-in-seconds
                     destination-config maximum-record-age-in-seconds
                     bisect-batch-on-function-error maximum-retry-attempts
                     parallelization-factor source-access-configurations
                     tumbling-window-in-seconds function-response-types
                     scaling-config document-dbevent-source-config)
   (common-lisp:declare
    (common-lisp:ignorable uuid function-name enabled batch-size
     filter-criteria maximum-batching-window-in-seconds destination-config
     maximum-record-age-in-seconds bisect-batch-on-function-error
     maximum-retry-attempts parallelization-factor source-access-configurations
     tumbling-window-in-seconds function-response-types scaling-config
     document-dbevent-source-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-event-source-mapping-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/event-source-mappings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'uuid))))
                                                        "UpdateEventSourceMapping"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-event-source-mapping))
(common-lisp:progn
 (common-lisp:defun update-function-code
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name zip-file s3bucket s3key
                     s3object-version image-uri publish dry-run revision-id
                     architectures)
   (common-lisp:declare
    (common-lisp:ignorable function-name zip-file s3bucket s3key
     s3object-version image-uri publish dry-run revision-id architectures))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-function-code-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/code"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "UpdateFunctionCode"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-function-code))
(common-lisp:progn
 (common-lisp:defun update-function-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name role handler description
                     timeout memory-size vpc-config environment runtime
                     dead-letter-config kmskey-arn tracing-config revision-id
                     layers file-system-configs image-config ephemeral-storage
                     snap-start logging-config)
   (common-lisp:declare
    (common-lisp:ignorable function-name role handler description timeout
     memory-size vpc-config environment runtime dead-letter-config kmskey-arn
     tracing-config revision-id layers file-system-configs image-config
     ephemeral-storage snap-start logging-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-function-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "UpdateFunctionConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-function-configuration))
(common-lisp:progn
 (common-lisp:defun update-function-event-invoke-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier
                     maximum-retry-attempts maximum-event-age-in-seconds
                     destination-config)
   (common-lisp:declare
    (common-lisp:ignorable function-name qualifier maximum-retry-attempts
     maximum-event-age-in-seconds destination-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-function-event-invoke-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2019-09-25/functions/~A/event-invoke-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "UpdateFunctionEventInvokeConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-function-event-invoke-config))
(common-lisp:progn
 (common-lisp:defun update-function-url-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier auth-type cors
                     invoke-mode)
   (common-lisp:declare
    (common-lisp:ignorable function-name qualifier auth-type cors invoke-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-function-url-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-10-31/functions/~A/url"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "UpdateFunctionUrlConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-function-url-config))
