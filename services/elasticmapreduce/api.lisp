;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/elasticmapreduce/api (:use)
                             (:nicknames #:aws/elasticmapreduce)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/elasticmapreduce/api)
(common-lisp:progn
 (common-lisp:define-condition elasticmapreduce-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'elasticmapreduce-error))
(common-lisp:progn
 (common-lisp:defclass elasticmapreduce-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "elasticmapreduce"
                        :api-version "2009-03-31" :host-prefix
                        "elasticmapreduce" :signing-name common-lisp:nil
                        :global-host common-lisp:nil :target-prefix
                        "ElasticMapReduce" :json-version "1.1"))
 (common-lisp:export 'elasticmapreduce-request))
(common-lisp:defvar *error-map*
  '(("InternalServerError" . internal-server-error)
    ("InternalServerException" . internal-server-exception)
    ("InvalidRequestException" . invalid-request-exception)))
(common-lisp:deftype action-on-failure () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass add-instance-fleet-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-instance-fleet-input-cluster-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-fleet :initarg :instance-fleet :initform
                         (common-lisp:error ":instance-fleet is required")
                         :type
                         (common-lisp:or instance-fleet-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-instance-fleet-input-instance-fleet
                         :shape "InstanceFleetConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-instance-fleet-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-instance-fleet-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-instance-fleet-input 'make-add-instance-fleet-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-instance-fleet-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-instance-fleet-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-fleet))
      (common-lisp:list
       (common-lisp:cons "InstanceFleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-instance-fleet-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-instance-fleet-output common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-instance-fleet-output-cluster-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-fleet-id :initarg :instance-fleet-id
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-fleet-id common-lisp:null)
                         :accessor
                         struct-shape-add-instance-fleet-output-instance-fleet-id
                         :shape "InstanceFleetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-add-instance-fleet-output-cluster-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-instance-fleet-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-instance-fleet-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-instance-fleet-output
                    'make-add-instance-fleet-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-instance-fleet-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-instance-fleet-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-fleet-id))
      (common-lisp:list
       (common-lisp:cons "InstanceFleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-instance-fleet-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-instance-groups-input common-lisp:nil
                       ((instance-groups :initarg :instance-groups :initform
                         (common-lisp:error ":instance-groups is required")
                         :type
                         (common-lisp:or instance-group-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-instance-groups-input-instance-groups
                         :shape "InstanceGroupConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-flow-id :initarg :job-flow-id :initform
                         (common-lisp:error ":job-flow-id is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-instance-groups-input-job-flow-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-instance-groups-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-instance-groups-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-instance-groups-input
                    'make-add-instance-groups-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-instance-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-instance-groups-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-groups))
      (common-lisp:list
       (common-lisp:cons "InstanceGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-flow-id))
      (common-lisp:list
       (common-lisp:cons "JobFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-instance-groups-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-instance-groups-output common-lisp:nil
                       ((job-flow-id :initarg :job-flow-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-instance-groups-output-job-flow-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-group-ids :initarg :instance-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-group-ids-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-instance-groups-output-instance-group-ids
                         :shape "InstanceGroupIdsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-add-instance-groups-output-cluster-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-instance-groups-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-instance-groups-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-instance-groups-output
                    'make-add-instance-groups-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-instance-groups-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-instance-groups-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-flow-id))
      (common-lisp:list
       (common-lisp:cons "JobFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-group-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-instance-groups-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-job-flow-steps-input common-lisp:nil
                       ((job-flow-id :initarg :job-flow-id :initform
                         (common-lisp:error ":job-flow-id is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-job-flow-steps-input-job-flow-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (steps :initarg :steps :initform
                         (common-lisp:error ":steps is required") :type
                         (common-lisp:or step-config-list common-lisp:null)
                         :accessor struct-shape-add-job-flow-steps-input-steps
                         :shape "StepConfigList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-add-job-flow-steps-input-execution-role-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-job-flow-steps-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-job-flow-steps-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-job-flow-steps-input 'make-add-job-flow-steps-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-job-flow-steps-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-job-flow-steps-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-flow-id))
      (common-lisp:list
       (common-lisp:cons "JobFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "Steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-job-flow-steps-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-job-flow-steps-output common-lisp:nil
                       ((step-ids :initarg :step-ids :initform common-lisp:nil
                         :type (common-lisp:or step-ids-list common-lisp:null)
                         :accessor
                         struct-shape-add-job-flow-steps-output-step-ids :shape
                         "StepIdsList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-job-flow-steps-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-job-flow-steps-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-job-flow-steps-output
                    'make-add-job-flow-steps-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-job-flow-steps-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-job-flow-steps-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-ids))
      (common-lisp:list
       (common-lisp:cons "StepIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-job-flow-steps-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-input common-lisp:nil
                       ((resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-add-tags-input-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-add-tags-input-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-tags-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'add-tags-input 'make-add-tags-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-tags-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'add-tags-output 'make-add-tags-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-output))
   common-lisp:nil))
(common-lisp:deftype adjustment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass application common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-application-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-application-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (args :initarg :args :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-application-args :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (additional-info :initarg :additional-info :initform
                         common-lisp:nil :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         struct-shape-application-additional-info :shape
                         "StringMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-application
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'application
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'application 'make-application))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'args))
      (common-lisp:list
       (common-lisp:cons "Args"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "AdditionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-list ()
   '(trivial-types:proper-list application))
 (common-lisp:defun make-application-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application))
   aws-sdk/generator/shape::members))
(common-lisp:deftype arn-type () 'common-lisp:string)
(common-lisp:deftype auth-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass auto-scaling-policy common-lisp:nil
                       ((constraints :initarg :constraints :initform
                         (common-lisp:error ":constraints is required") :type
                         (common-lisp:or scaling-constraints common-lisp:null)
                         :accessor struct-shape-auto-scaling-policy-constraints
                         :shape "ScalingConstraints" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or scaling-rule-list common-lisp:null)
                         :accessor struct-shape-auto-scaling-policy-rules
                         :shape "ScalingRuleList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-scaling-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-policy 'make-auto-scaling-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-scaling-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-scaling-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "Constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-scaling-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-policy-description common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-scaling-policy-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-policy-description-status
                         :shape "AutoScalingPolicyStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (constraints :initarg :constraints :initform
                         common-lisp:nil :type
                         (common-lisp:or scaling-constraints common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-policy-description-constraints
                         :shape "ScalingConstraints" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or scaling-rule-list common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-policy-description-rules
                         :shape "ScalingRuleList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-scaling-policy-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'auto-scaling-policy-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-policy-description
                    'make-auto-scaling-policy-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-policy-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-policy-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "Constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-policy-description))
   common-lisp:nil))
(common-lisp:deftype auto-scaling-policy-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass auto-scaling-policy-state-change-reason common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or
                          auto-scaling-policy-state-change-reason-code
                          common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-policy-state-change-reason-code
                         :shape "AutoScalingPolicyStateChangeReasonCode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-policy-state-change-reason-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-scaling-policy-state-change-reason
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'auto-scaling-policy-state-change-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-policy-state-change-reason
                    'make-auto-scaling-policy-state-change-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-policy-state-change-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-policy-state-change-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-policy-state-change-reason))
   common-lisp:nil))
(common-lisp:deftype auto-scaling-policy-state-change-reason-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass auto-scaling-policy-status common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or auto-scaling-policy-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-policy-status-state :shape
                         "AutoScalingPolicyState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-change-reason :initarg :state-change-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          auto-scaling-policy-state-change-reason
                          common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-policy-status-state-change-reason
                         :shape "AutoScalingPolicyStateChangeReason" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-scaling-policy-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-policy-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-policy-status
                    'make-auto-scaling-policy-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-policy-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-policy-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-reason))
      (common-lisp:list
       (common-lisp:cons "StateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-policy-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-termination-policy common-lisp:nil
                       ((idle-timeout :initarg :idle-timeout :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-auto-termination-policy-idle-timeout
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-termination-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-termination-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-termination-policy 'make-auto-termination-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-termination-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-termination-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle-timeout))
      (common-lisp:list
       (common-lisp:cons "IdleTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-termination-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass block-public-access-configuration common-lisp:nil
                       ((block-public-security-group-rules :initarg
                         :block-public-security-group-rules :initform
                         (common-lisp:error
                          ":block-public-security-group-rules is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-block-public-access-configuration-block-public-security-group-rules
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permitted-public-security-group-rule-ranges :initarg
                         :permitted-public-security-group-rule-ranges :initform
                         common-lisp:nil :type
                         (common-lisp:or port-ranges common-lisp:null)
                         :accessor
                         struct-shape-block-public-access-configuration-permitted-public-security-group-rule-ranges
                         :shape "PortRanges" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-block-public-access-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'block-public-access-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'block-public-access-configuration
                    'make-block-public-access-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          block-public-access-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          block-public-access-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-public-security-group-rules))
      (common-lisp:list
       (common-lisp:cons "BlockPublicSecurityGroupRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permitted-public-security-group-rule-ranges))
      (common-lisp:list
       (common-lisp:cons "PermittedPublicSecurityGroupRuleRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          block-public-access-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass block-public-access-configuration-metadata
                       common-lisp:nil
                       ((creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creation-date-time is required")
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-block-public-access-configuration-metadata-creation-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by-arn :initarg :created-by-arn :initform
                         (common-lisp:error ":created-by-arn is required")
                         :type (common-lisp:or arn-type common-lisp:null)
                         :accessor
                         struct-shape-block-public-access-configuration-metadata-created-by-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-block-public-access-configuration-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'block-public-access-configuration-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'block-public-access-configuration-metadata
                    'make-block-public-access-configuration-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          block-public-access-configuration-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          block-public-access-configuration-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-arn))
      (common-lisp:list
       (common-lisp:cons "CreatedByArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          block-public-access-configuration-metadata))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-object () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass bootstrap-action-config common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-bootstrap-action-config-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (script-bootstrap-action :initarg
                         :script-bootstrap-action :initform
                         (common-lisp:error
                          ":script-bootstrap-action is required")
                         :type
                         (common-lisp:or script-bootstrap-action-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-bootstrap-action-config-script-bootstrap-action
                         :shape "ScriptBootstrapActionConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bootstrap-action-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bootstrap-action-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bootstrap-action-config 'make-bootstrap-action-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bootstrap-action-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bootstrap-action-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'script-bootstrap-action))
      (common-lisp:list
       (common-lisp:cons "ScriptBootstrapAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bootstrap-action-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bootstrap-action-config-list ()
   '(trivial-types:proper-list bootstrap-action-config))
 (common-lisp:defun make-bootstrap-action-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bootstrap-action-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass bootstrap-action-detail common-lisp:nil
                       ((bootstrap-action-config :initarg
                         :bootstrap-action-config :initform common-lisp:nil
                         :type
                         (common-lisp:or bootstrap-action-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-bootstrap-action-detail-bootstrap-action-config
                         :shape "BootstrapActionConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bootstrap-action-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bootstrap-action-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bootstrap-action-detail 'make-bootstrap-action-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bootstrap-action-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bootstrap-action-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-action-config))
      (common-lisp:list
       (common-lisp:cons "BootstrapActionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bootstrap-action-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bootstrap-action-detail-list ()
   '(trivial-types:proper-list bootstrap-action-detail))
 (common-lisp:defun make-bootstrap-action-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bootstrap-action-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cancel-steps-info common-lisp:nil
                       ((step-id :initarg :step-id :initform common-lisp:nil
                         :type (common-lisp:or step-id common-lisp:null)
                         :accessor struct-shape-cancel-steps-info-step-id
                         :shape "StepId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or cancel-steps-request-status
                                         common-lisp:null)
                         :accessor struct-shape-cancel-steps-info-status :shape
                         "CancelStepsRequestStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cancel-steps-info-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-steps-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-steps-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-steps-info 'make-cancel-steps-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-steps-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-steps-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-id))
      (common-lisp:list
       (common-lisp:cons "StepId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-steps-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cancel-steps-info-list ()
   '(trivial-types:proper-list cancel-steps-info))
 (common-lisp:defun make-cancel-steps-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cancel-steps-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cancel-steps-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-cancel-steps-input-cluster-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (step-ids :initarg :step-ids :initform
                         (common-lisp:error ":step-ids is required") :type
                         (common-lisp:or step-ids-list common-lisp:null)
                         :accessor struct-shape-cancel-steps-input-step-ids
                         :shape "StepIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (step-cancellation-option :initarg
                         :step-cancellation-option :initform common-lisp:nil
                         :type
                         (common-lisp:or step-cancellation-option
                                         common-lisp:null)
                         :accessor
                         struct-shape-cancel-steps-input-step-cancellation-option
                         :shape "StepCancellationOption" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-steps-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-steps-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-steps-input 'make-cancel-steps-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-steps-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-steps-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-ids))
      (common-lisp:list
       (common-lisp:cons "StepIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'step-cancellation-option))
      (common-lisp:list
       (common-lisp:cons "StepCancellationOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-steps-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-steps-output common-lisp:nil
                       ((cancel-steps-info-list :initarg
                         :cancel-steps-info-list :initform common-lisp:nil
                         :type
                         (common-lisp:or cancel-steps-info-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cancel-steps-output-cancel-steps-info-list
                         :shape "CancelStepsInfoList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-steps-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-steps-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-steps-output 'make-cancel-steps-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-steps-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-steps-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cancel-steps-info-list))
      (common-lisp:list
       (common-lisp:cons "CancelStepsInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-steps-output))
   common-lisp:nil))
(common-lisp:deftype cancel-steps-request-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-watch-alarm-definition common-lisp:nil
                       ((comparison-operator :initarg :comparison-operator
                         :initform
                         (common-lisp:error ":comparison-operator is required")
                         :type
                         (common-lisp:or comparison-operator common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-alarm-definition-comparison-operator
                         :shape "ComparisonOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-periods :initarg :evaluation-periods
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-cloud-watch-alarm-definition-evaluation-periods
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metric-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cloud-watch-alarm-definition-metric-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (namespace :initarg :namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cloud-watch-alarm-definition-namespace
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (period :initarg :period :initform
                         (common-lisp:error ":period is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-cloud-watch-alarm-definition-period
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistic :initarg :statistic :initform
                         common-lisp:nil :type
                         (common-lisp:or statistic common-lisp:null) :accessor
                         struct-shape-cloud-watch-alarm-definition-statistic
                         :shape "Statistic" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (threshold :initarg :threshold :initform
                         (common-lisp:error ":threshold is required") :type
                         (common-lisp:or non-negative-double common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-alarm-definition-threshold
                         :shape "NonNegativeDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or unit common-lisp:null) :accessor
                         struct-shape-cloud-watch-alarm-definition-unit :shape
                         "Unit" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dimensions :initarg :dimensions :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-dimension-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-alarm-definition-dimensions
                         :shape "MetricDimensionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-watch-alarm-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-watch-alarm-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-alarm-definition
                    'make-cloud-watch-alarm-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-alarm-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-alarm-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "ComparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-periods))
      (common-lisp:list
       (common-lisp:cons "EvaluationPeriods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "Statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-alarm-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-cluster-id :shape "ClusterId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or cluster-status common-lisp:null)
                         :accessor struct-shape-cluster-status :shape
                         "ClusterStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2instance-attributes :initarg
                         :ec2instance-attributes :initform common-lisp:nil
                         :type
                         (common-lisp:or ec2instance-attributes
                                         common-lisp:null)
                         :accessor struct-shape-cluster-ec2instance-attributes
                         :shape "Ec2InstanceAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (instance-collection-type :initarg
                         :instance-collection-type :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-collection-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-instance-collection-type :shape
                         "InstanceCollectionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-uri :initarg :log-uri :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cluster-log-uri :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-encryption-kms-key-id :initarg
                         :log-encryption-kms-key-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-log-encryption-kms-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (requested-ami-version :initarg :requested-ami-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-requested-ami-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (running-ami-version :initarg :running-ami-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-running-ami-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (release-label :initarg :release-label :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-release-label :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-terminate :initarg :auto-terminate :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-cluster-auto-terminate :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (termination-protected :initarg :termination-protected
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-cluster-termination-protected :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unhealthy-node-replacement :initarg
                         :unhealthy-node-replacement :initform common-lisp:nil
                         :type (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-cluster-unhealthy-node-replacement :shape
                         "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (visible-to-all-users :initarg :visible-to-all-users
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-cluster-visible-to-all-users :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (applications :initarg :applications :initform
                         common-lisp:nil :type
                         (common-lisp:or application-list common-lisp:null)
                         :accessor struct-shape-cluster-applications :shape
                         "ApplicationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-cluster-tags :shape "TagList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-role :initarg :service-role :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-service-role :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (normalized-instance-hours :initarg
                         :normalized-instance-hours :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-cluster-normalized-instance-hours :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (master-public-dns-name :initarg
                         :master-public-dns-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cluster-master-public-dns-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configurations :initarg :configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-list common-lisp:null)
                         :accessor struct-shape-cluster-configurations :shape
                         "ConfigurationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type (common-lisp:or xml-string common-lisp:null)
                         :accessor struct-shape-cluster-security-configuration
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-scaling-role :initarg :auto-scaling-role
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-cluster-auto-scaling-role :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scale-down-behavior :initarg :scale-down-behavior
                         :initform common-lisp:nil :type
                         (common-lisp:or scale-down-behavior common-lisp:null)
                         :accessor struct-shape-cluster-scale-down-behavior
                         :shape "ScaleDownBehavior" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-ami-id :initarg :custom-ami-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-cluster-custom-ami-id :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-root-volume-size :initarg :ebs-root-volume-size
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-cluster-ebs-root-volume-size :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (repo-upgrade-on-boot :initarg :repo-upgrade-on-boot
                         :initform common-lisp:nil :type
                         (common-lisp:or repo-upgrade-on-boot common-lisp:null)
                         :accessor struct-shape-cluster-repo-upgrade-on-boot
                         :shape "RepoUpgradeOnBoot" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kerberos-attributes :initarg :kerberos-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or kerberos-attributes common-lisp:null)
                         :accessor struct-shape-cluster-kerberos-attributes
                         :shape "KerberosAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-cluster-cluster-arn :shape "ArnType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (outpost-arn :initarg :outpost-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or optional-arn-type common-lisp:null)
                         :accessor struct-shape-cluster-outpost-arn :shape
                         "OptionalArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (step-concurrency-level :initarg
                         :step-concurrency-level :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-cluster-step-concurrency-level
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (placement-groups :initarg :placement-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or placement-group-config-list
                                         common-lisp:null)
                         :accessor struct-shape-cluster-placement-groups :shape
                         "PlacementGroupConfigList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (osrelease-label :initarg :osrelease-label :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-osrelease-label :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ebs-root-volume-iops :initarg :ebs-root-volume-iops
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-cluster-ebs-root-volume-iops :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ebs-root-volume-throughput :initarg
                         :ebs-root-volume-throughput :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-cluster-ebs-root-volume-throughput :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cluster 'make-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2instance-attributes))
      (common-lisp:list
       (common-lisp:cons "Ec2InstanceAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-collection-type))
      (common-lisp:list
       (common-lisp:cons "InstanceCollectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-encryption-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "LogEncryptionKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requested-ami-version))
      (common-lisp:list
       (common-lisp:cons "RequestedAmiVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-ami-version))
      (common-lisp:list
       (common-lisp:cons "RunningAmiVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "ReleaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-terminate))
      (common-lisp:list
       (common-lisp:cons "AutoTerminate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-protected))
      (common-lisp:list
       (common-lisp:cons "TerminationProtected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unhealthy-node-replacement))
      (common-lisp:list
       (common-lisp:cons "UnhealthyNodeReplacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'visible-to-all-users))
      (common-lisp:list
       (common-lisp:cons "VisibleToAllUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'normalized-instance-hours))
      (common-lisp:list
       (common-lisp:cons "NormalizedInstanceHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-public-dns-name))
      (common-lisp:list
       (common-lisp:cons "MasterPublicDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "Configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-role))
      (common-lisp:list
       (common-lisp:cons "AutoScalingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale-down-behavior))
      (common-lisp:list
       (common-lisp:cons "ScaleDownBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-ami-id))
      (common-lisp:list
       (common-lisp:cons "CustomAmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-root-volume-size))
      (common-lisp:list
       (common-lisp:cons "EbsRootVolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repo-upgrade-on-boot))
      (common-lisp:list
       (common-lisp:cons "RepoUpgradeOnBoot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kerberos-attributes))
      (common-lisp:list
       (common-lisp:cons "KerberosAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-arn))
      (common-lisp:list
       (common-lisp:cons "OutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'step-concurrency-level))
      (common-lisp:list
       (common-lisp:cons "StepConcurrencyLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-groups))
      (common-lisp:list
       (common-lisp:cons "PlacementGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'osrelease-label))
      (common-lisp:list
       (common-lisp:cons "OSReleaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-root-volume-iops))
      (common-lisp:list
       (common-lisp:cons "EbsRootVolumeIops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-root-volume-throughput))
      (common-lisp:list
       (common-lisp:cons "EbsRootVolumeThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster))
   common-lisp:nil))
(common-lisp:deftype cluster-id () 'common-lisp:string)
(common-lisp:deftype cluster-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cluster-state-change-reason common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or cluster-state-change-reason-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-state-change-reason-code :shape
                         "ClusterStateChangeReasonCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-state-change-reason-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-state-change-reason
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-state-change-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-state-change-reason
                    'make-cluster-state-change-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-state-change-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-state-change-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-state-change-reason))
   common-lisp:nil))
(common-lisp:deftype cluster-state-change-reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cluster-state-list ()
   '(trivial-types:proper-list cluster-state))
 (common-lisp:defun make-cluster-state-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cluster-status common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or cluster-state common-lisp:null)
                         :accessor struct-shape-cluster-status-state :shape
                         "ClusterState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-change-reason :initarg :state-change-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or cluster-state-change-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-status-state-change-reason :shape
                         "ClusterStateChangeReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeline :initarg :timeline :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-timeline common-lisp:null)
                         :accessor struct-shape-cluster-status-timeline :shape
                         "ClusterTimeline" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-details :initarg :error-details :initform
                         common-lisp:nil :type
                         (common-lisp:or error-detail-list common-lisp:null)
                         :accessor struct-shape-cluster-status-error-details
                         :shape "ErrorDetailList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cluster-status 'make-cluster-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-reason))
      (common-lisp:list
       (common-lisp:cons "StateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeline))
      (common-lisp:list
       (common-lisp:cons "Timeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "ErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-summary common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-cluster-summary-id :shape "ClusterId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-summary-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or cluster-status common-lisp:null)
                         :accessor struct-shape-cluster-summary-status :shape
                         "ClusterStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (normalized-instance-hours :initarg
                         :normalized-instance-hours :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-cluster-summary-normalized-instance-hours
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-cluster-summary-cluster-arn :shape
                         "ArnType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (outpost-arn :initarg :outpost-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or optional-arn-type common-lisp:null)
                         :accessor struct-shape-cluster-summary-outpost-arn
                         :shape "OptionalArnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cluster-summary 'make-cluster-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'normalized-instance-hours))
      (common-lisp:list
       (common-lisp:cons "NormalizedInstanceHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-arn))
      (common-lisp:list
       (common-lisp:cons "OutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-summary-list ()
   '(trivial-types:proper-list cluster-summary))
 (common-lisp:defun make-cluster-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cluster-timeline common-lisp:nil
                       ((creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-cluster-timeline-creation-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ready-date-time :initarg :ready-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-cluster-timeline-ready-date-time :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-cluster-timeline-end-date-time :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-timeline
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-timeline
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-timeline 'make-cluster-timeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-timeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-timeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ready-date-time))
      (common-lisp:list
       (common-lisp:cons "ReadyDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "EndDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-timeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass command common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-command-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (script-path :initarg :script-path :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-command-script-path :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (args :initarg :args :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-command-args :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-command
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'command
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'command 'make-command))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input command))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input command))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-path))
      (common-lisp:list
       (common-lisp:cons "ScriptPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'args))
      (common-lisp:list
       (common-lisp:cons "Args"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input command))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype command-list () '(trivial-types:proper-list command))
 (common-lisp:defun make-command-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list command))
   aws-sdk/generator/shape::members))
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compute-limits common-lisp:nil
                       ((unit-type :initarg :unit-type :initform
                         (common-lisp:error ":unit-type is required") :type
                         (common-lisp:or compute-limits-unit-type
                                         common-lisp:null)
                         :accessor struct-shape-compute-limits-unit-type :shape
                         "ComputeLimitsUnitType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minimum-capacity-units :initarg
                         :minimum-capacity-units :initform
                         (common-lisp:error
                          ":minimum-capacity-units is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-compute-limits-minimum-capacity-units
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-capacity-units :initarg
                         :maximum-capacity-units :initform
                         (common-lisp:error
                          ":maximum-capacity-units is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-compute-limits-maximum-capacity-units
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-on-demand-capacity-units :initarg
                         :maximum-on-demand-capacity-units :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-compute-limits-maximum-on-demand-capacity-units
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-core-capacity-units :initarg
                         :maximum-core-capacity-units :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-compute-limits-maximum-core-capacity-units
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compute-limits
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compute-limits
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'compute-limits 'make-compute-limits))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compute-limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compute-limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit-type))
      (common-lisp:list
       (common-lisp:cons "UnitType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-capacity-units))
      (common-lisp:list
       (common-lisp:cons "MinimumCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-capacity-units))
      (common-lisp:list
       (common-lisp:cons "MaximumCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-on-demand-capacity-units))
      (common-lisp:list
       (common-lisp:cons "MaximumOnDemandCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-core-capacity-units))
      (common-lisp:list
       (common-lisp:cons "MaximumCoreCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compute-limits))
   common-lisp:nil))
(common-lisp:deftype compute-limits-unit-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configuration common-lisp:nil
                       ((classification :initarg :classification :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-configuration-classification :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configurations :initarg :configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-list common-lisp:null)
                         :accessor struct-shape-configuration-configurations
                         :shape "ConfigurationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (properties :initarg :properties :initform
                         common-lisp:nil :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         struct-shape-configuration-properties :shape
                         "StringMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'configuration 'make-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "Configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-list ()
   '(trivial-types:proper-list configuration))
 (common-lisp:defun make-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-security-configuration-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-create-security-configuration-input-name
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform
                         (common-lisp:error
                          ":security-configuration is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-security-configuration-input-security-configuration
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-security-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-security-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-security-configuration-input
                    'make-create-security-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-security-configuration-output common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-create-security-configuration-output-name
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creation-date-time is required")
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-create-security-configuration-output-creation-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-security-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-security-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-security-configuration-output
                    'make-create-security-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-studio-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-create-studio-input-name :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-create-studio-input-description
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-mode :initarg :auth-mode :initform
                         (common-lisp:error ":auth-mode is required") :type
                         (common-lisp:or auth-mode common-lisp:null) :accessor
                         struct-shape-create-studio-input-auth-mode :shape
                         "AuthMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform
                         (common-lisp:error ":vpc-id is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-create-studio-input-vpc-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required") :type
                         (common-lisp:or subnet-id-list common-lisp:null)
                         :accessor struct-shape-create-studio-input-subnet-ids
                         :shape "SubnetIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-role :initarg :service-role :initform
                         (common-lisp:error ":service-role is required") :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-create-studio-input-service-role :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-role :initarg :user-role :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-create-studio-input-user-role :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-security-group-id :initarg
                         :workspace-security-group-id :initform
                         (common-lisp:error
                          ":workspace-security-group-id is required")
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-studio-input-workspace-security-group-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-security-group-id :initarg
                         :engine-security-group-id :initform
                         (common-lisp:error
                          ":engine-security-group-id is required")
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-studio-input-engine-security-group-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-s3location :initarg :default-s3location
                         :initform
                         (common-lisp:error ":default-s3location is required")
                         :type (common-lisp:or xml-string common-lisp:null)
                         :accessor
                         struct-shape-create-studio-input-default-s3location
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idp-auth-url :initarg :idp-auth-url :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-create-studio-input-idp-auth-url :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (idp-relay-state-parameter-name :initarg
                         :idp-relay-state-parameter-name :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-studio-input-idp-relay-state-parameter-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-studio-input-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trusted-identity-propagation-enabled :initarg
                         :trusted-identity-propagation-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-create-studio-input-trusted-identity-propagation-enabled
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idc-user-assignment :initarg :idc-user-assignment
                         :initform common-lisp:nil :type
                         (common-lisp:or idc-user-assignment common-lisp:null)
                         :accessor
                         struct-shape-create-studio-input-idc-user-assignment
                         :shape "IdcUserAssignment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idc-instance-arn :initarg :idc-instance-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-create-studio-input-idc-instance-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-key-arn :initarg :encryption-key-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-create-studio-input-encryption-key-arn
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-studio-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-studio-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-studio-input 'make-create-studio-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-studio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-studio-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-mode))
      (common-lisp:list
       (common-lisp:cons "AuthMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role))
      (common-lisp:list
       (common-lisp:cons "UserRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-security-group-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-security-group-id))
      (common-lisp:list
       (common-lisp:cons "EngineSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-s3location))
      (common-lisp:list
       (common-lisp:cons "DefaultS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idp-auth-url))
      (common-lisp:list
       (common-lisp:cons "IdpAuthUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idp-relay-state-parameter-name))
      (common-lisp:list
       (common-lisp:cons "IdpRelayStateParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trusted-identity-propagation-enabled))
      (common-lisp:list
       (common-lisp:cons "TrustedIdentityPropagationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idc-user-assignment))
      (common-lisp:list
       (common-lisp:cons "IdcUserAssignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idc-instance-arn))
      (common-lisp:list
       (common-lisp:cons "IdcInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-studio-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-studio-output common-lisp:nil
                       ((studio-id :initarg :studio-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-create-studio-output-studio-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-create-studio-output-url :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-studio-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-studio-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-studio-output 'make-create-studio-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-studio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-studio-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-id))
      (common-lisp:list
       (common-lisp:cons "StudioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-studio-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-studio-session-mapping-input common-lisp:nil
                       ((studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studio-id is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-studio-session-mapping-input-studio-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-studio-session-mapping-input-identity-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-name :initarg :identity-name :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-studio-session-mapping-input-identity-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-type :initarg :identity-type :initform
                         (common-lisp:error ":identity-type is required") :type
                         (common-lisp:or identity-type common-lisp:null)
                         :accessor
                         struct-shape-create-studio-session-mapping-input-identity-type
                         :shape "IdentityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-policy-arn :initarg :session-policy-arn
                         :initform
                         (common-lisp:error ":session-policy-arn is required")
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-studio-session-mapping-input-session-policy-arn
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-studio-session-mapping-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-studio-session-mapping-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-studio-session-mapping-input
                    'make-create-studio-session-mapping-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-session-mapping-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-session-mapping-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-id))
      (common-lisp:list
       (common-lisp:cons "StudioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-name))
      (common-lisp:list
       (common-lisp:cons "IdentityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-type))
      (common-lisp:list
       (common-lisp:cons "IdentityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-policy-arn))
      (common-lisp:list
       (common-lisp:cons "SessionPolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-session-mapping-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass credentials common-lisp:nil
                       ((username-password :initarg :username-password
                         :initform common-lisp:nil :type
                         (common-lisp:or username-password common-lisp:null)
                         :accessor struct-shape-credentials-username-password
                         :shape "UsernamePassword" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-credentials
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'credentials 'make-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-password))
      (common-lisp:list
       (common-lisp:cons "UsernamePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input credentials))
   common-lisp:nil))
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-security-configuration-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-delete-security-configuration-input-name
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-security-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-security-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-security-configuration-input
                    'make-delete-security-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-security-configuration-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-security-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-security-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-security-configuration-output
                    'make-delete-security-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-studio-input common-lisp:nil
                       ((studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studio-id is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-delete-studio-input-studio-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-studio-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-studio-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-studio-input 'make-delete-studio-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-studio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-studio-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-id))
      (common-lisp:list
       (common-lisp:cons "StudioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-studio-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-studio-session-mapping-input common-lisp:nil
                       ((studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studio-id is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-studio-session-mapping-input-studio-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-studio-session-mapping-input-identity-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-name :initarg :identity-name :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-studio-session-mapping-input-identity-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-type :initarg :identity-type :initform
                         (common-lisp:error ":identity-type is required") :type
                         (common-lisp:or identity-type common-lisp:null)
                         :accessor
                         struct-shape-delete-studio-session-mapping-input-identity-type
                         :shape "IdentityType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-studio-session-mapping-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-studio-session-mapping-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-studio-session-mapping-input
                    'make-delete-studio-session-mapping-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-session-mapping-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-session-mapping-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-id))
      (common-lisp:list
       (common-lisp:cons "StudioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-name))
      (common-lisp:list
       (common-lisp:cons "IdentityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-type))
      (common-lisp:list
       (common-lisp:cons "IdentityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-session-mapping-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-describe-cluster-input-cluster-id :shape
                         "ClusterId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cluster-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-input 'make-describe-cluster-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-output common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor struct-shape-describe-cluster-output-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cluster-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-output 'make-describe-cluster-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-job-flows-input common-lisp:nil
                       ((created-after :initarg :created-after :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-describe-job-flows-input-created-after
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-before :initarg :created-before :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-describe-job-flows-input-created-before
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-flow-ids :initarg :job-flow-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-list common-lisp:null)
                         :accessor
                         struct-shape-describe-job-flows-input-job-flow-ids
                         :shape "XmlStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-flow-states :initarg :job-flow-states :initform
                         common-lisp:nil :type
                         (common-lisp:or job-flow-execution-state-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-job-flows-input-job-flow-states
                         :shape "JobFlowExecutionStateList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-job-flows-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-job-flows-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-job-flows-input 'make-describe-job-flows-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-flows-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-flows-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-flow-ids))
      (common-lisp:list
       (common-lisp:cons "JobFlowIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-flow-states))
      (common-lisp:list
       (common-lisp:cons "JobFlowStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-flows-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-job-flows-output common-lisp:nil
                       ((job-flows :initarg :job-flows :initform
                         common-lisp:nil :type
                         (common-lisp:or job-flow-detail-list common-lisp:null)
                         :accessor
                         struct-shape-describe-job-flows-output-job-flows
                         :shape "JobFlowDetailList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-job-flows-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-job-flows-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-job-flows-output
                    'make-describe-job-flows-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-flows-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-flows-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-flows))
      (common-lisp:list
       (common-lisp:cons "JobFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-flows-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-notebook-execution-input common-lisp:nil
                       ((notebook-execution-id :initarg :notebook-execution-id
                         :initform
                         (common-lisp:error
                          ":notebook-execution-id is required")
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-notebook-execution-input-notebook-execution-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-notebook-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-notebook-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-notebook-execution-input
                    'make-describe-notebook-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-execution-id))
      (common-lisp:list
       (common-lisp:cons "NotebookExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-notebook-execution-output common-lisp:nil
                       ((notebook-execution :initarg :notebook-execution
                         :initform common-lisp:nil :type
                         (common-lisp:or notebook-execution common-lisp:null)
                         :accessor
                         struct-shape-describe-notebook-execution-output-notebook-execution
                         :shape "NotebookExecution" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-notebook-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-notebook-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-notebook-execution-output
                    'make-describe-notebook-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-execution))
      (common-lisp:list
       (common-lisp:cons "NotebookExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-release-label-input common-lisp:nil
                       ((release-label :initarg :release-label :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-release-label-input-release-label
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-release-label-input-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-number common-lisp:null)
                         :accessor
                         struct-shape-describe-release-label-input-max-results
                         :shape "MaxResultsNumber" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-release-label-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-release-label-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-release-label-input
                    'make-describe-release-label-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-release-label-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-release-label-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "ReleaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-release-label-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-release-label-output common-lisp:nil
                       ((release-label :initarg :release-label :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-release-label-output-release-label
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (applications :initarg :applications :initform
                         common-lisp:nil :type
                         (common-lisp:or simplified-application-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-release-label-output-applications
                         :shape "SimplifiedApplicationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-release-label-output-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (available-osreleases :initarg :available-osreleases
                         :initform common-lisp:nil :type
                         (common-lisp:or osrelease-list common-lisp:null)
                         :accessor
                         struct-shape-describe-release-label-output-available-osreleases
                         :shape "OSReleaseList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-release-label-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-release-label-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-release-label-output
                    'make-describe-release-label-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-release-label-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-release-label-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "ReleaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-osreleases))
      (common-lisp:list
       (common-lisp:cons "AvailableOSReleases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-release-label-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-security-configuration-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-describe-security-configuration-input-name
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-security-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-security-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-security-configuration-input
                    'make-describe-security-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-security-configuration-output common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-describe-security-configuration-output-name
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-security-configuration-output-security-configuration
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-describe-security-configuration-output-creation-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-security-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-security-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-security-configuration-output
                    'make-describe-security-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-step-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-describe-step-input-cluster-id :shape
                         "ClusterId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (step-id :initarg :step-id :initform
                         (common-lisp:error ":step-id is required") :type
                         (common-lisp:or step-id common-lisp:null) :accessor
                         struct-shape-describe-step-input-step-id :shape
                         "StepId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-step-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-step-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-step-input 'make-describe-step-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-step-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-step-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-id))
      (common-lisp:list
       (common-lisp:cons "StepId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-step-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-step-output common-lisp:nil
                       ((step :initarg :step :initform common-lisp:nil :type
                         (common-lisp:or step common-lisp:null) :accessor
                         struct-shape-describe-step-output-step :shape "Step"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-step-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-step-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-step-output 'make-describe-step-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-step-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-step-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step))
      (common-lisp:list
       (common-lisp:cons "Step"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-step-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-studio-input common-lisp:nil
                       ((studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studio-id is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-describe-studio-input-studio-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-studio-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-studio-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-studio-input 'make-describe-studio-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-studio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-studio-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-id))
      (common-lisp:list
       (common-lisp:cons "StudioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-studio-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-studio-output common-lisp:nil
                       ((studio :initarg :studio :initform common-lisp:nil
                         :type (common-lisp:or studio common-lisp:null)
                         :accessor struct-shape-describe-studio-output-studio
                         :shape "Studio" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-studio-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-studio-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-studio-output 'make-describe-studio-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-studio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-studio-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio))
      (common-lisp:list
       (common-lisp:cons "Studio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-studio-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ec2instance-ids-list ()
   '(trivial-types:proper-list instance-id))
 (common-lisp:defun make-ec2instance-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ec2instance-ids-to-terminate-list ()
   '(trivial-types:proper-list instance-id))
 (common-lisp:defun make-ec2instance-ids-to-terminate-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ebs-block-device common-lisp:nil
                       ((volume-specification :initarg :volume-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or volume-specification common-lisp:null)
                         :accessor
                         struct-shape-ebs-block-device-volume-specification
                         :shape "VolumeSpecification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device :initarg :device :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-ebs-block-device-device :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebs-block-device
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebs-block-device
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ebs-block-device 'make-ebs-block-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebs-block-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebs-block-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-specification))
      (common-lisp:list
       (common-lisp:cons "VolumeSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "Device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebs-block-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ebs-block-device-config common-lisp:nil
                       ((volume-specification :initarg :volume-specification
                         :initform
                         (common-lisp:error
                          ":volume-specification is required")
                         :type
                         (common-lisp:or volume-specification common-lisp:null)
                         :accessor
                         struct-shape-ebs-block-device-config-volume-specification
                         :shape "VolumeSpecification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volumes-per-instance :initarg :volumes-per-instance
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-ebs-block-device-config-volumes-per-instance
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebs-block-device-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebs-block-device-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ebs-block-device-config 'make-ebs-block-device-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebs-block-device-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebs-block-device-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-specification))
      (common-lisp:list
       (common-lisp:cons "VolumeSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volumes-per-instance))
      (common-lisp:list
       (common-lisp:cons "VolumesPerInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebs-block-device-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ebs-block-device-config-list ()
   '(trivial-types:proper-list ebs-block-device-config))
 (common-lisp:defun make-ebs-block-device-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ebs-block-device-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ebs-block-device-list ()
   '(trivial-types:proper-list ebs-block-device))
 (common-lisp:defun make-ebs-block-device-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ebs-block-device))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ebs-configuration common-lisp:nil
                       ((ebs-block-device-configs :initarg
                         :ebs-block-device-configs :initform common-lisp:nil
                         :type
                         (common-lisp:or ebs-block-device-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-ebs-configuration-ebs-block-device-configs
                         :shape "EbsBlockDeviceConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ebs-optimized :initarg :ebs-optimized :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor struct-shape-ebs-configuration-ebs-optimized
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebs-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebs-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ebs-configuration 'make-ebs-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebs-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebs-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-block-device-configs))
      (common-lisp:list
       (common-lisp:cons "EbsBlockDeviceConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebs-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ebs-volume common-lisp:nil
                       ((device :initarg :device :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-ebs-volume-device :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (volume-id :initarg :volume-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ebs-volume-volume-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebs-volume
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebs-volume
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ebs-volume 'make-ebs-volume))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebs-volume))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebs-volume))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "Device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebs-volume))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ebs-volume-list ()
   '(trivial-types:proper-list ebs-volume))
 (common-lisp:defun make-ebs-volume-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ebs-volume))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ec2instance-attributes common-lisp:nil
                       ((ec2key-name :initarg :ec2key-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2instance-attributes-ec2key-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ec2subnet-id :initarg :ec2subnet-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2instance-attributes-ec2subnet-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requested-ec2subnet-ids :initarg
                         :requested-ec2subnet-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or xml-string-max-len256list
                                         common-lisp:null)
                         :accessor
                         struct-shape-ec2instance-attributes-requested-ec2subnet-ids
                         :shape "XmlStringMaxLen256List" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ec2availability-zone :initarg :ec2availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2instance-attributes-ec2availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requested-ec2availability-zones :initarg
                         :requested-ec2availability-zones :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256list
                                         common-lisp:null)
                         :accessor
                         struct-shape-ec2instance-attributes-requested-ec2availability-zones
                         :shape "XmlStringMaxLen256List" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (iam-instance-profile :initarg :iam-instance-profile
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2instance-attributes-iam-instance-profile
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (emr-managed-master-security-group :initarg
                         :emr-managed-master-security-group :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2instance-attributes-emr-managed-master-security-group
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (emr-managed-slave-security-group :initarg
                         :emr-managed-slave-security-group :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2instance-attributes-emr-managed-slave-security-group
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-access-security-group :initarg
                         :service-access-security-group :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2instance-attributes-service-access-security-group
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-master-security-groups :initarg
                         :additional-master-security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-ec2instance-attributes-additional-master-security-groups
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-slave-security-groups :initarg
                         :additional-slave-security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-ec2instance-attributes-additional-slave-security-groups
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2instance-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ec2instance-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ec2instance-attributes 'make-ec2instance-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2key-name))
      (common-lisp:list
       (common-lisp:cons "Ec2KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2subnet-id))
      (common-lisp:list
       (common-lisp:cons "Ec2SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requested-ec2subnet-ids))
      (common-lisp:list
       (common-lisp:cons "RequestedEc2SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2availability-zone))
      (common-lisp:list
       (common-lisp:cons "Ec2AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requested-ec2availability-zones))
      (common-lisp:list
       (common-lisp:cons "RequestedEc2AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'emr-managed-master-security-group))
      (common-lisp:list
       (common-lisp:cons "EmrManagedMasterSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'emr-managed-slave-security-group))
      (common-lisp:list
       (common-lisp:cons "EmrManagedSlaveSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-security-group))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-master-security-groups))
      (common-lisp:list
       (common-lisp:cons "AdditionalMasterSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-slave-security-groups))
      (common-lisp:list
       (common-lisp:cons "AdditionalSlaveSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-variables-map () 'common-lisp:hash-table)
 (common-lisp:defun make-environment-variables-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype error-data () '(trivial-types:proper-list string-map))
 (common-lisp:defun make-error-data
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass error-detail common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-error-detail-error-code :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-data :initarg :error-data :initform
                         common-lisp:nil :type
                         (common-lisp:or error-data common-lisp:null) :accessor
                         struct-shape-error-detail-error-data :shape
                         "ErrorData" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-error-detail-error-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-detail 'make-error-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-data))
      (common-lisp:list
       (common-lisp:cons "ErrorData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype error-detail-list ()
   '(trivial-types:proper-list error-detail))
 (common-lisp:defun make-error-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execution-engine-config common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-execution-engine-config-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or execution-engine-type
                                         common-lisp:null)
                         :accessor struct-shape-execution-engine-config-type
                         :shape "ExecutionEngineType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-instance-security-group-id :initarg
                         :master-instance-security-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-execution-engine-config-master-instance-security-group-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor
                         struct-shape-execution-engine-config-execution-role-arn
                         :shape "IAMRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execution-engine-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execution-engine-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execution-engine-config 'make-execution-engine-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-engine-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-engine-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-instance-security-group-id))
      (common-lisp:list
       (common-lisp:cons "MasterInstanceSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-engine-config))
   common-lisp:nil))
(common-lisp:deftype execution-engine-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass failure-details common-lisp:nil
                       ((reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-failure-details-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-failure-details-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-file :initarg :log-file :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-failure-details-log-file :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failure-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'failure-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'failure-details 'make-failure-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failure-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failure-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-file))
      (common-lisp:list
       (common-lisp:cons "LogFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failure-details))
   common-lisp:nil))
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass get-auto-termination-policy-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-get-auto-termination-policy-input-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-auto-termination-policy-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-auto-termination-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-auto-termination-policy-input
                    'make-get-auto-termination-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-termination-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-termination-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-termination-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-auto-termination-policy-output common-lisp:nil
                       ((auto-termination-policy :initarg
                         :auto-termination-policy :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-termination-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-auto-termination-policy-output-auto-termination-policy
                         :shape "AutoTerminationPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-auto-termination-policy-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-auto-termination-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-auto-termination-policy-output
                    'make-get-auto-termination-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-termination-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-termination-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-termination-policy))
      (common-lisp:list
       (common-lisp:cons "AutoTerminationPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-termination-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-block-public-access-configuration-input
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-block-public-access-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-block-public-access-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-block-public-access-configuration-input
                    'make-get-block-public-access-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-block-public-access-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-block-public-access-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-block-public-access-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-block-public-access-configuration-output
                       common-lisp:nil
                       ((block-public-access-configuration :initarg
                         :block-public-access-configuration :initform
                         (common-lisp:error
                          ":block-public-access-configuration is required")
                         :type
                         (common-lisp:or block-public-access-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-block-public-access-configuration-output-block-public-access-configuration
                         :shape "BlockPublicAccessConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (block-public-access-configuration-metadata :initarg
                         :block-public-access-configuration-metadata :initform
                         (common-lisp:error
                          ":block-public-access-configuration-metadata is required")
                         :type
                         (common-lisp:or
                          block-public-access-configuration-metadata
                          common-lisp:null)
                         :accessor
                         struct-shape-get-block-public-access-configuration-output-block-public-access-configuration-metadata
                         :shape "BlockPublicAccessConfigurationMetadata"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-block-public-access-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-block-public-access-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-block-public-access-configuration-output
                    'make-get-block-public-access-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-block-public-access-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-block-public-access-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-public-access-configuration))
      (common-lisp:list
       (common-lisp:cons "BlockPublicAccessConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-public-access-configuration-metadata))
      (common-lisp:list
       (common-lisp:cons "BlockPublicAccessConfigurationMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-block-public-access-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cluster-session-credentials-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-cluster-session-credentials-input-cluster-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-get-cluster-session-credentials-input-execution-role-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cluster-session-credentials-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-cluster-session-credentials-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cluster-session-credentials-input
                    'make-get-cluster-session-credentials-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-session-credentials-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-session-credentials-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-session-credentials-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cluster-session-credentials-output common-lisp:nil
                       ((credentials :initarg :credentials :initform
                         common-lisp:nil :type
                         (common-lisp:or credentials common-lisp:null)
                         :accessor
                         struct-shape-get-cluster-session-credentials-output-credentials
                         :shape "Credentials" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expires-at :initarg :expires-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-get-cluster-session-credentials-output-expires-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cluster-session-credentials-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-cluster-session-credentials-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cluster-session-credentials-output
                    'make-get-cluster-session-credentials-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-session-credentials-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-session-credentials-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-at))
      (common-lisp:list
       (common-lisp:cons "ExpiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-session-credentials-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-managed-scaling-policy-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-get-managed-scaling-policy-input-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-managed-scaling-policy-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-managed-scaling-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-managed-scaling-policy-input
                    'make-get-managed-scaling-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-scaling-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-scaling-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-scaling-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-managed-scaling-policy-output common-lisp:nil
                       ((managed-scaling-policy :initarg
                         :managed-scaling-policy :initform common-lisp:nil
                         :type
                         (common-lisp:or managed-scaling-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-managed-scaling-policy-output-managed-scaling-policy
                         :shape "ManagedScalingPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-managed-scaling-policy-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-managed-scaling-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-managed-scaling-policy-output
                    'make-get-managed-scaling-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-scaling-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-scaling-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-scaling-policy))
      (common-lisp:list
       (common-lisp:cons "ManagedScalingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-scaling-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-studio-session-mapping-input common-lisp:nil
                       ((studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studio-id is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-studio-session-mapping-input-studio-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-studio-session-mapping-input-identity-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-name :initarg :identity-name :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-studio-session-mapping-input-identity-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-type :initarg :identity-type :initform
                         (common-lisp:error ":identity-type is required") :type
                         (common-lisp:or identity-type common-lisp:null)
                         :accessor
                         struct-shape-get-studio-session-mapping-input-identity-type
                         :shape "IdentityType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-studio-session-mapping-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-studio-session-mapping-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-studio-session-mapping-input
                    'make-get-studio-session-mapping-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-session-mapping-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-session-mapping-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-id))
      (common-lisp:list
       (common-lisp:cons "StudioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-name))
      (common-lisp:list
       (common-lisp:cons "IdentityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-type))
      (common-lisp:list
       (common-lisp:cons "IdentityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-session-mapping-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-studio-session-mapping-output common-lisp:nil
                       ((session-mapping :initarg :session-mapping :initform
                         common-lisp:nil :type
                         (common-lisp:or session-mapping-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-studio-session-mapping-output-session-mapping
                         :shape "SessionMappingDetail" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-studio-session-mapping-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-studio-session-mapping-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-studio-session-mapping-output
                    'make-get-studio-session-mapping-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-session-mapping-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-session-mapping-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-mapping))
      (common-lisp:list
       (common-lisp:cons "SessionMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-session-mapping-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass hadoop-jar-step-config common-lisp:nil
                       ((properties :initarg :properties :initform
                         common-lisp:nil :type
                         (common-lisp:or key-value-list common-lisp:null)
                         :accessor
                         struct-shape-hadoop-jar-step-config-properties :shape
                         "KeyValueList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (jar :initarg :jar :initform
                         (common-lisp:error ":jar is required") :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-hadoop-jar-step-config-jar :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (main-class :initarg :main-class :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-hadoop-jar-step-config-main-class :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (args :initarg :args :initform common-lisp:nil :type
                         (common-lisp:or xml-string-list common-lisp:null)
                         :accessor struct-shape-hadoop-jar-step-config-args
                         :shape "XmlStringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hadoop-jar-step-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hadoop-jar-step-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hadoop-jar-step-config 'make-hadoop-jar-step-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hadoop-jar-step-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hadoop-jar-step-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jar))
      (common-lisp:list
       (common-lisp:cons "Jar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'main-class))
      (common-lisp:list
       (common-lisp:cons "MainClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'args))
      (common-lisp:list
       (common-lisp:cons "Args"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hadoop-jar-step-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass hadoop-step-config common-lisp:nil
                       ((jar :initarg :jar :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hadoop-step-config-jar :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (properties :initarg :properties :initform
                         common-lisp:nil :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         struct-shape-hadoop-step-config-properties :shape
                         "StringMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (main-class :initarg :main-class :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hadoop-step-config-main-class :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (args :initarg :args :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-hadoop-step-config-args :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hadoop-step-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hadoop-step-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hadoop-step-config 'make-hadoop-step-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hadoop-step-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hadoop-step-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jar))
      (common-lisp:list
       (common-lisp:cons "Jar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'main-class))
      (common-lisp:list
       (common-lisp:cons "MainClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'args))
      (common-lisp:list
       (common-lisp:cons "Args"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hadoop-step-config))
   common-lisp:nil))
(common-lisp:deftype iamrole-arn () 'common-lisp:string)
(common-lisp:deftype idc-user-assignment () 'common-lisp:string)
(common-lisp:deftype identity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor struct-shape-instance-id :shape "InstanceId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ec2instance-id :initarg :ec2instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor struct-shape-instance-ec2instance-id :shape
                         "InstanceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (public-dns-name :initarg :public-dns-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-public-dns-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (public-ip-address :initarg :public-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-public-ip-address :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (private-dns-name :initarg :private-dns-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-private-dns-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (private-ip-address :initarg :private-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-private-ip-address :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-status common-lisp:null)
                         :accessor struct-shape-instance-status :shape
                         "InstanceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-group-id :initarg :instance-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-instance-group-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-fleet-id :initarg :instance-fleet-id
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-fleet-id common-lisp:null)
                         :accessor struct-shape-instance-instance-fleet-id
                         :shape "InstanceFleetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (market :initarg :market :initform common-lisp:nil
                         :type (common-lisp:or market-type common-lisp:null)
                         :accessor struct-shape-instance-market :shape
                         "MarketType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor struct-shape-instance-instance-type :shape
                         "InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-volumes :initarg :ebs-volumes :initform
                         common-lisp:nil :type
                         (common-lisp:or ebs-volume-list common-lisp:null)
                         :accessor struct-shape-instance-ebs-volumes :shape
                         "EbsVolumeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'instance 'make-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-id))
      (common-lisp:list
       (common-lisp:cons "Ec2InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-dns-name))
      (common-lisp:list
       (common-lisp:cons "PublicDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip-address))
      (common-lisp:list
       (common-lisp:cons "PublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns-name))
      (common-lisp:list
       (common-lisp:cons "PrivateDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-group-id))
      (common-lisp:list
       (common-lisp:cons "InstanceGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-fleet-id))
      (common-lisp:list
       (common-lisp:cons "InstanceFleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'market))
      (common-lisp:list
       (common-lisp:cons "Market"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-volumes))
      (common-lisp:list
       (common-lisp:cons "EbsVolumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance))
   common-lisp:nil))
(common-lisp:deftype instance-collection-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-fleet common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or instance-fleet-id common-lisp:null)
                         :accessor struct-shape-instance-fleet-id :shape
                         "InstanceFleetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-instance-fleet-name :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-fleet-status
                                         common-lisp:null)
                         :accessor struct-shape-instance-fleet-status :shape
                         "InstanceFleetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-fleet-type :initarg :instance-fleet-type
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-fleet-type common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-instance-fleet-type :shape
                         "InstanceFleetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-on-demand-capacity :initarg
                         :target-on-demand-capacity :initform common-lisp:nil
                         :type (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-target-on-demand-capacity
                         :shape "WholeNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-spot-capacity :initarg :target-spot-capacity
                         :initform common-lisp:nil :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-target-spot-capacity
                         :shape "WholeNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioned-on-demand-capacity :initarg
                         :provisioned-on-demand-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-provisioned-on-demand-capacity
                         :shape "WholeNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioned-spot-capacity :initarg
                         :provisioned-spot-capacity :initform common-lisp:nil
                         :type (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-provisioned-spot-capacity
                         :shape "WholeNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-type-specifications :initarg
                         :instance-type-specifications :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-type-specification-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-instance-type-specifications
                         :shape "InstanceTypeSpecificationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (launch-specifications :initarg :launch-specifications
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          instance-fleet-provisioning-specifications
                          common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-launch-specifications
                         :shape "InstanceFleetProvisioningSpecifications"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resize-specifications :initarg :resize-specifications
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-fleet-resizing-specifications
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-resize-specifications
                         :shape "InstanceFleetResizingSpecifications" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-fleet
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-fleet
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'instance-fleet 'make-instance-fleet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-fleet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-fleet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-fleet-type))
      (common-lisp:list
       (common-lisp:cons "InstanceFleetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-on-demand-capacity))
      (common-lisp:list
       (common-lisp:cons "TargetOnDemandCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-spot-capacity))
      (common-lisp:list
       (common-lisp:cons "TargetSpotCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-on-demand-capacity))
      (common-lisp:list
       (common-lisp:cons "ProvisionedOnDemandCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-spot-capacity))
      (common-lisp:list
       (common-lisp:cons "ProvisionedSpotCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-type-specifications))
      (common-lisp:list
       (common-lisp:cons "InstanceTypeSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-specifications))
      (common-lisp:list
       (common-lisp:cons "LaunchSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resize-specifications))
      (common-lisp:list
       (common-lisp:cons "ResizeSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-fleet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-fleet-config common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-instance-fleet-config-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-fleet-type :initarg :instance-fleet-type
                         :initform
                         (common-lisp:error ":instance-fleet-type is required")
                         :type
                         (common-lisp:or instance-fleet-type common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-config-instance-fleet-type
                         :shape "InstanceFleetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-on-demand-capacity :initarg
                         :target-on-demand-capacity :initform common-lisp:nil
                         :type (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-config-target-on-demand-capacity
                         :shape "WholeNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-spot-capacity :initarg :target-spot-capacity
                         :initform common-lisp:nil :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-config-target-spot-capacity
                         :shape "WholeNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-type-configs :initarg :instance-type-configs
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-type-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-config-instance-type-configs
                         :shape "InstanceTypeConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (launch-specifications :initarg :launch-specifications
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          instance-fleet-provisioning-specifications
                          common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-config-launch-specifications
                         :shape "InstanceFleetProvisioningSpecifications"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resize-specifications :initarg :resize-specifications
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-fleet-resizing-specifications
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-config-resize-specifications
                         :shape "InstanceFleetResizingSpecifications" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-fleet-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-fleet-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-fleet-config 'make-instance-fleet-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-fleet-type))
      (common-lisp:list
       (common-lisp:cons "InstanceFleetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-on-demand-capacity))
      (common-lisp:list
       (common-lisp:cons "TargetOnDemandCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-spot-capacity))
      (common-lisp:list
       (common-lisp:cons "TargetSpotCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-type-configs))
      (common-lisp:list
       (common-lisp:cons "InstanceTypeConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-specifications))
      (common-lisp:list
       (common-lisp:cons "LaunchSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resize-specifications))
      (common-lisp:list
       (common-lisp:cons "ResizeSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-fleet-config-list ()
   '(trivial-types:proper-list instance-fleet-config))
 (common-lisp:defun make-instance-fleet-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-fleet-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-fleet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-fleet-list ()
   '(trivial-types:proper-list instance-fleet))
 (common-lisp:defun make-instance-fleet-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-fleet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-fleet-modify-config common-lisp:nil
                       ((instance-fleet-id :initarg :instance-fleet-id
                         :initform
                         (common-lisp:error ":instance-fleet-id is required")
                         :type
                         (common-lisp:or instance-fleet-id common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-modify-config-instance-fleet-id
                         :shape "InstanceFleetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-on-demand-capacity :initarg
                         :target-on-demand-capacity :initform common-lisp:nil
                         :type (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-modify-config-target-on-demand-capacity
                         :shape "WholeNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-spot-capacity :initarg :target-spot-capacity
                         :initform common-lisp:nil :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-modify-config-target-spot-capacity
                         :shape "WholeNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resize-specifications :initarg :resize-specifications
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-fleet-resizing-specifications
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-modify-config-resize-specifications
                         :shape "InstanceFleetResizingSpecifications" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-fleet-modify-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-fleet-modify-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-fleet-modify-config
                    'make-instance-fleet-modify-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-modify-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-modify-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-fleet-id))
      (common-lisp:list
       (common-lisp:cons "InstanceFleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-on-demand-capacity))
      (common-lisp:list
       (common-lisp:cons "TargetOnDemandCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-spot-capacity))
      (common-lisp:list
       (common-lisp:cons "TargetSpotCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resize-specifications))
      (common-lisp:list
       (common-lisp:cons "ResizeSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-modify-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-fleet-provisioning-specifications
                       common-lisp:nil
                       ((spot-specification :initarg :spot-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or spot-provisioning-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-provisioning-specifications-spot-specification
                         :shape "SpotProvisioningSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (on-demand-specification :initarg
                         :on-demand-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or on-demand-provisioning-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-provisioning-specifications-on-demand-specification
                         :shape "OnDemandProvisioningSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-fleet-provisioning-specifications
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'instance-fleet-provisioning-specifications
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-fleet-provisioning-specifications
                    'make-instance-fleet-provisioning-specifications))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-provisioning-specifications))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-provisioning-specifications))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-specification))
      (common-lisp:list
       (common-lisp:cons "SpotSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-specification))
      (common-lisp:list
       (common-lisp:cons "OnDemandSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-provisioning-specifications))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-fleet-resizing-specifications common-lisp:nil
                       ((spot-resize-specification :initarg
                         :spot-resize-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or spot-resizing-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-resizing-specifications-spot-resize-specification
                         :shape "SpotResizingSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (on-demand-resize-specification :initarg
                         :on-demand-resize-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or on-demand-resizing-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-resizing-specifications-on-demand-resize-specification
                         :shape "OnDemandResizingSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-fleet-resizing-specifications
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'instance-fleet-resizing-specifications
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-fleet-resizing-specifications
                    'make-instance-fleet-resizing-specifications))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-resizing-specifications))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-resizing-specifications))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-resize-specification))
      (common-lisp:list
       (common-lisp:cons "SpotResizeSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-resize-specification))
      (common-lisp:list
       (common-lisp:cons "OnDemandResizeSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-resizing-specifications))
   common-lisp:nil))
(common-lisp:deftype instance-fleet-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-fleet-state-change-reason common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or
                          instance-fleet-state-change-reason-code
                          common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-state-change-reason-code
                         :shape "InstanceFleetStateChangeReasonCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-state-change-reason-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-fleet-state-change-reason
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'instance-fleet-state-change-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-fleet-state-change-reason
                    'make-instance-fleet-state-change-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-state-change-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-state-change-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-state-change-reason))
   common-lisp:nil))
(common-lisp:deftype instance-fleet-state-change-reason-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-fleet-status common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or instance-fleet-state common-lisp:null)
                         :accessor struct-shape-instance-fleet-status-state
                         :shape "InstanceFleetState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-change-reason :initarg :state-change-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-fleet-state-change-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-fleet-status-state-change-reason
                         :shape "InstanceFleetStateChangeReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timeline :initarg :timeline :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-fleet-timeline
                                         common-lisp:null)
                         :accessor struct-shape-instance-fleet-status-timeline
                         :shape "InstanceFleetTimeline" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-fleet-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-fleet-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-fleet-status 'make-instance-fleet-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-reason))
      (common-lisp:list
       (common-lisp:cons "StateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeline))
      (common-lisp:list
       (common-lisp:cons "Timeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-fleet-timeline common-lisp:nil
                       ((creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-instance-fleet-timeline-creation-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ready-date-time :initarg :ready-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-instance-fleet-timeline-ready-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-instance-fleet-timeline-end-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-fleet-timeline
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-fleet-timeline
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-fleet-timeline 'make-instance-fleet-timeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-timeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-timeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ready-date-time))
      (common-lisp:list
       (common-lisp:cons "ReadyDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "EndDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-fleet-timeline))
   common-lisp:nil))
(common-lisp:deftype instance-fleet-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-group common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or instance-group-id common-lisp:null)
                         :accessor struct-shape-instance-group-id :shape
                         "InstanceGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-group-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (market :initarg :market :initform common-lisp:nil
                         :type (common-lisp:or market-type common-lisp:null)
                         :accessor struct-shape-instance-group-market :shape
                         "MarketType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-group-type :initarg :instance-group-type
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-group-type common-lisp:null)
                         :accessor
                         struct-shape-instance-group-instance-group-type :shape
                         "InstanceGroupType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bid-price :initarg :bid-price :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-group-bid-price :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor struct-shape-instance-group-instance-type
                         :shape "InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requested-instance-count :initarg
                         :requested-instance-count :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-instance-group-requested-instance-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (running-instance-count :initarg
                         :running-instance-count :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-instance-group-running-instance-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-group-status
                                         common-lisp:null)
                         :accessor struct-shape-instance-group-status :shape
                         "InstanceGroupStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configurations :initarg :configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-list common-lisp:null)
                         :accessor struct-shape-instance-group-configurations
                         :shape "ConfigurationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configurations-version :initarg
                         :configurations-version :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-instance-group-configurations-version
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-successfully-applied-configurations :initarg
                         :last-successfully-applied-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-list common-lisp:null)
                         :accessor
                         struct-shape-instance-group-last-successfully-applied-configurations
                         :shape "ConfigurationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-successfully-applied-configurations-version
                         :initarg
                         :last-successfully-applied-configurations-version
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-instance-group-last-successfully-applied-configurations-version
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ebs-block-devices :initarg :ebs-block-devices
                         :initform common-lisp:nil :type
                         (common-lisp:or ebs-block-device-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-group-ebs-block-devices :shape
                         "EbsBlockDeviceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-optimized :initarg :ebs-optimized :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor struct-shape-instance-group-ebs-optimized
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shrink-policy :initarg :shrink-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or shrink-policy common-lisp:null)
                         :accessor struct-shape-instance-group-shrink-policy
                         :shape "ShrinkPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-scaling-policy :initarg :auto-scaling-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-scaling-policy-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-group-auto-scaling-policy :shape
                         "AutoScalingPolicyDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-ami-id :initarg :custom-ami-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-instance-group-custom-ami-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'instance-group 'make-instance-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'market))
      (common-lisp:list
       (common-lisp:cons "Market"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-group-type))
      (common-lisp:list
       (common-lisp:cons "InstanceGroupType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bid-price))
      (common-lisp:list
       (common-lisp:cons "BidPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requested-instance-count))
      (common-lisp:list
       (common-lisp:cons "RequestedInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'running-instance-count))
      (common-lisp:list
       (common-lisp:cons "RunningInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "Configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configurations-version))
      (common-lisp:list
       (common-lisp:cons "ConfigurationsVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successfully-applied-configurations))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfullyAppliedConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successfully-applied-configurations-version))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfullyAppliedConfigurationsVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-block-devices))
      (common-lisp:list
       (common-lisp:cons "EbsBlockDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shrink-policy))
      (common-lisp:list
       (common-lisp:cons "ShrinkPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-policy))
      (common-lisp:list
       (common-lisp:cons "AutoScalingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-ami-id))
      (common-lisp:list
       (common-lisp:cons "CustomAmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-group-config common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-instance-group-config-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (market :initarg :market :initform common-lisp:nil
                         :type (common-lisp:or market-type common-lisp:null)
                         :accessor struct-shape-instance-group-config-market
                         :shape "MarketType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-role :initarg :instance-role :initform
                         (common-lisp:error ":instance-role is required") :type
                         (common-lisp:or instance-role-type common-lisp:null)
                         :accessor
                         struct-shape-instance-group-config-instance-role
                         :shape "InstanceRoleType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bid-price :initarg :bid-price :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-instance-group-config-bid-price
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         (common-lisp:error ":instance-type is required") :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor
                         struct-shape-instance-group-config-instance-type
                         :shape "InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-count :initarg :instance-count :initform
                         (common-lisp:error ":instance-count is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-instance-group-config-instance-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configurations :initarg :configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-list common-lisp:null)
                         :accessor
                         struct-shape-instance-group-config-configurations
                         :shape "ConfigurationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-configuration :initarg :ebs-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or ebs-configuration common-lisp:null)
                         :accessor
                         struct-shape-instance-group-config-ebs-configuration
                         :shape "EbsConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-scaling-policy :initarg :auto-scaling-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-scaling-policy common-lisp:null)
                         :accessor
                         struct-shape-instance-group-config-auto-scaling-policy
                         :shape "AutoScalingPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-ami-id :initarg :custom-ami-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-group-config-custom-ami-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-group-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-group-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-group-config 'make-instance-group-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'market))
      (common-lisp:list
       (common-lisp:cons "Market"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-role))
      (common-lisp:list
       (common-lisp:cons "InstanceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bid-price))
      (common-lisp:list
       (common-lisp:cons "BidPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "Configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-configuration))
      (common-lisp:list
       (common-lisp:cons "EbsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-policy))
      (common-lisp:list
       (common-lisp:cons "AutoScalingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-ami-id))
      (common-lisp:list
       (common-lisp:cons "CustomAmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-group-config-list ()
   '(trivial-types:proper-list instance-group-config))
 (common-lisp:defun make-instance-group-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-group-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-group-detail common-lisp:nil
                       ((instance-group-id :initarg :instance-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-group-detail-instance-group-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-instance-group-detail-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (market :initarg :market :initform
                         (common-lisp:error ":market is required") :type
                         (common-lisp:or market-type common-lisp:null)
                         :accessor struct-shape-instance-group-detail-market
                         :shape "MarketType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-role :initarg :instance-role :initform
                         (common-lisp:error ":instance-role is required") :type
                         (common-lisp:or instance-role-type common-lisp:null)
                         :accessor
                         struct-shape-instance-group-detail-instance-role
                         :shape "InstanceRoleType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bid-price :initarg :bid-price :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-instance-group-detail-bid-price
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         (common-lisp:error ":instance-type is required") :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor
                         struct-shape-instance-group-detail-instance-type
                         :shape "InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-request-count :initarg
                         :instance-request-count :initform
                         (common-lisp:error
                          ":instance-request-count is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-instance-group-detail-instance-request-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-running-count :initarg
                         :instance-running-count :initform
                         (common-lisp:error
                          ":instance-running-count is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-instance-group-detail-instance-running-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or instance-group-state common-lisp:null)
                         :accessor struct-shape-instance-group-detail-state
                         :shape "InstanceGroupState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-state-change-reason :initarg
                         :last-state-change-reason :initform common-lisp:nil
                         :type (common-lisp:or xml-string common-lisp:null)
                         :accessor
                         struct-shape-instance-group-detail-last-state-change-reason
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creation-date-time is required")
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-instance-group-detail-creation-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-date-time :initarg :start-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-instance-group-detail-start-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ready-date-time :initarg :ready-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-instance-group-detail-ready-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-instance-group-detail-end-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-ami-id :initarg :custom-ami-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-group-detail-custom-ami-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-group-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-group-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-group-detail 'make-instance-group-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-group-id))
      (common-lisp:list
       (common-lisp:cons "InstanceGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'market))
      (common-lisp:list
       (common-lisp:cons "Market"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-role))
      (common-lisp:list
       (common-lisp:cons "InstanceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bid-price))
      (common-lisp:list
       (common-lisp:cons "BidPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-request-count))
      (common-lisp:list
       (common-lisp:cons "InstanceRequestCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-running-count))
      (common-lisp:list
       (common-lisp:cons "InstanceRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-state-change-reason))
      (common-lisp:list
       (common-lisp:cons "LastStateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "StartDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ready-date-time))
      (common-lisp:list
       (common-lisp:cons "ReadyDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "EndDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-ami-id))
      (common-lisp:list
       (common-lisp:cons "CustomAmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-group-detail-list ()
   '(trivial-types:proper-list instance-group-detail))
 (common-lisp:defun make-instance-group-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-group-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-group-ids-list ()
   '(trivial-types:proper-list xml-string-max-len256))
 (common-lisp:defun make-instance-group-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype instance-group-list ()
   '(trivial-types:proper-list instance-group))
 (common-lisp:defun make-instance-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-group-modify-config common-lisp:nil
                       ((instance-group-id :initarg :instance-group-id
                         :initform
                         (common-lisp:error ":instance-group-id is required")
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-group-modify-config-instance-group-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-count :initarg :instance-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instance-group-modify-config-instance-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2instance-ids-to-terminate :initarg
                         :ec2instance-ids-to-terminate :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2instance-ids-to-terminate-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-group-modify-config-ec2instance-ids-to-terminate
                         :shape "EC2InstanceIdsToTerminateList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (shrink-policy :initarg :shrink-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or shrink-policy common-lisp:null)
                         :accessor
                         struct-shape-instance-group-modify-config-shrink-policy
                         :shape "ShrinkPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reconfiguration-type :initarg :reconfiguration-type
                         :initform common-lisp:nil :type
                         (common-lisp:or reconfiguration-type common-lisp:null)
                         :accessor
                         struct-shape-instance-group-modify-config-reconfiguration-type
                         :shape "ReconfigurationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configurations :initarg :configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-list common-lisp:null)
                         :accessor
                         struct-shape-instance-group-modify-config-configurations
                         :shape "ConfigurationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-group-modify-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-group-modify-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-group-modify-config
                    'make-instance-group-modify-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-modify-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-modify-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-group-id))
      (common-lisp:list
       (common-lisp:cons "InstanceGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2instance-ids-to-terminate))
      (common-lisp:list
       (common-lisp:cons "EC2InstanceIdsToTerminate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shrink-policy))
      (common-lisp:list
       (common-lisp:cons "ShrinkPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reconfiguration-type))
      (common-lisp:list
       (common-lisp:cons "ReconfigurationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "Configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-modify-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-group-modify-config-list ()
   '(trivial-types:proper-list instance-group-modify-config))
 (common-lisp:defun make-instance-group-modify-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-group-modify-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-group-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-group-state-change-reason common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or
                          instance-group-state-change-reason-code
                          common-lisp:null)
                         :accessor
                         struct-shape-instance-group-state-change-reason-code
                         :shape "InstanceGroupStateChangeReasonCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-instance-group-state-change-reason-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-group-state-change-reason
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'instance-group-state-change-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-group-state-change-reason
                    'make-instance-group-state-change-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-state-change-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-state-change-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-state-change-reason))
   common-lisp:nil))
(common-lisp:deftype instance-group-state-change-reason-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-group-status common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or instance-group-state common-lisp:null)
                         :accessor struct-shape-instance-group-status-state
                         :shape "InstanceGroupState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-change-reason :initarg :state-change-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-group-state-change-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-group-status-state-change-reason
                         :shape "InstanceGroupStateChangeReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timeline :initarg :timeline :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-group-timeline
                                         common-lisp:null)
                         :accessor struct-shape-instance-group-status-timeline
                         :shape "InstanceGroupTimeline" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-group-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-group-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-group-status 'make-instance-group-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-reason))
      (common-lisp:list
       (common-lisp:cons "StateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeline))
      (common-lisp:list
       (common-lisp:cons "Timeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-group-timeline common-lisp:nil
                       ((creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-instance-group-timeline-creation-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ready-date-time :initarg :ready-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-instance-group-timeline-ready-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-instance-group-timeline-end-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-group-timeline
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-group-timeline
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-group-timeline 'make-instance-group-timeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-timeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-timeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ready-date-time))
      (common-lisp:list
       (common-lisp:cons "ReadyDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "EndDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-group-timeline))
   common-lisp:nil))
(common-lisp:deftype instance-group-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-group-type-list ()
   '(trivial-types:proper-list instance-group-type))
 (common-lisp:defun make-instance-group-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-group-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-list () '(trivial-types:proper-list instance))
 (common-lisp:defun make-instance-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-resize-policy common-lisp:nil
                       ((instances-to-terminate :initarg
                         :instances-to-terminate :initform common-lisp:nil
                         :type
                         (common-lisp:or ec2instance-ids-list common-lisp:null)
                         :accessor
                         struct-shape-instance-resize-policy-instances-to-terminate
                         :shape "EC2InstanceIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instances-to-protect :initarg :instances-to-protect
                         :initform common-lisp:nil :type
                         (common-lisp:or ec2instance-ids-list common-lisp:null)
                         :accessor
                         struct-shape-instance-resize-policy-instances-to-protect
                         :shape "EC2InstanceIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-termination-timeout :initarg
                         :instance-termination-timeout :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instance-resize-policy-instance-termination-timeout
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-resize-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-resize-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-resize-policy 'make-instance-resize-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-resize-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-resize-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-to-terminate))
      (common-lisp:list
       (common-lisp:cons "InstancesToTerminate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-to-protect))
      (common-lisp:list
       (common-lisp:cons "InstancesToProtect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-termination-timeout))
      (common-lisp:list
       (common-lisp:cons "InstanceTerminationTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-resize-policy))
   common-lisp:nil))
(common-lisp:deftype instance-role-type () 'common-lisp:string)
(common-lisp:deftype instance-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-state-change-reason common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or instance-state-change-reason-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-state-change-reason-code :shape
                         "InstanceStateChangeReasonCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-instance-state-change-reason-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-state-change-reason
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-state-change-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-state-change-reason
                    'make-instance-state-change-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-state-change-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-state-change-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-state-change-reason))
   common-lisp:nil))
(common-lisp:deftype instance-state-change-reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-state-list ()
   '(trivial-types:proper-list instance-state))
 (common-lisp:defun make-instance-state-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-status common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or instance-state common-lisp:null)
                         :accessor struct-shape-instance-status-state :shape
                         "InstanceState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-change-reason :initarg :state-change-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-state-change-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-status-state-change-reason
                         :shape "InstanceStateChangeReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timeline :initarg :timeline :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-timeline common-lisp:null)
                         :accessor struct-shape-instance-status-timeline :shape
                         "InstanceTimeline" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'instance-status 'make-instance-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-reason))
      (common-lisp:list
       (common-lisp:cons "StateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeline))
      (common-lisp:list
       (common-lisp:cons "Timeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-timeline common-lisp:nil
                       ((creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-instance-timeline-creation-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ready-date-time :initarg :ready-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-instance-timeline-ready-date-time :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-instance-timeline-end-date-time :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-timeline
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-timeline
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-timeline 'make-instance-timeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-timeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-timeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ready-date-time))
      (common-lisp:list
       (common-lisp:cons "ReadyDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "EndDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-timeline))
   common-lisp:nil))
(common-lisp:deftype instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-type-config common-lisp:nil
                       ((instance-type :initarg :instance-type :initform
                         (common-lisp:error ":instance-type is required") :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor
                         struct-shape-instance-type-config-instance-type :shape
                         "InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (weighted-capacity :initarg :weighted-capacity
                         :initform common-lisp:nil :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         struct-shape-instance-type-config-weighted-capacity
                         :shape "WholeNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bid-price :initarg :bid-price :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-instance-type-config-bid-price
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bid-price-as-percentage-of-on-demand-price :initarg
                         :bid-price-as-percentage-of-on-demand-price :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-double common-lisp:null)
                         :accessor
                         struct-shape-instance-type-config-bid-price-as-percentage-of-on-demand-price
                         :shape "NonNegativeDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-configuration :initarg :ebs-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or ebs-configuration common-lisp:null)
                         :accessor
                         struct-shape-instance-type-config-ebs-configuration
                         :shape "EbsConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configurations :initarg :configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-list common-lisp:null)
                         :accessor
                         struct-shape-instance-type-config-configurations
                         :shape "ConfigurationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-ami-id :initarg :custom-ami-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-type-config-custom-ami-id :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-type-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-type-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-type-config 'make-instance-type-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-type-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-type-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-capacity))
      (common-lisp:list
       (common-lisp:cons "WeightedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bid-price))
      (common-lisp:list
       (common-lisp:cons "BidPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bid-price-as-percentage-of-on-demand-price))
      (common-lisp:list
       (common-lisp:cons "BidPriceAsPercentageOfOnDemandPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-configuration))
      (common-lisp:list
       (common-lisp:cons "EbsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "Configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-ami-id))
      (common-lisp:list
       (common-lisp:cons "CustomAmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-type-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-type-config-list ()
   '(trivial-types:proper-list instance-type-config))
 (common-lisp:defun make-instance-type-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-type-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-type-specification common-lisp:nil
                       ((instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor
                         struct-shape-instance-type-specification-instance-type
                         :shape "InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (weighted-capacity :initarg :weighted-capacity
                         :initform common-lisp:nil :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         struct-shape-instance-type-specification-weighted-capacity
                         :shape "WholeNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bid-price :initarg :bid-price :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-type-specification-bid-price
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bid-price-as-percentage-of-on-demand-price :initarg
                         :bid-price-as-percentage-of-on-demand-price :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-double common-lisp:null)
                         :accessor
                         struct-shape-instance-type-specification-bid-price-as-percentage-of-on-demand-price
                         :shape "NonNegativeDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configurations :initarg :configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-list common-lisp:null)
                         :accessor
                         struct-shape-instance-type-specification-configurations
                         :shape "ConfigurationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-block-devices :initarg :ebs-block-devices
                         :initform common-lisp:nil :type
                         (common-lisp:or ebs-block-device-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-type-specification-ebs-block-devices
                         :shape "EbsBlockDeviceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-optimized :initarg :ebs-optimized :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-instance-type-specification-ebs-optimized
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-ami-id :initarg :custom-ami-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-type-specification-custom-ami-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-type-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-type-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-type-specification
                    'make-instance-type-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-type-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-type-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-capacity))
      (common-lisp:list
       (common-lisp:cons "WeightedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bid-price))
      (common-lisp:list
       (common-lisp:cons "BidPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bid-price-as-percentage-of-on-demand-price))
      (common-lisp:list
       (common-lisp:cons "BidPriceAsPercentageOfOnDemandPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "Configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-block-devices))
      (common-lisp:list
       (common-lisp:cons "EbsBlockDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-ami-id))
      (common-lisp:list
       (common-lisp:cons "CustomAmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-type-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-type-specification-list ()
   '(trivial-types:proper-list instance-type-specification))
 (common-lisp:defun make-instance-type-specification-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-type-specification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-error
     (elasticmapreduce-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'internal-server-error)))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (elasticmapreduce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (elasticmapreduce-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       invalid-request-exception-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-error-code
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass job-flow-detail common-lisp:nil
                       ((job-flow-id :initarg :job-flow-id :initform
                         (common-lisp:error ":job-flow-id is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-job-flow-detail-job-flow-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-job-flow-detail-name :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-uri :initarg :log-uri :initform common-lisp:nil
                         :type (common-lisp:or xml-string common-lisp:null)
                         :accessor struct-shape-job-flow-detail-log-uri :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-encryption-kms-key-id :initarg
                         :log-encryption-kms-key-id :initform common-lisp:nil
                         :type (common-lisp:or xml-string common-lisp:null)
                         :accessor
                         struct-shape-job-flow-detail-log-encryption-kms-key-id
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ami-version :initarg :ami-version :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-job-flow-detail-ami-version
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-status-detail :initarg
                         :execution-status-detail :initform
                         (common-lisp:error
                          ":execution-status-detail is required")
                         :type
                         (common-lisp:or job-flow-execution-status-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-detail-execution-status-detail
                         :shape "JobFlowExecutionStatusDetail" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (instances :initarg :instances :initform
                         (common-lisp:error ":instances is required") :type
                         (common-lisp:or job-flow-instances-detail
                                         common-lisp:null)
                         :accessor struct-shape-job-flow-detail-instances
                         :shape "JobFlowInstancesDetail" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (steps :initarg :steps :initform common-lisp:nil :type
                         (common-lisp:or step-detail-list common-lisp:null)
                         :accessor struct-shape-job-flow-detail-steps :shape
                         "StepDetailList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bootstrap-actions :initarg :bootstrap-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or bootstrap-action-detail-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-detail-bootstrap-actions :shape
                         "BootstrapActionDetailList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-products :initarg :supported-products
                         :initform common-lisp:nil :type
                         (common-lisp:or supported-products-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-detail-supported-products :shape
                         "SupportedProductsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (visible-to-all-users :initarg :visible-to-all-users
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-job-flow-detail-visible-to-all-users
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-flow-role :initarg :job-flow-role :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-job-flow-detail-job-flow-role :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-role :initarg :service-role :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-job-flow-detail-service-role :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-scaling-role :initarg :auto-scaling-role
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-job-flow-detail-auto-scaling-role :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scale-down-behavior :initarg :scale-down-behavior
                         :initform common-lisp:nil :type
                         (common-lisp:or scale-down-behavior common-lisp:null)
                         :accessor
                         struct-shape-job-flow-detail-scale-down-behavior
                         :shape "ScaleDownBehavior" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-flow-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-flow-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-flow-detail 'make-job-flow-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-flow-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-flow-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-flow-id))
      (common-lisp:list
       (common-lisp:cons "JobFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-encryption-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "LogEncryptionKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-version))
      (common-lisp:list
       (common-lisp:cons "AmiVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-status-detail))
      (common-lisp:list
       (common-lisp:cons "ExecutionStatusDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "Steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bootstrap-actions))
      (common-lisp:list
       (common-lisp:cons "BootstrapActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-products))
      (common-lisp:list
       (common-lisp:cons "SupportedProducts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'visible-to-all-users))
      (common-lisp:list
       (common-lisp:cons "VisibleToAllUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-flow-role))
      (common-lisp:list
       (common-lisp:cons "JobFlowRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-role))
      (common-lisp:list
       (common-lisp:cons "AutoScalingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale-down-behavior))
      (common-lisp:list
       (common-lisp:cons "ScaleDownBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-flow-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-flow-detail-list ()
   '(trivial-types:proper-list job-flow-detail))
 (common-lisp:defun make-job-flow-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-flow-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-flow-execution-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-flow-execution-state-list ()
   '(trivial-types:proper-list job-flow-execution-state))
 (common-lisp:defun make-job-flow-execution-state-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            job-flow-execution-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job-flow-execution-status-detail common-lisp:nil
                       ((state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or job-flow-execution-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-execution-status-detail-state
                         :shape "JobFlowExecutionState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creation-date-time is required")
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-job-flow-execution-status-detail-creation-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-date-time :initarg :start-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-job-flow-execution-status-detail-start-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ready-date-time :initarg :ready-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-job-flow-execution-status-detail-ready-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-job-flow-execution-status-detail-end-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-state-change-reason :initarg
                         :last-state-change-reason :initform common-lisp:nil
                         :type (common-lisp:or xml-string common-lisp:null)
                         :accessor
                         struct-shape-job-flow-execution-status-detail-last-state-change-reason
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-flow-execution-status-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'job-flow-execution-status-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-flow-execution-status-detail
                    'make-job-flow-execution-status-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-flow-execution-status-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-flow-execution-status-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "StartDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ready-date-time))
      (common-lisp:list
       (common-lisp:cons "ReadyDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "EndDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-state-change-reason))
      (common-lisp:list
       (common-lisp:cons "LastStateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-flow-execution-status-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-flow-instances-config common-lisp:nil
                       ((master-instance-type :initarg :master-instance-type
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-config-master-instance-type
                         :shape "InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slave-instance-type :initarg :slave-instance-type
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-config-slave-instance-type
                         :shape "InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-count :initarg :instance-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-job-flow-instances-config-instance-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-groups :initarg :instance-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-group-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-config-instance-groups
                         :shape "InstanceGroupConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (instance-fleets :initarg :instance-fleets :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-fleet-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-config-instance-fleets
                         :shape "InstanceFleetConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ec2key-name :initarg :ec2key-name :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-config-ec2key-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (placement :initarg :placement :initform
                         common-lisp:nil :type
                         (common-lisp:or placement-type common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-config-placement
                         :shape "PlacementType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (keep-job-flow-alive-when-no-steps :initarg
                         :keep-job-flow-alive-when-no-steps :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-job-flow-instances-config-keep-job-flow-alive-when-no-steps
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (termination-protected :initarg :termination-protected
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-job-flow-instances-config-termination-protected
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unhealthy-node-replacement :initarg
                         :unhealthy-node-replacement :initform common-lisp:nil
                         :type (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-config-unhealthy-node-replacement
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hadoop-version :initarg :hadoop-version :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-config-hadoop-version
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2subnet-id :initarg :ec2subnet-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-config-ec2subnet-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2subnet-ids :initarg :ec2subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256list
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-config-ec2subnet-ids
                         :shape "XmlStringMaxLen256List" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (emr-managed-master-security-group :initarg
                         :emr-managed-master-security-group :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-config-emr-managed-master-security-group
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (emr-managed-slave-security-group :initarg
                         :emr-managed-slave-security-group :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-config-emr-managed-slave-security-group
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-access-security-group :initarg
                         :service-access-security-group :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-config-service-access-security-group
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-master-security-groups :initarg
                         :additional-master-security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or security-groups-list common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-config-additional-master-security-groups
                         :shape "SecurityGroupsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-slave-security-groups :initarg
                         :additional-slave-security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or security-groups-list common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-config-additional-slave-security-groups
                         :shape "SecurityGroupsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-flow-instances-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-flow-instances-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-flow-instances-config
                    'make-job-flow-instances-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-flow-instances-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-flow-instances-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-instance-type))
      (common-lisp:list
       (common-lisp:cons "MasterInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slave-instance-type))
      (common-lisp:list
       (common-lisp:cons "SlaveInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-groups))
      (common-lisp:list
       (common-lisp:cons "InstanceGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-fleets))
      (common-lisp:list
       (common-lisp:cons "InstanceFleets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2key-name))
      (common-lisp:list
       (common-lisp:cons "Ec2KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement))
      (common-lisp:list
       (common-lisp:cons "Placement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'keep-job-flow-alive-when-no-steps))
      (common-lisp:list
       (common-lisp:cons "KeepJobFlowAliveWhenNoSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-protected))
      (common-lisp:list
       (common-lisp:cons "TerminationProtected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unhealthy-node-replacement))
      (common-lisp:list
       (common-lisp:cons "UnhealthyNodeReplacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hadoop-version))
      (common-lisp:list
       (common-lisp:cons "HadoopVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2subnet-id))
      (common-lisp:list
       (common-lisp:cons "Ec2SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2subnet-ids))
      (common-lisp:list
       (common-lisp:cons "Ec2SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'emr-managed-master-security-group))
      (common-lisp:list
       (common-lisp:cons "EmrManagedMasterSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'emr-managed-slave-security-group))
      (common-lisp:list
       (common-lisp:cons "EmrManagedSlaveSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-security-group))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-master-security-groups))
      (common-lisp:list
       (common-lisp:cons "AdditionalMasterSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-slave-security-groups))
      (common-lisp:list
       (common-lisp:cons "AdditionalSlaveSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-flow-instances-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-flow-instances-detail common-lisp:nil
                       ((master-instance-type :initarg :master-instance-type
                         :initform
                         (common-lisp:error
                          ":master-instance-type is required")
                         :type (common-lisp:or instance-type common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-detail-master-instance-type
                         :shape "InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-public-dns-name :initarg
                         :master-public-dns-name :initform common-lisp:nil
                         :type (common-lisp:or xml-string common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-detail-master-public-dns-name
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-instance-id :initarg :master-instance-id
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-job-flow-instances-detail-master-instance-id
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slave-instance-type :initarg :slave-instance-type
                         :initform
                         (common-lisp:error ":slave-instance-type is required")
                         :type (common-lisp:or instance-type common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-detail-slave-instance-type
                         :shape "InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-count :initarg :instance-count :initform
                         (common-lisp:error ":instance-count is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-detail-instance-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-groups :initarg :instance-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-group-detail-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-detail-instance-groups
                         :shape "InstanceGroupDetailList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (normalized-instance-hours :initarg
                         :normalized-instance-hours :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-detail-normalized-instance-hours
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2key-name :initarg :ec2key-name :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-detail-ec2key-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2subnet-id :initarg :ec2subnet-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-detail-ec2subnet-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (placement :initarg :placement :initform
                         common-lisp:nil :type
                         (common-lisp:or placement-type common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-detail-placement
                         :shape "PlacementType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (keep-job-flow-alive-when-no-steps :initarg
                         :keep-job-flow-alive-when-no-steps :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-job-flow-instances-detail-keep-job-flow-alive-when-no-steps
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (termination-protected :initarg :termination-protected
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-job-flow-instances-detail-termination-protected
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unhealthy-node-replacement :initarg
                         :unhealthy-node-replacement :initform common-lisp:nil
                         :type (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-detail-unhealthy-node-replacement
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hadoop-version :initarg :hadoop-version :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-flow-instances-detail-hadoop-version
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-flow-instances-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-flow-instances-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-flow-instances-detail
                    'make-job-flow-instances-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-flow-instances-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-flow-instances-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-instance-type))
      (common-lisp:list
       (common-lisp:cons "MasterInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-public-dns-name))
      (common-lisp:list
       (common-lisp:cons "MasterPublicDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-instance-id))
      (common-lisp:list
       (common-lisp:cons "MasterInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slave-instance-type))
      (common-lisp:list
       (common-lisp:cons "SlaveInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-groups))
      (common-lisp:list
       (common-lisp:cons "InstanceGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'normalized-instance-hours))
      (common-lisp:list
       (common-lisp:cons "NormalizedInstanceHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2key-name))
      (common-lisp:list
       (common-lisp:cons "Ec2KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2subnet-id))
      (common-lisp:list
       (common-lisp:cons "Ec2SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement))
      (common-lisp:list
       (common-lisp:cons "Placement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'keep-job-flow-alive-when-no-steps))
      (common-lisp:list
       (common-lisp:cons "KeepJobFlowAliveWhenNoSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-protected))
      (common-lisp:list
       (common-lisp:cons "TerminationProtected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unhealthy-node-replacement))
      (common-lisp:list
       (common-lisp:cons "UnhealthyNodeReplacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hadoop-version))
      (common-lisp:list
       (common-lisp:cons "HadoopVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-flow-instances-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kerberos-attributes common-lisp:nil
                       ((realm :initarg :realm :initform
                         (common-lisp:error ":realm is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-kerberos-attributes-realm
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kdc-admin-password :initarg :kdc-admin-password
                         :initform
                         (common-lisp:error ":kdc-admin-password is required")
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-kerberos-attributes-kdc-admin-password
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cross-realm-trust-principal-password :initarg
                         :cross-realm-trust-principal-password :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-kerberos-attributes-cross-realm-trust-principal-password
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (addomain-join-user :initarg :addomain-join-user
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-kerberos-attributes-addomain-join-user
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (addomain-join-password :initarg
                         :addomain-join-password :initform common-lisp:nil
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-kerberos-attributes-addomain-join-password
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kerberos-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kerberos-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kerberos-attributes 'make-kerberos-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kerberos-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kerberos-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'realm))
      (common-lisp:list
       (common-lisp:cons "Realm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kdc-admin-password))
      (common-lisp:list
       (common-lisp:cons "KdcAdminPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-realm-trust-principal-password))
      (common-lisp:list
       (common-lisp:cons "CrossRealmTrustPrincipalPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addomain-join-user))
      (common-lisp:list
       (common-lisp:cons "ADDomainJoinUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'addomain-join-password))
      (common-lisp:list
       (common-lisp:cons "ADDomainJoinPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kerberos-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass key-value common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-key-value-key :shape "XmlString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-key-value-value :shape "XmlString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-key-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'key-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'key-value 'make-key-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype key-value-list () '(trivial-types:proper-list key-value))
 (common-lisp:defun make-key-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-bootstrap-actions-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-list-bootstrap-actions-input-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-bootstrap-actions-input-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bootstrap-actions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-bootstrap-actions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bootstrap-actions-input
                    'make-list-bootstrap-actions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bootstrap-actions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bootstrap-actions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bootstrap-actions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bootstrap-actions-output common-lisp:nil
                       ((bootstrap-actions :initarg :bootstrap-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or command-list common-lisp:null)
                         :accessor
                         struct-shape-list-bootstrap-actions-output-bootstrap-actions
                         :shape "CommandList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-bootstrap-actions-output-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bootstrap-actions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bootstrap-actions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bootstrap-actions-output
                    'make-list-bootstrap-actions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bootstrap-actions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bootstrap-actions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bootstrap-actions))
      (common-lisp:list
       (common-lisp:cons "BootstrapActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bootstrap-actions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-input common-lisp:nil
                       ((created-after :initarg :created-after :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-list-clusters-input-created-after :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-before :initarg :created-before :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-list-clusters-input-created-before :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-states :initarg :cluster-states :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-state-list common-lisp:null)
                         :accessor
                         struct-shape-list-clusters-input-cluster-states :shape
                         "ClusterStateList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor struct-shape-list-clusters-input-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-clusters-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-clusters-input 'make-list-clusters-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-clusters-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-clusters-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-states))
      (common-lisp:list
       (common-lisp:cons "ClusterStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-clusters-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-output common-lisp:nil
                       ((clusters :initarg :clusters :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-summary-list common-lisp:null)
                         :accessor struct-shape-list-clusters-output-clusters
                         :shape "ClusterSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor struct-shape-list-clusters-output-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-clusters-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-clusters-output 'make-list-clusters-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-clusters-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-clusters-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "Clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-clusters-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instance-fleets-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-list-instance-fleets-input-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-instance-fleets-input-marker :shape
                         "Marker" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-instance-fleets-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-instance-fleets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-instance-fleets-input
                    'make-list-instance-fleets-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-fleets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-fleets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-fleets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instance-fleets-output common-lisp:nil
                       ((instance-fleets :initarg :instance-fleets :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-fleet-list common-lisp:null)
                         :accessor
                         struct-shape-list-instance-fleets-output-instance-fleets
                         :shape "InstanceFleetList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-instance-fleets-output-marker :shape
                         "Marker" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-instance-fleets-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-instance-fleets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-instance-fleets-output
                    'make-list-instance-fleets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-fleets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-fleets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-fleets))
      (common-lisp:list
       (common-lisp:cons "InstanceFleets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-fleets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instance-groups-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-list-instance-groups-input-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-instance-groups-input-marker :shape
                         "Marker" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-instance-groups-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-instance-groups-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-instance-groups-input
                    'make-list-instance-groups-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-groups-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-groups-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instance-groups-output common-lisp:nil
                       ((instance-groups :initarg :instance-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-group-list common-lisp:null)
                         :accessor
                         struct-shape-list-instance-groups-output-instance-groups
                         :shape "InstanceGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-instance-groups-output-marker :shape
                         "Marker" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-instance-groups-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-instance-groups-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-instance-groups-output
                    'make-list-instance-groups-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-groups-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-groups-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-groups))
      (common-lisp:list
       (common-lisp:cons "InstanceGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-groups-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instances-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-list-instances-input-cluster-id :shape
                         "ClusterId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-group-id :initarg :instance-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-group-id common-lisp:null)
                         :accessor
                         struct-shape-list-instances-input-instance-group-id
                         :shape "InstanceGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-group-types :initarg :instance-group-types
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-group-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-instances-input-instance-group-types
                         :shape "InstanceGroupTypeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (instance-fleet-id :initarg :instance-fleet-id
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-fleet-id common-lisp:null)
                         :accessor
                         struct-shape-list-instances-input-instance-fleet-id
                         :shape "InstanceFleetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-fleet-type :initarg :instance-fleet-type
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-fleet-type common-lisp:null)
                         :accessor
                         struct-shape-list-instances-input-instance-fleet-type
                         :shape "InstanceFleetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-states :initarg :instance-states :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-state-list common-lisp:null)
                         :accessor
                         struct-shape-list-instances-input-instance-states
                         :shape "InstanceStateList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor struct-shape-list-instances-input-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-instances-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-instances-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-instances-input 'make-list-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-group-id))
      (common-lisp:list
       (common-lisp:cons "InstanceGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-group-types))
      (common-lisp:list
       (common-lisp:cons "InstanceGroupTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-fleet-id))
      (common-lisp:list
       (common-lisp:cons "InstanceFleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-fleet-type))
      (common-lisp:list
       (common-lisp:cons "InstanceFleetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-states))
      (common-lisp:list
       (common-lisp:cons "InstanceStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instances-output common-lisp:nil
                       ((instances :initarg :instances :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-list common-lisp:null)
                         :accessor struct-shape-list-instances-output-instances
                         :shape "InstanceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor struct-shape-list-instances-output-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-instances-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-instances-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-instances-output 'make-list-instances-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notebook-executions-input common-lisp:nil
                       ((editor-id :initarg :editor-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-notebook-executions-input-editor-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or notebook-execution-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-notebook-executions-input-status
                         :shape "NotebookExecutionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (from :initarg :from :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-list-notebook-executions-input-from
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (to :initarg :to :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-list-notebook-executions-input-to :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-notebook-executions-input-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-engine-id :initarg :execution-engine-id
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-list-notebook-executions-input-execution-engine-id
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-notebook-executions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-notebook-executions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-notebook-executions-input
                    'make-list-notebook-executions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-executions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-executions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'editor-id))
      (common-lisp:list
       (common-lisp:cons "EditorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "To"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-engine-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionEngineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-executions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notebook-executions-output common-lisp:nil
                       ((notebook-executions :initarg :notebook-executions
                         :initform common-lisp:nil :type
                         (common-lisp:or notebook-execution-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-notebook-executions-output-notebook-executions
                         :shape "NotebookExecutionSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-notebook-executions-output-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-notebook-executions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-notebook-executions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-notebook-executions-output
                    'make-list-notebook-executions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-executions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-executions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-executions))
      (common-lisp:list
       (common-lisp:cons "NotebookExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-executions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-release-labels-input common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or release-label-filter common-lisp:null)
                         :accessor
                         struct-shape-list-release-labels-input-filters :shape
                         "ReleaseLabelFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-release-labels-input-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-number common-lisp:null)
                         :accessor
                         struct-shape-list-release-labels-input-max-results
                         :shape "MaxResultsNumber" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-release-labels-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-release-labels-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-release-labels-input
                    'make-list-release-labels-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-release-labels-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-release-labels-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-release-labels-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-release-labels-output common-lisp:nil
                       ((release-labels :initarg :release-labels :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-list-release-labels-output-release-labels
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-release-labels-output-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-release-labels-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-release-labels-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-release-labels-output
                    'make-list-release-labels-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-release-labels-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-release-labels-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-labels))
      (common-lisp:list
       (common-lisp:cons "ReleaseLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-release-labels-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-security-configurations-input common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-security-configurations-input-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-security-configurations-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-security-configurations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-security-configurations-input
                    'make-list-security-configurations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-configurations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-configurations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-configurations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-security-configurations-output common-lisp:nil
                       ((security-configurations :initarg
                         :security-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or security-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-security-configurations-output-security-configurations
                         :shape "SecurityConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-security-configurations-output-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-security-configurations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-security-configurations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-security-configurations-output
                    'make-list-security-configurations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configurations))
      (common-lisp:list
       (common-lisp:cons "SecurityConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-steps-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-list-steps-input-cluster-id :shape
                         "ClusterId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (step-states :initarg :step-states :initform
                         common-lisp:nil :type
                         (common-lisp:or step-state-list common-lisp:null)
                         :accessor struct-shape-list-steps-input-step-states
                         :shape "StepStateList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (step-ids :initarg :step-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or xml-string-list common-lisp:null)
                         :accessor struct-shape-list-steps-input-step-ids
                         :shape "XmlStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor struct-shape-list-steps-input-marker :shape
                         "Marker" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-steps-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-steps-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-steps-input 'make-list-steps-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-steps-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-steps-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-states))
      (common-lisp:list
       (common-lisp:cons "StepStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-ids))
      (common-lisp:list
       (common-lisp:cons "StepIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-steps-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-steps-output common-lisp:nil
                       ((steps :initarg :steps :initform common-lisp:nil :type
                         (common-lisp:or step-summary-list common-lisp:null)
                         :accessor struct-shape-list-steps-output-steps :shape
                         "StepSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor struct-shape-list-steps-output-marker :shape
                         "Marker" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-steps-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-steps-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-steps-output 'make-list-steps-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-steps-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-steps-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "Steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-steps-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-studio-session-mappings-input common-lisp:nil
                       ((studio-id :initarg :studio-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-studio-session-mappings-input-studio-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-type :initarg :identity-type :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-type common-lisp:null)
                         :accessor
                         struct-shape-list-studio-session-mappings-input-identity-type
                         :shape "IdentityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-studio-session-mappings-input-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-studio-session-mappings-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-studio-session-mappings-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-studio-session-mappings-input
                    'make-list-studio-session-mappings-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-session-mappings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-session-mappings-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-id))
      (common-lisp:list
       (common-lisp:cons "StudioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-type))
      (common-lisp:list
       (common-lisp:cons "IdentityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-session-mappings-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-studio-session-mappings-output common-lisp:nil
                       ((session-mappings :initarg :session-mappings :initform
                         common-lisp:nil :type
                         (common-lisp:or session-mapping-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-studio-session-mappings-output-session-mappings
                         :shape "SessionMappingSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-studio-session-mappings-output-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-studio-session-mappings-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-studio-session-mappings-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-studio-session-mappings-output
                    'make-list-studio-session-mappings-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-session-mappings-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-session-mappings-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-mappings))
      (common-lisp:list
       (common-lisp:cons "SessionMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-session-mappings-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-studios-input common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor struct-shape-list-studios-input-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-studios-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-studios-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-studios-input 'make-list-studios-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-studios-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-studios-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-studios-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-studios-output common-lisp:nil
                       ((studios :initarg :studios :initform common-lisp:nil
                         :type
                         (common-lisp:or studio-summary-list common-lisp:null)
                         :accessor struct-shape-list-studios-output-studios
                         :shape "StudioSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor struct-shape-list-studios-output-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-studios-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-studios-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-studios-output 'make-list-studios-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-studios-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-studios-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studios))
      (common-lisp:list
       (common-lisp:cons "Studios"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-studios-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-supported-instance-types-input common-lisp:nil
                       ((release-label :initarg :release-label :initform
                         (common-lisp:error ":release-label is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-supported-instance-types-input-release-label
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-supported-instance-types-input-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-supported-instance-types-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-supported-instance-types-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-supported-instance-types-input
                    'make-list-supported-instance-types-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-supported-instance-types-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-supported-instance-types-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "ReleaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-supported-instance-types-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-supported-instance-types-output common-lisp:nil
                       ((supported-instance-types :initarg
                         :supported-instance-types :initform common-lisp:nil
                         :type
                         (common-lisp:or supported-instance-types-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-supported-instance-types-output-supported-instance-types
                         :shape "SupportedInstanceTypesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-supported-instance-types-output-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-supported-instance-types-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-supported-instance-types-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-supported-instance-types-output
                    'make-list-supported-instance-types-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-supported-instance-types-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-supported-instance-types-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-instance-types))
      (common-lisp:list
       (common-lisp:cons "SupportedInstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-supported-instance-types-output))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass managed-scaling-policy common-lisp:nil
                       ((compute-limits :initarg :compute-limits :initform
                         common-lisp:nil :type
                         (common-lisp:or compute-limits common-lisp:null)
                         :accessor
                         struct-shape-managed-scaling-policy-compute-limits
                         :shape "ComputeLimits" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-managed-scaling-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'managed-scaling-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'managed-scaling-policy 'make-managed-scaling-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-scaling-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-scaling-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-limits))
      (common-lisp:list
       (common-lisp:cons "ComputeLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-scaling-policy))
   common-lisp:nil))
(common-lisp:deftype marker () 'common-lisp:string)
(common-lisp:deftype market-type () 'common-lisp:string)
(common-lisp:deftype max-results-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass metric-dimension common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-metric-dimension-key :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-metric-dimension-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-dimension
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-dimension
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metric-dimension 'make-metric-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-dimension))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-dimension-list ()
   '(trivial-types:proper-list metric-dimension))
 (common-lisp:defun make-metric-dimension-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-dimension))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-input-cluster-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (step-concurrency-level :initarg
                         :step-concurrency-level :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-input-step-concurrency-level
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-cluster-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-input 'make-modify-cluster-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input modify-cluster-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input modify-cluster-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'step-concurrency-level))
      (common-lisp:list
       (common-lisp:cons "StepConcurrencyLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input modify-cluster-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-output common-lisp:nil
                       ((step-concurrency-level :initarg
                         :step-concurrency-level :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-output-step-concurrency-level
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-cluster-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-output 'make-modify-cluster-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'step-concurrency-level))
      (common-lisp:list
       (common-lisp:cons "StepConcurrencyLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-instance-fleet-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-modify-instance-fleet-input-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-fleet :initarg :instance-fleet :initform
                         (common-lisp:error ":instance-fleet is required")
                         :type
                         (common-lisp:or instance-fleet-modify-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-instance-fleet-input-instance-fleet
                         :shape "InstanceFleetModifyConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-instance-fleet-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-instance-fleet-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-instance-fleet-input
                    'make-modify-instance-fleet-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-fleet-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-fleet-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-fleet))
      (common-lisp:list
       (common-lisp:cons "InstanceFleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-fleet-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-instance-groups-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-modify-instance-groups-input-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-groups :initarg :instance-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-group-modify-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-instance-groups-input-instance-groups
                         :shape "InstanceGroupModifyConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-instance-groups-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-instance-groups-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-instance-groups-input
                    'make-modify-instance-groups-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-groups-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-groups))
      (common-lisp:list
       (common-lisp:cons "InstanceGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-groups-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype new-supported-products-list ()
   '(trivial-types:proper-list supported-product-config))
 (common-lisp:defun make-new-supported-products-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            supported-product-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype non-negative-double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass notebook-execution common-lisp:nil
                       ((notebook-execution-id :initarg :notebook-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-notebook-execution-notebook-execution-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (editor-id :initarg :editor-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-notebook-execution-editor-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-engine :initarg :execution-engine :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-engine-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-notebook-execution-execution-engine
                         :shape "ExecutionEngineConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (notebook-execution-name :initarg
                         :notebook-execution-name :initform common-lisp:nil
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-notebook-execution-notebook-execution-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notebook-params :initarg :notebook-params :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-notebook-execution-notebook-params :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or notebook-execution-status
                                         common-lisp:null)
                         :accessor struct-shape-notebook-execution-status
                         :shape "NotebookExecutionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-notebook-execution-start-time :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-notebook-execution-end-time :shape "Date"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-notebook-execution-arn :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-notebook-uri :initarg :output-notebook-uri
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-notebook-execution-output-notebook-uri
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-state-change-reason :initarg
                         :last-state-change-reason :initform common-lisp:nil
                         :type (common-lisp:or xml-string common-lisp:null)
                         :accessor
                         struct-shape-notebook-execution-last-state-change-reason
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notebook-instance-security-group-id :initarg
                         :notebook-instance-security-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-notebook-execution-notebook-instance-security-group-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-notebook-execution-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (notebook-s3location :initarg :notebook-s3location
                         :initform common-lisp:nil :type
                         (common-lisp:or notebook-s3location-for-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-notebook-execution-notebook-s3location
                         :shape "NotebookS3LocationForOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-notebook-s3location :initarg
                         :output-notebook-s3location :initform common-lisp:nil
                         :type
                         (common-lisp:or output-notebook-s3location-for-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-notebook-execution-output-notebook-s3location
                         :shape "OutputNotebookS3LocationForOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-notebook-format :initarg
                         :output-notebook-format :initform common-lisp:nil
                         :type
                         (common-lisp:or output-notebook-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-notebook-execution-output-notebook-format
                         :shape "OutputNotebookFormat" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (environment-variables :initarg :environment-variables
                         :initform common-lisp:nil :type
                         (common-lisp:or environment-variables-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-notebook-execution-environment-variables
                         :shape "EnvironmentVariablesMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notebook-execution
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notebook-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notebook-execution 'make-notebook-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notebook-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notebook-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-execution-id))
      (common-lisp:list
       (common-lisp:cons "NotebookExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'editor-id))
      (common-lisp:list
       (common-lisp:cons "EditorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-engine))
      (common-lisp:list
       (common-lisp:cons "ExecutionEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-execution-name))
      (common-lisp:list
       (common-lisp:cons "NotebookExecutionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-params))
      (common-lisp:list
       (common-lisp:cons "NotebookParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-notebook-uri))
      (common-lisp:list
       (common-lisp:cons "OutputNotebookURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-state-change-reason))
      (common-lisp:list
       (common-lisp:cons "LastStateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-security-group-id))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-s3location))
      (common-lisp:list
       (common-lisp:cons "NotebookS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-notebook-s3location))
      (common-lisp:list
       (common-lisp:cons "OutputNotebookS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-notebook-format))
      (common-lisp:list
       (common-lisp:cons "OutputNotebookFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-variables))
      (common-lisp:list
       (common-lisp:cons "EnvironmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notebook-execution))
   common-lisp:nil))
(common-lisp:deftype notebook-execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notebook-execution-summary common-lisp:nil
                       ((notebook-execution-id :initarg :notebook-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-notebook-execution-summary-notebook-execution-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (editor-id :initarg :editor-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-notebook-execution-summary-editor-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notebook-execution-name :initarg
                         :notebook-execution-name :initform common-lisp:nil
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-notebook-execution-summary-notebook-execution-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or notebook-execution-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-notebook-execution-summary-status :shape
                         "NotebookExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-notebook-execution-summary-start-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-notebook-execution-summary-end-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (notebook-s3location :initarg :notebook-s3location
                         :initform common-lisp:nil :type
                         (common-lisp:or notebook-s3location-for-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-notebook-execution-summary-notebook-s3location
                         :shape "NotebookS3LocationForOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-engine-id :initarg :execution-engine-id
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-notebook-execution-summary-execution-engine-id
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notebook-execution-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notebook-execution-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notebook-execution-summary
                    'make-notebook-execution-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notebook-execution-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notebook-execution-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-execution-id))
      (common-lisp:list
       (common-lisp:cons "NotebookExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'editor-id))
      (common-lisp:list
       (common-lisp:cons "EditorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-execution-name))
      (common-lisp:list
       (common-lisp:cons "NotebookExecutionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-s3location))
      (common-lisp:list
       (common-lisp:cons "NotebookS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-engine-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionEngineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notebook-execution-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notebook-execution-summary-list ()
   '(trivial-types:proper-list notebook-execution-summary))
 (common-lisp:defun make-notebook-execution-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notebook-execution-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass notebook-s3location-for-output common-lisp:nil
                       ((bucket :initarg :bucket :initform common-lisp:nil
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-notebook-s3location-for-output-bucket
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or uri-string common-lisp:null) :accessor
                         struct-shape-notebook-s3location-for-output-key :shape
                         "UriString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notebook-s3location-for-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'notebook-s3location-for-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notebook-s3location-for-output
                    'make-notebook-s3location-for-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notebook-s3location-for-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notebook-s3location-for-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notebook-s3location-for-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass notebook-s3location-from-input common-lisp:nil
                       ((bucket :initarg :bucket :initform common-lisp:nil
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-notebook-s3location-from-input-bucket
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or uri-string common-lisp:null) :accessor
                         struct-shape-notebook-s3location-from-input-key :shape
                         "UriString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notebook-s3location-from-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'notebook-s3location-from-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notebook-s3location-from-input
                    'make-notebook-s3location-from-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notebook-s3location-from-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notebook-s3location-from-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notebook-s3location-from-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass osrelease common-lisp:nil
                       ((label :initarg :label :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-osrelease-label :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-osrelease
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'osrelease
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'osrelease 'make-osrelease))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input osrelease))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input osrelease))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input osrelease))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype osrelease-list () '(trivial-types:proper-list osrelease))
 (common-lisp:defun make-osrelease-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list osrelease))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass on-demand-capacity-reservation-options common-lisp:nil
                       ((usage-strategy :initarg :usage-strategy :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          on-demand-capacity-reservation-usage-strategy
                          common-lisp:null)
                         :accessor
                         struct-shape-on-demand-capacity-reservation-options-usage-strategy
                         :shape "OnDemandCapacityReservationUsageStrategy"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (capacity-reservation-preference :initarg
                         :capacity-reservation-preference :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          on-demand-capacity-reservation-preference
                          common-lisp:null)
                         :accessor
                         struct-shape-on-demand-capacity-reservation-options-capacity-reservation-preference
                         :shape "OnDemandCapacityReservationPreference"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (capacity-reservation-resource-group-arn :initarg
                         :capacity-reservation-resource-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-on-demand-capacity-reservation-options-capacity-reservation-resource-group-arn
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-on-demand-capacity-reservation-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'on-demand-capacity-reservation-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'on-demand-capacity-reservation-options
                    'make-on-demand-capacity-reservation-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          on-demand-capacity-reservation-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          on-demand-capacity-reservation-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-strategy))
      (common-lisp:list
       (common-lisp:cons "UsageStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation-preference))
      (common-lisp:list
       (common-lisp:cons "CapacityReservationPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation-resource-group-arn))
      (common-lisp:list
       (common-lisp:cons "CapacityReservationResourceGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          on-demand-capacity-reservation-options))
   common-lisp:nil))
(common-lisp:deftype on-demand-capacity-reservation-preference ()
  'common-lisp:string)
(common-lisp:deftype on-demand-capacity-reservation-usage-strategy ()
  'common-lisp:string)
(common-lisp:deftype on-demand-provisioning-allocation-strategy ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass on-demand-provisioning-specification common-lisp:nil
                       ((allocation-strategy :initarg :allocation-strategy
                         :initform
                         (common-lisp:error ":allocation-strategy is required")
                         :type
                         (common-lisp:or
                          on-demand-provisioning-allocation-strategy
                          common-lisp:null)
                         :accessor
                         struct-shape-on-demand-provisioning-specification-allocation-strategy
                         :shape "OnDemandProvisioningAllocationStrategy"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (capacity-reservation-options :initarg
                         :capacity-reservation-options :initform
                         common-lisp:nil :type
                         (common-lisp:or on-demand-capacity-reservation-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-on-demand-provisioning-specification-capacity-reservation-options
                         :shape "OnDemandCapacityReservationOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-on-demand-provisioning-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'on-demand-provisioning-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'on-demand-provisioning-specification
                    'make-on-demand-provisioning-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          on-demand-provisioning-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          on-demand-provisioning-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-strategy))
      (common-lisp:list
       (common-lisp:cons "AllocationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation-options))
      (common-lisp:list
       (common-lisp:cons "CapacityReservationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          on-demand-provisioning-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass on-demand-resizing-specification common-lisp:nil
                       ((timeout-duration-minutes :initarg
                         :timeout-duration-minutes :initform
                         (common-lisp:error
                          ":timeout-duration-minutes is required")
                         :type (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         struct-shape-on-demand-resizing-specification-timeout-duration-minutes
                         :shape "WholeNumber" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-on-demand-resizing-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'on-demand-resizing-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'on-demand-resizing-specification
                    'make-on-demand-resizing-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          on-demand-resizing-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          on-demand-resizing-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timeout-duration-minutes))
      (common-lisp:list
       (common-lisp:cons "TimeoutDurationMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          on-demand-resizing-specification))
   common-lisp:nil))
(common-lisp:deftype optional-arn-type () 'common-lisp:string)
(common-lisp:deftype output-notebook-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output-notebook-s3location-for-output common-lisp:nil
                       ((bucket :initarg :bucket :initform common-lisp:nil
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-notebook-s3location-for-output-bucket
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or uri-string common-lisp:null) :accessor
                         struct-shape-output-notebook-s3location-for-output-key
                         :shape "UriString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-notebook-s3location-for-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'output-notebook-s3location-for-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'output-notebook-s3location-for-output
                    'make-output-notebook-s3location-for-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          output-notebook-s3location-for-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          output-notebook-s3location-for-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          output-notebook-s3location-for-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-notebook-s3location-from-input common-lisp:nil
                       ((bucket :initarg :bucket :initform common-lisp:nil
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-notebook-s3location-from-input-bucket
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or uri-string common-lisp:null) :accessor
                         struct-shape-output-notebook-s3location-from-input-key
                         :shape "UriString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-notebook-s3location-from-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'output-notebook-s3location-from-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'output-notebook-s3location-from-input
                    'make-output-notebook-s3location-from-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          output-notebook-s3location-from-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          output-notebook-s3location-from-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          output-notebook-s3location-from-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass placement-group-config common-lisp:nil
                       ((instance-role :initarg :instance-role :initform
                         (common-lisp:error ":instance-role is required") :type
                         (common-lisp:or instance-role-type common-lisp:null)
                         :accessor
                         struct-shape-placement-group-config-instance-role
                         :shape "InstanceRoleType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (placement-strategy :initarg :placement-strategy
                         :initform common-lisp:nil :type
                         (common-lisp:or placement-group-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-placement-group-config-placement-strategy
                         :shape "PlacementGroupStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-placement-group-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'placement-group-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'placement-group-config 'make-placement-group-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          placement-group-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          placement-group-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-role))
      (common-lisp:list
       (common-lisp:cons "InstanceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-strategy))
      (common-lisp:list
       (common-lisp:cons "PlacementStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          placement-group-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype placement-group-config-list ()
   '(trivial-types:proper-list placement-group-config))
 (common-lisp:defun make-placement-group-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list placement-group-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype placement-group-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass placement-type common-lisp:nil
                       ((availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-placement-type-availability-zone :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256list
                                         common-lisp:null)
                         :accessor
                         struct-shape-placement-type-availability-zones :shape
                         "XmlStringMaxLen256List" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-placement-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'placement-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'placement-type 'make-placement-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input placement-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input placement-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input placement-type))
   common-lisp:nil))
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass port-range common-lisp:nil
                       ((min-range :initarg :min-range :initform
                         (common-lisp:error ":min-range is required") :type
                         (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-port-range-min-range :shape "Port"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-range :initarg :max-range :initform
                         common-lisp:nil :type
                         (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-port-range-max-range :shape "Port"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-port-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'port-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'port-range 'make-port-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-range))
      (common-lisp:list
       (common-lisp:cons "MinRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-range))
      (common-lisp:list
       (common-lisp:cons "MaxRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-ranges () '(trivial-types:proper-list port-range))
 (common-lisp:defun make-port-ranges
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-auto-scaling-policy-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-put-auto-scaling-policy-input-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-group-id :initarg :instance-group-id
                         :initform
                         (common-lisp:error ":instance-group-id is required")
                         :type
                         (common-lisp:or instance-group-id common-lisp:null)
                         :accessor
                         struct-shape-put-auto-scaling-policy-input-instance-group-id
                         :shape "InstanceGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-scaling-policy :initarg :auto-scaling-policy
                         :initform
                         (common-lisp:error ":auto-scaling-policy is required")
                         :type
                         (common-lisp:or auto-scaling-policy common-lisp:null)
                         :accessor
                         struct-shape-put-auto-scaling-policy-input-auto-scaling-policy
                         :shape "AutoScalingPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-auto-scaling-policy-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-auto-scaling-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-auto-scaling-policy-input
                    'make-put-auto-scaling-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-auto-scaling-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-auto-scaling-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-group-id))
      (common-lisp:list
       (common-lisp:cons "InstanceGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-policy))
      (common-lisp:list
       (common-lisp:cons "AutoScalingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-auto-scaling-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-auto-scaling-policy-output common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-put-auto-scaling-policy-output-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-group-id :initarg :instance-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-group-id common-lisp:null)
                         :accessor
                         struct-shape-put-auto-scaling-policy-output-instance-group-id
                         :shape "InstanceGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-scaling-policy :initarg :auto-scaling-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-scaling-policy-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-auto-scaling-policy-output-auto-scaling-policy
                         :shape "AutoScalingPolicyDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-put-auto-scaling-policy-output-cluster-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-auto-scaling-policy-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-auto-scaling-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-auto-scaling-policy-output
                    'make-put-auto-scaling-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-auto-scaling-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-auto-scaling-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-group-id))
      (common-lisp:list
       (common-lisp:cons "InstanceGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-policy))
      (common-lisp:list
       (common-lisp:cons "AutoScalingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-auto-scaling-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-auto-termination-policy-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-put-auto-termination-policy-input-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-termination-policy :initarg
                         :auto-termination-policy :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-termination-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-auto-termination-policy-input-auto-termination-policy
                         :shape "AutoTerminationPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-auto-termination-policy-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-auto-termination-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-auto-termination-policy-input
                    'make-put-auto-termination-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-auto-termination-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-auto-termination-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-termination-policy))
      (common-lisp:list
       (common-lisp:cons "AutoTerminationPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-auto-termination-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-auto-termination-policy-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-auto-termination-policy-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-auto-termination-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-auto-termination-policy-output
                    'make-put-auto-termination-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-auto-termination-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-auto-termination-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-auto-termination-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-block-public-access-configuration-input
                       common-lisp:nil
                       ((block-public-access-configuration :initarg
                         :block-public-access-configuration :initform
                         (common-lisp:error
                          ":block-public-access-configuration is required")
                         :type
                         (common-lisp:or block-public-access-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-block-public-access-configuration-input-block-public-access-configuration
                         :shape "BlockPublicAccessConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-block-public-access-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-block-public-access-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-block-public-access-configuration-input
                    'make-put-block-public-access-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-block-public-access-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-block-public-access-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-public-access-configuration))
      (common-lisp:list
       (common-lisp:cons "BlockPublicAccessConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-block-public-access-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-block-public-access-configuration-output
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-block-public-access-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-block-public-access-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-block-public-access-configuration-output
                    'make-put-block-public-access-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-block-public-access-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-block-public-access-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-block-public-access-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-managed-scaling-policy-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-put-managed-scaling-policy-input-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (managed-scaling-policy :initarg
                         :managed-scaling-policy :initform
                         (common-lisp:error
                          ":managed-scaling-policy is required")
                         :type
                         (common-lisp:or managed-scaling-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-managed-scaling-policy-input-managed-scaling-policy
                         :shape "ManagedScalingPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-managed-scaling-policy-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-managed-scaling-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-managed-scaling-policy-input
                    'make-put-managed-scaling-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-managed-scaling-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-managed-scaling-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-scaling-policy))
      (common-lisp:list
       (common-lisp:cons "ManagedScalingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-managed-scaling-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-managed-scaling-policy-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-managed-scaling-policy-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-managed-scaling-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-managed-scaling-policy-output
                    'make-put-managed-scaling-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-managed-scaling-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-managed-scaling-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-managed-scaling-policy-output))
   common-lisp:nil))
(common-lisp:deftype reconfiguration-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass release-label-filter common-lisp:nil
                       ((prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-release-label-filter-prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (application :initarg :application :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-release-label-filter-application :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-release-label-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'release-label-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'release-label-filter 'make-release-label-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input release-label-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input release-label-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "Application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input release-label-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-auto-scaling-policy-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-remove-auto-scaling-policy-input-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-group-id :initarg :instance-group-id
                         :initform
                         (common-lisp:error ":instance-group-id is required")
                         :type
                         (common-lisp:or instance-group-id common-lisp:null)
                         :accessor
                         struct-shape-remove-auto-scaling-policy-input-instance-group-id
                         :shape "InstanceGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-auto-scaling-policy-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-auto-scaling-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-auto-scaling-policy-input
                    'make-remove-auto-scaling-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-auto-scaling-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-auto-scaling-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-group-id))
      (common-lisp:list
       (common-lisp:cons "InstanceGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-auto-scaling-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-auto-scaling-policy-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-auto-scaling-policy-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-auto-scaling-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-auto-scaling-policy-output
                    'make-remove-auto-scaling-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-auto-scaling-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-auto-scaling-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-auto-scaling-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-auto-termination-policy-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-remove-auto-termination-policy-input-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-auto-termination-policy-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-auto-termination-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-auto-termination-policy-input
                    'make-remove-auto-termination-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-auto-termination-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-auto-termination-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-auto-termination-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-auto-termination-policy-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-auto-termination-policy-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-auto-termination-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-auto-termination-policy-output
                    'make-remove-auto-termination-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-auto-termination-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-auto-termination-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-auto-termination-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-managed-scaling-policy-input common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-remove-managed-scaling-policy-input-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-managed-scaling-policy-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-managed-scaling-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-managed-scaling-policy-input
                    'make-remove-managed-scaling-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-managed-scaling-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-managed-scaling-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-managed-scaling-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-managed-scaling-policy-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-managed-scaling-policy-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-managed-scaling-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-managed-scaling-policy-output
                    'make-remove-managed-scaling-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-managed-scaling-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-managed-scaling-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-managed-scaling-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-input common-lisp:nil
                       ((resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-remove-tags-input-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-remove-tags-input-tag-keys
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-tags-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-tags-input 'make-remove-tags-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-tags-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-tags-output 'make-remove-tags-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-output))
   common-lisp:nil))
(common-lisp:deftype repo-upgrade-on-boot () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass run-job-flow-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-run-job-flow-input-name :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-uri :initarg :log-uri :initform common-lisp:nil
                         :type (common-lisp:or xml-string common-lisp:null)
                         :accessor struct-shape-run-job-flow-input-log-uri
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-encryption-kms-key-id :initarg
                         :log-encryption-kms-key-id :initform common-lisp:nil
                         :type (common-lisp:or xml-string common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-log-encryption-kms-key-id
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-info :initarg :additional-info :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-run-job-flow-input-additional-info :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ami-version :initarg :ami-version :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-run-job-flow-input-ami-version
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (release-label :initarg :release-label :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-release-label :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instances :initarg :instances :initform
                         (common-lisp:error ":instances is required") :type
                         (common-lisp:or job-flow-instances-config
                                         common-lisp:null)
                         :accessor struct-shape-run-job-flow-input-instances
                         :shape "JobFlowInstancesConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (steps :initarg :steps :initform common-lisp:nil :type
                         (common-lisp:or step-config-list common-lisp:null)
                         :accessor struct-shape-run-job-flow-input-steps :shape
                         "StepConfigList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bootstrap-actions :initarg :bootstrap-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or bootstrap-action-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-bootstrap-actions
                         :shape "BootstrapActionConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (supported-products :initarg :supported-products
                         :initform common-lisp:nil :type
                         (common-lisp:or supported-products-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-supported-products
                         :shape "SupportedProductsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (new-supported-products :initarg
                         :new-supported-products :initform common-lisp:nil
                         :type
                         (common-lisp:or new-supported-products-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-new-supported-products
                         :shape "NewSupportedProductsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (applications :initarg :applications :initform
                         common-lisp:nil :type
                         (common-lisp:or application-list common-lisp:null)
                         :accessor struct-shape-run-job-flow-input-applications
                         :shape "ApplicationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configurations :initarg :configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-list common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-configurations :shape
                         "ConfigurationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (visible-to-all-users :initarg :visible-to-all-users
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-run-job-flow-input-visible-to-all-users
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-flow-role :initarg :job-flow-role :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-run-job-flow-input-job-flow-role :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-role :initarg :service-role :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-run-job-flow-input-service-role :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-run-job-flow-input-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type (common-lisp:or xml-string common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-security-configuration
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-scaling-role :initarg :auto-scaling-role
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-run-job-flow-input-auto-scaling-role
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scale-down-behavior :initarg :scale-down-behavior
                         :initform common-lisp:nil :type
                         (common-lisp:or scale-down-behavior common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-scale-down-behavior
                         :shape "ScaleDownBehavior" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-ami-id :initarg :custom-ami-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-custom-ami-id :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-root-volume-size :initarg :ebs-root-volume-size
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-run-job-flow-input-ebs-root-volume-size
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repo-upgrade-on-boot :initarg :repo-upgrade-on-boot
                         :initform common-lisp:nil :type
                         (common-lisp:or repo-upgrade-on-boot common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-repo-upgrade-on-boot
                         :shape "RepoUpgradeOnBoot" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kerberos-attributes :initarg :kerberos-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or kerberos-attributes common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-kerberos-attributes
                         :shape "KerberosAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (step-concurrency-level :initarg
                         :step-concurrency-level :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-step-concurrency-level
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (managed-scaling-policy :initarg
                         :managed-scaling-policy :initform common-lisp:nil
                         :type
                         (common-lisp:or managed-scaling-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-managed-scaling-policy
                         :shape "ManagedScalingPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (placement-group-configs :initarg
                         :placement-group-configs :initform common-lisp:nil
                         :type
                         (common-lisp:or placement-group-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-placement-group-configs
                         :shape "PlacementGroupConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auto-termination-policy :initarg
                         :auto-termination-policy :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-termination-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-auto-termination-policy
                         :shape "AutoTerminationPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (osrelease-label :initarg :osrelease-label :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-osrelease-label :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-root-volume-iops :initarg :ebs-root-volume-iops
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-run-job-flow-input-ebs-root-volume-iops
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-root-volume-throughput :initarg
                         :ebs-root-volume-throughput :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-run-job-flow-input-ebs-root-volume-throughput
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-run-job-flow-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'run-job-flow-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'run-job-flow-input 'make-run-job-flow-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input run-job-flow-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input run-job-flow-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-encryption-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "LogEncryptionKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "AdditionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-version))
      (common-lisp:list
       (common-lisp:cons "AmiVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "ReleaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "Steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bootstrap-actions))
      (common-lisp:list
       (common-lisp:cons "BootstrapActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-products))
      (common-lisp:list
       (common-lisp:cons "SupportedProducts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-supported-products))
      (common-lisp:list
       (common-lisp:cons "NewSupportedProducts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "Configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'visible-to-all-users))
      (common-lisp:list
       (common-lisp:cons "VisibleToAllUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-flow-role))
      (common-lisp:list
       (common-lisp:cons "JobFlowRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-role))
      (common-lisp:list
       (common-lisp:cons "AutoScalingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale-down-behavior))
      (common-lisp:list
       (common-lisp:cons "ScaleDownBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-ami-id))
      (common-lisp:list
       (common-lisp:cons "CustomAmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-root-volume-size))
      (common-lisp:list
       (common-lisp:cons "EbsRootVolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repo-upgrade-on-boot))
      (common-lisp:list
       (common-lisp:cons "RepoUpgradeOnBoot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kerberos-attributes))
      (common-lisp:list
       (common-lisp:cons "KerberosAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'step-concurrency-level))
      (common-lisp:list
       (common-lisp:cons "StepConcurrencyLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-scaling-policy))
      (common-lisp:list
       (common-lisp:cons "ManagedScalingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-group-configs))
      (common-lisp:list
       (common-lisp:cons "PlacementGroupConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-termination-policy))
      (common-lisp:list
       (common-lisp:cons "AutoTerminationPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'osrelease-label))
      (common-lisp:list
       (common-lisp:cons "OSReleaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-root-volume-iops))
      (common-lisp:list
       (common-lisp:cons "EbsRootVolumeIops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-root-volume-throughput))
      (common-lisp:list
       (common-lisp:cons "EbsRootVolumeThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input run-job-flow-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass run-job-flow-output common-lisp:nil
                       ((job-flow-id :initarg :job-flow-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-run-job-flow-output-job-flow-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-run-job-flow-output-cluster-arn :shape
                         "ArnType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-run-job-flow-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'run-job-flow-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'run-job-flow-output 'make-run-job-flow-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input run-job-flow-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input run-job-flow-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-flow-id))
      (common-lisp:list
       (common-lisp:cons "JobFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input run-job-flow-output))
   common-lisp:nil))
(common-lisp:deftype scale-down-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scaling-action common-lisp:nil
                       ((market :initarg :market :initform common-lisp:nil
                         :type (common-lisp:or market-type common-lisp:null)
                         :accessor struct-shape-scaling-action-market :shape
                         "MarketType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (simple-scaling-policy-configuration :initarg
                         :simple-scaling-policy-configuration :initform
                         (common-lisp:error
                          ":simple-scaling-policy-configuration is required")
                         :type
                         (common-lisp:or simple-scaling-policy-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-scaling-action-simple-scaling-policy-configuration
                         :shape "SimpleScalingPolicyConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scaling-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scaling-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scaling-action 'make-scaling-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scaling-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scaling-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'market))
      (common-lisp:list
       (common-lisp:cons "Market"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simple-scaling-policy-configuration))
      (common-lisp:list
       (common-lisp:cons "SimpleScalingPolicyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scaling-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scaling-constraints common-lisp:nil
                       ((min-capacity :initarg :min-capacity :initform
                         (common-lisp:error ":min-capacity is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-scaling-constraints-min-capacity :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         (common-lisp:error ":max-capacity is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-scaling-constraints-max-capacity :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scaling-constraints
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scaling-constraints
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scaling-constraints 'make-scaling-constraints))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scaling-constraints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scaling-constraints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity))
      (common-lisp:list
       (common-lisp:cons "MinCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scaling-constraints))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scaling-rule common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-scaling-rule-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-scaling-rule-description :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or scaling-action common-lisp:null)
                         :accessor struct-shape-scaling-rule-action :shape
                         "ScalingAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trigger :initarg :trigger :initform
                         (common-lisp:error ":trigger is required") :type
                         (common-lisp:or scaling-trigger common-lisp:null)
                         :accessor struct-shape-scaling-rule-trigger :shape
                         "ScalingTrigger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scaling-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scaling-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scaling-rule 'make-scaling-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scaling-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scaling-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger))
      (common-lisp:list
       (common-lisp:cons "Trigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scaling-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scaling-rule-list ()
   '(trivial-types:proper-list scaling-rule))
 (common-lisp:defun make-scaling-rule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scaling-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass scaling-trigger common-lisp:nil
                       ((cloud-watch-alarm-definition :initarg
                         :cloud-watch-alarm-definition :initform
                         (common-lisp:error
                          ":cloud-watch-alarm-definition is required")
                         :type
                         (common-lisp:or cloud-watch-alarm-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-scaling-trigger-cloud-watch-alarm-definition
                         :shape "CloudWatchAlarmDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scaling-trigger
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scaling-trigger
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scaling-trigger 'make-scaling-trigger))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scaling-trigger))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scaling-trigger))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-alarm-definition))
      (common-lisp:list
       (common-lisp:cons "CloudWatchAlarmDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scaling-trigger))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass script-bootstrap-action-config common-lisp:nil
                       ((path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-script-bootstrap-action-config-path
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (args :initarg :args :initform common-lisp:nil :type
                         (common-lisp:or xml-string-list common-lisp:null)
                         :accessor
                         struct-shape-script-bootstrap-action-config-args
                         :shape "XmlStringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-script-bootstrap-action-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'script-bootstrap-action-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'script-bootstrap-action-config
                    'make-script-bootstrap-action-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          script-bootstrap-action-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          script-bootstrap-action-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'args))
      (common-lisp:list
       (common-lisp:cons "Args"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          script-bootstrap-action-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-configuration-list ()
   '(trivial-types:proper-list security-configuration-summary))
 (common-lisp:defun make-security-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-configuration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass security-configuration-summary common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-security-configuration-summary-name
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-security-configuration-summary-creation-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-security-configuration-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'security-configuration-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'security-configuration-summary
                    'make-security-configuration-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-groups-list ()
   '(trivial-types:proper-list xml-string-max-len256))
 (common-lisp:defun make-security-groups-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass session-mapping-detail common-lisp:nil
                       ((studio-id :initarg :studio-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-mapping-detail-studio-id :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-mapping-detail-identity-id :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-name :initarg :identity-name :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-mapping-detail-identity-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-type :initarg :identity-type :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-type common-lisp:null)
                         :accessor
                         struct-shape-session-mapping-detail-identity-type
                         :shape "IdentityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-policy-arn :initarg :session-policy-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-mapping-detail-session-policy-arn
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-session-mapping-detail-creation-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-session-mapping-detail-last-modified-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session-mapping-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'session-mapping-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'session-mapping-detail 'make-session-mapping-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-mapping-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-mapping-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-id))
      (common-lisp:list
       (common-lisp:cons "StudioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-name))
      (common-lisp:list
       (common-lisp:cons "IdentityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-type))
      (common-lisp:list
       (common-lisp:cons "IdentityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-policy-arn))
      (common-lisp:list
       (common-lisp:cons "SessionPolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-mapping-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass session-mapping-summary common-lisp:nil
                       ((studio-id :initarg :studio-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-mapping-summary-studio-id :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-mapping-summary-identity-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-name :initarg :identity-name :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-mapping-summary-identity-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-type :initarg :identity-type :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-type common-lisp:null)
                         :accessor
                         struct-shape-session-mapping-summary-identity-type
                         :shape "IdentityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-policy-arn :initarg :session-policy-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-mapping-summary-session-policy-arn
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-session-mapping-summary-creation-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session-mapping-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'session-mapping-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'session-mapping-summary 'make-session-mapping-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-mapping-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-mapping-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-id))
      (common-lisp:list
       (common-lisp:cons "StudioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-name))
      (common-lisp:list
       (common-lisp:cons "IdentityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-type))
      (common-lisp:list
       (common-lisp:cons "IdentityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-policy-arn))
      (common-lisp:list
       (common-lisp:cons "SessionPolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-mapping-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype session-mapping-summary-list ()
   '(trivial-types:proper-list session-mapping-summary))
 (common-lisp:defun make-session-mapping-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list session-mapping-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass set-keep-job-flow-alive-when-no-steps-input
                       common-lisp:nil
                       ((job-flow-ids :initarg :job-flow-ids :initform
                         (common-lisp:error ":job-flow-ids is required") :type
                         (common-lisp:or xml-string-list common-lisp:null)
                         :accessor
                         struct-shape-set-keep-job-flow-alive-when-no-steps-input-job-flow-ids
                         :shape "XmlStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (keep-job-flow-alive-when-no-steps :initarg
                         :keep-job-flow-alive-when-no-steps :initform
                         (common-lisp:error
                          ":keep-job-flow-alive-when-no-steps is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-set-keep-job-flow-alive-when-no-steps-input-keep-job-flow-alive-when-no-steps
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-keep-job-flow-alive-when-no-steps-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-keep-job-flow-alive-when-no-steps-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-keep-job-flow-alive-when-no-steps-input
                    'make-set-keep-job-flow-alive-when-no-steps-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-keep-job-flow-alive-when-no-steps-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-keep-job-flow-alive-when-no-steps-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-flow-ids))
      (common-lisp:list
       (common-lisp:cons "JobFlowIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'keep-job-flow-alive-when-no-steps))
      (common-lisp:list
       (common-lisp:cons "KeepJobFlowAliveWhenNoSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-keep-job-flow-alive-when-no-steps-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-termination-protection-input common-lisp:nil
                       ((job-flow-ids :initarg :job-flow-ids :initform
                         (common-lisp:error ":job-flow-ids is required") :type
                         (common-lisp:or xml-string-list common-lisp:null)
                         :accessor
                         struct-shape-set-termination-protection-input-job-flow-ids
                         :shape "XmlStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (termination-protected :initarg :termination-protected
                         :initform
                         (common-lisp:error
                          ":termination-protected is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-set-termination-protection-input-termination-protected
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-termination-protection-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-termination-protection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-termination-protection-input
                    'make-set-termination-protection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-termination-protection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-termination-protection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-flow-ids))
      (common-lisp:list
       (common-lisp:cons "JobFlowIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-protected))
      (common-lisp:list
       (common-lisp:cons "TerminationProtected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-termination-protection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-unhealthy-node-replacement-input common-lisp:nil
                       ((job-flow-ids :initarg :job-flow-ids :initform
                         (common-lisp:error ":job-flow-ids is required") :type
                         (common-lisp:or xml-string-list common-lisp:null)
                         :accessor
                         struct-shape-set-unhealthy-node-replacement-input-job-flow-ids
                         :shape "XmlStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unhealthy-node-replacement :initarg
                         :unhealthy-node-replacement :initform
                         (common-lisp:error
                          ":unhealthy-node-replacement is required")
                         :type (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-set-unhealthy-node-replacement-input-unhealthy-node-replacement
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-unhealthy-node-replacement-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-unhealthy-node-replacement-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-unhealthy-node-replacement-input
                    'make-set-unhealthy-node-replacement-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-unhealthy-node-replacement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-unhealthy-node-replacement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-flow-ids))
      (common-lisp:list
       (common-lisp:cons "JobFlowIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unhealthy-node-replacement))
      (common-lisp:list
       (common-lisp:cons "UnhealthyNodeReplacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-unhealthy-node-replacement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-visible-to-all-users-input common-lisp:nil
                       ((job-flow-ids :initarg :job-flow-ids :initform
                         (common-lisp:error ":job-flow-ids is required") :type
                         (common-lisp:or xml-string-list common-lisp:null)
                         :accessor
                         struct-shape-set-visible-to-all-users-input-job-flow-ids
                         :shape "XmlStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (visible-to-all-users :initarg :visible-to-all-users
                         :initform
                         (common-lisp:error
                          ":visible-to-all-users is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-set-visible-to-all-users-input-visible-to-all-users
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-visible-to-all-users-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-visible-to-all-users-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-visible-to-all-users-input
                    'make-set-visible-to-all-users-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-visible-to-all-users-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-visible-to-all-users-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-flow-ids))
      (common-lisp:list
       (common-lisp:cons "JobFlowIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'visible-to-all-users))
      (common-lisp:list
       (common-lisp:cons "VisibleToAllUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-visible-to-all-users-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass shrink-policy common-lisp:nil
                       ((decommission-timeout :initarg :decommission-timeout
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-shrink-policy-decommission-timeout :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-resize-policy :initarg
                         :instance-resize-policy :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-resize-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-shrink-policy-instance-resize-policy
                         :shape "InstanceResizePolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-shrink-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'shrink-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'shrink-policy 'make-shrink-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shrink-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shrink-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decommission-timeout))
      (common-lisp:list
       (common-lisp:cons "DecommissionTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-resize-policy))
      (common-lisp:list
       (common-lisp:cons "InstanceResizePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shrink-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass simple-scaling-policy-configuration common-lisp:nil
                       ((adjustment-type :initarg :adjustment-type :initform
                         common-lisp:nil :type
                         (common-lisp:or adjustment-type common-lisp:null)
                         :accessor
                         struct-shape-simple-scaling-policy-configuration-adjustment-type
                         :shape "AdjustmentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling-adjustment :initarg :scaling-adjustment
                         :initform
                         (common-lisp:error ":scaling-adjustment is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-simple-scaling-policy-configuration-scaling-adjustment
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cool-down :initarg :cool-down :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-simple-scaling-policy-configuration-cool-down
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-simple-scaling-policy-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'simple-scaling-policy-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'simple-scaling-policy-configuration
                    'make-simple-scaling-policy-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simple-scaling-policy-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simple-scaling-policy-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjustment-type))
      (common-lisp:list
       (common-lisp:cons "AdjustmentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-adjustment))
      (common-lisp:list
       (common-lisp:cons "ScalingAdjustment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cool-down))
      (common-lisp:list
       (common-lisp:cons "CoolDown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simple-scaling-policy-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass simplified-application common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-simplified-application-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-simplified-application-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-simplified-application
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'simplified-application
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'simplified-application 'make-simplified-application))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simplified-application))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simplified-application))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simplified-application))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype simplified-application-list ()
   '(trivial-types:proper-list simplified-application))
 (common-lisp:defun make-simplified-application-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list simplified-application))
   aws-sdk/generator/shape::members))
(common-lisp:deftype spot-provisioning-allocation-strategy ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass spot-provisioning-specification common-lisp:nil
                       ((timeout-duration-minutes :initarg
                         :timeout-duration-minutes :initform
                         (common-lisp:error
                          ":timeout-duration-minutes is required")
                         :type (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         struct-shape-spot-provisioning-specification-timeout-duration-minutes
                         :shape "WholeNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-action :initarg :timeout-action :initform
                         (common-lisp:error ":timeout-action is required")
                         :type
                         (common-lisp:or spot-provisioning-timeout-action
                                         common-lisp:null)
                         :accessor
                         struct-shape-spot-provisioning-specification-timeout-action
                         :shape "SpotProvisioningTimeoutAction" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (block-duration-minutes :initarg
                         :block-duration-minutes :initform common-lisp:nil
                         :type (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         struct-shape-spot-provisioning-specification-block-duration-minutes
                         :shape "WholeNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocation-strategy :initarg :allocation-strategy
                         :initform common-lisp:nil :type
                         (common-lisp:or spot-provisioning-allocation-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-spot-provisioning-specification-allocation-strategy
                         :shape "SpotProvisioningAllocationStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-spot-provisioning-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'spot-provisioning-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'spot-provisioning-specification
                    'make-spot-provisioning-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          spot-provisioning-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          spot-provisioning-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timeout-duration-minutes))
      (common-lisp:list
       (common-lisp:cons "TimeoutDurationMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-action))
      (common-lisp:list
       (common-lisp:cons "TimeoutAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-duration-minutes))
      (common-lisp:list
       (common-lisp:cons "BlockDurationMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-strategy))
      (common-lisp:list
       (common-lisp:cons "AllocationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          spot-provisioning-specification))
   common-lisp:nil))
(common-lisp:deftype spot-provisioning-timeout-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass spot-resizing-specification common-lisp:nil
                       ((timeout-duration-minutes :initarg
                         :timeout-duration-minutes :initform
                         (common-lisp:error
                          ":timeout-duration-minutes is required")
                         :type (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         struct-shape-spot-resizing-specification-timeout-duration-minutes
                         :shape "WholeNumber" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-spot-resizing-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'spot-resizing-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'spot-resizing-specification
                    'make-spot-resizing-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          spot-resizing-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          spot-resizing-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timeout-duration-minutes))
      (common-lisp:list
       (common-lisp:cons "TimeoutDurationMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          spot-resizing-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-notebook-execution-input common-lisp:nil
                       ((editor-id :initarg :editor-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-notebook-execution-input-editor-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relative-path :initarg :relative-path :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-start-notebook-execution-input-relative-path
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notebook-execution-name :initarg
                         :notebook-execution-name :initform common-lisp:nil
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-notebook-execution-input-notebook-execution-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notebook-params :initarg :notebook-params :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-start-notebook-execution-input-notebook-params
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-engine :initarg :execution-engine :initform
                         (common-lisp:error ":execution-engine is required")
                         :type
                         (common-lisp:or execution-engine-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-notebook-execution-input-execution-engine
                         :shape "ExecutionEngineConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-role :initarg :service-role :initform
                         (common-lisp:error ":service-role is required") :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-start-notebook-execution-input-service-role
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notebook-instance-security-group-id :initarg
                         :notebook-instance-security-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-notebook-execution-input-notebook-instance-security-group-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-start-notebook-execution-input-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notebook-s3location :initarg :notebook-s3location
                         :initform common-lisp:nil :type
                         (common-lisp:or notebook-s3location-from-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-notebook-execution-input-notebook-s3location
                         :shape "NotebookS3LocationFromInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-notebook-s3location :initarg
                         :output-notebook-s3location :initform common-lisp:nil
                         :type
                         (common-lisp:or output-notebook-s3location-from-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-notebook-execution-input-output-notebook-s3location
                         :shape "OutputNotebookS3LocationFromInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-notebook-format :initarg
                         :output-notebook-format :initform common-lisp:nil
                         :type
                         (common-lisp:or output-notebook-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-notebook-execution-input-output-notebook-format
                         :shape "OutputNotebookFormat" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (environment-variables :initarg :environment-variables
                         :initform common-lisp:nil :type
                         (common-lisp:or environment-variables-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-notebook-execution-input-environment-variables
                         :shape "EnvironmentVariablesMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-notebook-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-notebook-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-notebook-execution-input
                    'make-start-notebook-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-notebook-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-notebook-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'editor-id))
      (common-lisp:list
       (common-lisp:cons "EditorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-path))
      (common-lisp:list
       (common-lisp:cons "RelativePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-execution-name))
      (common-lisp:list
       (common-lisp:cons "NotebookExecutionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-params))
      (common-lisp:list
       (common-lisp:cons "NotebookParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-engine))
      (common-lisp:list
       (common-lisp:cons "ExecutionEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-security-group-id))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-s3location))
      (common-lisp:list
       (common-lisp:cons "NotebookS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-notebook-s3location))
      (common-lisp:list
       (common-lisp:cons "OutputNotebookS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-notebook-format))
      (common-lisp:list
       (common-lisp:cons "OutputNotebookFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-variables))
      (common-lisp:list
       (common-lisp:cons "EnvironmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-notebook-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-notebook-execution-output common-lisp:nil
                       ((notebook-execution-id :initarg :notebook-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-notebook-execution-output-notebook-execution-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-notebook-execution-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-notebook-execution-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-notebook-execution-output
                    'make-start-notebook-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-notebook-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-notebook-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-execution-id))
      (common-lisp:list
       (common-lisp:cons "NotebookExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-notebook-execution-output))
   common-lisp:nil))
(common-lisp:deftype statistic () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass step common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or step-id common-lisp:null) :accessor
                         struct-shape-step-id :shape "StepId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-step-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (config :initarg :config :initform common-lisp:nil
                         :type
                         (common-lisp:or hadoop-step-config common-lisp:null)
                         :accessor struct-shape-step-config :shape
                         "HadoopStepConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-on-failure :initarg :action-on-failure
                         :initform common-lisp:nil :type
                         (common-lisp:or action-on-failure common-lisp:null)
                         :accessor struct-shape-step-action-on-failure :shape
                         "ActionOnFailure" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or step-status common-lisp:null)
                         :accessor struct-shape-step-status :shape "StepStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or optional-arn-type common-lisp:null)
                         :accessor struct-shape-step-execution-role-arn :shape
                         "OptionalArnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-step (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'step
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'step 'make-step))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config))
      (common-lisp:list
       (common-lisp:cons "Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-on-failure))
      (common-lisp:list
       (common-lisp:cons "ActionOnFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input step))
   common-lisp:nil))
(common-lisp:deftype step-cancellation-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass step-config common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-step-config-name :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-on-failure :initarg :action-on-failure
                         :initform common-lisp:nil :type
                         (common-lisp:or action-on-failure common-lisp:null)
                         :accessor struct-shape-step-config-action-on-failure
                         :shape "ActionOnFailure" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hadoop-jar-step :initarg :hadoop-jar-step :initform
                         (common-lisp:error ":hadoop-jar-step is required")
                         :type
                         (common-lisp:or hadoop-jar-step-config
                                         common-lisp:null)
                         :accessor struct-shape-step-config-hadoop-jar-step
                         :shape "HadoopJarStepConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-step-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'step-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'step-config 'make-step-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input step-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input step-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-on-failure))
      (common-lisp:list
       (common-lisp:cons "ActionOnFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hadoop-jar-step))
      (common-lisp:list
       (common-lisp:cons "HadoopJarStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input step-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype step-config-list ()
   '(trivial-types:proper-list step-config))
 (common-lisp:defun make-step-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list step-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass step-detail common-lisp:nil
                       ((step-config :initarg :step-config :initform
                         (common-lisp:error ":step-config is required") :type
                         (common-lisp:or step-config common-lisp:null)
                         :accessor struct-shape-step-detail-step-config :shape
                         "StepConfig" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (execution-status-detail :initarg
                         :execution-status-detail :initform
                         (common-lisp:error
                          ":execution-status-detail is required")
                         :type
                         (common-lisp:or step-execution-status-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-step-detail-execution-status-detail
                         :shape "StepExecutionStatusDetail" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-step-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'step-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'step-detail 'make-step-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input step-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input step-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-config))
      (common-lisp:list
       (common-lisp:cons "StepConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-status-detail))
      (common-lisp:list
       (common-lisp:cons "ExecutionStatusDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input step-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype step-detail-list ()
   '(trivial-types:proper-list step-detail))
 (common-lisp:defun make-step-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list step-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype step-execution-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass step-execution-status-detail common-lisp:nil
                       ((state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or step-execution-state common-lisp:null)
                         :accessor
                         struct-shape-step-execution-status-detail-state :shape
                         "StepExecutionState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creation-date-time is required")
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-step-execution-status-detail-creation-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-date-time :initarg :start-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-step-execution-status-detail-start-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-step-execution-status-detail-end-date-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-state-change-reason :initarg
                         :last-state-change-reason :initform common-lisp:nil
                         :type (common-lisp:or xml-string common-lisp:null)
                         :accessor
                         struct-shape-step-execution-status-detail-last-state-change-reason
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-step-execution-status-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'step-execution-status-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'step-execution-status-detail
                    'make-step-execution-status-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          step-execution-status-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          step-execution-status-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "StartDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "EndDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-state-change-reason))
      (common-lisp:list
       (common-lisp:cons "LastStateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          step-execution-status-detail))
   common-lisp:nil))
(common-lisp:deftype step-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype step-ids-list ()
   '(trivial-types:proper-list xml-string-max-len256))
 (common-lisp:defun make-step-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len256))
   aws-sdk/generator/shape::members))
(common-lisp:deftype step-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass step-state-change-reason common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or step-state-change-reason-code
                                         common-lisp:null)
                         :accessor struct-shape-step-state-change-reason-code
                         :shape "StepStateChangeReasonCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-step-state-change-reason-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-step-state-change-reason
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'step-state-change-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'step-state-change-reason 'make-step-state-change-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          step-state-change-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          step-state-change-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          step-state-change-reason))
   common-lisp:nil))
(common-lisp:deftype step-state-change-reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype step-state-list ()
   '(trivial-types:proper-list step-state))
 (common-lisp:defun make-step-state-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list step-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass step-status common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or step-state common-lisp:null) :accessor
                         struct-shape-step-status-state :shape "StepState"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state-change-reason :initarg :state-change-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or step-state-change-reason
                                         common-lisp:null)
                         :accessor struct-shape-step-status-state-change-reason
                         :shape "StepStateChangeReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-details :initarg :failure-details :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-details common-lisp:null)
                         :accessor struct-shape-step-status-failure-details
                         :shape "FailureDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeline :initarg :timeline :initform common-lisp:nil
                         :type (common-lisp:or step-timeline common-lisp:null)
                         :accessor struct-shape-step-status-timeline :shape
                         "StepTimeline" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-step-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'step-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'step-status 'make-step-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input step-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input step-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-reason))
      (common-lisp:list
       (common-lisp:cons "StateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "FailureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeline))
      (common-lisp:list
       (common-lisp:cons "Timeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input step-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass step-summary common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or step-id common-lisp:null) :accessor
                         struct-shape-step-summary-id :shape "StepId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-step-summary-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (config :initarg :config :initform common-lisp:nil
                         :type
                         (common-lisp:or hadoop-step-config common-lisp:null)
                         :accessor struct-shape-step-summary-config :shape
                         "HadoopStepConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-on-failure :initarg :action-on-failure
                         :initform common-lisp:nil :type
                         (common-lisp:or action-on-failure common-lisp:null)
                         :accessor struct-shape-step-summary-action-on-failure
                         :shape "ActionOnFailure" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or step-status common-lisp:null)
                         :accessor struct-shape-step-summary-status :shape
                         "StepStatus" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-step-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'step-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'step-summary 'make-step-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input step-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input step-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config))
      (common-lisp:list
       (common-lisp:cons "Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-on-failure))
      (common-lisp:list
       (common-lisp:cons "ActionOnFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input step-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype step-summary-list ()
   '(trivial-types:proper-list step-summary))
 (common-lisp:defun make-step-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list step-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass step-timeline common-lisp:nil
                       ((creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-step-timeline-creation-date-time :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-date-time :initarg :start-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-step-timeline-start-date-time :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-step-timeline-end-date-time :shape "Date"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-step-timeline
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'step-timeline
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'step-timeline 'make-step-timeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input step-timeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input step-timeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "StartDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "EndDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input step-timeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-notebook-execution-input common-lisp:nil
                       ((notebook-execution-id :initarg :notebook-execution-id
                         :initform
                         (common-lisp:error
                          ":notebook-execution-id is required")
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-notebook-execution-input-notebook-execution-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-notebook-execution-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-notebook-execution-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-notebook-execution-input
                    'make-stop-notebook-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-notebook-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-notebook-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-execution-id))
      (common-lisp:list
       (common-lisp:cons "NotebookExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-notebook-execution-input))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype string-map () 'common-lisp:hash-table)
 (common-lisp:defun make-string-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass studio common-lisp:nil
                       ((studio-id :initarg :studio-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-studio-studio-id :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (studio-arn :initarg :studio-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-studio-studio-arn :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-studio-name :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-studio-description :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-mode :initarg :auth-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-mode common-lisp:null) :accessor
                         struct-shape-studio-auth-mode :shape "AuthMode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-studio-vpc-id :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-id-list common-lisp:null)
                         :accessor struct-shape-studio-subnet-ids :shape
                         "SubnetIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-role :initarg :service-role :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-studio-service-role :shape "XmlString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-role :initarg :user-role :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-studio-user-role :shape "XmlString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-security-group-id :initarg
                         :workspace-security-group-id :initform common-lisp:nil
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-studio-workspace-security-group-id :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-security-group-id :initarg
                         :engine-security-group-id :initform common-lisp:nil
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-studio-engine-security-group-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-studio-url :shape "XmlString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-studio-creation-time :shape "Date"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-s3location :initarg :default-s3location
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-studio-default-s3location :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (idp-auth-url :initarg :idp-auth-url :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-studio-idp-auth-url :shape "XmlString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (idp-relay-state-parameter-name :initarg
                         :idp-relay-state-parameter-name :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-studio-idp-relay-state-parameter-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-studio-tags :shape "TagList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (idc-instance-arn :initarg :idc-instance-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-studio-idc-instance-arn :shape "ArnType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trusted-identity-propagation-enabled :initarg
                         :trusted-identity-propagation-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-studio-trusted-identity-propagation-enabled
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idc-user-assignment :initarg :idc-user-assignment
                         :initform common-lisp:nil :type
                         (common-lisp:or idc-user-assignment common-lisp:null)
                         :accessor struct-shape-studio-idc-user-assignment
                         :shape "IdcUserAssignment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-key-arn :initarg :encryption-key-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-studio-encryption-key-arn :shape
                         "XmlString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-studio
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'studio
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'studio 'make-studio))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input studio))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input studio))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-id))
      (common-lisp:list
       (common-lisp:cons "StudioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-arn))
      (common-lisp:list
       (common-lisp:cons "StudioArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-mode))
      (common-lisp:list
       (common-lisp:cons "AuthMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role))
      (common-lisp:list
       (common-lisp:cons "UserRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-security-group-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-security-group-id))
      (common-lisp:list
       (common-lisp:cons "EngineSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-s3location))
      (common-lisp:list
       (common-lisp:cons "DefaultS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idp-auth-url))
      (common-lisp:list
       (common-lisp:cons "IdpAuthUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idp-relay-state-parameter-name))
      (common-lisp:list
       (common-lisp:cons "IdpRelayStateParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idc-instance-arn))
      (common-lisp:list
       (common-lisp:cons "IdcInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trusted-identity-propagation-enabled))
      (common-lisp:list
       (common-lisp:cons "TrustedIdentityPropagationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idc-user-assignment))
      (common-lisp:list
       (common-lisp:cons "IdcUserAssignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input studio))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass studio-summary common-lisp:nil
                       ((studio-id :initarg :studio-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-studio-summary-studio-id :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-studio-summary-name :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-studio-summary-vpc-id :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-studio-summary-description
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-studio-summary-url :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-mode :initarg :auth-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-mode common-lisp:null) :accessor
                         struct-shape-studio-summary-auth-mode :shape
                         "AuthMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-studio-summary-creation-time :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-studio-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'studio-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'studio-summary 'make-studio-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input studio-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input studio-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-id))
      (common-lisp:list
       (common-lisp:cons "StudioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-mode))
      (common-lisp:list
       (common-lisp:cons "AuthMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input studio-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype studio-summary-list ()
   '(trivial-types:proper-list studio-summary))
 (common-lisp:defun make-studio-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list studio-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subnet-id-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-subnet-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass supported-instance-type common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-supported-instance-type-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (memory-gb :initarg :memory-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-supported-instance-type-memory-gb :shape
                         "Float" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-gb :initarg :storage-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-supported-instance-type-storage-gb :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vcpu :initarg :vcpu :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-supported-instance-type-vcpu :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is64bits-only :initarg :is64bits-only :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-supported-instance-type-is64bits-only
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-family-id :initarg :instance-family-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-supported-instance-type-instance-family-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-optimized-available :initarg
                         :ebs-optimized-available :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-supported-instance-type-ebs-optimized-available
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-optimized-by-default :initarg
                         :ebs-optimized-by-default :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-supported-instance-type-ebs-optimized-by-default
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-disks :initarg :number-of-disks :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-supported-instance-type-number-of-disks
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-storage-only :initarg :ebs-storage-only :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-supported-instance-type-ebs-storage-only
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (architecture :initarg :architecture :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-supported-instance-type-architecture
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-supported-instance-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'supported-instance-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'supported-instance-type 'make-supported-instance-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          supported-instance-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          supported-instance-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-gb))
      (common-lisp:list
       (common-lisp:cons "MemoryGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-gb))
      (common-lisp:list
       (common-lisp:cons "StorageGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vcpu))
      (common-lisp:list
       (common-lisp:cons "VCPU"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is64bits-only))
      (common-lisp:list
       (common-lisp:cons "Is64BitsOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family-id))
      (common-lisp:list
       (common-lisp:cons "InstanceFamilyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-optimized-available))
      (common-lisp:list
       (common-lisp:cons "EbsOptimizedAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-optimized-by-default))
      (common-lisp:list
       (common-lisp:cons "EbsOptimizedByDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-disks))
      (common-lisp:list
       (common-lisp:cons "NumberOfDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-storage-only))
      (common-lisp:list
       (common-lisp:cons "EbsStorageOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "Architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          supported-instance-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype supported-instance-types-list ()
   '(trivial-types:proper-list supported-instance-type))
 (common-lisp:defun make-supported-instance-types-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list supported-instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass supported-product-config common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-supported-product-config-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (args :initarg :args :initform common-lisp:nil :type
                         (common-lisp:or xml-string-list common-lisp:null)
                         :accessor struct-shape-supported-product-config-args
                         :shape "XmlStringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-supported-product-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'supported-product-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'supported-product-config 'make-supported-product-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          supported-product-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          supported-product-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'args))
      (common-lisp:list
       (common-lisp:cons "Args"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          supported-product-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype supported-products-list ()
   '(trivial-types:proper-list xml-string-max-len256))
 (common-lisp:defun make-supported-products-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-key :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-value :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass terminate-job-flows-input common-lisp:nil
                       ((job-flow-ids :initarg :job-flow-ids :initform
                         (common-lisp:error ":job-flow-ids is required") :type
                         (common-lisp:or xml-string-list common-lisp:null)
                         :accessor
                         struct-shape-terminate-job-flows-input-job-flow-ids
                         :shape "XmlStringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-terminate-job-flows-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'terminate-job-flows-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'terminate-job-flows-input
                    'make-terminate-job-flows-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-job-flows-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-job-flows-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-flow-ids))
      (common-lisp:list
       (common-lisp:cons "JobFlowIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-job-flows-input))
   common-lisp:nil))
(common-lisp:deftype throughput-val () 'common-lisp:integer)
(common-lisp:deftype unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-studio-input common-lisp:nil
                       ((studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studio-id is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-update-studio-input-studio-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-update-studio-input-name :shape
                         "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-update-studio-input-description
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-id-list common-lisp:null)
                         :accessor struct-shape-update-studio-input-subnet-ids
                         :shape "SubnetIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-s3location :initarg :default-s3location
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-update-studio-input-default-s3location
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-key-arn :initarg :encryption-key-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         struct-shape-update-studio-input-encryption-key-arn
                         :shape "XmlString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-studio-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-studio-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-studio-input 'make-update-studio-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-studio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-studio-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-id))
      (common-lisp:list
       (common-lisp:cons "StudioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-s3location))
      (common-lisp:list
       (common-lisp:cons "DefaultS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-studio-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-studio-session-mapping-input common-lisp:nil
                       ((studio-id :initarg :studio-id :initform
                         (common-lisp:error ":studio-id is required") :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-studio-session-mapping-input-studio-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-studio-session-mapping-input-identity-id
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-name :initarg :identity-name :initform
                         common-lisp:nil :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-studio-session-mapping-input-identity-name
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-type :initarg :identity-type :initform
                         (common-lisp:error ":identity-type is required") :type
                         (common-lisp:or identity-type common-lisp:null)
                         :accessor
                         struct-shape-update-studio-session-mapping-input-identity-type
                         :shape "IdentityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-policy-arn :initarg :session-policy-arn
                         :initform
                         (common-lisp:error ":session-policy-arn is required")
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-studio-session-mapping-input-session-policy-arn
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-studio-session-mapping-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-studio-session-mapping-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-studio-session-mapping-input
                    'make-update-studio-session-mapping-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-session-mapping-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-session-mapping-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-id))
      (common-lisp:list
       (common-lisp:cons "StudioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-name))
      (common-lisp:list
       (common-lisp:cons "IdentityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-type))
      (common-lisp:list
       (common-lisp:cons "IdentityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-policy-arn))
      (common-lisp:list
       (common-lisp:cons "SessionPolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-session-mapping-input))
   common-lisp:nil))
(common-lisp:deftype uri-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass username-password common-lisp:nil
                       ((username :initarg :username :initform common-lisp:nil
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-username-password-username
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type
                         (common-lisp:or xml-string-max-len256
                                         common-lisp:null)
                         :accessor struct-shape-username-password-password
                         :shape "XmlStringMaxLen256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-username-password
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'username-password
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'username-password 'make-username-password))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input username-password))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input username-password))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input username-password))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass volume-specification common-lisp:nil
                       ((volume-type :initarg :volume-type :initform
                         (common-lisp:error ":volume-type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-specification-volume-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-volume-specification-iops :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (size-in-gb :initarg :size-in-gb :initform
                         (common-lisp:error ":size-in-gb is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-volume-specification-size-in-gb :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (throughput :initarg :throughput :initform
                         common-lisp:nil :type
                         (common-lisp:or throughput-val common-lisp:null)
                         :accessor struct-shape-volume-specification-throughput
                         :shape "ThroughputVal" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-volume-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'volume-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'volume-specification 'make-volume-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "SizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "Throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-specification))
   common-lisp:nil))
(common-lisp:deftype whole-number () 'common-lisp:integer)
(common-lisp:deftype xml-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype xml-string-list ()
   '(trivial-types:proper-list xml-string))
 (common-lisp:defun make-xml-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype xml-string-max-len256 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype xml-string-max-len256list ()
   '(trivial-types:proper-list xml-string-max-len256))
 (common-lisp:defun make-xml-string-max-len256list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun add-instance-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id instance-fleet)
   (common-lisp:declare (common-lisp:ignorable cluster-id instance-fleet))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-instance-fleet-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "AddInstanceFleet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-instance-fleet))
(common-lisp:progn
 (common-lisp:defun add-instance-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-groups job-flow-id)
   (common-lisp:declare (common-lisp:ignorable instance-groups job-flow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-instance-groups-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "AddInstanceGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-instance-groups))
(common-lisp:progn
 (common-lisp:defun add-job-flow-steps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-flow-id steps execution-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable job-flow-id steps execution-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-job-flow-steps-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "AddJobFlowSteps"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-job-flow-steps))
(common-lisp:progn
 (common-lisp:defun add-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tags)
   (common-lisp:declare (common-lisp:ignorable resource-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "AddTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-tags))
(common-lisp:progn
 (common-lisp:defun cancel-steps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id step-ids
                     step-cancellation-option)
   (common-lisp:declare
    (common-lisp:ignorable cluster-id step-ids step-cancellation-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-steps-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "CancelSteps"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-steps))
(common-lisp:progn
 (common-lisp:defun create-security-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name security-configuration)
   (common-lisp:declare (common-lisp:ignorable name security-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-security-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "CreateSecurityConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-security-configuration))
(common-lisp:progn
 (common-lisp:defun create-studio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description auth-mode vpc-id
                     subnet-ids service-role user-role
                     workspace-security-group-id engine-security-group-id
                     default-s3location idp-auth-url
                     idp-relay-state-parameter-name tags
                     trusted-identity-propagation-enabled idc-user-assignment
                     idc-instance-arn encryption-key-arn)
   (common-lisp:declare
    (common-lisp:ignorable name description auth-mode vpc-id subnet-ids
     service-role user-role workspace-security-group-id
     engine-security-group-id default-s3location idp-auth-url
     idp-relay-state-parameter-name tags trusted-identity-propagation-enabled
     idc-user-assignment idc-instance-arn encryption-key-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-studio-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "CreateStudio"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-studio))
(common-lisp:progn
 (common-lisp:defun create-studio-session-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-id identity-id identity-name
                     identity-type session-policy-arn)
   (common-lisp:declare
    (common-lisp:ignorable studio-id identity-id identity-name identity-type
     session-policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-studio-session-mapping-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "CreateStudioSessionMapping"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-studio-session-mapping))
(common-lisp:progn
 (common-lisp:defun delete-security-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-security-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteSecurityConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-security-configuration))
(common-lisp:progn
 (common-lisp:defun delete-studio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-id)
   (common-lisp:declare (common-lisp:ignorable studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-studio-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteStudio"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-studio))
(common-lisp:progn
 (common-lisp:defun delete-studio-session-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-id identity-id identity-name
                     identity-type)
   (common-lisp:declare
    (common-lisp:ignorable studio-id identity-id identity-name identity-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-studio-session-mapping-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteStudioSessionMapping"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-studio-session-mapping))
(common-lisp:progn
 (common-lisp:defun describe-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id)
   (common-lisp:declare (common-lisp:ignorable cluster-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cluster-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-cluster))
(common-lisp:progn
 (common-lisp:defun describe-job-flows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key created-after created-before job-flow-ids
                     job-flow-states)
   (common-lisp:declare
    (common-lisp:ignorable created-after created-before job-flow-ids
     job-flow-states))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-job-flows-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeJobFlows"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-job-flows))
(common-lisp:progn
 (common-lisp:defun describe-notebook-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-execution-id)
   (common-lisp:declare (common-lisp:ignorable notebook-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-notebook-execution-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeNotebookExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-notebook-execution))
(common-lisp:progn
 (common-lisp:defun describe-release-label
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key release-label next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable release-label next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-release-label-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeReleaseLabel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-release-label))
(common-lisp:progn
 (common-lisp:defun describe-security-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-security-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeSecurityConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-security-configuration))
(common-lisp:progn
 (common-lisp:defun describe-step
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id step-id)
   (common-lisp:declare (common-lisp:ignorable cluster-id step-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-step-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeStep"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-step))
(common-lisp:progn
 (common-lisp:defun describe-studio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-id)
   (common-lisp:declare (common-lisp:ignorable studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-studio-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeStudio"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-studio))
(common-lisp:progn
 (common-lisp:defun get-auto-termination-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id)
   (common-lisp:declare (common-lisp:ignorable cluster-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-auto-termination-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "GetAutoTerminationPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-auto-termination-policy))
(common-lisp:progn
 (common-lisp:defun get-block-public-access-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'elasticmapreduce-request :method "POST" :path
                                "/" :operation
                                "GetBlockPublicAccessConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-block-public-access-configuration))
(common-lisp:progn
 (common-lisp:defun get-cluster-session-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id execution-role-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-id execution-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-cluster-session-credentials-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "GetClusterSessionCredentials"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-cluster-session-credentials))
(common-lisp:progn
 (common-lisp:defun get-managed-scaling-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id)
   (common-lisp:declare (common-lisp:ignorable cluster-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-managed-scaling-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "GetManagedScalingPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-managed-scaling-policy))
(common-lisp:progn
 (common-lisp:defun get-studio-session-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-id identity-id identity-name
                     identity-type)
   (common-lisp:declare
    (common-lisp:ignorable studio-id identity-id identity-name identity-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-studio-session-mapping-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "GetStudioSessionMapping"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-studio-session-mapping))
(common-lisp:progn
 (common-lisp:defun list-bootstrap-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id marker)
   (common-lisp:declare (common-lisp:ignorable cluster-id marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bootstrap-actions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "ListBootstrapActions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-bootstrap-actions))
(common-lisp:progn
 (common-lisp:defun list-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key created-after created-before
                     cluster-states marker)
   (common-lisp:declare
    (common-lisp:ignorable created-after created-before cluster-states marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-clusters-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "ListClusters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-clusters))
(common-lisp:progn
 (common-lisp:defun list-instance-fleets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id marker)
   (common-lisp:declare (common-lisp:ignorable cluster-id marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-instance-fleets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "ListInstanceFleets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-instance-fleets))
(common-lisp:progn
 (common-lisp:defun list-instance-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id marker)
   (common-lisp:declare (common-lisp:ignorable cluster-id marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-instance-groups-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "ListInstanceGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-instance-groups))
(common-lisp:progn
 (common-lisp:defun list-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id instance-group-id
                     instance-group-types instance-fleet-id instance-fleet-type
                     instance-states marker)
   (common-lisp:declare
    (common-lisp:ignorable cluster-id instance-group-id instance-group-types
     instance-fleet-id instance-fleet-type instance-states marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "ListInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-instances))
(common-lisp:progn
 (common-lisp:defun list-notebook-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key editor-id status from to marker
                     execution-engine-id)
   (common-lisp:declare
    (common-lisp:ignorable editor-id status from to marker
     execution-engine-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-notebook-executions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "ListNotebookExecutions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-notebook-executions))
(common-lisp:progn
 (common-lisp:defun list-release-labels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-release-labels-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "ListReleaseLabels"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-release-labels))
(common-lisp:progn
 (common-lisp:defun list-security-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker)
   (common-lisp:declare (common-lisp:ignorable marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-security-configurations-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "ListSecurityConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-security-configurations))
(common-lisp:progn
 (common-lisp:defun list-steps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id step-states step-ids marker)
   (common-lisp:declare
    (common-lisp:ignorable cluster-id step-states step-ids marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-steps-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "ListSteps"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-steps))
(common-lisp:progn
 (common-lisp:defun list-studio-session-mappings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-id identity-type marker)
   (common-lisp:declare (common-lisp:ignorable studio-id identity-type marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-studio-session-mappings-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "ListStudioSessionMappings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-studio-session-mappings))
(common-lisp:progn
 (common-lisp:defun list-studios
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker)
   (common-lisp:declare (common-lisp:ignorable marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-studios-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "ListStudios"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-studios))
(common-lisp:progn
 (common-lisp:defun list-supported-instance-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key release-label marker)
   (common-lisp:declare (common-lisp:ignorable release-label marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-supported-instance-types-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "ListSupportedInstanceTypes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-supported-instance-types))
(common-lisp:progn
 (common-lisp:defun modify-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id step-concurrency-level)
   (common-lisp:declare
    (common-lisp:ignorable cluster-id step-concurrency-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-cluster-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "ModifyCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'modify-cluster))
(common-lisp:progn
 (common-lisp:defun modify-instance-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id instance-fleet)
   (common-lisp:declare (common-lisp:ignorable cluster-id instance-fleet))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-instance-fleet-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "ModifyInstanceFleet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'modify-instance-fleet))
(common-lisp:progn
 (common-lisp:defun modify-instance-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id instance-groups)
   (common-lisp:declare (common-lisp:ignorable cluster-id instance-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-instance-groups-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "ModifyInstanceGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'modify-instance-groups))
(common-lisp:progn
 (common-lisp:defun put-auto-scaling-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id instance-group-id
                     auto-scaling-policy)
   (common-lisp:declare
    (common-lisp:ignorable cluster-id instance-group-id auto-scaling-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-auto-scaling-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "PutAutoScalingPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-auto-scaling-policy))
(common-lisp:progn
 (common-lisp:defun put-auto-termination-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id auto-termination-policy)
   (common-lisp:declare
    (common-lisp:ignorable cluster-id auto-termination-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-auto-termination-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "PutAutoTerminationPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-auto-termination-policy))
(common-lisp:progn
 (common-lisp:defun put-block-public-access-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key block-public-access-configuration)
   (common-lisp:declare
    (common-lisp:ignorable block-public-access-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-block-public-access-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "PutBlockPublicAccessConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-block-public-access-configuration))
(common-lisp:progn
 (common-lisp:defun put-managed-scaling-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id managed-scaling-policy)
   (common-lisp:declare
    (common-lisp:ignorable cluster-id managed-scaling-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-managed-scaling-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "PutManagedScalingPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-managed-scaling-policy))
(common-lisp:progn
 (common-lisp:defun remove-auto-scaling-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id instance-group-id)
   (common-lisp:declare (common-lisp:ignorable cluster-id instance-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-auto-scaling-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "RemoveAutoScalingPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-auto-scaling-policy))
(common-lisp:progn
 (common-lisp:defun remove-auto-termination-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id)
   (common-lisp:declare (common-lisp:ignorable cluster-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-auto-termination-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "RemoveAutoTerminationPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-auto-termination-policy))
(common-lisp:progn
 (common-lisp:defun remove-managed-scaling-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id)
   (common-lisp:declare (common-lisp:ignorable cluster-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-managed-scaling-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "RemoveManagedScalingPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-managed-scaling-policy))
(common-lisp:progn
 (common-lisp:defun remove-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-id tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "RemoveTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-tags))
(common-lisp:progn
 (common-lisp:defun run-job-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name log-uri log-encryption-kms-key-id
                     additional-info ami-version release-label instances steps
                     bootstrap-actions supported-products
                     new-supported-products applications configurations
                     visible-to-all-users job-flow-role service-role tags
                     security-configuration auto-scaling-role
                     scale-down-behavior custom-ami-id ebs-root-volume-size
                     repo-upgrade-on-boot kerberos-attributes
                     step-concurrency-level managed-scaling-policy
                     placement-group-configs auto-termination-policy
                     osrelease-label ebs-root-volume-iops
                     ebs-root-volume-throughput)
   (common-lisp:declare
    (common-lisp:ignorable name log-uri log-encryption-kms-key-id
     additional-info ami-version release-label instances steps
     bootstrap-actions supported-products new-supported-products applications
     configurations visible-to-all-users job-flow-role service-role tags
     security-configuration auto-scaling-role scale-down-behavior custom-ami-id
     ebs-root-volume-size repo-upgrade-on-boot kerberos-attributes
     step-concurrency-level managed-scaling-policy placement-group-configs
     auto-termination-policy osrelease-label ebs-root-volume-iops
     ebs-root-volume-throughput))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-run-job-flow-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "RunJobFlow"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'run-job-flow))
(common-lisp:progn
 (common-lisp:defun set-keep-job-flow-alive-when-no-steps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-flow-ids
                     keep-job-flow-alive-when-no-steps)
   (common-lisp:declare
    (common-lisp:ignorable job-flow-ids keep-job-flow-alive-when-no-steps))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-keep-job-flow-alive-when-no-steps-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "SetKeepJobFlowAliveWhenNoSteps"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-keep-job-flow-alive-when-no-steps))
(common-lisp:progn
 (common-lisp:defun set-termination-protection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-flow-ids termination-protected)
   (common-lisp:declare
    (common-lisp:ignorable job-flow-ids termination-protected))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-termination-protection-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "SetTerminationProtection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-termination-protection))
(common-lisp:progn
 (common-lisp:defun set-unhealthy-node-replacement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-flow-ids unhealthy-node-replacement)
   (common-lisp:declare
    (common-lisp:ignorable job-flow-ids unhealthy-node-replacement))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-unhealthy-node-replacement-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "SetUnhealthyNodeReplacement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-unhealthy-node-replacement))
(common-lisp:progn
 (common-lisp:defun set-visible-to-all-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-flow-ids visible-to-all-users)
   (common-lisp:declare
    (common-lisp:ignorable job-flow-ids visible-to-all-users))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-visible-to-all-users-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "SetVisibleToAllUsers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-visible-to-all-users))
(common-lisp:progn
 (common-lisp:defun start-notebook-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key editor-id relative-path
                     notebook-execution-name notebook-params execution-engine
                     service-role notebook-instance-security-group-id tags
                     notebook-s3location output-notebook-s3location
                     output-notebook-format environment-variables)
   (common-lisp:declare
    (common-lisp:ignorable editor-id relative-path notebook-execution-name
     notebook-params execution-engine service-role
     notebook-instance-security-group-id tags notebook-s3location
     output-notebook-s3location output-notebook-format environment-variables))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-notebook-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "StartNotebookExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-notebook-execution))
(common-lisp:progn
 (common-lisp:defun stop-notebook-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-execution-id)
   (common-lisp:declare (common-lisp:ignorable notebook-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-notebook-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "StopNotebookExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-notebook-execution))
(common-lisp:progn
 (common-lisp:defun terminate-job-flows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-flow-ids)
   (common-lisp:declare (common-lisp:ignorable job-flow-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-terminate-job-flows-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "TerminateJobFlows"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'terminate-job-flows))
(common-lisp:progn
 (common-lisp:defun update-studio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-id name description subnet-ids
                     default-s3location encryption-key-arn)
   (common-lisp:declare
    (common-lisp:ignorable studio-id name description subnet-ids
     default-s3location encryption-key-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-studio-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateStudio"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-studio))
(common-lisp:progn
 (common-lisp:defun update-studio-session-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-id identity-id identity-name
                     identity-type session-policy-arn)
   (common-lisp:declare
    (common-lisp:ignorable studio-id identity-id identity-name identity-type
     session-policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-studio-session-mapping-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticmapreduce-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateStudioSessionMapping"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-studio-session-mapping))
