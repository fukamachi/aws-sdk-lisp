;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/datazone/api
  (:use)
  (:nicknames #:aws/datazone)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/datazone/api)
(common-lisp:progn
 (common-lisp:define-condition datazone-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'datazone-error))
(common-lisp:progn
 (common-lisp:defclass datazone-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "datazone" :api-version
                        "2018-05-10" :host-prefix "datazone" :signing-name
                        "datazone" :global-host common-lisp:nil))
 (common-lisp:export 'datazone-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("UnauthorizedException" . unauthorized-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass accept-choice common-lisp:nil
                       ((prediction-choice :initarg :prediction-choice
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-accept-choice-prediction-choice :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (prediction-target :initarg :prediction-target
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-accept-choice-prediction-target :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-choice
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accept-choice
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'accept-choice 'make-accept-choice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accept-choice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accept-choice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prediction-choice))
      (common-lisp:list
       (common-lisp:cons "predictionChoice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prediction-target))
      (common-lisp:list
       (common-lisp:cons "predictionTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accept-choice))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype accept-choices ()
   '(trivial-types:proper-list accept-choice))
 (common-lisp:defun make-accept-choices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list accept-choice))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass accept-predictions-input common-lisp:nil
                       ((accept-choices :initarg :accept-choices :initform
                         common-lisp:nil :type
                         (common-lisp:or accept-choices common-lisp:null)
                         :accessor
                         struct-shape-accept-predictions-input-accept-choices
                         :shape "AcceptChoices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (accept-rule :initarg :accept-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or accept-rule common-lisp:null)
                         :accessor
                         struct-shape-accept-predictions-input-accept-rule
                         :shape "AcceptRule" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-accept-predictions-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-accept-predictions-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or asset-identifier common-lisp:null)
                         :accessor
                         struct-shape-accept-predictions-input-identifier
                         :shape "AssetIdentifier" :location "uri"
                         :location-name "identifier")
                        (revision :initarg :revision :initform common-lisp:nil
                         :type (common-lisp:or revision common-lisp:null)
                         :accessor
                         struct-shape-accept-predictions-input-revision :shape
                         "Revision" :location "querystring" :location-name
                         "revision"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-predictions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accept-predictions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-predictions-input 'make-accept-predictions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-predictions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-predictions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-choices))
      (common-lisp:list
       (common-lisp:cons "acceptChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-rule))
      (common-lisp:list
       (common-lisp:cons "acceptRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-predictions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-predictions-output common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or asset-id common-lisp:null) :accessor
                         struct-shape-accept-predictions-output-asset-id :shape
                         "AssetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-accept-predictions-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-accept-predictions-output-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-predictions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accept-predictions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-predictions-output
                    'make-accept-predictions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-predictions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-predictions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-predictions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-rule common-lisp:nil
                       ((rule :initarg :rule :initform common-lisp:nil :type
                         (common-lisp:or accept-rule-behavior common-lisp:null)
                         :accessor struct-shape-accept-rule-rule :shape
                         "AcceptRuleBehavior" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (threshold :initarg :threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-accept-rule-threshold :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accept-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'accept-rule 'make-accept-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accept-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accept-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accept-rule))
   common-lisp:nil))
(common-lisp:deftype accept-rule-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass accept-subscription-request-input common-lisp:nil
                       ((decision-comment :initarg :decision-comment :initform
                         common-lisp:nil :type
                         (common-lisp:or decision-comment common-lisp:null)
                         :accessor
                         struct-shape-accept-subscription-request-input-decision-comment
                         :shape "DecisionComment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-accept-subscription-request-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or subscription-request-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-accept-subscription-request-input-identifier
                         :shape "SubscriptionRequestId" :location "uri"
                         :location-name "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-subscription-request-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-subscription-request-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-subscription-request-input
                    'make-accept-subscription-request-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-subscription-request-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-subscription-request-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-comment))
      (common-lisp:list
       (common-lisp:cons "decisionComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-subscription-request-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-subscription-request-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-accept-subscription-request-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-accept-subscription-request-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (decision-comment :initarg :decision-comment :initform
                         common-lisp:nil :type
                         (common-lisp:or decision-comment common-lisp:null)
                         :accessor
                         struct-shape-accept-subscription-request-output-decision-comment
                         :shape "DecisionComment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-accept-subscription-request-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-request-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-accept-subscription-request-output-id
                         :shape "SubscriptionRequestId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (request-reason :initarg :request-reason :initform
                         (common-lisp:error ":requestreason is required") :type
                         (common-lisp:or request-reason common-lisp:null)
                         :accessor
                         struct-shape-accept-subscription-request-output-request-reason
                         :shape "RequestReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reviewer-id :initarg :reviewer-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-accept-subscription-request-output-reviewer-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-request-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-accept-subscription-request-output-status
                         :shape "SubscriptionRequestStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscribed-listings :initarg :subscribed-listings
                         :initform
                         (common-lisp:error ":subscribedlistings is required")
                         :type
                         (common-lisp:or
                          accept-subscription-request-output-subscribed-listings-list
                          common-lisp:null)
                         :accessor
                         struct-shape-accept-subscription-request-output-subscribed-listings
                         :shape
                         "AcceptSubscriptionRequestOutputSubscribedListingsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subscribed-principals :initarg :subscribed-principals
                         :initform
                         (common-lisp:error
                          ":subscribedprincipals is required")
                         :type
                         (common-lisp:or
                          accept-subscription-request-output-subscribed-principals-list
                          common-lisp:null)
                         :accessor
                         struct-shape-accept-subscription-request-output-subscribed-principals
                         :shape
                         "AcceptSubscriptionRequestOutputSubscribedPrincipalsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-accept-subscription-request-output-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-accept-subscription-request-output-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-subscription-request-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-subscription-request-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-subscription-request-output
                    'make-accept-subscription-request-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-subscription-request-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-subscription-request-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-comment))
      (common-lisp:list
       (common-lisp:cons "decisionComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-reason))
      (common-lisp:list
       (common-lisp:cons "requestReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewer-id))
      (common-lisp:list
       (common-lisp:cons "reviewerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listings))
      (common-lisp:list
       (common-lisp:cons "subscribedListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principals))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-subscription-request-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype accept-subscription-request-output-subscribed-listings-list
                      ()
   '(trivial-types:proper-list subscribed-listing))
 (common-lisp:defun make-accept-subscription-request-output-subscribed-listings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-listing))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype accept-subscription-request-output-subscribed-principals-list
                      ()
   '(trivial-types:proper-list subscribed-principal))
 (common-lisp:defun make-accept-subscription-request-output-subscribed-principals-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (datazone-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype action-link () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype applicable-asset-types ()
   '(trivial-types:proper-list type-name))
 (common-lisp:defun make-applicable-asset-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list type-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype asset-id () 'common-lisp:string)
(common-lisp:deftype asset-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass asset-item common-lisp:nil
                       ((additional-attributes :initarg :additional-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or asset-item-additional-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-asset-item-additional-attributes :shape
                         "AssetItemAdditionalAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-asset-item-created-at :shape "CreatedAt"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-asset-item-created-by :shape "CreatedBy"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-asset-item-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-asset-item-domain-id :shape "DomainId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-identifier :initarg :external-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or external-identifier common-lisp:null)
                         :accessor struct-shape-asset-item-external-identifier
                         :shape "ExternalIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-revision-created-at :initarg
                         :first-revision-created-at :initform common-lisp:nil
                         :type (common-lisp:or created-at common-lisp:null)
                         :accessor
                         struct-shape-asset-item-first-revision-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-revision-created-by :initarg
                         :first-revision-created-by :initform common-lisp:nil
                         :type (common-lisp:or created-by common-lisp:null)
                         :accessor
                         struct-shape-asset-item-first-revision-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor struct-shape-asset-item-glossary-terms
                         :shape "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or asset-identifier common-lisp:null)
                         :accessor struct-shape-asset-item-identifier :shape
                         "AssetIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         struct-shape-asset-item-name :shape "AssetName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform
                         (common-lisp:error ":owningprojectid is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor struct-shape-asset-item-owning-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type-identifier :initarg :type-identifier :initform
                         (common-lisp:error ":typeidentifier is required")
                         :type
                         (common-lisp:or asset-type-identifier
                                         common-lisp:null)
                         :accessor struct-shape-asset-item-type-identifier
                         :shape "AssetTypeIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type-revision :initarg :type-revision :initform
                         (common-lisp:error ":typerevision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-asset-item-type-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'asset-item 'make-asset-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-attributes))
      (common-lisp:list
       (common-lisp:cons "additionalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-identifier))
      (common-lisp:list
       (common-lisp:cons "externalIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-revision-created-at))
      (common-lisp:list
       (common-lisp:cons "firstRevisionCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-revision-created-by))
      (common-lisp:list
       (common-lisp:cons "firstRevisionCreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-identifier))
      (common-lisp:list
       (common-lisp:cons "typeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass asset-item-additional-attributes common-lisp:nil
                       ((forms-output :initarg :forms-output :initform
                         common-lisp:nil :type
                         (common-lisp:or form-output-list common-lisp:null)
                         :accessor
                         struct-shape-asset-item-additional-attributes-forms-output
                         :shape "FormOutputList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (read-only-forms-output :initarg
                         :read-only-forms-output :initform common-lisp:nil
                         :type
                         (common-lisp:or form-output-list common-lisp:null)
                         :accessor
                         struct-shape-asset-item-additional-attributes-read-only-forms-output
                         :shape "FormOutputList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-item-additional-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'asset-item-additional-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-item-additional-attributes
                    'make-asset-item-additional-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-item-additional-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-item-additional-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-output))
      (common-lisp:list
       (common-lisp:cons "formsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-only-forms-output))
      (common-lisp:list
       (common-lisp:cons "readOnlyFormsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-item-additional-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass asset-listing common-lisp:nil
                       ((asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or asset-id common-lisp:null)
                         :accessor struct-shape-asset-listing-asset-id :shape
                         "AssetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-revision :initarg :asset-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-asset-listing-asset-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-type :initarg :asset-type :initform
                         common-lisp:nil :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         struct-shape-asset-listing-asset-type :shape
                         "TypeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-asset-listing-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forms :initarg :forms :initform common-lisp:nil :type
                         (common-lisp:or forms common-lisp:null) :accessor
                         struct-shape-asset-listing-forms :shape "Forms"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or detailed-glossary-terms
                                         common-lisp:null)
                         :accessor struct-shape-asset-listing-glossary-terms
                         :shape "DetailedGlossaryTerms" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-asset-listing-owning-project-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-listing
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-listing
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'asset-listing 'make-asset-listing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-listing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-listing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-revision))
      (common-lisp:list
       (common-lisp:cons "assetRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-type))
      (common-lisp:list
       (common-lisp:cons "assetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms))
      (common-lisp:list
       (common-lisp:cons "forms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-listing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass asset-listing-details common-lisp:nil
                       ((listing-id :initarg :listing-id :initform
                         (common-lisp:error ":listingid is required") :type
                         (common-lisp:or listing-id common-lisp:null) :accessor
                         struct-shape-asset-listing-details-listing-id :shape
                         "ListingId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (listing-status :initarg :listing-status :initform
                         (common-lisp:error ":listingstatus is required") :type
                         (common-lisp:or listing-status common-lisp:null)
                         :accessor
                         struct-shape-asset-listing-details-listing-status
                         :shape "ListingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-listing-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-listing-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-listing-details 'make-asset-listing-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-listing-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-listing-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-id))
      (common-lisp:list
       (common-lisp:cons "listingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-status))
      (common-lisp:list
       (common-lisp:cons "listingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-listing-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass asset-listing-item common-lisp:nil
                       ((additional-attributes :initarg :additional-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          asset-listing-item-additional-attributes
                          common-lisp:null)
                         :accessor
                         struct-shape-asset-listing-item-additional-attributes
                         :shape "AssetListingItemAdditionalAttributes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-asset-listing-item-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-asset-listing-item-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-id common-lisp:null) :accessor
                         struct-shape-asset-listing-item-entity-id :shape
                         "AssetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-revision :initarg :entity-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-asset-listing-item-entity-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-type :initarg :entity-type :initform
                         common-lisp:nil :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         struct-shape-asset-listing-item-entity-type :shape
                         "TypeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or detailed-glossary-terms
                                         common-lisp:null)
                         :accessor
                         struct-shape-asset-listing-item-glossary-terms :shape
                         "DetailedGlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (listing-created-by :initarg :listing-created-by
                         :initform common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-asset-listing-item-listing-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (listing-id :initarg :listing-id :initform
                         common-lisp:nil :type
                         (common-lisp:or listing-id common-lisp:null) :accessor
                         struct-shape-asset-listing-item-listing-id :shape
                         "ListingId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (listing-revision :initarg :listing-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-asset-listing-item-listing-revision
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (listing-updated-by :initarg :listing-updated-by
                         :initform common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-asset-listing-item-listing-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         struct-shape-asset-listing-item-name :shape
                         "AssetName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-asset-listing-item-owning-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-listing-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-listing-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-listing-item 'make-asset-listing-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-listing-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-listing-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-attributes))
      (common-lisp:list
       (common-lisp:cons "additionalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-revision))
      (common-lisp:list
       (common-lisp:cons "entityRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "entityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-created-by))
      (common-lisp:list
       (common-lisp:cons "listingCreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-id))
      (common-lisp:list
       (common-lisp:cons "listingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-revision))
      (common-lisp:list
       (common-lisp:cons "listingRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-updated-by))
      (common-lisp:list
       (common-lisp:cons "listingUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-listing-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass asset-listing-item-additional-attributes common-lisp:nil
                       ((forms :initarg :forms :initform common-lisp:nil :type
                         (common-lisp:or forms common-lisp:null) :accessor
                         struct-shape-asset-listing-item-additional-attributes-forms
                         :shape "Forms" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-listing-item-additional-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'asset-listing-item-additional-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-listing-item-additional-attributes
                    'make-asset-listing-item-additional-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-listing-item-additional-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-listing-item-additional-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms))
      (common-lisp:list
       (common-lisp:cons "forms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-listing-item-additional-attributes))
   common-lisp:nil))
(common-lisp:deftype asset-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass asset-revision common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-asset-revision-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-asset-revision-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-asset-revision-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or asset-id common-lisp:null) :accessor
                         struct-shape-asset-revision-id :shape "AssetId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision :initarg :revision :initform common-lisp:nil
                         :type (common-lisp:or revision common-lisp:null)
                         :accessor struct-shape-asset-revision-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-revision
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-revision
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'asset-revision 'make-asset-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-revision))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-revisions ()
   '(trivial-types:proper-list asset-revision))
 (common-lisp:defun make-asset-revisions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-revision))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-target-name-map common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or asset-id common-lisp:null) :accessor
                         struct-shape-asset-target-name-map-asset-id :shape
                         "AssetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-name :initarg :target-name :initform
                         (common-lisp:error ":targetname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-asset-target-name-map-target-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-target-name-map
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-target-name-map
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-target-name-map 'make-asset-target-name-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-target-name-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-target-name-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-name))
      (common-lisp:list
       (common-lisp:cons "targetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-target-name-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-target-names ()
   '(trivial-types:proper-list asset-target-name-map))
 (common-lisp:defun make-asset-target-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-target-name-map))
   aws-sdk/generator/shape::members))
(common-lisp:deftype asset-type-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass asset-type-item common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-asset-type-item-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-asset-type-item-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-asset-type-item-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-asset-type-item-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forms-output :initarg :forms-output :initform
                         (common-lisp:error ":formsoutput is required") :type
                         (common-lisp:or forms-output-map common-lisp:null)
                         :accessor struct-shape-asset-type-item-forms-output
                         :shape "FormsOutputMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         struct-shape-asset-type-item-name :shape "TypeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (origin-domain-id :initarg :origin-domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-asset-type-item-origin-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (origin-project-id :initarg :origin-project-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-asset-type-item-origin-project-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform
                         (common-lisp:error ":owningprojectid is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-asset-type-item-owning-project-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-asset-type-item-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-asset-type-item-updated-at :shape
                         "UpdatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-asset-type-item-updated-by :shape
                         "UpdatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-type-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-type-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'asset-type-item 'make-asset-type-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-type-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-type-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-output))
      (common-lisp:list
       (common-lisp:cons "formsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-domain-id))
      (common-lisp:list
       (common-lisp:cons "originDomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-project-id))
      (common-lisp:list
       (common-lisp:cons "originProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-type-item))
   common-lisp:nil))
(common-lisp:deftype attribute () 'common-lisp:string)
(common-lisp:deftype auth-type () 'common-lisp:string)
(common-lisp:deftype authorized-principal-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype authorized-principal-identifiers ()
   '(trivial-types:proper-list authorized-principal-identifier))
 (common-lisp:defun make-authorized-principal-identifiers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            authorized-principal-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype aws-region () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass business-name-generation-configuration common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-business-name-generation-configuration-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-business-name-generation-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'business-name-generation-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'business-name-generation-configuration
                    'make-business-name-generation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          business-name-generation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          business-name-generation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          business-name-generation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-subscription-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-cancel-subscription-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or subscription-id common-lisp:null)
                         :accessor
                         struct-shape-cancel-subscription-input-identifier
                         :shape "SubscriptionId" :location "uri" :location-name
                         "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-subscription-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-subscription-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-subscription-input
                    'make-cancel-subscription-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-subscription-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-subscription-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-subscription-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-subscription-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-cancel-subscription-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-cancel-subscription-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-cancel-subscription-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-id common-lisp:null)
                         :accessor struct-shape-cancel-subscription-output-id
                         :shape "SubscriptionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retain-permissions :initarg :retain-permissions
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-cancel-subscription-output-retain-permissions
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-status common-lisp:null)
                         :accessor
                         struct-shape-cancel-subscription-output-status :shape
                         "SubscriptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscribed-listing :initarg :subscribed-listing
                         :initform
                         (common-lisp:error ":subscribedlisting is required")
                         :type
                         (common-lisp:or subscribed-listing common-lisp:null)
                         :accessor
                         struct-shape-cancel-subscription-output-subscribed-listing
                         :shape "SubscribedListing" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscribed-principal :initarg :subscribed-principal
                         :initform
                         (common-lisp:error ":subscribedprincipal is required")
                         :type
                         (common-lisp:or subscribed-principal common-lisp:null)
                         :accessor
                         struct-shape-cancel-subscription-output-subscribed-principal
                         :shape "SubscribedPrincipal" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-request-id :initarg
                         :subscription-request-id :initform common-lisp:nil
                         :type
                         (common-lisp:or subscription-request-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-cancel-subscription-output-subscription-request-id
                         :shape "SubscriptionRequestId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-cancel-subscription-output-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-cancel-subscription-output-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-subscription-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-subscription-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-subscription-output
                    'make-cancel-subscription-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-subscription-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-subscription-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-permissions))
      (common-lisp:list
       (common-lisp:cons "retainPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listing))
      (common-lisp:list
       (common-lisp:cons "subscribedListing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principal))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-request-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-subscription-output))
   common-lisp:nil))
(common-lisp:deftype change-action () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-formation-properties common-lisp:nil
                       ((template-url :initarg :template-url :initform
                         (common-lisp:error ":templateurl is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cloud-formation-properties-template-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-formation-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-formation-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-formation-properties
                    'make-cloud-formation-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "templateUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configurable-action-parameter common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-configurable-action-parameter-key :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-configurable-action-parameter-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configurable-action-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'configurable-action-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configurable-action-parameter
                    'make-configurable-action-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configurable-action-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configurable-action-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configurable-action-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configurable-action-parameter-list ()
   '(trivial-types:proper-list configurable-action-parameter))
 (common-lisp:defun make-configurable-action-parameter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configurable-action-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configurable-action-type-authorization ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configurable-environment-action common-lisp:nil
                       ((auth :initarg :auth :initform common-lisp:nil :type
                         (common-lisp:or configurable-action-type-authorization
                                         common-lisp:null)
                         :accessor
                         struct-shape-configurable-environment-action-auth
                         :shape "ConfigurableActionTypeAuthorization" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         (common-lisp:error ":parameters is required") :type
                         (common-lisp:or configurable-action-parameter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-configurable-environment-action-parameters
                         :shape "ConfigurableActionParameterList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-configurable-environment-action-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configurable-environment-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'configurable-environment-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configurable-environment-action
                    'make-configurable-environment-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configurable-environment-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configurable-environment-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth))
      (common-lisp:list
       (common-lisp:cons "auth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configurable-environment-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (datazone-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-asset-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor struct-shape-create-asset-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-create-asset-input-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-asset-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (external-identifier :initarg :external-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or external-identifier common-lisp:null)
                         :accessor
                         struct-shape-create-asset-input-external-identifier
                         :shape "ExternalIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forms-input :initarg :forms-input :initform
                         common-lisp:nil :type
                         (common-lisp:or form-input-list common-lisp:null)
                         :accessor struct-shape-create-asset-input-forms-input
                         :shape "FormInputList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor
                         struct-shape-create-asset-input-glossary-terms :shape
                         "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         struct-shape-create-asset-input-name :shape
                         "AssetName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owning-project-identifier :initarg
                         :owning-project-identifier :initform
                         (common-lisp:error
                          ":owningprojectidentifier is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-create-asset-input-owning-project-identifier
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prediction-configuration :initarg
                         :prediction-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or prediction-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-asset-input-prediction-configuration
                         :shape "PredictionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type-identifier :initarg :type-identifier :initform
                         (common-lisp:error ":typeidentifier is required")
                         :type
                         (common-lisp:or asset-type-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-asset-input-type-identifier :shape
                         "AssetTypeIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type-revision :initarg :type-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-create-asset-input-type-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-asset-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-asset-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-asset-input 'make-create-asset-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-asset-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-asset-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-identifier))
      (common-lisp:list
       (common-lisp:cons "externalIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-input))
      (common-lisp:list
       (common-lisp:cons "formsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'owning-project-identifier))
      (common-lisp:list
       (common-lisp:cons "owningProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-configuration))
      (common-lisp:list
       (common-lisp:cons "predictionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-identifier))
      (common-lisp:list
       (common-lisp:cons "typeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-asset-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-asset-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-create-asset-output-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-create-asset-output-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-create-asset-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-asset-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-identifier :initarg :external-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or external-identifier common-lisp:null)
                         :accessor
                         struct-shape-create-asset-output-external-identifier
                         :shape "ExternalIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-revision-created-at :initarg
                         :first-revision-created-at :initform common-lisp:nil
                         :type (common-lisp:or created-at common-lisp:null)
                         :accessor
                         struct-shape-create-asset-output-first-revision-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-revision-created-by :initarg
                         :first-revision-created-by :initform common-lisp:nil
                         :type (common-lisp:or created-by common-lisp:null)
                         :accessor
                         struct-shape-create-asset-output-first-revision-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forms-output :initarg :forms-output :initform
                         (common-lisp:error ":formsoutput is required") :type
                         (common-lisp:or form-output-list common-lisp:null)
                         :accessor
                         struct-shape-create-asset-output-forms-output :shape
                         "FormOutputList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor
                         struct-shape-create-asset-output-glossary-terms :shape
                         "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or asset-id common-lisp:null) :accessor
                         struct-shape-create-asset-output-id :shape "AssetId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (listing :initarg :listing :initform common-lisp:nil
                         :type
                         (common-lisp:or asset-listing-details
                                         common-lisp:null)
                         :accessor struct-shape-create-asset-output-listing
                         :shape "AssetListingDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         struct-shape-create-asset-output-name :shape
                         "AssetName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform
                         (common-lisp:error ":owningprojectid is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-create-asset-output-owning-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prediction-configuration :initarg
                         :prediction-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or prediction-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-asset-output-prediction-configuration
                         :shape "PredictionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (read-only-forms-output :initarg
                         :read-only-forms-output :initform common-lisp:nil
                         :type
                         (common-lisp:or form-output-list common-lisp:null)
                         :accessor
                         struct-shape-create-asset-output-read-only-forms-output
                         :shape "FormOutputList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-create-asset-output-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type-identifier :initarg :type-identifier :initform
                         (common-lisp:error ":typeidentifier is required")
                         :type
                         (common-lisp:or asset-type-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-asset-output-type-identifier
                         :shape "AssetTypeIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type-revision :initarg :type-revision :initform
                         (common-lisp:error ":typerevision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-create-asset-output-type-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-asset-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-asset-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-asset-output 'make-create-asset-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-asset-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-asset-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-identifier))
      (common-lisp:list
       (common-lisp:cons "externalIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-revision-created-at))
      (common-lisp:list
       (common-lisp:cons "firstRevisionCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-revision-created-by))
      (common-lisp:list
       (common-lisp:cons "firstRevisionCreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-output))
      (common-lisp:list
       (common-lisp:cons "formsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing))
      (common-lisp:list
       (common-lisp:cons "listing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-configuration))
      (common-lisp:list
       (common-lisp:cons "predictionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-only-forms-output))
      (common-lisp:list
       (common-lisp:cons "readOnlyFormsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-identifier))
      (common-lisp:list
       (common-lisp:cons "typeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-asset-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-asset-revision-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-input-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (forms-input :initarg :forms-input :initform
                         common-lisp:nil :type
                         (common-lisp:or form-input-list common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-input-forms-input
                         :shape "FormInputList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-input-glossary-terms
                         :shape "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or asset-identifier common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-input-identifier
                         :shape "AssetIdentifier" :location "uri"
                         :location-name "identifier")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         struct-shape-create-asset-revision-input-name :shape
                         "AssetName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (prediction-configuration :initarg
                         :prediction-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or prediction-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-input-prediction-configuration
                         :shape "PredictionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type-revision :initarg :type-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-create-asset-revision-input-type-revision
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-asset-revision-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-asset-revision-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-asset-revision-input
                    'make-create-asset-revision-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-revision-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-revision-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-input))
      (common-lisp:list
       (common-lisp:cons "formsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-configuration))
      (common-lisp:list
       (common-lisp:cons "predictionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-revision-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-asset-revision-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-create-asset-revision-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-create-asset-revision-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-asset-revision-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-identifier :initarg :external-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or external-identifier common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-output-external-identifier
                         :shape "ExternalIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-revision-created-at :initarg
                         :first-revision-created-at :initform common-lisp:nil
                         :type (common-lisp:or created-at common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-output-first-revision-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-revision-created-by :initarg
                         :first-revision-created-by :initform common-lisp:nil
                         :type (common-lisp:or created-by common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-output-first-revision-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forms-output :initarg :forms-output :initform
                         (common-lisp:error ":formsoutput is required") :type
                         (common-lisp:or form-output-list common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-output-forms-output
                         :shape "FormOutputList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-output-glossary-terms
                         :shape "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or asset-id common-lisp:null) :accessor
                         struct-shape-create-asset-revision-output-id :shape
                         "AssetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (listing :initarg :listing :initform common-lisp:nil
                         :type
                         (common-lisp:or asset-listing-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-output-listing
                         :shape "AssetListingDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         struct-shape-create-asset-revision-output-name :shape
                         "AssetName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform
                         (common-lisp:error ":owningprojectid is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-output-owning-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prediction-configuration :initarg
                         :prediction-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or prediction-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-output-prediction-configuration
                         :shape "PredictionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (read-only-forms-output :initarg
                         :read-only-forms-output :initform common-lisp:nil
                         :type
                         (common-lisp:or form-output-list common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-output-read-only-forms-output
                         :shape "FormOutputList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-create-asset-revision-output-revision
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type-identifier :initarg :type-identifier :initform
                         (common-lisp:error ":typeidentifier is required")
                         :type
                         (common-lisp:or asset-type-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-asset-revision-output-type-identifier
                         :shape "AssetTypeIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type-revision :initarg :type-revision :initform
                         (common-lisp:error ":typerevision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-create-asset-revision-output-type-revision
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-asset-revision-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-asset-revision-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-asset-revision-output
                    'make-create-asset-revision-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-revision-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-revision-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-identifier))
      (common-lisp:list
       (common-lisp:cons "externalIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-revision-created-at))
      (common-lisp:list
       (common-lisp:cons "firstRevisionCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-revision-created-by))
      (common-lisp:list
       (common-lisp:cons "firstRevisionCreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-output))
      (common-lisp:list
       (common-lisp:cons "formsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing))
      (common-lisp:list
       (common-lisp:cons "listing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-configuration))
      (common-lisp:list
       (common-lisp:cons "predictionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-only-forms-output))
      (common-lisp:list
       (common-lisp:cons "readOnlyFormsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-identifier))
      (common-lisp:list
       (common-lisp:cons "typeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-revision-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-asset-type-input common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-asset-type-input-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-asset-type-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (forms-input :initarg :forms-input :initform
                         (common-lisp:error ":formsinput is required") :type
                         (common-lisp:or forms-input-map common-lisp:null)
                         :accessor
                         struct-shape-create-asset-type-input-forms-input
                         :shape "FormsInputMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         struct-shape-create-asset-type-input-name :shape
                         "TypeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owning-project-identifier :initarg
                         :owning-project-identifier :initform
                         (common-lisp:error
                          ":owningprojectidentifier is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-create-asset-type-input-owning-project-identifier
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-asset-type-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-asset-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-asset-type-input 'make-create-asset-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-input))
      (common-lisp:list
       (common-lisp:cons "formsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'owning-project-identifier))
      (common-lisp:list
       (common-lisp:cons "owningProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-asset-type-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-create-asset-type-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-create-asset-type-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-asset-type-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-asset-type-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forms-output :initarg :forms-output :initform
                         (common-lisp:error ":formsoutput is required") :type
                         (common-lisp:or forms-output-map common-lisp:null)
                         :accessor
                         struct-shape-create-asset-type-output-forms-output
                         :shape "FormsOutputMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         struct-shape-create-asset-type-output-name :shape
                         "TypeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (origin-domain-id :initarg :origin-domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-asset-type-output-origin-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (origin-project-id :initarg :origin-project-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-create-asset-type-output-origin-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-create-asset-type-output-owning-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-create-asset-type-output-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-create-asset-type-output-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-create-asset-type-output-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-asset-type-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-asset-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-asset-type-output 'make-create-asset-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-output))
      (common-lisp:list
       (common-lisp:cons "formsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-domain-id))
      (common-lisp:list
       (common-lisp:cons "originDomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-project-id))
      (common-lisp:list
       (common-lisp:cons "originProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-source-input common-lisp:nil
                       ((asset-forms-input :initarg :asset-forms-input
                         :initform common-lisp:nil :type
                         (common-lisp:or form-input-list common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-input-asset-forms-input
                         :shape "FormInputList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-data-source-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-configuration-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-input-configuration
                         :shape "DataSourceConfigurationInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-input-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (enable-setting :initarg :enable-setting :initform
                         common-lisp:nil :type
                         (common-lisp:or enable-setting common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-input-enable-setting
                         :shape "EnableSetting" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-identifier :initarg
                         :environment-identifier :initform
                         (common-lisp:error
                          ":environmentidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-input-environment-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-data-source-input-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-identifier :initarg :project-identifier
                         :initform
                         (common-lisp:error ":projectidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-input-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publish-on-import :initarg :publish-on-import
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-data-source-input-publish-on-import
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommendation :initarg :recommendation :initform
                         common-lisp:nil :type
                         (common-lisp:or recommendation-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-input-recommendation
                         :shape "RecommendationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type
                         (common-lisp:or schedule-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-input-schedule :shape
                         "ScheduleConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor struct-shape-create-data-source-input-type
                         :shape "DataSourceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-source-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-source-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-source-input 'make-create-data-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-forms-input))
      (common-lisp:list
       (common-lisp:cons "assetFormsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-setting))
      (common-lisp:list
       (common-lisp:cons "enableSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-identifier))
      (common-lisp:list
       (common-lisp:cons "environmentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-identifier))
      (common-lisp:list
       (common-lisp:cons "projectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-on-import))
      (common-lisp:list
       (common-lisp:cons "publishOnImport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-source-output common-lisp:nil
                       ((asset-forms-output :initarg :asset-forms-output
                         :initform common-lisp:nil :type
                         (common-lisp:or form-output-list common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-output-asset-forms-output
                         :shape "FormOutputList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-configuration-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-output-configuration
                         :shape "DataSourceConfigurationOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-create-data-source-output-created-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-data-source-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-setting :initarg :enable-setting :initform
                         common-lisp:nil :type
                         (common-lisp:or enable-setting common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-output-enable-setting
                         :shape "EnableSetting" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-output-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-error-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-output-error-message
                         :shape "DataSourceErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor struct-shape-create-data-source-output-id
                         :shape "DataSourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-run-at :initarg :last-run-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-create-data-source-output-last-run-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-run-error-message :initarg
                         :last-run-error-message :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-error-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-output-last-run-error-message
                         :shape "DataSourceErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-run-status :initarg :last-run-status :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-run-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-output-last-run-status
                         :shape "DataSourceRunStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-data-source-output-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-create-data-source-output-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publish-on-import :initarg :publish-on-import
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-data-source-output-publish-on-import
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommendation :initarg :recommendation :initform
                         common-lisp:nil :type
                         (common-lisp:or recommendation-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-output-recommendation
                         :shape "RecommendationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type
                         (common-lisp:or schedule-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-output-schedule :shape
                         "ScheduleConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-status common-lisp:null)
                         :accessor
                         struct-shape-create-data-source-output-status :shape
                         "DataSourceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor struct-shape-create-data-source-output-type
                         :shape "DataSourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-create-data-source-output-updated-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-source-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-source-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-source-output
                    'make-create-data-source-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-forms-output))
      (common-lisp:list
       (common-lisp:cons "assetFormsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-setting))
      (common-lisp:list
       (common-lisp:cons "enableSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-at))
      (common-lisp:list
       (common-lisp:cons "lastRunAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-error-message))
      (common-lisp:list
       (common-lisp:cons "lastRunErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-status))
      (common-lisp:list
       (common-lisp:cons "lastRunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-on-import))
      (common-lisp:list
       (common-lisp:cons "publishOnImport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-domain-input-client-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-domain-input-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-execution-role :initarg :domain-execution-role
                         :initform
                         (common-lisp:error ":domainexecutionrole is required")
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-domain-input-domain-execution-role
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-identifier :initarg :kms-key-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-create-domain-input-kms-key-identifier
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-domain-input-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (single-sign-on :initarg :single-sign-on :initform
                         common-lisp:nil :type
                         (common-lisp:or single-sign-on common-lisp:null)
                         :accessor
                         struct-shape-create-domain-input-single-sign-on :shape
                         "SingleSignOn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-domain-input-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-domain-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-domain-input 'make-create-domain-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-domain-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-domain-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-execution-role))
      (common-lisp:list
       (common-lisp:cons "domainExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-identifier))
      (common-lisp:list
       (common-lisp:cons "kmsKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'single-sign-on))
      (common-lisp:list
       (common-lisp:cons "singleSignOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-domain-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-output common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-domain-output-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-domain-output-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-execution-role :initarg :domain-execution-role
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-domain-output-domain-execution-role
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-domain-output-id :shape "DomainId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-identifier :initarg :kms-key-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-create-domain-output-kms-key-identifier
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-domain-output-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-url :initarg :portal-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-domain-output-portal-url :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (single-sign-on :initarg :single-sign-on :initform
                         common-lisp:nil :type
                         (common-lisp:or single-sign-on common-lisp:null)
                         :accessor
                         struct-shape-create-domain-output-single-sign-on
                         :shape "SingleSignOn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or domain-status common-lisp:null)
                         :accessor struct-shape-create-domain-output-status
                         :shape "DomainStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-domain-output-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-domain-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-domain-output 'make-create-domain-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-domain-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-domain-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-execution-role))
      (common-lisp:list
       (common-lisp:cons "domainExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-identifier))
      (common-lisp:list
       (common-lisp:cons "kmsKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-url))
      (common-lisp:list
       (common-lisp:cons "portalUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'single-sign-on))
      (common-lisp:list
       (common-lisp:cons "singleSignOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-domain-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-input common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-environment-input-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (environment-profile-identifier :initarg
                         :environment-profile-identifier :initform
                         (common-lisp:error
                          ":environmentprofileidentifier is required")
                         :type
                         (common-lisp:or environment-profile-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-environment-profile-identifier
                         :shape "EnvironmentProfileId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-glossary-terms
                         :shape "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-environment-input-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-identifier :initarg :project-identifier
                         :initform
                         (common-lisp:error ":projectidentifier is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-project-identifier
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-parameters :initarg :user-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-parameters-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-user-parameters
                         :shape "EnvironmentParametersList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-environment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-input 'make-create-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-profile-identifier))
      (common-lisp:list
       (common-lisp:cons "environmentProfileIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-identifier))
      (common-lisp:list
       (common-lisp:cons "projectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-output common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-create-environment-output-aws-account-id
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-account-region :initarg :aws-account-region
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-create-environment-output-aws-account-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-output-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-environment-output-created-by
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-properties :initarg :deployment-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or deployment-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-output-deployment-properties
                         :shape "DeploymentProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-environment-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-environment-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-actions :initarg :environment-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or environment-action-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-output-environment-actions
                         :shape "EnvironmentActionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (environment-blueprint-id :initarg
                         :environment-blueprint-id :initform common-lisp:nil
                         :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-output-environment-blueprint-id
                         :shape "EnvironmentBlueprintId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (environment-profile-id :initarg
                         :environment-profile-id :initform
                         (common-lisp:error
                          ":environmentprofileid is required")
                         :type
                         (common-lisp:or environment-profile-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-output-environment-profile-id
                         :shape "EnvironmentProfileId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor
                         struct-shape-create-environment-output-glossary-terms
                         :shape "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor struct-shape-create-environment-output-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment :initarg :last-deployment :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment common-lisp:null) :accessor
                         struct-shape-create-environment-output-last-deployment
                         :shape "Deployment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor struct-shape-create-environment-output-name
                         :shape "EnvironmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-create-environment-output-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-environment-output-provider :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provisioned-resources :initarg :provisioned-resources
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-list common-lisp:null)
                         :accessor
                         struct-shape-create-environment-output-provisioned-resources
                         :shape "ResourceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioning-properties :initarg
                         :provisioning-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or provisioning-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-output-provisioning-properties
                         :shape "ProvisioningProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or environment-status common-lisp:null)
                         :accessor
                         struct-shape-create-environment-output-status :shape
                         "EnvironmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-output-updated-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-parameters :initarg :user-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-parameter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-output-user-parameters
                         :shape "CustomParameterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-environment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-output
                    'make-create-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-properties))
      (common-lisp:list
       (common-lisp:cons "deploymentProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-actions))
      (common-lisp:list
       (common-lisp:cons "environmentActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-profile-id))
      (common-lisp:list
       (common-lisp:cons "environmentProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-deployment))
      (common-lisp:list
       (common-lisp:cons "lastDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-resources))
      (common-lisp:list
       (common-lisp:cons "provisionedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-properties))
      (common-lisp:list
       (common-lisp:cons "provisioningProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-profile-input common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-create-environment-profile-input-aws-account-id
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-account-region :initarg :aws-account-region
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-create-environment-profile-input-aws-account-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-environment-profile-input-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-environment-profile-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (environment-blueprint-identifier :initarg
                         :environment-blueprint-identifier :initform
                         (common-lisp:error
                          ":environmentblueprintidentifier is required")
                         :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-profile-input-environment-blueprint-identifier
                         :shape "EnvironmentBlueprintId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-profile-input-name
                         :shape "EnvironmentProfileName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (project-identifier :initarg :project-identifier
                         :initform
                         (common-lisp:error ":projectidentifier is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-create-environment-profile-input-project-identifier
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-parameters :initarg :user-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-parameters-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-profile-input-user-parameters
                         :shape "EnvironmentParametersList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-profile-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-environment-profile-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-profile-input
                    'make-create-environment-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-profile-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-identifier))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-identifier))
      (common-lisp:list
       (common-lisp:cons "projectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-profile-output common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-create-environment-profile-output-aws-account-id
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-account-region :initarg :aws-account-region
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-create-environment-profile-output-aws-account-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-profile-output-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-environment-profile-output-created-by
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-environment-profile-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-environment-profile-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-blueprint-id :initarg
                         :environment-blueprint-id :initform
                         (common-lisp:error
                          ":environmentblueprintid is required")
                         :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-profile-output-environment-blueprint-id
                         :shape "EnvironmentBlueprintId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or environment-profile-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-profile-output-id
                         :shape "EnvironmentProfileId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-profile-output-name
                         :shape "EnvironmentProfileName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-create-environment-profile-output-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-profile-output-updated-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-parameters :initarg :user-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-parameter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-profile-output-user-parameters
                         :shape "CustomParameterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-profile-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-environment-profile-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-profile-output
                    'make-create-environment-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-form-type-input common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-form-type-input-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-form-type-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (model :initarg :model :initform
                         (common-lisp:error ":model is required") :type
                         (common-lisp:or model common-lisp:null) :accessor
                         struct-shape-create-form-type-input-model :shape
                         "Model" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or form-type-name common-lisp:null)
                         :accessor struct-shape-create-form-type-input-name
                         :shape "FormTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owning-project-identifier :initarg
                         :owning-project-identifier :initform
                         (common-lisp:error
                          ":owningprojectidentifier is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-create-form-type-input-owning-project-identifier
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or form-type-status common-lisp:null)
                         :accessor struct-shape-create-form-type-input-status
                         :shape "FormTypeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-form-type-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-form-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-form-type-input 'make-create-form-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-form-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-form-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'owning-project-identifier))
      (common-lisp:list
       (common-lisp:cons "owningProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-form-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-form-type-output common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-form-type-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-form-type-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or form-type-name common-lisp:null)
                         :accessor struct-shape-create-form-type-output-name
                         :shape "FormTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (origin-domain-id :initarg :origin-domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-form-type-output-origin-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (origin-project-id :initarg :origin-project-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-create-form-type-output-origin-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-create-form-type-output-owning-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-create-form-type-output-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-form-type-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-form-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-form-type-output 'make-create-form-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-form-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-form-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-domain-id))
      (common-lisp:list
       (common-lisp:cons "originDomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-project-id))
      (common-lisp:list
       (common-lisp:cons "originProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-form-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-glossary-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-input-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-description common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-input-description :shape
                         "GlossaryDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or glossary-name common-lisp:null)
                         :accessor struct-shape-create-glossary-input-name
                         :shape "GlossaryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owning-project-identifier :initarg
                         :owning-project-identifier :initform
                         (common-lisp:error
                          ":owningprojectidentifier is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-input-owning-project-identifier
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or glossary-status common-lisp:null)
                         :accessor struct-shape-create-glossary-input-status
                         :shape "GlossaryStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-glossary-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-glossary-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-glossary-input 'make-create-glossary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'owning-project-identifier))
      (common-lisp:list
       (common-lisp:cons "owningProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-glossary-output common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-description common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-output-description :shape
                         "GlossaryDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-glossary-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or glossary-id common-lisp:null)
                         :accessor struct-shape-create-glossary-output-id
                         :shape "GlossaryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or glossary-name common-lisp:null)
                         :accessor struct-shape-create-glossary-output-name
                         :shape "GlossaryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform
                         (common-lisp:error ":owningprojectid is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-output-owning-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or glossary-status common-lisp:null)
                         :accessor struct-shape-create-glossary-output-status
                         :shape "GlossaryStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-glossary-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-glossary-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-glossary-output 'make-create-glossary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-glossary-term-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-term-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-term-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (glossary-identifier :initarg :glossary-identifier
                         :initform
                         (common-lisp:error ":glossaryidentifier is required")
                         :type
                         (common-lisp:or glossary-term-id common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-term-input-glossary-identifier
                         :shape "GlossaryTermId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-description :initarg :long-description :initform
                         common-lisp:nil :type
                         (common-lisp:or long-description common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-term-input-long-description
                         :shape "LongDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or glossary-term-name common-lisp:null)
                         :accessor struct-shape-create-glossary-term-input-name
                         :shape "GlossaryTermName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (short-description :initarg :short-description
                         :initform common-lisp:nil :type
                         (common-lisp:or short-description common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-term-input-short-description
                         :shape "ShortDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or glossary-term-status common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-term-input-status :shape
                         "GlossaryTermStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (term-relations :initarg :term-relations :initform
                         common-lisp:nil :type
                         (common-lisp:or term-relations common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-term-input-term-relations
                         :shape "TermRelations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-glossary-term-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-glossary-term-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-glossary-term-input
                    'make-create-glossary-term-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-term-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-term-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-identifier))
      (common-lisp:list
       (common-lisp:cons "glossaryIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "longDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "shortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-relations))
      (common-lisp:list
       (common-lisp:cons "termRelations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-term-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-glossary-term-output common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-glossary-term-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glossary-id :initarg :glossary-id :initform
                         (common-lisp:error ":glossaryid is required") :type
                         (common-lisp:or glossary-id common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-term-output-glossary-id
                         :shape "GlossaryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or glossary-term-id common-lisp:null)
                         :accessor struct-shape-create-glossary-term-output-id
                         :shape "GlossaryTermId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-description :initarg :long-description :initform
                         common-lisp:nil :type
                         (common-lisp:or long-description common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-term-output-long-description
                         :shape "LongDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or glossary-term-name common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-term-output-name :shape
                         "GlossaryTermName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (short-description :initarg :short-description
                         :initform common-lisp:nil :type
                         (common-lisp:or short-description common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-term-output-short-description
                         :shape "ShortDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or glossary-term-status common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-term-output-status :shape
                         "GlossaryTermStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (term-relations :initarg :term-relations :initform
                         common-lisp:nil :type
                         (common-lisp:or term-relations common-lisp:null)
                         :accessor
                         struct-shape-create-glossary-term-output-term-relations
                         :shape "TermRelations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-glossary-term-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-glossary-term-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-glossary-term-output
                    'make-create-glossary-term-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-term-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-term-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-id))
      (common-lisp:list
       (common-lisp:cons "glossaryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "longDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "shortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-relations))
      (common-lisp:list
       (common-lisp:cons "termRelations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-glossary-term-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-group-profile-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-group-profile-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-group-profile-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (group-identifier :initarg :group-identifier :initform
                         (common-lisp:error ":groupidentifier is required")
                         :type
                         (common-lisp:or group-identifier common-lisp:null)
                         :accessor
                         struct-shape-create-group-profile-input-group-identifier
                         :shape "GroupIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-group-profile-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-group-profile-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-group-profile-input
                    'make-create-group-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-profile-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-identifier))
      (common-lisp:list
       (common-lisp:cons "groupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-group-profile-output common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-group-profile-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or group-profile-name common-lisp:null)
                         :accessor
                         struct-shape-create-group-profile-output-group-name
                         :shape "GroupProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or group-profile-id common-lisp:null)
                         :accessor struct-shape-create-group-profile-output-id
                         :shape "GroupProfileId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or group-profile-status common-lisp:null)
                         :accessor
                         struct-shape-create-group-profile-output-status :shape
                         "GroupProfileStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-group-profile-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-group-profile-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-group-profile-output
                    'make-create-group-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-listing-change-set-input common-lisp:nil
                       ((action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or change-action common-lisp:null)
                         :accessor
                         struct-shape-create-listing-change-set-input-action
                         :shape "ChangeAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-listing-change-set-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-listing-change-set-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (entity-identifier :initarg :entity-identifier
                         :initform
                         (common-lisp:error ":entityidentifier is required")
                         :type (common-lisp:or entity-id common-lisp:null)
                         :accessor
                         struct-shape-create-listing-change-set-input-entity-identifier
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-revision :initarg :entity-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-create-listing-change-set-input-entity-revision
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-type :initarg :entity-type :initform
                         (common-lisp:error ":entitytype is required") :type
                         (common-lisp:or entity-type common-lisp:null)
                         :accessor
                         struct-shape-create-listing-change-set-input-entity-type
                         :shape "EntityType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-listing-change-set-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-listing-change-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-listing-change-set-input
                    'make-create-listing-change-set-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-listing-change-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-listing-change-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-identifier))
      (common-lisp:list
       (common-lisp:cons "entityIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-revision))
      (common-lisp:list
       (common-lisp:cons "entityRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "entityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-listing-change-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-listing-change-set-output common-lisp:nil
                       ((listing-id :initarg :listing-id :initform
                         (common-lisp:error ":listingid is required") :type
                         (common-lisp:or listing-id common-lisp:null) :accessor
                         struct-shape-create-listing-change-set-output-listing-id
                         :shape "ListingId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (listing-revision :initarg :listing-revision :initform
                         (common-lisp:error ":listingrevision is required")
                         :type (common-lisp:or revision common-lisp:null)
                         :accessor
                         struct-shape-create-listing-change-set-output-listing-revision
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or listing-status common-lisp:null)
                         :accessor
                         struct-shape-create-listing-change-set-output-status
                         :shape "ListingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-listing-change-set-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-listing-change-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-listing-change-set-output
                    'make-create-listing-change-set-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-listing-change-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-listing-change-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-id))
      (common-lisp:list
       (common-lisp:cons "listingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-revision))
      (common-lisp:list
       (common-lisp:cons "listingRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-listing-change-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-input common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-project-input-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-project-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor
                         struct-shape-create-project-input-glossary-terms
                         :shape "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor struct-shape-create-project-input-name
                         :shape "ProjectName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-project-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-project-input 'make-create-project-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-project-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-project-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-membership-input common-lisp:nil
                       ((designation :initarg :designation :initform
                         (common-lisp:error ":designation is required") :type
                         (common-lisp:or user-designation common-lisp:null)
                         :accessor
                         struct-shape-create-project-membership-input-designation
                         :shape "UserDesignation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-project-membership-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (member :initarg :member :initform
                         (common-lisp:error ":member is required") :type
                         (common-lisp:or member common-lisp:null) :accessor
                         struct-shape-create-project-membership-input-member
                         :shape "Member" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-identifier :initarg :project-identifier
                         :initform
                         (common-lisp:error ":projectidentifier is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-create-project-membership-input-project-identifier
                         :shape "ProjectId" :location "uri" :location-name
                         "projectIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-project-membership-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-project-membership-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-project-membership-input
                    'make-create-project-membership-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-membership-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'designation))
      (common-lisp:list
       (common-lisp:cons "designation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-membership-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-membership-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-project-membership-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-project-membership-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-project-membership-output
                    'make-create-project-membership-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-membership-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-project-output-created-at :shape
                         "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-create-project-output-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-project-output-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-project-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-create-project-output-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor
                         struct-shape-create-project-output-glossary-terms
                         :shape "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-create-project-output-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-project-output-last-updated-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor struct-shape-create-project-output-name
                         :shape "ProjectName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-status :initarg :project-status :initform
                         common-lisp:nil :type
                         (common-lisp:or project-status common-lisp:null)
                         :accessor
                         struct-shape-create-project-output-project-status
                         :shape "ProjectStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-project-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-project-output 'make-create-project-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-status))
      (common-lisp:list
       (common-lisp:cons "projectStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-subscription-grant-input common-lisp:nil
                       ((asset-target-names :initarg :asset-target-names
                         :initform common-lisp:nil :type
                         (common-lisp:or asset-target-names common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-grant-input-asset-target-names
                         :shape "AssetTargetNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-subscription-grant-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-grant-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (environment-identifier :initarg
                         :environment-identifier :initform
                         (common-lisp:error
                          ":environmentidentifier is required")
                         :type (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-grant-input-environment-identifier
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (granted-entity :initarg :granted-entity :initform
                         (common-lisp:error ":grantedentity is required") :type
                         (common-lisp:or granted-entity-input common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-grant-input-granted-entity
                         :shape "GrantedEntityInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-target-identifier :initarg
                         :subscription-target-identifier :initform
                         (common-lisp:error
                          ":subscriptiontargetidentifier is required")
                         :type
                         (common-lisp:or subscription-target-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-grant-input-subscription-target-identifier
                         :shape "SubscriptionTargetId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-subscription-grant-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-subscription-grant-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-subscription-grant-input
                    'make-create-subscription-grant-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-grant-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-grant-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-target-names))
      (common-lisp:list
       (common-lisp:cons "assetTargetNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-identifier))
      (common-lisp:list
       (common-lisp:cons "environmentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granted-entity))
      (common-lisp:list
       (common-lisp:cons "grantedEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-identifier))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-grant-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-subscription-grant-output common-lisp:nil
                       ((assets :initarg :assets :initform common-lisp:nil
                         :type
                         (common-lisp:or subscribed-assets common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-grant-output-assets
                         :shape "SubscribedAssets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-create-subscription-grant-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-create-subscription-grant-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-subscription-grant-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (granted-entity :initarg :granted-entity :initform
                         (common-lisp:error ":grantedentity is required") :type
                         (common-lisp:or granted-entity common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-grant-output-granted-entity
                         :shape "GrantedEntity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-grant-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-grant-output-id
                         :shape "SubscriptionGrantId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-grant-overall-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-grant-output-status
                         :shape "SubscriptionGrantOverallStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscription-id :initarg :subscription-id :initform
                         common-lisp:nil :type
                         (common-lisp:or subscription-id common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-grant-output-subscription-id
                         :shape "SubscriptionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-target-id :initarg
                         :subscription-target-id :initform
                         (common-lisp:error
                          ":subscriptiontargetid is required")
                         :type
                         (common-lisp:or subscription-target-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-grant-output-subscription-target-id
                         :shape "SubscriptionTargetId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-create-subscription-grant-output-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-create-subscription-grant-output-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-subscription-grant-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-subscription-grant-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-subscription-grant-output
                    'make-create-subscription-grant-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-grant-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-grant-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granted-entity))
      (common-lisp:list
       (common-lisp:cons "grantedEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-grant-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-subscription-request-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-subscription-request-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-request-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (request-reason :initarg :request-reason :initform
                         (common-lisp:error ":requestreason is required") :type
                         (common-lisp:or request-reason common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-request-input-request-reason
                         :shape "RequestReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscribed-listings :initarg :subscribed-listings
                         :initform
                         (common-lisp:error ":subscribedlistings is required")
                         :type
                         (common-lisp:or subscribed-listing-inputs
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-request-input-subscribed-listings
                         :shape "SubscribedListingInputs" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscribed-principals :initarg :subscribed-principals
                         :initform
                         (common-lisp:error
                          ":subscribedprincipals is required")
                         :type
                         (common-lisp:or subscribed-principal-inputs
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-request-input-subscribed-principals
                         :shape "SubscribedPrincipalInputs" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-subscription-request-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-subscription-request-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-subscription-request-input
                    'make-create-subscription-request-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-request-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-request-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-reason))
      (common-lisp:list
       (common-lisp:cons "requestReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listings))
      (common-lisp:list
       (common-lisp:cons "subscribedListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principals))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-request-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-subscription-request-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-create-subscription-request-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-create-subscription-request-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (decision-comment :initarg :decision-comment :initform
                         common-lisp:nil :type
                         (common-lisp:or decision-comment common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-request-output-decision-comment
                         :shape "DecisionComment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-subscription-request-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-request-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-request-output-id
                         :shape "SubscriptionRequestId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (request-reason :initarg :request-reason :initform
                         (common-lisp:error ":requestreason is required") :type
                         (common-lisp:or request-reason common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-request-output-request-reason
                         :shape "RequestReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reviewer-id :initarg :reviewer-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-subscription-request-output-reviewer-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-request-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-request-output-status
                         :shape "SubscriptionRequestStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscribed-listings :initarg :subscribed-listings
                         :initform
                         (common-lisp:error ":subscribedlistings is required")
                         :type
                         (common-lisp:or
                          create-subscription-request-output-subscribed-listings-list
                          common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-request-output-subscribed-listings
                         :shape
                         "CreateSubscriptionRequestOutputSubscribedListingsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subscribed-principals :initarg :subscribed-principals
                         :initform
                         (common-lisp:error
                          ":subscribedprincipals is required")
                         :type
                         (common-lisp:or
                          create-subscription-request-output-subscribed-principals-list
                          common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-request-output-subscribed-principals
                         :shape
                         "CreateSubscriptionRequestOutputSubscribedPrincipalsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-create-subscription-request-output-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-create-subscription-request-output-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-subscription-request-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-subscription-request-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-subscription-request-output
                    'make-create-subscription-request-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-request-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-request-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-comment))
      (common-lisp:list
       (common-lisp:cons "decisionComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-reason))
      (common-lisp:list
       (common-lisp:cons "requestReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewer-id))
      (common-lisp:list
       (common-lisp:cons "reviewerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listings))
      (common-lisp:list
       (common-lisp:cons "subscribedListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principals))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-request-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-subscription-request-output-subscribed-listings-list
                      ()
   '(trivial-types:proper-list subscribed-listing))
 (common-lisp:defun make-create-subscription-request-output-subscribed-listings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-listing))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype create-subscription-request-output-subscribed-principals-list
                      ()
   '(trivial-types:proper-list subscribed-principal))
 (common-lisp:defun make-create-subscription-request-output-subscribed-principals-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-subscription-target-input common-lisp:nil
                       ((applicable-asset-types :initarg
                         :applicable-asset-types :initform
                         (common-lisp:error
                          ":applicableassettypes is required")
                         :type
                         (common-lisp:or applicable-asset-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-target-input-applicable-asset-types
                         :shape "ApplicableAssetTypes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authorized-principals :initarg :authorized-principals
                         :initform
                         (common-lisp:error
                          ":authorizedprincipals is required")
                         :type
                         (common-lisp:or authorized-principal-identifiers
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-target-input-authorized-principals
                         :shape "AuthorizedPrincipalIdentifiers" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-subscription-target-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-target-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (environment-identifier :initarg
                         :environment-identifier :initform
                         (common-lisp:error
                          ":environmentidentifier is required")
                         :type (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-target-input-environment-identifier
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentIdentifier")
                        (manage-access-role :initarg :manage-access-role
                         :initform
                         (common-lisp:error ":manageaccessrole is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-target-input-manage-access-role
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or subscription-target-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-target-input-name
                         :shape "SubscriptionTargetName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (provider :initarg :provider :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-target-input-provider
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-target-config :initarg
                         :subscription-target-config :initform
                         (common-lisp:error
                          ":subscriptiontargetconfig is required")
                         :type
                         (common-lisp:or subscription-target-forms
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-target-input-subscription-target-config
                         :shape "SubscriptionTargetForms" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-subscription-target-input-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-subscription-target-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-subscription-target-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-subscription-target-input
                    'make-create-subscription-target-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-target-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applicable-asset-types))
      (common-lisp:list
       (common-lisp:cons "applicableAssetTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-principals))
      (common-lisp:list
       (common-lisp:cons "authorizedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manage-access-role))
      (common-lisp:list
       (common-lisp:cons "manageAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-config))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-target-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-subscription-target-output common-lisp:nil
                       ((applicable-asset-types :initarg
                         :applicable-asset-types :initform
                         (common-lisp:error
                          ":applicableassettypes is required")
                         :type
                         (common-lisp:or applicable-asset-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-target-output-applicable-asset-types
                         :shape "ApplicableAssetTypes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authorized-principals :initarg :authorized-principals
                         :initform
                         (common-lisp:error
                          ":authorizedprincipals is required")
                         :type
                         (common-lisp:or authorized-principal-identifiers
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-target-output-authorized-principals
                         :shape "AuthorizedPrincipalIdentifiers" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-create-subscription-target-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-create-subscription-target-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-subscription-target-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-target-output-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-target-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-target-output-id
                         :shape "SubscriptionTargetId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (manage-access-role :initarg :manage-access-role
                         :initform
                         (common-lisp:error ":manageaccessrole is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-target-output-manage-access-role
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or subscription-target-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-target-output-name
                         :shape "SubscriptionTargetName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-create-subscription-target-output-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-subscription-target-output-provider
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-target-config :initarg
                         :subscription-target-config :initform
                         (common-lisp:error
                          ":subscriptiontargetconfig is required")
                         :type
                         (common-lisp:or subscription-target-forms
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscription-target-output-subscription-target-config
                         :shape "SubscriptionTargetForms" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-subscription-target-output-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-create-subscription-target-output-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-create-subscription-target-output-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-subscription-target-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-subscription-target-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-subscription-target-output
                    'make-create-subscription-target-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-target-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-target-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applicable-asset-types))
      (common-lisp:list
       (common-lisp:cons "applicableAssetTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-principals))
      (common-lisp:list
       (common-lisp:cons "authorizedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manage-access-role))
      (common-lisp:list
       (common-lisp:cons "manageAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-config))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-target-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-profile-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-user-profile-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-create-user-profile-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (user-identifier :initarg :user-identifier :initform
                         (common-lisp:error ":useridentifier is required")
                         :type
                         (common-lisp:or user-identifier common-lisp:null)
                         :accessor
                         struct-shape-create-user-profile-input-user-identifier
                         :shape "UserIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-type :initarg :user-type :initform
                         common-lisp:nil :type
                         (common-lisp:or user-type common-lisp:null) :accessor
                         struct-shape-create-user-profile-input-user-type
                         :shape "UserType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-profile-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-profile-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-profile-input
                    'make-create-user-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-identifier))
      (common-lisp:list
       (common-lisp:cons "userIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-type))
      (common-lisp:list
       (common-lisp:cons "userType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-profile-output common-lisp:nil
                       ((details :initarg :details :initform common-lisp:nil
                         :type
                         (common-lisp:or user-profile-details common-lisp:null)
                         :accessor
                         struct-shape-create-user-profile-output-details :shape
                         "UserProfileDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-create-user-profile-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or user-profile-id common-lisp:null)
                         :accessor struct-shape-create-user-profile-output-id
                         :shape "UserProfileId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or user-profile-status common-lisp:null)
                         :accessor
                         struct-shape-create-user-profile-output-status :shape
                         "UserProfileStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or user-profile-type common-lisp:null)
                         :accessor struct-shape-create-user-profile-output-type
                         :shape "UserProfileType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-profile-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-profile-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-profile-output
                    'make-create-user-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-output))
   common-lisp:nil))
(common-lisp:deftype created-at () 'common-lisp:string)
(common-lisp:deftype created-by () 'common-lisp:string)
(common-lisp:deftype cron-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass custom-parameter common-lisp:nil
                       ((default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-custom-parameter-default-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-custom-parameter-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (field-type :initarg :field-type :initform
                         (common-lisp:error ":fieldtype is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-custom-parameter-field-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-editable :initarg :is-editable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-custom-parameter-is-editable :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-optional :initarg :is-optional :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-custom-parameter-is-optional :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-name :initarg :key-name :initform
                         (common-lisp:error ":keyname is required") :type
                         (common-lisp:or custom-parameter-key-name-string
                                         common-lisp:null)
                         :accessor struct-shape-custom-parameter-key-name
                         :shape "CustomParameterKeyNameString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-parameter 'make-custom-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-type))
      (common-lisp:list
       (common-lisp:cons "fieldType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-editable))
      (common-lisp:list
       (common-lisp:cons "isEditable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-optional))
      (common-lisp:list
       (common-lisp:cons "isOptional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "keyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-parameter))
   common-lisp:nil))
(common-lisp:deftype custom-parameter-key-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype custom-parameter-list ()
   '(trivial-types:proper-list custom-parameter))
 (common-lisp:defun make-custom-parameter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-asset-activity-status () 'common-lisp:string)
(common-lisp:deftype data-product-description () 'common-lisp:string)
(common-lisp:deftype data-product-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-product-item common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-data-product-item-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (item-id :initarg :item-id :initform common-lisp:nil
                         :type
                         (common-lisp:or data-product-id common-lisp:null)
                         :accessor struct-shape-data-product-item-item-id
                         :shape "DataProductId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-product-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-product-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-product-item 'make-data-product-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-product-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-product-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-id))
      (common-lisp:list
       (common-lisp:cons "itemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-product-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-product-items ()
   '(trivial-types:proper-list data-product-item))
 (common-lisp:defun make-data-product-items
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-product-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-product-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-product-summary common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-data-product-summary-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-data-product-summary-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-product-items :initarg :data-product-items
                         :initform common-lisp:nil :type
                         (common-lisp:or data-product-items common-lisp:null)
                         :accessor
                         struct-shape-data-product-summary-data-product-items
                         :shape "DataProductItems" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or data-product-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-product-summary-description :shape
                         "DataProductDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-data-product-summary-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor
                         struct-shape-data-product-summary-glossary-terms
                         :shape "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or data-product-id common-lisp:null)
                         :accessor struct-shape-data-product-summary-id :shape
                         "DataProductId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or data-product-name common-lisp:null)
                         :accessor struct-shape-data-product-summary-name
                         :shape "DataProductName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform
                         (common-lisp:error ":owningprojectid is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-data-product-summary-owning-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-data-product-summary-updated-at :shape
                         "UpdatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-data-product-summary-updated-by :shape
                         "UpdatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-product-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-product-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-product-summary 'make-data-product-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-product-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-product-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-product-items))
      (common-lisp:list
       (common-lisp:cons "dataProductItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-product-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source-configuration-input common-lisp:nil
                       ((glue-run-configuration :initarg
                         :glue-run-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or glue-run-configuration-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-configuration-input-glue-run-configuration
                         :shape "GlueRunConfigurationInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (redshift-run-configuration :initarg
                         :redshift-run-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or redshift-run-configuration-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-configuration-input-redshift-run-configuration
                         :shape "RedshiftRunConfigurationInput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-source-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-configuration-input
                    'make-data-source-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'glue-run-configuration))
      (common-lisp:list
       (common-lisp:cons "glueRunConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-run-configuration))
      (common-lisp:list
       (common-lisp:cons "redshiftRunConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source-configuration-output common-lisp:nil
                       ((glue-run-configuration :initarg
                         :glue-run-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or glue-run-configuration-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-configuration-output-glue-run-configuration
                         :shape "GlueRunConfigurationOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (redshift-run-configuration :initarg
                         :redshift-run-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or redshift-run-configuration-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-configuration-output-redshift-run-configuration
                         :shape "RedshiftRunConfigurationOutput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-source-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-configuration-output
                    'make-data-source-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'glue-run-configuration))
      (common-lisp:list
       (common-lisp:cons "glueRunConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-run-configuration))
      (common-lisp:list
       (common-lisp:cons "redshiftRunConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source-error-message common-lisp:nil
                       ((error-detail :initarg :error-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-source-error-message-error-detail
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-type :initarg :error-type :initform
                         (common-lisp:error ":errortype is required") :type
                         (common-lisp:or data-source-error-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-error-message-error-type
                         :shape "DataSourceErrorType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-error-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-error-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-error-message
                    'make-data-source-error-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-error-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-error-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail))
      (common-lisp:list
       (common-lisp:cons "errorDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "errorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-error-message))
   common-lisp:nil))
(common-lisp:deftype data-source-error-type () 'common-lisp:string)
(common-lisp:deftype data-source-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-source-run-activities ()
   '(trivial-types:proper-list data-source-run-activity))
 (common-lisp:defun make-data-source-run-activities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-source-run-activity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-source-run-activity common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-data-source-run-activity-created-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-asset-id :initarg :data-asset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-source-run-activity-data-asset-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-asset-status :initarg :data-asset-status
                         :initform
                         (common-lisp:error ":dataassetstatus is required")
                         :type
                         (common-lisp:or data-asset-activity-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-run-activity-data-asset-status
                         :shape "DataAssetActivityStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-source-run-id :initarg :data-source-run-id
                         :initform
                         (common-lisp:error ":datasourcerunid is required")
                         :type
                         (common-lisp:or data-source-run-id common-lisp:null)
                         :accessor
                         struct-shape-data-source-run-activity-data-source-run-id
                         :shape "DataSourceRunId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-data-source-run-activity-database :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-error-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-run-activity-error-message
                         :shape "DataSourceErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-data-source-run-activity-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (technical-description :initarg :technical-description
                         :initform common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-data-source-run-activity-technical-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (technical-name :initarg :technical-name :initform
                         (common-lisp:error ":technicalname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-data-source-run-activity-technical-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-data-source-run-activity-updated-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-run-activity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-run-activity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-run-activity 'make-data-source-run-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-run-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-run-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-asset-id))
      (common-lisp:list
       (common-lisp:cons "dataAssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-asset-status))
      (common-lisp:list
       (common-lisp:cons "dataAssetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-run-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'technical-description))
      (common-lisp:list
       (common-lisp:cons "technicalDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'technical-name))
      (common-lisp:list
       (common-lisp:cons "technicalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-run-activity))
   common-lisp:nil))
(common-lisp:deftype data-source-run-id () 'common-lisp:string)
(common-lisp:deftype data-source-run-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-source-run-summaries ()
   '(trivial-types:proper-list data-source-run-summary))
 (common-lisp:defun make-data-source-run-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-run-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-source-run-summary common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-data-source-run-summary-created-at :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-source-id :initarg :data-source-id :initform
                         (common-lisp:error ":datasourceid is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-data-source-run-summary-data-source-id
                         :shape "DataSourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-error-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-run-summary-error-message
                         :shape "DataSourceErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or data-source-run-id common-lisp:null)
                         :accessor struct-shape-data-source-run-summary-id
                         :shape "DataSourceRunId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-data-source-run-summary-project-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (run-statistics-for-assets :initarg
                         :run-statistics-for-assets :initform common-lisp:nil
                         :type
                         (common-lisp:or run-statistics-for-assets
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-run-summary-run-statistics-for-assets
                         :shape "RunStatisticsForAssets" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (started-at :initarg :started-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-data-source-run-summary-started-at :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or data-source-run-status
                                         common-lisp:null)
                         :accessor struct-shape-data-source-run-summary-status
                         :shape "DataSourceRunStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stopped-at :initarg :stopped-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-data-source-run-summary-stopped-at :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or data-source-run-type common-lisp:null)
                         :accessor struct-shape-data-source-run-summary-type
                         :shape "DataSourceRunType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-data-source-run-summary-updated-at :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-run-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-run-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-run-summary 'make-data-source-run-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-run-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-run-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-statistics-for-assets))
      (common-lisp:list
       (common-lisp:cons "runStatisticsForAssets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-at))
      (common-lisp:list
       (common-lisp:cons "stoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-run-summary))
   common-lisp:nil))
(common-lisp:deftype data-source-run-type () 'common-lisp:string)
(common-lisp:deftype data-source-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-source-summaries ()
   '(trivial-types:proper-list data-source-summary))
 (common-lisp:defun make-data-source-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-source-summary common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-data-source-summary-created-at :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-source-id :initarg :data-source-id :initform
                         (common-lisp:error ":datasourceid is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-data-source-summary-data-source-id :shape
                         "DataSourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-data-source-summary-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enable-setting :initarg :enable-setting :initform
                         common-lisp:nil :type
                         (common-lisp:or enable-setting common-lisp:null)
                         :accessor
                         struct-shape-data-source-summary-enable-setting :shape
                         "EnableSetting" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-data-source-summary-environment-id :shape
                         "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-run-asset-count :initarg :last-run-asset-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-data-source-summary-last-run-asset-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-run-at :initarg :last-run-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-data-source-summary-last-run-at :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-run-error-message :initarg
                         :last-run-error-message :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-error-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-summary-last-run-error-message
                         :shape "DataSourceErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-run-status :initarg :last-run-status :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-run-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-summary-last-run-status
                         :shape "DataSourceRunStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-data-source-summary-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type
                         (common-lisp:or schedule-configuration
                                         common-lisp:null)
                         :accessor struct-shape-data-source-summary-schedule
                         :shape "ScheduleConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or data-source-status common-lisp:null)
                         :accessor struct-shape-data-source-summary-status
                         :shape "DataSourceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-source-summary-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-data-source-summary-updated-at :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-summary 'make-data-source-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-setting))
      (common-lisp:list
       (common-lisp:cons "enableSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-asset-count))
      (common-lisp:list
       (common-lisp:cons "lastRunAssetCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-at))
      (common-lisp:list
       (common-lisp:cons "lastRunAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-error-message))
      (common-lisp:list
       (common-lisp:cons "lastRunErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-status))
      (common-lisp:list
       (common-lisp:cons "lastRunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source-summary))
   common-lisp:nil))
(common-lisp:deftype data-source-type () 'common-lisp:string)
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:deftype decision-comment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-asset-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-delete-asset-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or asset-identifier common-lisp:null)
                         :accessor struct-shape-delete-asset-input-identifier
                         :shape "AssetIdentifier" :location "uri"
                         :location-name "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-asset-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-asset-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-asset-input 'make-delete-asset-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-asset-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-asset-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-asset-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-asset-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-asset-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-asset-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-asset-output 'make-delete-asset-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-asset-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-asset-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-asset-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-asset-type-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-delete-asset-type-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or asset-type-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-asset-type-input-identifier :shape
                         "AssetTypeIdentifier" :location "uri" :location-name
                         "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-asset-type-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-asset-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-asset-type-input 'make-delete-asset-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-asset-type-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-asset-type-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-asset-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-asset-type-output 'make-delete-asset-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-source-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-data-source-input-client-token
                         :shape "String" :location "querystring" :location-name
                         "clientToken")
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-delete-data-source-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-delete-data-source-input-identifier
                         :shape "DataSourceId" :location "uri" :location-name
                         "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-source-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-source-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-input 'make-delete-data-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-source-output common-lisp:nil
                       ((asset-forms-output :initarg :asset-forms-output
                         :initform common-lisp:nil :type
                         (common-lisp:or form-output-list common-lisp:null)
                         :accessor
                         struct-shape-delete-data-source-output-asset-forms-output
                         :shape "FormOutputList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-configuration-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-data-source-output-configuration
                         :shape "DataSourceConfigurationOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-delete-data-source-output-created-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-delete-data-source-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-delete-data-source-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-setting :initarg :enable-setting :initform
                         common-lisp:nil :type
                         (common-lisp:or enable-setting common-lisp:null)
                         :accessor
                         struct-shape-delete-data-source-output-enable-setting
                         :shape "EnableSetting" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-delete-data-source-output-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-error-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-data-source-output-error-message
                         :shape "DataSourceErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor struct-shape-delete-data-source-output-id
                         :shape "DataSourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-run-at :initarg :last-run-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-delete-data-source-output-last-run-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-run-error-message :initarg
                         :last-run-error-message :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-error-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-data-source-output-last-run-error-message
                         :shape "DataSourceErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-run-status :initarg :last-run-status :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-run-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-data-source-output-last-run-status
                         :shape "DataSourceRunStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-delete-data-source-output-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-delete-data-source-output-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publish-on-import :initarg :publish-on-import
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-delete-data-source-output-publish-on-import
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type
                         (common-lisp:or schedule-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-data-source-output-schedule :shape
                         "ScheduleConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-status common-lisp:null)
                         :accessor
                         struct-shape-delete-data-source-output-status :shape
                         "DataSourceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor struct-shape-delete-data-source-output-type
                         :shape "DataSourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-delete-data-source-output-updated-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-source-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-source-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-output
                    'make-delete-data-source-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-forms-output))
      (common-lisp:list
       (common-lisp:cons "assetFormsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-setting))
      (common-lisp:list
       (common-lisp:cons "enableSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-at))
      (common-lisp:list
       (common-lisp:cons "lastRunAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-error-message))
      (common-lisp:list
       (common-lisp:cons "lastRunErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-status))
      (common-lisp:list
       (common-lisp:cons "lastRunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-on-import))
      (common-lisp:list
       (common-lisp:cons "publishOnImport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-domain-input-client-token :shape
                         "String" :location "querystring" :location-name
                         "clientToken")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-delete-domain-input-identifier :shape
                         "DomainId" :location "uri" :location-name
                         "identifier")
                        (skip-deletion-check :initarg :skip-deletion-check
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-delete-domain-input-skip-deletion-check
                         :shape "Boolean" :location "querystring"
                         :location-name "skipDeletionCheck"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-domain-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-domain-input 'make-delete-domain-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-domain-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-domain-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-domain-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-output common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or domain-status common-lisp:null)
                         :accessor struct-shape-delete-domain-output-status
                         :shape "DomainStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-domain-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-domain-output 'make-delete-domain-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-domain-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-domain-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-domain-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-blueprint-configuration-input
                       common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-delete-environment-blueprint-configuration-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (environment-blueprint-identifier :initarg
                         :environment-blueprint-identifier :initform
                         (common-lisp:error
                          ":environmentblueprintidentifier is required")
                         :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-environment-blueprint-configuration-input-environment-blueprint-identifier
                         :shape "EnvironmentBlueprintId" :location "uri"
                         :location-name "environmentBlueprintIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-blueprint-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-environment-blueprint-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-blueprint-configuration-input
                    'make-delete-environment-blueprint-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-blueprint-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-blueprint-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-blueprint-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-blueprint-configuration-output
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-blueprint-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-environment-blueprint-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-blueprint-configuration-output
                    'make-delete-environment-blueprint-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-blueprint-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-blueprint-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-blueprint-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-delete-environment-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-delete-environment-input-identifier
                         :shape "EnvironmentId" :location "uri" :location-name
                         "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-environment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-input 'make-delete-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-profile-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-delete-environment-profile-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or environment-profile-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-environment-profile-input-identifier
                         :shape "EnvironmentProfileId" :location "uri"
                         :location-name "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-profile-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-environment-profile-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-profile-input
                    'make-delete-environment-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-form-type-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-delete-form-type-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (form-type-identifier :initarg :form-type-identifier
                         :initform
                         (common-lisp:error ":formtypeidentifier is required")
                         :type
                         (common-lisp:or form-type-identifier common-lisp:null)
                         :accessor
                         struct-shape-delete-form-type-input-form-type-identifier
                         :shape "FormTypeIdentifier" :location "uri"
                         :location-name "formTypeIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-form-type-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-form-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-form-type-input 'make-delete-form-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-form-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-form-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-form-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-form-type-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-form-type-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-form-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-form-type-output 'make-delete-form-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-form-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-form-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-form-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-glossary-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-delete-glossary-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or glossary-id common-lisp:null)
                         :accessor
                         struct-shape-delete-glossary-input-identifier :shape
                         "GlossaryId" :location "uri" :location-name
                         "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-glossary-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-glossary-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-glossary-input 'make-delete-glossary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-glossary-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-glossary-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-glossary-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-glossary-output 'make-delete-glossary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-glossary-term-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-delete-glossary-term-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or glossary-term-id common-lisp:null)
                         :accessor
                         struct-shape-delete-glossary-term-input-identifier
                         :shape "GlossaryTermId" :location "uri" :location-name
                         "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-glossary-term-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-glossary-term-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-glossary-term-input
                    'make-delete-glossary-term-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-term-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-term-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-term-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-glossary-term-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-glossary-term-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-glossary-term-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-glossary-term-output
                    'make-delete-glossary-term-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-term-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-term-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-glossary-term-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-listing-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-delete-listing-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or listing-id common-lisp:null) :accessor
                         struct-shape-delete-listing-input-identifier :shape
                         "ListingId" :location "uri" :location-name
                         "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-listing-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-listing-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-listing-input 'make-delete-listing-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-listing-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-listing-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-listing-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-listing-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-listing-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-listing-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-listing-output 'make-delete-listing-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-listing-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-listing-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-listing-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-delete-project-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-delete-project-input-identifier :shape
                         "ProjectId" :location "uri" :location-name
                         "identifier")
                        (skip-deletion-check :initarg :skip-deletion-check
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-delete-project-input-skip-deletion-check
                         :shape "Boolean" :location "querystring"
                         :location-name "skipDeletionCheck"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-project-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-input 'make-delete-project-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-project-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-membership-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-delete-project-membership-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (member :initarg :member :initform
                         (common-lisp:error ":member is required") :type
                         (common-lisp:or member common-lisp:null) :accessor
                         struct-shape-delete-project-membership-input-member
                         :shape "Member" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-identifier :initarg :project-identifier
                         :initform
                         (common-lisp:error ":projectidentifier is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-delete-project-membership-input-project-identifier
                         :shape "ProjectId" :location "uri" :location-name
                         "projectIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-membership-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-project-membership-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-membership-input
                    'make-delete-project-membership-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-membership-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-membership-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-membership-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-membership-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-project-membership-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-membership-output
                    'make-delete-project-membership-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-membership-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-project-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-output 'make-delete-project-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subscription-grant-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-delete-subscription-grant-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or subscription-grant-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-subscription-grant-input-identifier
                         :shape "SubscriptionGrantId" :location "uri"
                         :location-name "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-subscription-grant-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-subscription-grant-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-subscription-grant-input
                    'make-delete-subscription-grant-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-grant-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-grant-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-grant-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subscription-grant-output common-lisp:nil
                       ((assets :initarg :assets :initform common-lisp:nil
                         :type
                         (common-lisp:or subscribed-assets common-lisp:null)
                         :accessor
                         struct-shape-delete-subscription-grant-output-assets
                         :shape "SubscribedAssets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-delete-subscription-grant-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-delete-subscription-grant-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-delete-subscription-grant-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (granted-entity :initarg :granted-entity :initform
                         (common-lisp:error ":grantedentity is required") :type
                         (common-lisp:or granted-entity common-lisp:null)
                         :accessor
                         struct-shape-delete-subscription-grant-output-granted-entity
                         :shape "GrantedEntity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-grant-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-subscription-grant-output-id
                         :shape "SubscriptionGrantId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-grant-overall-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-subscription-grant-output-status
                         :shape "SubscriptionGrantOverallStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscription-id :initarg :subscription-id :initform
                         common-lisp:nil :type
                         (common-lisp:or subscription-id common-lisp:null)
                         :accessor
                         struct-shape-delete-subscription-grant-output-subscription-id
                         :shape "SubscriptionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-target-id :initarg
                         :subscription-target-id :initform
                         (common-lisp:error
                          ":subscriptiontargetid is required")
                         :type
                         (common-lisp:or subscription-target-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-subscription-grant-output-subscription-target-id
                         :shape "SubscriptionTargetId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-delete-subscription-grant-output-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-delete-subscription-grant-output-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-subscription-grant-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-subscription-grant-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-subscription-grant-output
                    'make-delete-subscription-grant-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-grant-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-grant-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granted-entity))
      (common-lisp:list
       (common-lisp:cons "grantedEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-grant-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subscription-request-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-delete-subscription-request-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or subscription-request-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-subscription-request-input-identifier
                         :shape "SubscriptionRequestId" :location "uri"
                         :location-name "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-subscription-request-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-subscription-request-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-subscription-request-input
                    'make-delete-subscription-request-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-request-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-request-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-request-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subscription-target-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-delete-subscription-target-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (environment-identifier :initarg
                         :environment-identifier :initform
                         (common-lisp:error
                          ":environmentidentifier is required")
                         :type (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-delete-subscription-target-input-environment-identifier
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or subscription-target-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-subscription-target-input-identifier
                         :shape "SubscriptionTargetId" :location "uri"
                         :location-name "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-subscription-target-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-subscription-target-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-subscription-target-input
                    'make-delete-subscription-target-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-target-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment common-lisp:nil
                       ((deployment-id :initarg :deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deployment-deployment-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-status :initarg :deployment-status
                         :initform common-lisp:nil :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor struct-shape-deployment-deployment-status
                         :shape "DeploymentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-type :initarg :deployment-type :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-type common-lisp:null)
                         :accessor struct-shape-deployment-deployment-type
                         :shape "DeploymentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-error common-lisp:null)
                         :accessor struct-shape-deployment-failure-reason
                         :shape "EnvironmentError" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-deployment-complete :initarg
                         :is-deployment-complete :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-deployment-is-deployment-complete :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (messages :initarg :messages :initform common-lisp:nil
                         :type
                         (common-lisp:or deployment-messages-list
                                         common-lisp:null)
                         :accessor struct-shape-deployment-messages :shape
                         "DeploymentMessagesList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'deployment 'make-deployment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "deploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-deployment-complete))
      (common-lisp:list
       (common-lisp:cons "isDeploymentComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment))
   common-lisp:nil))
(common-lisp:deftype deployment-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype deployment-messages-list ()
   '(trivial-types:proper-list deployment-message))
 (common-lisp:defun make-deployment-messages-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-message))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass deployment-properties common-lisp:nil
                       ((end-timeout-minutes :initarg :end-timeout-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          deployment-properties-end-timeout-minutes-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-deployment-properties-end-timeout-minutes
                         :shape "DeploymentPropertiesEndTimeoutMinutesInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-timeout-minutes :initarg :start-timeout-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          deployment-properties-start-timeout-minutes-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-deployment-properties-start-timeout-minutes
                         :shape
                         "DeploymentPropertiesStartTimeoutMinutesInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deployment-properties 'make-deployment-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "endTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "startTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-properties))
   common-lisp:nil))
(common-lisp:deftype deployment-properties-end-timeout-minutes-integer ()
  'common-lisp:integer)
(common-lisp:deftype deployment-properties-start-timeout-minutes-integer ()
  'common-lisp:integer)
(common-lisp:deftype deployment-status () 'common-lisp:string)
(common-lisp:deftype deployment-type () 'common-lisp:string)
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass detailed-glossary-term common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or glossary-term-name common-lisp:null)
                         :accessor struct-shape-detailed-glossary-term-name
                         :shape "GlossaryTermName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (short-description :initarg :short-description
                         :initform common-lisp:nil :type
                         (common-lisp:or short-description common-lisp:null)
                         :accessor
                         struct-shape-detailed-glossary-term-short-description
                         :shape "ShortDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detailed-glossary-term
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detailed-glossary-term
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detailed-glossary-term 'make-detailed-glossary-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detailed-glossary-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detailed-glossary-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "shortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detailed-glossary-term))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detailed-glossary-terms ()
   '(trivial-types:proper-list detailed-glossary-term))
 (common-lisp:defun make-detailed-glossary-terms
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list detailed-glossary-term))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain-description () 'common-lisp:string)
(common-lisp:deftype domain-id () 'common-lisp:string)
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:deftype domain-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-summaries ()
   '(trivial-types:proper-list domain-summary))
 (common-lisp:defun make-domain-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass domain-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-domain-summary-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-domain-summary-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-description common-lisp:null)
                         :accessor struct-shape-domain-summary-description
                         :shape "DomainDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-domain-summary-id :shape "DomainId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-domain-summary-last-updated-at :shape
                         "UpdatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (managed-account-id :initarg :managed-account-id
                         :initform
                         (common-lisp:error ":managedaccountid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-domain-summary-managed-account-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor struct-shape-domain-summary-name :shape
                         "DomainName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-url :initarg :portal-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-domain-summary-portal-url :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or domain-status common-lisp:null)
                         :accessor struct-shape-domain-summary-status :shape
                         "DomainStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'domain-summary 'make-domain-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-account-id))
      (common-lisp:list
       (common-lisp:cons "managedAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-url))
      (common-lisp:list
       (common-lisp:cons "portalUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-summary))
   common-lisp:nil))
(common-lisp:deftype enable-setting () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype enabled-region-list ()
   '(trivial-types:proper-list region-name))
 (common-lisp:defun make-enabled-region-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entity-id () 'common-lisp:string)
(common-lisp:deftype entity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-action-list ()
   '(trivial-types:proper-list configurable-environment-action))
 (common-lisp:defun make-environment-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configurable-environment-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass environment-blueprint-configuration-item common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-blueprint-configuration-item-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-environment-blueprint-configuration-item-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled-regions :initarg :enabled-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-region-list common-lisp:null)
                         :accessor
                         struct-shape-environment-blueprint-configuration-item-enabled-regions
                         :shape "EnabledRegionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-blueprint-id :initarg
                         :environment-blueprint-id :initform
                         (common-lisp:error
                          ":environmentblueprintid is required")
                         :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-blueprint-configuration-item-environment-blueprint-id
                         :shape "EnvironmentBlueprintId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (manage-access-role-arn :initarg
                         :manage-access-role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-environment-blueprint-configuration-item-manage-access-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioning-role-arn :initarg :provisioning-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-environment-blueprint-configuration-item-provisioning-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regional-parameters :initarg :regional-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or regional-parameter-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-blueprint-configuration-item-regional-parameters
                         :shape "RegionalParameterMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-blueprint-configuration-item-updated-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-blueprint-configuration-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'environment-blueprint-configuration-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-blueprint-configuration-item
                    'make-environment-blueprint-configuration-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-blueprint-configuration-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-blueprint-configuration-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-regions))
      (common-lisp:list
       (common-lisp:cons "enabledRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "manageAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-role-arn))
      (common-lisp:list
       (common-lisp:cons "provisioningRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regional-parameters))
      (common-lisp:list
       (common-lisp:cons "regionalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-blueprint-configuration-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-blueprint-configurations ()
   '(trivial-types:proper-list environment-blueprint-configuration-item))
 (common-lisp:defun make-environment-blueprint-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-blueprint-configuration-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-blueprint-id () 'common-lisp:string)
(common-lisp:deftype environment-blueprint-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-blueprint-summaries ()
   '(trivial-types:proper-list environment-blueprint-summary))
 (common-lisp:defun make-environment-blueprint-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-blueprint-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass environment-blueprint-summary common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-blueprint-summary-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-environment-blueprint-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-blueprint-summary-id :shape
                         "EnvironmentBlueprintId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-blueprint-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-blueprint-summary-name :shape
                         "EnvironmentBlueprintName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-environment-blueprint-summary-provider
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioning-properties :initarg
                         :provisioning-properties :initform
                         (common-lisp:error
                          ":provisioningproperties is required")
                         :type
                         (common-lisp:or provisioning-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-blueprint-summary-provisioning-properties
                         :shape "ProvisioningProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-blueprint-summary-updated-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-blueprint-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'environment-blueprint-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-blueprint-summary
                    'make-environment-blueprint-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-blueprint-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-blueprint-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-properties))
      (common-lisp:list
       (common-lisp:cons "provisioningProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-blueprint-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass environment-error common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-environment-error-code :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-environment-error-message :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-error 'make-environment-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-error))
   common-lisp:nil))
(common-lisp:deftype environment-id () 'common-lisp:string)
(common-lisp:deftype environment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass environment-parameter common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-environment-parameter-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-environment-parameter-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-parameter 'make-environment-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-parameters-list ()
   '(trivial-types:proper-list environment-parameter))
 (common-lisp:defun make-environment-parameters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-profile-id () 'common-lisp:string)
(common-lisp:deftype environment-profile-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-profile-summaries ()
   '(trivial-types:proper-list environment-profile-summary))
 (common-lisp:defun make-environment-profile-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-profile-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass environment-profile-summary common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-environment-profile-summary-aws-account-id
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-account-region :initarg :aws-account-region
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-environment-profile-summary-aws-account-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-profile-summary-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-environment-profile-summary-created-by
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-environment-profile-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-environment-profile-summary-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-blueprint-id :initarg
                         :environment-blueprint-id :initform
                         (common-lisp:error
                          ":environmentblueprintid is required")
                         :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-profile-summary-environment-blueprint-id
                         :shape "EnvironmentBlueprintId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or environment-profile-id
                                         common-lisp:null)
                         :accessor struct-shape-environment-profile-summary-id
                         :shape "EnvironmentProfileId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-profile-summary-name :shape
                         "EnvironmentProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-environment-profile-summary-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-profile-summary-updated-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-profile-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment-profile-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-profile-summary
                    'make-environment-profile-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-profile-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-profile-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-profile-summary))
   common-lisp:nil))
(common-lisp:deftype environment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-summaries ()
   '(trivial-types:proper-list environment-summary))
 (common-lisp:defun make-environment-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass environment-summary common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-environment-summary-aws-account-id :shape
                         "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-account-region :initarg :aws-account-region
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-environment-summary-aws-account-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-environment-summary-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-environment-summary-created-by :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-environment-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-environment-summary-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (environment-profile-id :initarg
                         :environment-profile-id :initform
                         (common-lisp:error
                          ":environmentprofileid is required")
                         :type
                         (common-lisp:or environment-profile-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-summary-environment-profile-id
                         :shape "EnvironmentProfileId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor struct-shape-environment-summary-id :shape
                         "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor struct-shape-environment-summary-name :shape
                         "EnvironmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-environment-summary-project-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-environment-summary-provider :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or environment-status common-lisp:null)
                         :accessor struct-shape-environment-summary-status
                         :shape "EnvironmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-environment-summary-updated-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-summary 'make-environment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-profile-id))
      (common-lisp:list
       (common-lisp:cons "environmentProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-summary))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype external-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass failure-cause common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-failure-cause-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failure-cause
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'failure-cause
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'failure-cause 'make-failure-cause))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failure-cause))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failure-cause))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failure-cause))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failure-reasons ()
   '(trivial-types:proper-list project-deletion-error))
 (common-lisp:defun make-failure-reasons
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-deletion-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or attribute common-lisp:null) :accessor
                         struct-shape-filter-attribute :shape "Attribute"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or filter-value-string common-lisp:null)
                         :accessor struct-shape-filter-value :shape
                         "FilterValueString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-clause common-lisp:nil
                       ((and :initarg :and :initform common-lisp:nil :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor struct-shape-filter-clause-and :shape
                         "FilterList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or filter common-lisp:null)
                         :accessor struct-shape-filter-clause-filter :shape
                         "Filter" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (or :initarg :or :initform common-lisp:nil :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor struct-shape-filter-clause-or :shape
                         "FilterList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-clause
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-clause
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter-clause 'make-filter-clause))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-clause))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-clause))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "and"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or))
      (common-lisp:list
       (common-lisp:cons "or"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-clause))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-expression common-lisp:nil
                       ((expression :initarg :expression :initform
                         (common-lisp:error ":expression is required") :type
                         (common-lisp:or filter-expression-expression-string
                                         common-lisp:null)
                         :accessor struct-shape-filter-expression-expression
                         :shape "FilterExpressionExpressionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or filter-expression-type
                                         common-lisp:null)
                         :accessor struct-shape-filter-expression-type :shape
                         "FilterExpressionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-expression
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-expression
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'filter-expression 'make-filter-expression))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-expression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-expression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-expression))
   common-lisp:nil))
(common-lisp:deftype filter-expression-expression-string () 'common-lisp:string)
(common-lisp:deftype filter-expression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-expressions ()
   '(trivial-types:proper-list filter-expression))
 (common-lisp:defun make-filter-expressions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-expression))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filter-list ()
   '(trivial-types:proper-list filter-clause))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-clause))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-value-string () 'common-lisp:string)
(common-lisp:deftype first-name () 'common-lisp:string)
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass form-entry-input common-lisp:nil
                       ((required :initarg :required :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-form-entry-input-required
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type-identifier :initarg :type-identifier :initform
                         (common-lisp:error ":typeidentifier is required")
                         :type
                         (common-lisp:or form-type-identifier common-lisp:null)
                         :accessor
                         struct-shape-form-entry-input-type-identifier :shape
                         "FormTypeIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type-revision :initarg :type-revision :initform
                         (common-lisp:error ":typerevision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-form-entry-input-type-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-form-entry-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'form-entry-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'form-entry-input 'make-form-entry-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-entry-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-entry-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-identifier))
      (common-lisp:list
       (common-lisp:cons "typeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-entry-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass form-entry-output common-lisp:nil
                       ((required :initarg :required :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-form-entry-output-required
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type-name :initarg :type-name :initform
                         (common-lisp:error ":typename is required") :type
                         (common-lisp:or form-type-name common-lisp:null)
                         :accessor struct-shape-form-entry-output-type-name
                         :shape "FormTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type-revision :initarg :type-revision :initform
                         (common-lisp:error ":typerevision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-form-entry-output-type-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-form-entry-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'form-entry-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'form-entry-output 'make-form-entry-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-entry-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-entry-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "typeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-entry-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass form-input common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type
                         (common-lisp:or form-input-content-string
                                         common-lisp:null)
                         :accessor struct-shape-form-input-content :shape
                         "FormInputContentString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (form-name :initarg :form-name :initform
                         (common-lisp:error ":formname is required") :type
                         (common-lisp:or form-name common-lisp:null) :accessor
                         struct-shape-form-input-form-name :shape "FormName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type-identifier :initarg :type-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or form-type-identifier common-lisp:null)
                         :accessor struct-shape-form-input-type-identifier
                         :shape "FormTypeIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type-revision :initarg :type-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-form-input-type-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-form-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'form-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'form-input 'make-form-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-name))
      (common-lisp:list
       (common-lisp:cons "formName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-identifier))
      (common-lisp:list
       (common-lisp:cons "typeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-input))
   common-lisp:nil))
(common-lisp:deftype form-input-content-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype form-input-list ()
   '(trivial-types:proper-list form-input))
 (common-lisp:defun make-form-input-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list form-input))
   aws-sdk/generator/shape::members))
(common-lisp:deftype form-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass form-output common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-form-output-content :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (form-name :initarg :form-name :initform
                         (common-lisp:error ":formname is required") :type
                         (common-lisp:or form-name common-lisp:null) :accessor
                         struct-shape-form-output-form-name :shape "FormName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type-name :initarg :type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or form-type-name common-lisp:null)
                         :accessor struct-shape-form-output-type-name :shape
                         "FormTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type-revision :initarg :type-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-form-output-type-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-form-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'form-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'form-output 'make-form-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-name))
      (common-lisp:list
       (common-lisp:cons "formName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "typeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype form-output-list ()
   '(trivial-types:proper-list form-output))
 (common-lisp:defun make-form-output-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list form-output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass form-type-data common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-form-type-data-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-form-type-data-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-form-type-data-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-form-type-data-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (imports :initarg :imports :initform common-lisp:nil
                         :type (common-lisp:or import-list common-lisp:null)
                         :accessor struct-shape-form-type-data-imports :shape
                         "ImportList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (model :initarg :model :initform common-lisp:nil :type
                         (common-lisp:or model common-lisp:null) :accessor
                         struct-shape-form-type-data-model :shape "Model"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or form-type-name common-lisp:null)
                         :accessor struct-shape-form-type-data-name :shape
                         "FormTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (origin-domain-id :initarg :origin-domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-form-type-data-origin-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (origin-project-id :initarg :origin-project-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-form-type-data-origin-project-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-form-type-data-owning-project-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-form-type-data-revision :shape "Revision"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or form-type-status common-lisp:null)
                         :accessor struct-shape-form-type-data-status :shape
                         "FormTypeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-form-type-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'form-type-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'form-type-data 'make-form-type-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-type-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-type-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imports))
      (common-lisp:list
       (common-lisp:cons "imports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-domain-id))
      (common-lisp:list
       (common-lisp:cons "originDomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-project-id))
      (common-lisp:list
       (common-lisp:cons "originProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-type-data))
   common-lisp:nil))
(common-lisp:deftype form-type-identifier () 'common-lisp:string)
(common-lisp:deftype form-type-name () 'common-lisp:string)
(common-lisp:deftype form-type-status () 'common-lisp:string)
(common-lisp:deftype forms () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype forms-input-map () 'common-lisp:hash-table)
 (common-lisp:defun make-forms-input-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype forms-output-map () 'common-lisp:hash-table)
 (common-lisp:defun make-forms-output-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass get-asset-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-asset-input-domain-identifier :shape
                         "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or asset-identifier common-lisp:null)
                         :accessor struct-shape-get-asset-input-identifier
                         :shape "AssetIdentifier" :location "uri"
                         :location-name "identifier")
                        (revision :initarg :revision :initform common-lisp:nil
                         :type (common-lisp:or revision common-lisp:null)
                         :accessor struct-shape-get-asset-input-revision :shape
                         "Revision" :location "querystring" :location-name
                         "revision"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-asset-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-asset-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-asset-input 'make-get-asset-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-asset-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-asset-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-asset-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-asset-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-get-asset-output-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-get-asset-output-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-get-asset-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-asset-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-identifier :initarg :external-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or external-identifier common-lisp:null)
                         :accessor
                         struct-shape-get-asset-output-external-identifier
                         :shape "ExternalIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-revision-created-at :initarg
                         :first-revision-created-at :initform common-lisp:nil
                         :type (common-lisp:or created-at common-lisp:null)
                         :accessor
                         struct-shape-get-asset-output-first-revision-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-revision-created-by :initarg
                         :first-revision-created-by :initform common-lisp:nil
                         :type (common-lisp:or created-by common-lisp:null)
                         :accessor
                         struct-shape-get-asset-output-first-revision-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forms-output :initarg :forms-output :initform
                         (common-lisp:error ":formsoutput is required") :type
                         (common-lisp:or form-output-list common-lisp:null)
                         :accessor struct-shape-get-asset-output-forms-output
                         :shape "FormOutputList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor struct-shape-get-asset-output-glossary-terms
                         :shape "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or asset-id common-lisp:null) :accessor
                         struct-shape-get-asset-output-id :shape "AssetId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (listing :initarg :listing :initform common-lisp:nil
                         :type
                         (common-lisp:or asset-listing-details
                                         common-lisp:null)
                         :accessor struct-shape-get-asset-output-listing :shape
                         "AssetListingDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         struct-shape-get-asset-output-name :shape "AssetName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform
                         (common-lisp:error ":owningprojectid is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-get-asset-output-owning-project-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (read-only-forms-output :initarg
                         :read-only-forms-output :initform common-lisp:nil
                         :type
                         (common-lisp:or form-output-list common-lisp:null)
                         :accessor
                         struct-shape-get-asset-output-read-only-forms-output
                         :shape "FormOutputList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-get-asset-output-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type-identifier :initarg :type-identifier :initform
                         (common-lisp:error ":typeidentifier is required")
                         :type
                         (common-lisp:or asset-type-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-asset-output-type-identifier :shape
                         "AssetTypeIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type-revision :initarg :type-revision :initform
                         (common-lisp:error ":typerevision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-get-asset-output-type-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-asset-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-asset-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-asset-output 'make-get-asset-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-asset-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-asset-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-identifier))
      (common-lisp:list
       (common-lisp:cons "externalIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-revision-created-at))
      (common-lisp:list
       (common-lisp:cons "firstRevisionCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-revision-created-by))
      (common-lisp:list
       (common-lisp:cons "firstRevisionCreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-output))
      (common-lisp:list
       (common-lisp:cons "formsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing))
      (common-lisp:list
       (common-lisp:cons "listing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-only-forms-output))
      (common-lisp:list
       (common-lisp:cons "readOnlyFormsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-identifier))
      (common-lisp:list
       (common-lisp:cons "typeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-revision))
      (common-lisp:list
       (common-lisp:cons "typeRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-asset-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-asset-type-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-asset-type-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or asset-type-identifier
                                         common-lisp:null)
                         :accessor struct-shape-get-asset-type-input-identifier
                         :shape "AssetTypeIdentifier" :location "uri"
                         :location-name "identifier")
                        (revision :initarg :revision :initform common-lisp:nil
                         :type (common-lisp:or revision common-lisp:null)
                         :accessor struct-shape-get-asset-type-input-revision
                         :shape "Revision" :location "querystring"
                         :location-name "revision"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-asset-type-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-asset-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-asset-type-input 'make-get-asset-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-asset-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-asset-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-asset-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-asset-type-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-get-asset-type-output-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-get-asset-type-output-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-get-asset-type-output-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-asset-type-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forms-output :initarg :forms-output :initform
                         (common-lisp:error ":formsoutput is required") :type
                         (common-lisp:or forms-output-map common-lisp:null)
                         :accessor
                         struct-shape-get-asset-type-output-forms-output :shape
                         "FormsOutputMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         struct-shape-get-asset-type-output-name :shape
                         "TypeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (origin-domain-id :initarg :origin-domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-asset-type-output-origin-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (origin-project-id :initarg :origin-project-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-get-asset-type-output-origin-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform
                         (common-lisp:error ":owningprojectid is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-get-asset-type-output-owning-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-get-asset-type-output-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-get-asset-type-output-updated-at :shape
                         "UpdatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-get-asset-type-output-updated-by :shape
                         "UpdatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-asset-type-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-asset-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-asset-type-output 'make-get-asset-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms-output))
      (common-lisp:list
       (common-lisp:cons "formsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-domain-id))
      (common-lisp:list
       (common-lisp:cons "originDomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-project-id))
      (common-lisp:list
       (common-lisp:cons "originProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-source-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-input-identifier :shape
                         "DataSourceId" :location "uri" :location-name
                         "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-source-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-source-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-source-input 'make-get-data-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-source-output common-lisp:nil
                       ((asset-forms-output :initarg :asset-forms-output
                         :initform common-lisp:nil :type
                         (common-lisp:or form-output-list common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-output-asset-forms-output
                         :shape "FormOutputList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-configuration-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-output-configuration
                         :shape "DataSourceConfigurationOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-get-data-source-output-created-at :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-output-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-data-source-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enable-setting :initarg :enable-setting :initform
                         common-lisp:nil :type
                         (common-lisp:or enable-setting common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-output-enable-setting
                         :shape "EnableSetting" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-output-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-error-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-output-error-message
                         :shape "DataSourceErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor struct-shape-get-data-source-output-id
                         :shape "DataSourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-run-asset-count :initarg :last-run-asset-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-get-data-source-output-last-run-asset-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-run-at :initarg :last-run-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-get-data-source-output-last-run-at :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-run-error-message :initarg
                         :last-run-error-message :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-error-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-output-last-run-error-message
                         :shape "DataSourceErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-run-status :initarg :last-run-status :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-run-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-output-last-run-status
                         :shape "DataSourceRunStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-get-data-source-output-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-get-data-source-output-project-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (publish-on-import :initarg :publish-on-import
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-data-source-output-publish-on-import
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommendation :initarg :recommendation :initform
                         common-lisp:nil :type
                         (common-lisp:or recommendation-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-output-recommendation
                         :shape "RecommendationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type
                         (common-lisp:or schedule-configuration
                                         common-lisp:null)
                         :accessor struct-shape-get-data-source-output-schedule
                         :shape "ScheduleConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-status common-lisp:null)
                         :accessor struct-shape-get-data-source-output-status
                         :shape "DataSourceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor struct-shape-get-data-source-output-type
                         :shape "DataSourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-get-data-source-output-updated-at :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-source-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-source-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-source-output 'make-get-data-source-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-forms-output))
      (common-lisp:list
       (common-lisp:cons "assetFormsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-setting))
      (common-lisp:list
       (common-lisp:cons "enableSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-asset-count))
      (common-lisp:list
       (common-lisp:cons "lastRunAssetCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-at))
      (common-lisp:list
       (common-lisp:cons "lastRunAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-error-message))
      (common-lisp:list
       (common-lisp:cons "lastRunErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-status))
      (common-lisp:list
       (common-lisp:cons "lastRunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-on-import))
      (common-lisp:list
       (common-lisp:cons "publishOnImport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-source-run-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-run-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or data-source-run-id common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-run-input-identifier
                         :shape "DataSourceRunId" :location "uri"
                         :location-name "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-source-run-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-source-run-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-source-run-input
                    'make-get-data-source-run-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-run-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-run-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-run-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-source-run-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-get-data-source-run-output-created-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source-configuration-snapshot :initarg
                         :data-source-configuration-snapshot :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-data-source-run-output-data-source-configuration-snapshot
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source-id :initarg :data-source-id :initform
                         (common-lisp:error ":datasourceid is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-run-output-data-source-id
                         :shape "DataSourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-data-source-run-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-error-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-run-output-error-message
                         :shape "DataSourceErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or data-source-run-id common-lisp:null)
                         :accessor struct-shape-get-data-source-run-output-id
                         :shape "DataSourceRunId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-get-data-source-run-output-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (run-statistics-for-assets :initarg
                         :run-statistics-for-assets :initform common-lisp:nil
                         :type
                         (common-lisp:or run-statistics-for-assets
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-run-output-run-statistics-for-assets
                         :shape "RunStatisticsForAssets" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (started-at :initarg :started-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-get-data-source-run-output-started-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or data-source-run-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-source-run-output-status :shape
                         "DataSourceRunStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stopped-at :initarg :stopped-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-get-data-source-run-output-stopped-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or data-source-run-type common-lisp:null)
                         :accessor struct-shape-get-data-source-run-output-type
                         :shape "DataSourceRunType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-get-data-source-run-output-updated-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-source-run-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-source-run-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-source-run-output
                    'make-get-data-source-run-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-run-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-run-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-configuration-snapshot))
      (common-lisp:list
       (common-lisp:cons "dataSourceConfigurationSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-statistics-for-assets))
      (common-lisp:list
       (common-lisp:cons "runStatisticsForAssets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-at))
      (common-lisp:list
       (common-lisp:cons "stoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-run-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-input common-lisp:nil
                       ((identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-domain-input-identifier :shape
                         "DomainId" :location "uri" :location-name
                         "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-domain-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-domain-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-domain-input 'make-get-domain-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domain-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domain-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domain-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-output common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-domain-output-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-get-domain-output-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-domain-output-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-execution-role :initarg :domain-execution-role
                         :initform
                         (common-lisp:error ":domainexecutionrole is required")
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-get-domain-output-domain-execution-role
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-domain-output-id :shape "DomainId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-identifier :initarg :kms-key-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-get-domain-output-kms-key-identifier
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-get-domain-output-last-updated-at :shape
                         "UpdatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-domain-output-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (portal-url :initarg :portal-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-domain-output-portal-url :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (single-sign-on :initarg :single-sign-on :initform
                         common-lisp:nil :type
                         (common-lisp:or single-sign-on common-lisp:null)
                         :accessor
                         struct-shape-get-domain-output-single-sign-on :shape
                         "SingleSignOn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or domain-status common-lisp:null)
                         :accessor struct-shape-get-domain-output-status :shape
                         "DomainStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-get-domain-output-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-domain-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-domain-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-domain-output 'make-get-domain-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domain-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domain-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-execution-role))
      (common-lisp:list
       (common-lisp:cons "domainExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-identifier))
      (common-lisp:list
       (common-lisp:cons "kmsKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-url))
      (common-lisp:list
       (common-lisp:cons "portalUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'single-sign-on))
      (common-lisp:list
       (common-lisp:cons "singleSignOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domain-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-blueprint-configuration-input
                       common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-configuration-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (environment-blueprint-identifier :initarg
                         :environment-blueprint-identifier :initform
                         (common-lisp:error
                          ":environmentblueprintidentifier is required")
                         :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-configuration-input-environment-blueprint-identifier
                         :shape "EnvironmentBlueprintId" :location "uri"
                         :location-name "environmentBlueprintIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-blueprint-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-environment-blueprint-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-blueprint-configuration-input
                    'make-get-environment-blueprint-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-blueprint-configuration-output
                       common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-configuration-output-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-environment-blueprint-configuration-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled-regions :initarg :enabled-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-region-list common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-configuration-output-enabled-regions
                         :shape "EnabledRegionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-blueprint-id :initarg
                         :environment-blueprint-id :initform
                         (common-lisp:error
                          ":environmentblueprintid is required")
                         :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-configuration-output-environment-blueprint-id
                         :shape "EnvironmentBlueprintId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (manage-access-role-arn :initarg
                         :manage-access-role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-configuration-output-manage-access-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioning-role-arn :initarg :provisioning-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-get-environment-blueprint-configuration-output-provisioning-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regional-parameters :initarg :regional-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or regional-parameter-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-configuration-output-regional-parameters
                         :shape "RegionalParameterMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-configuration-output-updated-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-blueprint-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-environment-blueprint-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-blueprint-configuration-output
                    'make-get-environment-blueprint-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-regions))
      (common-lisp:list
       (common-lisp:cons "enabledRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "manageAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-role-arn))
      (common-lisp:list
       (common-lisp:cons "provisioningRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regional-parameters))
      (common-lisp:list
       (common-lisp:cons "regionalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-blueprint-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-input-identifier
                         :shape "EnvironmentBlueprintId" :location "uri"
                         :location-name "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-blueprint-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-environment-blueprint-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-blueprint-input
                    'make-get-environment-blueprint-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-blueprint-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-output-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (deployment-properties :initarg :deployment-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or deployment-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-output-deployment-properties
                         :shape "DeploymentProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-output-glossary-terms
                         :shape "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-output-id
                         :shape "EnvironmentBlueprintId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-blueprint-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-output-name
                         :shape "EnvironmentBlueprintName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-environment-blueprint-output-provider
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioning-properties :initarg
                         :provisioning-properties :initform
                         (common-lisp:error
                          ":provisioningproperties is required")
                         :type
                         (common-lisp:or provisioning-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-output-provisioning-properties
                         :shape "ProvisioningProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-output-updated-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-parameters :initarg :user-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-parameter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-blueprint-output-user-parameters
                         :shape "CustomParameterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-blueprint-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-environment-blueprint-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-blueprint-output
                    'make-get-environment-blueprint-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-properties))
      (common-lisp:list
       (common-lisp:cons "deploymentProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-properties))
      (common-lisp:list
       (common-lisp:cons "provisioningProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-blueprint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-environment-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-get-environment-input-identifier :shape
                         "EnvironmentId" :location "uri" :location-name
                         "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-environment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-input 'make-get-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-output common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-get-environment-output-aws-account-id
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-account-region :initarg :aws-account-region
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-get-environment-output-aws-account-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-output-created-at :shape
                         "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-environment-output-created-by :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-properties :initarg :deployment-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or deployment-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-output-deployment-properties
                         :shape "DeploymentProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-get-environment-output-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-environment-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (environment-actions :initarg :environment-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or environment-action-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-output-environment-actions
                         :shape "EnvironmentActionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (environment-blueprint-id :initarg
                         :environment-blueprint-id :initform common-lisp:nil
                         :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-output-environment-blueprint-id
                         :shape "EnvironmentBlueprintId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (environment-profile-id :initarg
                         :environment-profile-id :initform
                         (common-lisp:error
                          ":environmentprofileid is required")
                         :type
                         (common-lisp:or environment-profile-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-output-environment-profile-id
                         :shape "EnvironmentProfileId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor
                         struct-shape-get-environment-output-glossary-terms
                         :shape "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor struct-shape-get-environment-output-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment :initarg :last-deployment :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment common-lisp:null) :accessor
                         struct-shape-get-environment-output-last-deployment
                         :shape "Deployment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor struct-shape-get-environment-output-name
                         :shape "EnvironmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-get-environment-output-project-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-environment-output-provider :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provisioned-resources :initarg :provisioned-resources
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-list common-lisp:null)
                         :accessor
                         struct-shape-get-environment-output-provisioned-resources
                         :shape "ResourceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioning-properties :initarg
                         :provisioning-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or provisioning-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-output-provisioning-properties
                         :shape "ProvisioningProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or environment-status common-lisp:null)
                         :accessor struct-shape-get-environment-output-status
                         :shape "EnvironmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-output-updated-at :shape
                         "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-parameters :initarg :user-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-parameter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-output-user-parameters
                         :shape "CustomParameterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-environment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-output 'make-get-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-properties))
      (common-lisp:list
       (common-lisp:cons "deploymentProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-actions))
      (common-lisp:list
       (common-lisp:cons "environmentActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-profile-id))
      (common-lisp:list
       (common-lisp:cons "environmentProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-deployment))
      (common-lisp:list
       (common-lisp:cons "lastDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-resources))
      (common-lisp:list
       (common-lisp:cons "provisionedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-properties))
      (common-lisp:list
       (common-lisp:cons "provisioningProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-profile-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-environment-profile-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or environment-profile-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-profile-input-identifier
                         :shape "EnvironmentProfileId" :location "uri"
                         :location-name "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-profile-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-environment-profile-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-profile-input
                    'make-get-environment-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-profile-output common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-get-environment-profile-output-aws-account-id
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-account-region :initarg :aws-account-region
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-get-environment-profile-output-aws-account-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-profile-output-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-environment-profile-output-created-by
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-get-environment-profile-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-environment-profile-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-blueprint-id :initarg
                         :environment-blueprint-id :initform
                         (common-lisp:error
                          ":environmentblueprintid is required")
                         :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-profile-output-environment-blueprint-id
                         :shape "EnvironmentBlueprintId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or environment-profile-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-profile-output-id :shape
                         "EnvironmentProfileId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-profile-output-name
                         :shape "EnvironmentProfileName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-get-environment-profile-output-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-profile-output-updated-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-parameters :initarg :user-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-parameter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-profile-output-user-parameters
                         :shape "CustomParameterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-profile-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-environment-profile-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-profile-output
                    'make-get-environment-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-form-type-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-form-type-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (form-type-identifier :initarg :form-type-identifier
                         :initform
                         (common-lisp:error ":formtypeidentifier is required")
                         :type
                         (common-lisp:or form-type-identifier common-lisp:null)
                         :accessor
                         struct-shape-get-form-type-input-form-type-identifier
                         :shape "FormTypeIdentifier" :location "uri"
                         :location-name "formTypeIdentifier")
                        (revision :initarg :revision :initform common-lisp:nil
                         :type (common-lisp:or revision common-lisp:null)
                         :accessor struct-shape-get-form-type-input-revision
                         :shape "Revision" :location "querystring"
                         :location-name "revision"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-form-type-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-form-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-form-type-input 'make-get-form-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-form-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-form-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-form-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-form-type-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-get-form-type-output-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-get-form-type-output-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-get-form-type-output-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-form-type-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (imports :initarg :imports :initform common-lisp:nil
                         :type (common-lisp:or import-list common-lisp:null)
                         :accessor struct-shape-get-form-type-output-imports
                         :shape "ImportList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model :initarg :model :initform
                         (common-lisp:error ":model is required") :type
                         (common-lisp:or model common-lisp:null) :accessor
                         struct-shape-get-form-type-output-model :shape "Model"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or form-type-name common-lisp:null)
                         :accessor struct-shape-get-form-type-output-name
                         :shape "FormTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (origin-domain-id :initarg :origin-domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-form-type-output-origin-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (origin-project-id :initarg :origin-project-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-get-form-type-output-origin-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-get-form-type-output-owning-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-get-form-type-output-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or form-type-status common-lisp:null)
                         :accessor struct-shape-get-form-type-output-status
                         :shape "FormTypeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-form-type-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-form-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-form-type-output 'make-get-form-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-form-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-form-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imports))
      (common-lisp:list
       (common-lisp:cons "imports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-domain-id))
      (common-lisp:list
       (common-lisp:cons "originDomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-project-id))
      (common-lisp:list
       (common-lisp:cons "originProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-form-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-glossary-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-glossary-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or glossary-id common-lisp:null)
                         :accessor struct-shape-get-glossary-input-identifier
                         :shape "GlossaryId" :location "uri" :location-name
                         "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-glossary-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-glossary-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-glossary-input 'make-get-glossary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-glossary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-glossary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-glossary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-glossary-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-get-glossary-output-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-get-glossary-output-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-description common-lisp:null)
                         :accessor struct-shape-get-glossary-output-description
                         :shape "GlossaryDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-glossary-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or glossary-id common-lisp:null)
                         :accessor struct-shape-get-glossary-output-id :shape
                         "GlossaryId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or glossary-name common-lisp:null)
                         :accessor struct-shape-get-glossary-output-name :shape
                         "GlossaryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform
                         (common-lisp:error ":owningprojectid is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-get-glossary-output-owning-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or glossary-status common-lisp:null)
                         :accessor struct-shape-get-glossary-output-status
                         :shape "GlossaryStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-get-glossary-output-updated-at :shape
                         "UpdatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-get-glossary-output-updated-by :shape
                         "UpdatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-glossary-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-glossary-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-glossary-output 'make-get-glossary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-glossary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-glossary-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-glossary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-glossary-term-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-glossary-term-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or glossary-term-id common-lisp:null)
                         :accessor
                         struct-shape-get-glossary-term-input-identifier :shape
                         "GlossaryTermId" :location "uri" :location-name
                         "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-glossary-term-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-glossary-term-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-glossary-term-input 'make-get-glossary-term-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-glossary-term-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-glossary-term-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-glossary-term-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-glossary-term-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-get-glossary-term-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-get-glossary-term-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-glossary-term-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (glossary-id :initarg :glossary-id :initform
                         (common-lisp:error ":glossaryid is required") :type
                         (common-lisp:or glossary-id common-lisp:null)
                         :accessor
                         struct-shape-get-glossary-term-output-glossary-id
                         :shape "GlossaryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or glossary-term-id common-lisp:null)
                         :accessor struct-shape-get-glossary-term-output-id
                         :shape "GlossaryTermId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-description :initarg :long-description :initform
                         common-lisp:nil :type
                         (common-lisp:or long-description common-lisp:null)
                         :accessor
                         struct-shape-get-glossary-term-output-long-description
                         :shape "LongDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or glossary-term-name common-lisp:null)
                         :accessor struct-shape-get-glossary-term-output-name
                         :shape "GlossaryTermName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (short-description :initarg :short-description
                         :initform common-lisp:nil :type
                         (common-lisp:or short-description common-lisp:null)
                         :accessor
                         struct-shape-get-glossary-term-output-short-description
                         :shape "ShortDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or glossary-term-status common-lisp:null)
                         :accessor struct-shape-get-glossary-term-output-status
                         :shape "GlossaryTermStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (term-relations :initarg :term-relations :initform
                         common-lisp:nil :type
                         (common-lisp:or term-relations common-lisp:null)
                         :accessor
                         struct-shape-get-glossary-term-output-term-relations
                         :shape "TermRelations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-get-glossary-term-output-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-get-glossary-term-output-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-glossary-term-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-glossary-term-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-glossary-term-output 'make-get-glossary-term-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-glossary-term-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-glossary-term-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-id))
      (common-lisp:list
       (common-lisp:cons "glossaryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "longDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "shortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-relations))
      (common-lisp:list
       (common-lisp:cons "termRelations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-glossary-term-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-group-profile-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-group-profile-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (group-identifier :initarg :group-identifier :initform
                         (common-lisp:error ":groupidentifier is required")
                         :type
                         (common-lisp:or group-identifier common-lisp:null)
                         :accessor
                         struct-shape-get-group-profile-input-group-identifier
                         :shape "GroupIdentifier" :location "uri"
                         :location-name "groupIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-group-profile-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-group-profile-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-group-profile-input 'make-get-group-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-group-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-group-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-group-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-group-profile-output common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-group-profile-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or group-profile-name common-lisp:null)
                         :accessor
                         struct-shape-get-group-profile-output-group-name
                         :shape "GroupProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or group-profile-id common-lisp:null)
                         :accessor struct-shape-get-group-profile-output-id
                         :shape "GroupProfileId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or group-profile-status common-lisp:null)
                         :accessor struct-shape-get-group-profile-output-status
                         :shape "GroupProfileStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-group-profile-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-group-profile-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-group-profile-output 'make-get-group-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-group-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-group-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-group-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-iam-portal-login-url-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-iam-portal-login-url-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-iam-portal-login-url-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-iam-portal-login-url-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-iam-portal-login-url-input
                    'make-get-iam-portal-login-url-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-iam-portal-login-url-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-iam-portal-login-url-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-iam-portal-login-url-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-iam-portal-login-url-output common-lisp:nil
                       ((auth-code-url :initarg :auth-code-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-iam-portal-login-url-output-auth-code-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-profile-id :initarg :user-profile-id :initform
                         (common-lisp:error ":userprofileid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-iam-portal-login-url-output-user-profile-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-iam-portal-login-url-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-iam-portal-login-url-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-iam-portal-login-url-output
                    'make-get-iam-portal-login-url-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-iam-portal-login-url-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-iam-portal-login-url-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-code-url))
      (common-lisp:list
       (common-lisp:cons "authCodeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-id))
      (common-lisp:list
       (common-lisp:cons "userProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-iam-portal-login-url-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-listing-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-listing-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or listing-id common-lisp:null) :accessor
                         struct-shape-get-listing-input-identifier :shape
                         "ListingId" :location "uri" :location-name
                         "identifier")
                        (listing-revision :initarg :listing-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-get-listing-input-listing-revision :shape
                         "Revision" :location "querystring" :location-name
                         "listingRevision"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-listing-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-listing-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-listing-input 'make-get-listing-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-listing-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-listing-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-listing-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-listing-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-get-listing-output-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-get-listing-output-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-get-listing-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-listing-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or listing-id common-lisp:null) :accessor
                         struct-shape-get-listing-output-id :shape "ListingId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (item :initarg :item :initform common-lisp:nil :type
                         (common-lisp:or listing-item common-lisp:null)
                         :accessor struct-shape-get-listing-output-item :shape
                         "ListingItem" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (listing-revision :initarg :listing-revision :initform
                         (common-lisp:error ":listingrevision is required")
                         :type (common-lisp:or revision common-lisp:null)
                         :accessor
                         struct-shape-get-listing-output-listing-revision
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or listing-name common-lisp:null)
                         :accessor struct-shape-get-listing-output-name :shape
                         "ListingName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or listing-status common-lisp:null)
                         :accessor struct-shape-get-listing-output-status
                         :shape "ListingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-get-listing-output-updated-at :shape
                         "UpdatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-get-listing-output-updated-by :shape
                         "UpdatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-listing-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-listing-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-listing-output 'make-get-listing-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-listing-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-listing-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-revision))
      (common-lisp:list
       (common-lisp:cons "listingRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-listing-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-project-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-project-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-get-project-input-identifier :shape
                         "ProjectId" :location "uri" :location-name
                         "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-project-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-project-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-project-input 'make-get-project-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-project-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-project-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-get-project-output-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-get-project-output-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-get-project-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-project-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-get-project-output-failure-reasons :shape
                         "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor
                         struct-shape-get-project-output-glossary-terms :shape
                         "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-get-project-output-id :shape "ProjectId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-project-output-last-updated-at :shape
                         "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor struct-shape-get-project-output-name :shape
                         "ProjectName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-status :initarg :project-status :initform
                         common-lisp:nil :type
                         (common-lisp:or project-status common-lisp:null)
                         :accessor
                         struct-shape-get-project-output-project-status :shape
                         "ProjectStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-project-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-project-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-project-output 'make-get-project-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-project-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-project-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-status))
      (common-lisp:list
       (common-lisp:cons "projectStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-project-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-subscription-grant-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-grant-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or subscription-grant-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-grant-input-identifier
                         :shape "SubscriptionGrantId" :location "uri"
                         :location-name "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-subscription-grant-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-subscription-grant-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-subscription-grant-input
                    'make-get-subscription-grant-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-grant-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-grant-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-grant-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-subscription-grant-output common-lisp:nil
                       ((assets :initarg :assets :initform common-lisp:nil
                         :type
                         (common-lisp:or subscribed-assets common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-grant-output-assets
                         :shape "SubscribedAssets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-get-subscription-grant-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-get-subscription-grant-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-subscription-grant-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (granted-entity :initarg :granted-entity :initform
                         (common-lisp:error ":grantedentity is required") :type
                         (common-lisp:or granted-entity common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-grant-output-granted-entity
                         :shape "GrantedEntity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-grant-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-grant-output-id :shape
                         "SubscriptionGrantId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-grant-overall-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-grant-output-status
                         :shape "SubscriptionGrantOverallStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscription-id :initarg :subscription-id :initform
                         common-lisp:nil :type
                         (common-lisp:or subscription-id common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-grant-output-subscription-id
                         :shape "SubscriptionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-target-id :initarg
                         :subscription-target-id :initform
                         (common-lisp:error
                          ":subscriptiontargetid is required")
                         :type
                         (common-lisp:or subscription-target-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-grant-output-subscription-target-id
                         :shape "SubscriptionTargetId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-get-subscription-grant-output-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-get-subscription-grant-output-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-subscription-grant-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-subscription-grant-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-subscription-grant-output
                    'make-get-subscription-grant-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-grant-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-grant-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granted-entity))
      (common-lisp:list
       (common-lisp:cons "grantedEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-grant-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-subscription-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or subscription-id common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-input-identifier :shape
                         "SubscriptionId" :location "uri" :location-name
                         "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-subscription-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-subscription-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-subscription-input 'make-get-subscription-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-subscription-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-get-subscription-output-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-get-subscription-output-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-subscription-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-id common-lisp:null)
                         :accessor struct-shape-get-subscription-output-id
                         :shape "SubscriptionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retain-permissions :initarg :retain-permissions
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-subscription-output-retain-permissions
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-status common-lisp:null)
                         :accessor struct-shape-get-subscription-output-status
                         :shape "SubscriptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscribed-listing :initarg :subscribed-listing
                         :initform
                         (common-lisp:error ":subscribedlisting is required")
                         :type
                         (common-lisp:or subscribed-listing common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-output-subscribed-listing
                         :shape "SubscribedListing" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscribed-principal :initarg :subscribed-principal
                         :initform
                         (common-lisp:error ":subscribedprincipal is required")
                         :type
                         (common-lisp:or subscribed-principal common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-output-subscribed-principal
                         :shape "SubscribedPrincipal" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-request-id :initarg
                         :subscription-request-id :initform common-lisp:nil
                         :type
                         (common-lisp:or subscription-request-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-output-subscription-request-id
                         :shape "SubscriptionRequestId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-get-subscription-output-updated-at :shape
                         "UpdatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-get-subscription-output-updated-by :shape
                         "UpdatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-subscription-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-subscription-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-subscription-output 'make-get-subscription-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-permissions))
      (common-lisp:list
       (common-lisp:cons "retainPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listing))
      (common-lisp:list
       (common-lisp:cons "subscribedListing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principal))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-request-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-subscription-request-details-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-request-details-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or subscription-request-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-request-details-input-identifier
                         :shape "SubscriptionRequestId" :location "uri"
                         :location-name "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-subscription-request-details-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-subscription-request-details-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-subscription-request-details-input
                    'make-get-subscription-request-details-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request-details-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request-details-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request-details-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-subscription-request-details-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-get-subscription-request-details-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-get-subscription-request-details-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (decision-comment :initarg :decision-comment :initform
                         common-lisp:nil :type
                         (common-lisp:or decision-comment common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-request-details-output-decision-comment
                         :shape "DecisionComment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-subscription-request-details-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-request-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-request-details-output-id
                         :shape "SubscriptionRequestId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (request-reason :initarg :request-reason :initform
                         (common-lisp:error ":requestreason is required") :type
                         (common-lisp:or request-reason common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-request-details-output-request-reason
                         :shape "RequestReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reviewer-id :initarg :reviewer-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-subscription-request-details-output-reviewer-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-request-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-request-details-output-status
                         :shape "SubscriptionRequestStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscribed-listings :initarg :subscribed-listings
                         :initform
                         (common-lisp:error ":subscribedlistings is required")
                         :type
                         (common-lisp:or
                          get-subscription-request-details-output-subscribed-listings-list
                          common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-request-details-output-subscribed-listings
                         :shape
                         "GetSubscriptionRequestDetailsOutputSubscribedListingsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subscribed-principals :initarg :subscribed-principals
                         :initform
                         (common-lisp:error
                          ":subscribedprincipals is required")
                         :type
                         (common-lisp:or
                          get-subscription-request-details-output-subscribed-principals-list
                          common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-request-details-output-subscribed-principals
                         :shape
                         "GetSubscriptionRequestDetailsOutputSubscribedPrincipalsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-get-subscription-request-details-output-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-get-subscription-request-details-output-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-subscription-request-details-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-subscription-request-details-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-subscription-request-details-output
                    'make-get-subscription-request-details-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request-details-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request-details-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-comment))
      (common-lisp:list
       (common-lisp:cons "decisionComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-reason))
      (common-lisp:list
       (common-lisp:cons "requestReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewer-id))
      (common-lisp:list
       (common-lisp:cons "reviewerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listings))
      (common-lisp:list
       (common-lisp:cons "subscribedListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principals))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-request-details-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-subscription-request-details-output-subscribed-listings-list
                      ()
   '(trivial-types:proper-list subscribed-listing))
 (common-lisp:defun make-get-subscription-request-details-output-subscribed-listings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-listing))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype get-subscription-request-details-output-subscribed-principals-list
                      ()
   '(trivial-types:proper-list subscribed-principal))
 (common-lisp:defun make-get-subscription-request-details-output-subscribed-principals-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-subscription-target-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-target-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (environment-identifier :initarg
                         :environment-identifier :initform
                         (common-lisp:error
                          ":environmentidentifier is required")
                         :type (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-target-input-environment-identifier
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or subscription-target-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-target-input-identifier
                         :shape "SubscriptionTargetId" :location "uri"
                         :location-name "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-subscription-target-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-subscription-target-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-subscription-target-input
                    'make-get-subscription-target-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-target-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-subscription-target-output common-lisp:nil
                       ((applicable-asset-types :initarg
                         :applicable-asset-types :initform
                         (common-lisp:error
                          ":applicableassettypes is required")
                         :type
                         (common-lisp:or applicable-asset-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-target-output-applicable-asset-types
                         :shape "ApplicableAssetTypes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authorized-principals :initarg :authorized-principals
                         :initform
                         (common-lisp:error
                          ":authorizedprincipals is required")
                         :type
                         (common-lisp:or authorized-principal-identifiers
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-target-output-authorized-principals
                         :shape "AuthorizedPrincipalIdentifiers" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-get-subscription-target-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-get-subscription-target-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-subscription-target-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-target-output-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-target-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-target-output-id :shape
                         "SubscriptionTargetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manage-access-role :initarg :manage-access-role
                         :initform
                         (common-lisp:error ":manageaccessrole is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-target-output-manage-access-role
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or subscription-target-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-target-output-name
                         :shape "SubscriptionTargetName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-get-subscription-target-output-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-subscription-target-output-provider
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-target-config :initarg
                         :subscription-target-config :initform
                         (common-lisp:error
                          ":subscriptiontargetconfig is required")
                         :type
                         (common-lisp:or subscription-target-forms
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-subscription-target-output-subscription-target-config
                         :shape "SubscriptionTargetForms" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-subscription-target-output-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-get-subscription-target-output-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-get-subscription-target-output-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-subscription-target-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-subscription-target-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-subscription-target-output
                    'make-get-subscription-target-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-target-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-target-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applicable-asset-types))
      (common-lisp:list
       (common-lisp:cons "applicableAssetTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-principals))
      (common-lisp:list
       (common-lisp:cons "authorizedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manage-access-role))
      (common-lisp:list
       (common-lisp:cons "manageAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-config))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscription-target-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-profile-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-get-user-profile-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or user-profile-type common-lisp:null)
                         :accessor struct-shape-get-user-profile-input-type
                         :shape "UserProfileType" :location "querystring"
                         :location-name "type")
                        (user-identifier :initarg :user-identifier :initform
                         (common-lisp:error ":useridentifier is required")
                         :type
                         (common-lisp:or user-identifier common-lisp:null)
                         :accessor
                         struct-shape-get-user-profile-input-user-identifier
                         :shape "UserIdentifier" :location "uri" :location-name
                         "userIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-profile-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-profile-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-profile-input 'make-get-user-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-profile-output common-lisp:nil
                       ((details :initarg :details :initform common-lisp:nil
                         :type
                         (common-lisp:or user-profile-details common-lisp:null)
                         :accessor struct-shape-get-user-profile-output-details
                         :shape "UserProfileDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-get-user-profile-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or user-profile-id common-lisp:null)
                         :accessor struct-shape-get-user-profile-output-id
                         :shape "UserProfileId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or user-profile-status common-lisp:null)
                         :accessor struct-shape-get-user-profile-output-status
                         :shape "UserProfileStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or user-profile-type common-lisp:null)
                         :accessor struct-shape-get-user-profile-output-type
                         :shape "UserProfileType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-profile-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-profile-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-profile-output 'make-get-user-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-profile-output))
   common-lisp:nil))
(common-lisp:deftype glossary-description () 'common-lisp:string)
(common-lisp:deftype glossary-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass glossary-item common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-glossary-item-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-glossary-item-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-description common-lisp:null)
                         :accessor struct-shape-glossary-item-description
                         :shape "GlossaryDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-glossary-item-domain-id :shape "DomainId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or glossary-id common-lisp:null)
                         :accessor struct-shape-glossary-item-id :shape
                         "GlossaryId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or glossary-name common-lisp:null)
                         :accessor struct-shape-glossary-item-name :shape
                         "GlossaryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform
                         (common-lisp:error ":owningprojectid is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor struct-shape-glossary-item-owning-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or glossary-status common-lisp:null)
                         :accessor struct-shape-glossary-item-status :shape
                         "GlossaryStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-glossary-item-updated-at :shape
                         "UpdatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-glossary-item-updated-by :shape
                         "UpdatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-glossary-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'glossary-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'glossary-item 'make-glossary-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input glossary-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input glossary-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input glossary-item))
   common-lisp:nil))
(common-lisp:deftype glossary-name () 'common-lisp:string)
(common-lisp:deftype glossary-status () 'common-lisp:string)
(common-lisp:deftype glossary-term-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass glossary-term-item common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-glossary-term-item-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-glossary-term-item-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-glossary-term-item-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (glossary-id :initarg :glossary-id :initform
                         (common-lisp:error ":glossaryid is required") :type
                         (common-lisp:or glossary-id common-lisp:null)
                         :accessor struct-shape-glossary-term-item-glossary-id
                         :shape "GlossaryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or glossary-term-id common-lisp:null)
                         :accessor struct-shape-glossary-term-item-id :shape
                         "GlossaryTermId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-description :initarg :long-description :initform
                         common-lisp:nil :type
                         (common-lisp:or long-description common-lisp:null)
                         :accessor
                         struct-shape-glossary-term-item-long-description
                         :shape "LongDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or glossary-term-name common-lisp:null)
                         :accessor struct-shape-glossary-term-item-name :shape
                         "GlossaryTermName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (short-description :initarg :short-description
                         :initform common-lisp:nil :type
                         (common-lisp:or short-description common-lisp:null)
                         :accessor
                         struct-shape-glossary-term-item-short-description
                         :shape "ShortDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or glossary-term-status common-lisp:null)
                         :accessor struct-shape-glossary-term-item-status
                         :shape "GlossaryTermStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (term-relations :initarg :term-relations :initform
                         common-lisp:nil :type
                         (common-lisp:or term-relations common-lisp:null)
                         :accessor
                         struct-shape-glossary-term-item-term-relations :shape
                         "TermRelations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-glossary-term-item-updated-at :shape
                         "UpdatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-glossary-term-item-updated-by :shape
                         "UpdatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-glossary-term-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'glossary-term-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'glossary-term-item 'make-glossary-term-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input glossary-term-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input glossary-term-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-id))
      (common-lisp:list
       (common-lisp:cons "glossaryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "longDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "shortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-relations))
      (common-lisp:list
       (common-lisp:cons "termRelations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input glossary-term-item))
   common-lisp:nil))
(common-lisp:deftype glossary-term-name () 'common-lisp:string)
(common-lisp:deftype glossary-term-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype glossary-terms ()
   '(trivial-types:proper-list glossary-term-id))
 (common-lisp:defun make-glossary-terms
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list glossary-term-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass glue-run-configuration-input common-lisp:nil
                       ((data-access-role :initarg :data-access-role :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          glue-run-configuration-input-data-access-role-string
                          common-lisp:null)
                         :accessor
                         struct-shape-glue-run-configuration-input-data-access-role
                         :shape "GlueRunConfigurationInputDataAccessRoleString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (relational-filter-configurations :initarg
                         :relational-filter-configurations :initform
                         (common-lisp:error
                          ":relationalfilterconfigurations is required")
                         :type
                         (common-lisp:or relational-filter-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-glue-run-configuration-input-relational-filter-configurations
                         :shape "RelationalFilterConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-glue-run-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'glue-run-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'glue-run-configuration-input
                    'make-glue-run-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          glue-run-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          glue-run-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-access-role))
      (common-lisp:list
       (common-lisp:cons "dataAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-filter-configurations))
      (common-lisp:list
       (common-lisp:cons "relationalFilterConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          glue-run-configuration-input))
   common-lisp:nil))
(common-lisp:deftype glue-run-configuration-input-data-access-role-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass glue-run-configuration-output common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          glue-run-configuration-output-account-id-string
                          common-lisp:null)
                         :accessor
                         struct-shape-glue-run-configuration-output-account-id
                         :shape "GlueRunConfigurationOutputAccountIdString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-access-role :initarg :data-access-role :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          glue-run-configuration-output-data-access-role-string
                          common-lisp:null)
                         :accessor
                         struct-shape-glue-run-configuration-output-data-access-role
                         :shape
                         "GlueRunConfigurationOutputDataAccessRoleString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          glue-run-configuration-output-region-string
                          common-lisp:null)
                         :accessor
                         struct-shape-glue-run-configuration-output-region
                         :shape "GlueRunConfigurationOutputRegionString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (relational-filter-configurations :initarg
                         :relational-filter-configurations :initform
                         (common-lisp:error
                          ":relationalfilterconfigurations is required")
                         :type
                         (common-lisp:or relational-filter-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-glue-run-configuration-output-relational-filter-configurations
                         :shape "RelationalFilterConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-glue-run-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'glue-run-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'glue-run-configuration-output
                    'make-glue-run-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          glue-run-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          glue-run-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-access-role))
      (common-lisp:list
       (common-lisp:cons "dataAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-filter-configurations))
      (common-lisp:list
       (common-lisp:cons "relationalFilterConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          glue-run-configuration-output))
   common-lisp:nil))
(common-lisp:deftype glue-run-configuration-output-account-id-string ()
  'common-lisp:string)
(common-lisp:deftype glue-run-configuration-output-data-access-role-string ()
  'common-lisp:string)
(common-lisp:deftype glue-run-configuration-output-region-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass granted-entity common-lisp:nil
                       ((listing :initarg :listing :initform common-lisp:nil
                         :type
                         (common-lisp:or listing-revision common-lisp:null)
                         :accessor struct-shape-granted-entity-listing :shape
                         "ListingRevision" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-granted-entity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'granted-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'granted-entity 'make-granted-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input granted-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input granted-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing))
      (common-lisp:list
       (common-lisp:cons "listing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input granted-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass granted-entity-input common-lisp:nil
                       ((listing :initarg :listing :initform common-lisp:nil
                         :type
                         (common-lisp:or listing-revision-input
                                         common-lisp:null)
                         :accessor struct-shape-granted-entity-input-listing
                         :shape "ListingRevisionInput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-granted-entity-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'granted-entity-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'granted-entity-input 'make-granted-entity-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input granted-entity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input granted-entity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing))
      (common-lisp:list
       (common-lisp:cons "listing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input granted-entity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass group-details common-lisp:nil
                       ((group-id :initarg :group-id :initform
                         (common-lisp:error ":groupid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-group-details-group-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-group-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'group-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'group-details 'make-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "groupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-details))
   common-lisp:nil))
(common-lisp:deftype group-identifier () 'common-lisp:string)
(common-lisp:deftype group-profile-id () 'common-lisp:string)
(common-lisp:deftype group-profile-name () 'common-lisp:string)
(common-lisp:deftype group-profile-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype group-profile-summaries ()
   '(trivial-types:proper-list group-profile-summary))
 (common-lisp:defun make-group-profile-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-profile-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass group-profile-summary common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-group-profile-summary-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or group-profile-name common-lisp:null)
                         :accessor
                         struct-shape-group-profile-summary-group-name :shape
                         "GroupProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or group-profile-id common-lisp:null)
                         :accessor struct-shape-group-profile-summary-id :shape
                         "GroupProfileId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or group-profile-status common-lisp:null)
                         :accessor struct-shape-group-profile-summary-status
                         :shape "GroupProfileStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-group-profile-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'group-profile-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'group-profile-summary 'make-group-profile-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          group-profile-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          group-profile-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          group-profile-summary))
   common-lisp:nil))
(common-lisp:deftype group-search-text () 'common-lisp:string)
(common-lisp:deftype group-search-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass iam-user-profile-details common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-iam-user-profile-details-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iam-user-profile-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'iam-user-profile-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iam-user-profile-details 'make-iam-user-profile-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iam-user-profile-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iam-user-profile-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iam-user-profile-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or form-type-name common-lisp:null)
                         :accessor struct-shape-import-name :shape
                         "FormTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-import-revision :shape "Revision"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'import 'make-import))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-list () '(trivial-types:proper-list import))
 (common-lisp:defun make-import-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (datazone-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype inventory-search-scope () 'common-lisp:string)
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:deftype last-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-asset-revisions-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-list-asset-revisions-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or asset-identifier common-lisp:null)
                         :accessor
                         struct-shape-list-asset-revisions-input-identifier
                         :shape "AssetIdentifier" :location "uri"
                         :location-name "identifier")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-asset-revisions-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-asset-revisions-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-asset-revisions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-asset-revisions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-asset-revisions-input
                    'make-list-asset-revisions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-revisions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-revisions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-revisions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-asset-revisions-output common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or asset-revisions common-lisp:null)
                         :accessor
                         struct-shape-list-asset-revisions-output-items :shape
                         "AssetRevisions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-asset-revisions-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-asset-revisions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-asset-revisions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-asset-revisions-output
                    'make-list-asset-revisions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-revisions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-revisions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-revisions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-source-run-activities-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-run-activities-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or data-source-run-id common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-run-activities-input-identifier
                         :shape "DataSourceRunId" :location "uri"
                         :location-name "identifier")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-run-activities-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-run-activities-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-asset-activity-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-run-activities-input-status
                         :shape "DataAssetActivityStatus" :location
                         "querystring" :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-source-run-activities-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-source-run-activities-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-source-run-activities-input
                    'make-list-data-source-run-activities-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-run-activities-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-run-activities-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-run-activities-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-source-run-activities-output common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or data-source-run-activities
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-run-activities-output-items
                         :shape "DataSourceRunActivities" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-run-activities-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-source-run-activities-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-source-run-activities-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-source-run-activities-output
                    'make-list-data-source-run-activities-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-run-activities-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-run-activities-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-run-activities-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-source-runs-input common-lisp:nil
                       ((data-source-identifier :initarg
                         :data-source-identifier :initform
                         (common-lisp:error
                          ":datasourceidentifier is required")
                         :type (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-runs-input-data-source-identifier
                         :shape "DataSourceId" :location "uri" :location-name
                         "dataSourceIdentifier")
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-runs-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-runs-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-runs-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-run-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-runs-input-status :shape
                         "DataSourceRunStatus" :location "querystring"
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-source-runs-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-source-runs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-source-runs-input
                    'make-list-data-source-runs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-runs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-runs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-runs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-source-runs-output common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or data-source-run-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-runs-output-items :shape
                         "DataSourceRunSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-source-runs-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-source-runs-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-source-runs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-source-runs-output
                    'make-list-data-source-runs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-runs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-runs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-source-runs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-sources-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-list-data-sources-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (environment-identifier :initarg
                         :environment-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-data-sources-input-environment-identifier
                         :shape "String" :location "querystring" :location-name
                         "environmentIdentifier")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-data-sources-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-list-data-sources-input-name :shape
                         "Name" :location "querystring" :location-name "name")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-sources-input-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (project-identifier :initarg :project-identifier
                         :initform
                         (common-lisp:error ":projectidentifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-data-sources-input-project-identifier
                         :shape "String" :location "querystring" :location-name
                         "projectIdentifier")
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-status common-lisp:null)
                         :accessor struct-shape-list-data-sources-input-status
                         :shape "DataSourceStatus" :location "querystring"
                         :location-name "status")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor struct-shape-list-data-sources-input-type
                         :shape "DataSourceType" :location "querystring"
                         :location-name "type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-sources-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-sources-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-input 'make-list-data-sources-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-sources-output common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or data-source-summaries
                                         common-lisp:null)
                         :accessor struct-shape-list-data-sources-output-items
                         :shape "DataSourceSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-sources-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-sources-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-sources-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-output 'make-list-data-sources-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domains-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-for-list-domains
                                         common-lisp:null)
                         :accessor struct-shape-list-domains-input-max-results
                         :shape "MaxResultsForListDomains" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-domains-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or domain-status common-lisp:null)
                         :accessor struct-shape-list-domains-input-status
                         :shape "DomainStatus" :location "querystring"
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-domains-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-domains-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-domains-input 'make-list-domains-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domains-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domains-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domains-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domains-output common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or domain-summaries common-lisp:null)
                         :accessor struct-shape-list-domains-output-items
                         :shape "DomainSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-domains-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-domains-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-domains-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-domains-output 'make-list-domains-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domains-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domains-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domains-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environment-blueprint-configurations-input
                       common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-list-environment-blueprint-configurations-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-environment-blueprint-configurations-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-environment-blueprint-configurations-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environment-blueprint-configurations-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-environment-blueprint-configurations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environment-blueprint-configurations-input
                    'make-list-environment-blueprint-configurations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprint-configurations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprint-configurations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprint-configurations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environment-blueprint-configurations-output
                       common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or environment-blueprint-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-environment-blueprint-configurations-output-items
                         :shape "EnvironmentBlueprintConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-environment-blueprint-configurations-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environment-blueprint-configurations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-environment-blueprint-configurations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environment-blueprint-configurations-output
                    'make-list-environment-blueprint-configurations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprint-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprint-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprint-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environment-blueprints-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-list-environment-blueprints-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (managed :initarg :managed :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-list-environment-blueprints-input-managed
                         :shape "Boolean" :location "querystring"
                         :location-name "managed")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-environment-blueprints-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or environment-blueprint-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-environment-blueprints-input-name
                         :shape "EnvironmentBlueprintName" :location
                         "querystring" :location-name "name")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-environment-blueprints-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environment-blueprints-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-environment-blueprints-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environment-blueprints-input
                    'make-list-environment-blueprints-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprints-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprints-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprints-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environment-blueprints-output common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or environment-blueprint-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-environment-blueprints-output-items
                         :shape "EnvironmentBlueprintSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-environment-blueprints-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environment-blueprints-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-environment-blueprints-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environment-blueprints-output
                    'make-list-environment-blueprints-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprints-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprints-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-blueprints-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environment-profiles-input common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-list-environment-profiles-input-aws-account-id
                         :shape "AwsAccountId" :location "querystring"
                         :location-name "awsAccountId")
                        (aws-account-region :initarg :aws-account-region
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-list-environment-profiles-input-aws-account-region
                         :shape "AwsRegion" :location "querystring"
                         :location-name "awsAccountRegion")
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-list-environment-profiles-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (environment-blueprint-identifier :initarg
                         :environment-blueprint-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-environment-profiles-input-environment-blueprint-identifier
                         :shape "EnvironmentBlueprintId" :location
                         "querystring" :location-name
                         "environmentBlueprintIdentifier")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-environment-profiles-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or environment-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-environment-profiles-input-name
                         :shape "EnvironmentProfileName" :location
                         "querystring" :location-name "name")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-environment-profiles-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (project-identifier :initarg :project-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-list-environment-profiles-input-project-identifier
                         :shape "ProjectId" :location "querystring"
                         :location-name "projectIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environment-profiles-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-environment-profiles-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environment-profiles-input
                    'make-list-environment-profiles-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-profiles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-profiles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-profiles-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environment-profiles-output common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or environment-profile-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-environment-profiles-output-items
                         :shape "EnvironmentProfileSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-environment-profiles-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environment-profiles-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-environment-profiles-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environment-profiles-output
                    'make-list-environment-profiles-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-profiles-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-profiles-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-profiles-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environments-input common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-list-environments-input-aws-account-id
                         :shape "AwsAccountId" :location "querystring"
                         :location-name "awsAccountId")
                        (aws-account-region :initarg :aws-account-region
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-list-environments-input-aws-account-region
                         :shape "AwsRegion" :location "querystring"
                         :location-name "awsAccountRegion")
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-list-environments-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (environment-blueprint-identifier :initarg
                         :environment-blueprint-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-environments-input-environment-blueprint-identifier
                         :shape "EnvironmentBlueprintId" :location
                         "querystring" :location-name
                         "environmentBlueprintIdentifier")
                        (environment-profile-identifier :initarg
                         :environment-profile-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-profile-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-environments-input-environment-profile-identifier
                         :shape "EnvironmentProfileId" :location "querystring"
                         :location-name "environmentProfileIdentifier")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-environments-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-environments-input-name :shape
                         "String" :location "querystring" :location-name
                         "name")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-environments-input-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (project-identifier :initarg :project-identifier
                         :initform
                         (common-lisp:error ":projectidentifier is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-list-environments-input-project-identifier
                         :shape "ProjectId" :location "querystring"
                         :location-name "projectIdentifier")
                        (provider :initarg :provider :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-environments-input-provider :shape
                         "String" :location "querystring" :location-name
                         "provider")
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or environment-status common-lisp:null)
                         :accessor struct-shape-list-environments-input-status
                         :shape "EnvironmentStatus" :location "querystring"
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environments-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-environments-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environments-input 'make-list-environments-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environments-output common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or environment-summaries
                                         common-lisp:null)
                         :accessor struct-shape-list-environments-output-items
                         :shape "EnvironmentSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-environments-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environments-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-environments-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environments-output 'make-list-environments-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notifications-input common-lisp:nil
                       ((after-timestamp :initarg :after-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-notifications-input-after-timestamp
                         :shape "Timestamp" :location "querystring"
                         :location-name "afterTimestamp")
                        (before-timestamp :initarg :before-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-notifications-input-before-timestamp
                         :shape "Timestamp" :location "querystring"
                         :location-name "beforeTimestamp")
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-list-notifications-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-notifications-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-notifications-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (subjects :initarg :subjects :initform common-lisp:nil
                         :type
                         (common-lisp:or notification-subjects
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-notifications-input-subjects :shape
                         "NotificationSubjects" :location "querystring"
                         :location-name "subjects")
                        (task-status :initarg :task-status :initform
                         common-lisp:nil :type
                         (common-lisp:or task-status common-lisp:null)
                         :accessor
                         struct-shape-list-notifications-input-task-status
                         :shape "TaskStatus" :location "querystring"
                         :location-name "taskStatus")
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or notification-type common-lisp:null)
                         :accessor struct-shape-list-notifications-input-type
                         :shape "NotificationType" :location "querystring"
                         :location-name "type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-notifications-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-notifications-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-notifications-input 'make-list-notifications-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-notifications-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-notifications-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notifications :initarg :notifications :initform
                         common-lisp:nil :type
                         (common-lisp:or notifications-list common-lisp:null)
                         :accessor
                         struct-shape-list-notifications-output-notifications
                         :shape "NotificationsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-notifications-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-notifications-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-notifications-output
                    'make-list-notifications-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notifications))
      (common-lisp:list
       (common-lisp:cons "notifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notifications-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-project-memberships-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-list-project-memberships-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-project-memberships-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-project-memberships-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (project-identifier :initarg :project-identifier
                         :initform
                         (common-lisp:error ":projectidentifier is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-list-project-memberships-input-project-identifier
                         :shape "ProjectId" :location "uri" :location-name
                         "projectIdentifier")
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or sort-field-project common-lisp:null)
                         :accessor
                         struct-shape-list-project-memberships-input-sort-by
                         :shape "SortFieldProject" :location "querystring"
                         :location-name "sortBy")
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-list-project-memberships-input-sort-order
                         :shape "SortOrder" :location "querystring"
                         :location-name "sortOrder"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-project-memberships-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-project-memberships-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-project-memberships-input
                    'make-list-project-memberships-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-project-memberships-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-project-memberships-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-project-memberships-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-project-memberships-output common-lisp:nil
                       ((members :initarg :members :initform
                         (common-lisp:error ":members is required") :type
                         (common-lisp:or project-members common-lisp:null)
                         :accessor
                         struct-shape-list-project-memberships-output-members
                         :shape "ProjectMembers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-project-memberships-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-project-memberships-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-project-memberships-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-project-memberships-output
                    'make-list-project-memberships-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-project-memberships-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-project-memberships-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-project-memberships-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-projects-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-list-projects-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (group-identifier :initarg :group-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-projects-input-group-identifier
                         :shape "String" :location "querystring" :location-name
                         "groupIdentifier")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-projects-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor struct-shape-list-projects-input-name :shape
                         "ProjectName" :location "querystring" :location-name
                         "name")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-projects-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (user-identifier :initarg :user-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-projects-input-user-identifier
                         :shape "String" :location "querystring" :location-name
                         "userIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-projects-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-projects-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-projects-input 'make-list-projects-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-projects-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-projects-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-projects-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-projects-output common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or project-summaries common-lisp:null)
                         :accessor struct-shape-list-projects-output-items
                         :shape "ProjectSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-projects-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-projects-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-projects-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-projects-output 'make-list-projects-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-projects-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-projects-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-projects-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-subscription-grants-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-grants-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-grants-input-environment-id
                         :shape "EnvironmentId" :location "querystring"
                         :location-name "environmentId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-grants-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-grants-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or sort-key common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-grants-input-sort-by
                         :shape "SortKey" :location "querystring"
                         :location-name "sortBy")
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-list-subscription-grants-input-sort-order
                         :shape "SortOrder" :location "querystring"
                         :location-name "sortOrder")
                        (subscribed-listing-id :initarg :subscribed-listing-id
                         :initform common-lisp:nil :type
                         (common-lisp:or listing-id common-lisp:null) :accessor
                         struct-shape-list-subscription-grants-input-subscribed-listing-id
                         :shape "ListingId" :location "querystring"
                         :location-name "subscribedListingId")
                        (subscription-id :initarg :subscription-id :initform
                         common-lisp:nil :type
                         (common-lisp:or subscription-id common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-grants-input-subscription-id
                         :shape "SubscriptionId" :location "querystring"
                         :location-name "subscriptionId")
                        (subscription-target-id :initarg
                         :subscription-target-id :initform common-lisp:nil
                         :type
                         (common-lisp:or subscription-target-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-grants-input-subscription-target-id
                         :shape "SubscriptionTargetId" :location "querystring"
                         :location-name "subscriptionTargetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-subscription-grants-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-subscription-grants-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-subscription-grants-input
                    'make-list-subscription-grants-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-grants-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-grants-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-grants-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-subscription-grants-output common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or subscription-grants common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-grants-output-items
                         :shape "SubscriptionGrants" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-grants-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-subscription-grants-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-subscription-grants-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-subscription-grants-output
                    'make-list-subscription-grants-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-grants-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-grants-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-grants-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-subscription-requests-input common-lisp:nil
                       ((approver-project-id :initarg :approver-project-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-list-subscription-requests-input-approver-project-id
                         :shape "ProjectId" :location "querystring"
                         :location-name "approverProjectId")
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-requests-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-requests-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-requests-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (owning-project-id :initarg :owning-project-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-list-subscription-requests-input-owning-project-id
                         :shape "ProjectId" :location "querystring"
                         :location-name "owningProjectId")
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or sort-key common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-requests-input-sort-by
                         :shape "SortKey" :location "querystring"
                         :location-name "sortBy")
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-list-subscription-requests-input-sort-order
                         :shape "SortOrder" :location "querystring"
                         :location-name "sortOrder")
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or subscription-request-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-requests-input-status
                         :shape "SubscriptionRequestStatus" :location
                         "querystring" :location-name "status")
                        (subscribed-listing-id :initarg :subscribed-listing-id
                         :initform common-lisp:nil :type
                         (common-lisp:or listing-id common-lisp:null) :accessor
                         struct-shape-list-subscription-requests-input-subscribed-listing-id
                         :shape "ListingId" :location "querystring"
                         :location-name "subscribedListingId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-subscription-requests-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-subscription-requests-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-subscription-requests-input
                    'make-list-subscription-requests-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-requests-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-requests-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-requests-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-subscription-requests-output common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or subscription-requests
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-requests-output-items
                         :shape "SubscriptionRequests" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-requests-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-subscription-requests-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-subscription-requests-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-subscription-requests-output
                    'make-list-subscription-requests-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-requests-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-requests-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-requests-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-subscription-targets-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-targets-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (environment-identifier :initarg
                         :environment-identifier :initform
                         (common-lisp:error
                          ":environmentidentifier is required")
                         :type (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-targets-input-environment-identifier
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentIdentifier")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-targets-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-targets-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or sort-key common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-targets-input-sort-by
                         :shape "SortKey" :location "querystring"
                         :location-name "sortBy")
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-list-subscription-targets-input-sort-order
                         :shape "SortOrder" :location "querystring"
                         :location-name "sortOrder"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-subscription-targets-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-subscription-targets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-subscription-targets-input
                    'make-list-subscription-targets-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-targets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-targets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-targets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-subscription-targets-output common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or subscription-targets common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-targets-output-items
                         :shape "SubscriptionTargets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-subscription-targets-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-subscription-targets-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-subscription-targets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-subscription-targets-output
                    'make-list-subscription-targets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-targets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-targets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscription-targets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-subscriptions-input common-lisp:nil
                       ((approver-project-id :initarg :approver-project-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-list-subscriptions-input-approver-project-id
                         :shape "ProjectId" :location "querystring"
                         :location-name "approverProjectId")
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-list-subscriptions-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-subscriptions-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-subscriptions-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (owning-project-id :initarg :owning-project-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-list-subscriptions-input-owning-project-id
                         :shape "ProjectId" :location "querystring"
                         :location-name "owningProjectId")
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or sort-key common-lisp:null)
                         :accessor
                         struct-shape-list-subscriptions-input-sort-by :shape
                         "SortKey" :location "querystring" :location-name
                         "sortBy")
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-list-subscriptions-input-sort-order
                         :shape "SortOrder" :location "querystring"
                         :location-name "sortOrder")
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or subscription-status common-lisp:null)
                         :accessor struct-shape-list-subscriptions-input-status
                         :shape "SubscriptionStatus" :location "querystring"
                         :location-name "status")
                        (subscribed-listing-id :initarg :subscribed-listing-id
                         :initform common-lisp:nil :type
                         (common-lisp:or listing-id common-lisp:null) :accessor
                         struct-shape-list-subscriptions-input-subscribed-listing-id
                         :shape "ListingId" :location "querystring"
                         :location-name "subscribedListingId")
                        (subscription-request-identifier :initarg
                         :subscription-request-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or subscription-request-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-subscriptions-input-subscription-request-identifier
                         :shape "SubscriptionRequestId" :location "querystring"
                         :location-name "subscriptionRequestIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-subscriptions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-subscriptions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-subscriptions-input 'make-list-subscriptions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscriptions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscriptions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscriptions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-subscriptions-output common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or subscriptions common-lisp:null)
                         :accessor struct-shape-list-subscriptions-output-items
                         :shape "Subscriptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-subscriptions-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-subscriptions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-subscriptions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-subscriptions-output
                    'make-list-subscriptions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscriptions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscriptions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscriptions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype listing-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass listing-item common-lisp:nil
                       ((asset-listing :initarg :asset-listing :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-listing common-lisp:null)
                         :accessor struct-shape-listing-item-asset-listing
                         :shape "AssetListing" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listing-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'listing-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'listing-item 'make-listing-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listing-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listing-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-listing))
      (common-lisp:list
       (common-lisp:cons "assetListing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listing-item))
   common-lisp:nil))
(common-lisp:deftype listing-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass listing-revision common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or listing-id common-lisp:null) :accessor
                         struct-shape-listing-revision-id :shape "ListingId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-listing-revision-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listing-revision
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'listing-revision
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'listing-revision 'make-listing-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listing-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listing-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listing-revision))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listing-revision-input common-lisp:nil
                       ((identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or listing-id common-lisp:null) :accessor
                         struct-shape-listing-revision-input-identifier :shape
                         "ListingId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-listing-revision-input-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listing-revision-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'listing-revision-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'listing-revision-input 'make-listing-revision-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listing-revision-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listing-revision-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listing-revision-input))
   common-lisp:nil))
(common-lisp:deftype listing-status () 'common-lisp:string)
(common-lisp:deftype long-description () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype max-results-for-list-domains () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass member common-lisp:nil
                       ((group-identifier :initarg :group-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-member-group-identifier :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-identifier :initarg :user-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-member-user-identifier :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'member
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'member 'make-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-identifier))
      (common-lisp:list
       (common-lisp:cons "groupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-identifier))
      (common-lisp:list
       (common-lisp:cons "userIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass member-details common-lisp:nil
                       ((group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or group-details common-lisp:null)
                         :accessor struct-shape-member-details-group :shape
                         "GroupDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user :initarg :user :initform common-lisp:nil :type
                         (common-lisp:or user-details common-lisp:null)
                         :accessor struct-shape-member-details-user :shape
                         "UserDetails" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'member-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'member-details 'make-member-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "user"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-details))
   common-lisp:nil))
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metadata-map () 'common-lisp:hash-table)
 (common-lisp:defun make-metadata-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass model common-lisp:nil
                       ((smithy :initarg :smithy :initform common-lisp:nil
                         :type (common-lisp:or smithy common-lisp:null)
                         :accessor struct-shape-model-smithy :shape "Smithy"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'model
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'model 'make-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smithy))
      (common-lisp:list
       (common-lisp:cons "smithy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notification-output common-lisp:nil
                       ((action-link :initarg :action-link :initform
                         (common-lisp:error ":actionlink is required") :type
                         (common-lisp:or action-link common-lisp:null)
                         :accessor struct-shape-notification-output-action-link
                         :shape "ActionLink" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform
                         (common-lisp:error ":creationtimestamp is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-notification-output-creation-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-notification-output-domain-identifier
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or task-id common-lisp:null) :accessor
                         struct-shape-notification-output-identifier :shape
                         "TaskId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-timestamp :initarg
                         :last-updated-timestamp :initform
                         (common-lisp:error
                          ":lastupdatedtimestamp is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-notification-output-last-updated-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-notification-output-message :shape
                         "Message" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type (common-lisp:or metadata-map common-lisp:null)
                         :accessor struct-shape-notification-output-metadata
                         :shape "MetadataMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or task-status common-lisp:null)
                         :accessor struct-shape-notification-output-status
                         :shape "TaskStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (title :initarg :title :initform
                         (common-lisp:error ":title is required") :type
                         (common-lisp:or title common-lisp:null) :accessor
                         struct-shape-notification-output-title :shape "Title"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (topic :initarg :topic :initform
                         (common-lisp:error ":topic is required") :type
                         (common-lisp:or topic common-lisp:null) :accessor
                         struct-shape-notification-output-topic :shape "Topic"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or notification-type common-lisp:null)
                         :accessor struct-shape-notification-output-type :shape
                         "NotificationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notification-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notification-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notification-output 'make-notification-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-link))
      (common-lisp:list
       (common-lisp:cons "actionLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "creationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-identifier))
      (common-lisp:list
       (common-lisp:cons "domainIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic))
      (common-lisp:list
       (common-lisp:cons "topic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass notification-resource common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-notification-resource-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-notification-resource-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or notification-resource-type
                                         common-lisp:null)
                         :accessor struct-shape-notification-resource-type
                         :shape "NotificationResourceType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notification-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notification-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notification-resource 'make-notification-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-resource))
   common-lisp:nil))
(common-lisp:deftype notification-resource-type () 'common-lisp:string)
(common-lisp:deftype notification-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype notification-subjects ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-notification-subjects
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notification-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype notifications-list ()
   '(trivial-types:proper-list notification-output))
 (common-lisp:defun make-notifications-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list notification-output))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype prediction-choices ()
   '(trivial-types:proper-list integer))
 (common-lisp:defun make-prediction-choices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass prediction-configuration common-lisp:nil
                       ((business-name-generation :initarg
                         :business-name-generation :initform common-lisp:nil
                         :type
                         (common-lisp:or business-name-generation-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-prediction-configuration-business-name-generation
                         :shape "BusinessNameGenerationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-prediction-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'prediction-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'prediction-configuration 'make-prediction-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prediction-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prediction-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-name-generation))
      (common-lisp:list
       (common-lisp:cons "businessNameGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prediction-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass project-deletion-error common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-project-deletion-error-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-project-deletion-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-project-deletion-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'project-deletion-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'project-deletion-error 'make-project-deletion-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          project-deletion-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          project-deletion-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          project-deletion-error))
   common-lisp:nil))
(common-lisp:deftype project-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass project-member common-lisp:nil
                       ((designation :initarg :designation :initform
                         (common-lisp:error ":designation is required") :type
                         (common-lisp:or user-designation common-lisp:null)
                         :accessor struct-shape-project-member-designation
                         :shape "UserDesignation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (member-details :initarg :member-details :initform
                         (common-lisp:error ":memberdetails is required") :type
                         (common-lisp:or member-details common-lisp:null)
                         :accessor struct-shape-project-member-member-details
                         :shape "MemberDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-project-member
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'project-member
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'project-member 'make-project-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'designation))
      (common-lisp:list
       (common-lisp:cons "designation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-details))
      (common-lisp:list
       (common-lisp:cons "memberDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype project-members ()
   '(trivial-types:proper-list project-member))
 (common-lisp:defun make-project-members
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-member))
   aws-sdk/generator/shape::members))
(common-lisp:deftype project-name () 'common-lisp:string)
(common-lisp:deftype project-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype project-summaries ()
   '(trivial-types:proper-list project-summary))
 (common-lisp:defun make-project-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass project-summary common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-project-summary-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-project-summary-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-project-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-project-summary-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor struct-shape-project-summary-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-project-summary-id :shape "ProjectId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor struct-shape-project-summary-name :shape
                         "ProjectName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-status :initarg :project-status :initform
                         common-lisp:nil :type
                         (common-lisp:or project-status common-lisp:null)
                         :accessor struct-shape-project-summary-project-status
                         :shape "ProjectStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-project-summary-updated-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-project-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'project-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'project-summary 'make-project-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-status))
      (common-lisp:list
       (common-lisp:cons "projectStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass provisioning-properties common-lisp:nil
                       ((cloud-formation :initarg :cloud-formation :initform
                         common-lisp:nil :type
                         (common-lisp:or cloud-formation-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-provisioning-properties-cloud-formation
                         :shape "CloudFormationProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provisioning-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'provisioning-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'provisioning-properties 'make-provisioning-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-formation))
      (common-lisp:list
       (common-lisp:cons "cloudFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-environment-blueprint-configuration-input
                       common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-put-environment-blueprint-configuration-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (enabled-regions :initarg :enabled-regions :initform
                         (common-lisp:error ":enabledregions is required")
                         :type
                         (common-lisp:or enabled-region-list common-lisp:null)
                         :accessor
                         struct-shape-put-environment-blueprint-configuration-input-enabled-regions
                         :shape "EnabledRegionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-blueprint-identifier :initarg
                         :environment-blueprint-identifier :initform
                         (common-lisp:error
                          ":environmentblueprintidentifier is required")
                         :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-environment-blueprint-configuration-input-environment-blueprint-identifier
                         :shape "EnvironmentBlueprintId" :location "uri"
                         :location-name "environmentBlueprintIdentifier")
                        (manage-access-role-arn :initarg
                         :manage-access-role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-put-environment-blueprint-configuration-input-manage-access-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioning-role-arn :initarg :provisioning-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-put-environment-blueprint-configuration-input-provisioning-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regional-parameters :initarg :regional-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or regional-parameter-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-environment-blueprint-configuration-input-regional-parameters
                         :shape "RegionalParameterMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-environment-blueprint-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-environment-blueprint-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-environment-blueprint-configuration-input
                    'make-put-environment-blueprint-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-environment-blueprint-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-environment-blueprint-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-regions))
      (common-lisp:list
       (common-lisp:cons "enabledRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "manageAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-role-arn))
      (common-lisp:list
       (common-lisp:cons "provisioningRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regional-parameters))
      (common-lisp:list
       (common-lisp:cons "regionalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-environment-blueprint-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-environment-blueprint-configuration-output
                       common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-environment-blueprint-configuration-output-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-put-environment-blueprint-configuration-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled-regions :initarg :enabled-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled-region-list common-lisp:null)
                         :accessor
                         struct-shape-put-environment-blueprint-configuration-output-enabled-regions
                         :shape "EnabledRegionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-blueprint-id :initarg
                         :environment-blueprint-id :initform
                         (common-lisp:error
                          ":environmentblueprintid is required")
                         :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-environment-blueprint-configuration-output-environment-blueprint-id
                         :shape "EnvironmentBlueprintId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (manage-access-role-arn :initarg
                         :manage-access-role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-put-environment-blueprint-configuration-output-manage-access-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioning-role-arn :initarg :provisioning-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-put-environment-blueprint-configuration-output-provisioning-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regional-parameters :initarg :regional-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or regional-parameter-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-environment-blueprint-configuration-output-regional-parameters
                         :shape "RegionalParameterMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-environment-blueprint-configuration-output-updated-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-environment-blueprint-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-environment-blueprint-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-environment-blueprint-configuration-output
                    'make-put-environment-blueprint-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-environment-blueprint-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-environment-blueprint-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-regions))
      (common-lisp:list
       (common-lisp:cons "enabledRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "manageAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-role-arn))
      (common-lisp:list
       (common-lisp:cons "provisioningRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regional-parameters))
      (common-lisp:list
       (common-lisp:cons "regionalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-environment-blueprint-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recommendation-configuration common-lisp:nil
                       ((enable-business-name-generation :initarg
                         :enable-business-name-generation :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-recommendation-configuration-enable-business-name-generation
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommendation-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recommendation-configuration
                    'make-recommendation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-business-name-generation))
      (common-lisp:list
       (common-lisp:cons "enableBusinessNameGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass redshift-cluster-storage common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or
                          redshift-cluster-storage-cluster-name-string
                          common-lisp:null)
                         :accessor
                         struct-shape-redshift-cluster-storage-cluster-name
                         :shape "RedshiftClusterStorageClusterNameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redshift-cluster-storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'redshift-cluster-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redshift-cluster-storage 'make-redshift-cluster-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-cluster-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-cluster-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-cluster-storage))
   common-lisp:nil))
(common-lisp:deftype redshift-cluster-storage-cluster-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass redshift-credential-configuration common-lisp:nil
                       ((secret-manager-arn :initarg :secret-manager-arn
                         :initform
                         (common-lisp:error ":secretmanagerarn is required")
                         :type
                         (common-lisp:or
                          redshift-credential-configuration-secret-manager-arn-string
                          common-lisp:null)
                         :accessor
                         struct-shape-redshift-credential-configuration-secret-manager-arn
                         :shape
                         "RedshiftCredentialConfigurationSecretManagerArnString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redshift-credential-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'redshift-credential-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redshift-credential-configuration
                    'make-redshift-credential-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-credential-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-credential-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-manager-arn))
      (common-lisp:list
       (common-lisp:cons "secretManagerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-credential-configuration))
   common-lisp:nil))
(common-lisp:deftype redshift-credential-configuration-secret-manager-arn-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass redshift-run-configuration-input common-lisp:nil
                       ((data-access-role :initarg :data-access-role :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          redshift-run-configuration-input-data-access-role-string
                          common-lisp:null)
                         :accessor
                         struct-shape-redshift-run-configuration-input-data-access-role
                         :shape
                         "RedshiftRunConfigurationInputDataAccessRoleString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (redshift-credential-configuration :initarg
                         :redshift-credential-configuration :initform
                         (common-lisp:error
                          ":redshiftcredentialconfiguration is required")
                         :type
                         (common-lisp:or redshift-credential-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-redshift-run-configuration-input-redshift-credential-configuration
                         :shape "RedshiftCredentialConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (redshift-storage :initarg :redshift-storage :initform
                         (common-lisp:error ":redshiftstorage is required")
                         :type
                         (common-lisp:or redshift-storage common-lisp:null)
                         :accessor
                         struct-shape-redshift-run-configuration-input-redshift-storage
                         :shape "RedshiftStorage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relational-filter-configurations :initarg
                         :relational-filter-configurations :initform
                         (common-lisp:error
                          ":relationalfilterconfigurations is required")
                         :type
                         (common-lisp:or relational-filter-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-redshift-run-configuration-input-relational-filter-configurations
                         :shape "RelationalFilterConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redshift-run-configuration-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'redshift-run-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redshift-run-configuration-input
                    'make-redshift-run-configuration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-run-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-run-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-access-role))
      (common-lisp:list
       (common-lisp:cons "dataAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-credential-configuration))
      (common-lisp:list
       (common-lisp:cons "redshiftCredentialConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-storage))
      (common-lisp:list
       (common-lisp:cons "redshiftStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-filter-configurations))
      (common-lisp:list
       (common-lisp:cons "relationalFilterConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-run-configuration-input))
   common-lisp:nil))
(common-lisp:deftype redshift-run-configuration-input-data-access-role-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass redshift-run-configuration-output common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          redshift-run-configuration-output-account-id-string
                          common-lisp:null)
                         :accessor
                         struct-shape-redshift-run-configuration-output-account-id
                         :shape "RedshiftRunConfigurationOutputAccountIdString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-access-role :initarg :data-access-role :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          redshift-run-configuration-output-data-access-role-string
                          common-lisp:null)
                         :accessor
                         struct-shape-redshift-run-configuration-output-data-access-role
                         :shape
                         "RedshiftRunConfigurationOutputDataAccessRoleString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (redshift-credential-configuration :initarg
                         :redshift-credential-configuration :initform
                         (common-lisp:error
                          ":redshiftcredentialconfiguration is required")
                         :type
                         (common-lisp:or redshift-credential-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-redshift-run-configuration-output-redshift-credential-configuration
                         :shape "RedshiftCredentialConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (redshift-storage :initarg :redshift-storage :initform
                         (common-lisp:error ":redshiftstorage is required")
                         :type
                         (common-lisp:or redshift-storage common-lisp:null)
                         :accessor
                         struct-shape-redshift-run-configuration-output-redshift-storage
                         :shape "RedshiftStorage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          redshift-run-configuration-output-region-string
                          common-lisp:null)
                         :accessor
                         struct-shape-redshift-run-configuration-output-region
                         :shape "RedshiftRunConfigurationOutputRegionString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (relational-filter-configurations :initarg
                         :relational-filter-configurations :initform
                         (common-lisp:error
                          ":relationalfilterconfigurations is required")
                         :type
                         (common-lisp:or relational-filter-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-redshift-run-configuration-output-relational-filter-configurations
                         :shape "RelationalFilterConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redshift-run-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'redshift-run-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redshift-run-configuration-output
                    'make-redshift-run-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-run-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-run-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-access-role))
      (common-lisp:list
       (common-lisp:cons "dataAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-credential-configuration))
      (common-lisp:list
       (common-lisp:cons "redshiftCredentialConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-storage))
      (common-lisp:list
       (common-lisp:cons "redshiftStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-filter-configurations))
      (common-lisp:list
       (common-lisp:cons "relationalFilterConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-run-configuration-output))
   common-lisp:nil))
(common-lisp:deftype redshift-run-configuration-output-account-id-string ()
  'common-lisp:string)
(common-lisp:deftype redshift-run-configuration-output-data-access-role-string
                     ()
  'common-lisp:string)
(common-lisp:deftype redshift-run-configuration-output-region-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass redshift-serverless-storage common-lisp:nil
                       ((workgroup-name :initarg :workgroup-name :initform
                         (common-lisp:error ":workgroupname is required") :type
                         (common-lisp:or
                          redshift-serverless-storage-workgroup-name-string
                          common-lisp:null)
                         :accessor
                         struct-shape-redshift-serverless-storage-workgroup-name
                         :shape "RedshiftServerlessStorageWorkgroupNameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redshift-serverless-storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'redshift-serverless-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redshift-serverless-storage
                    'make-redshift-serverless-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-serverless-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-serverless-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-serverless-storage))
   common-lisp:nil))
(common-lisp:deftype redshift-serverless-storage-workgroup-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass redshift-storage common-lisp:nil
                       ((redshift-cluster-source :initarg
                         :redshift-cluster-source :initform common-lisp:nil
                         :type
                         (common-lisp:or redshift-cluster-storage
                                         common-lisp:null)
                         :accessor
                         struct-shape-redshift-storage-redshift-cluster-source
                         :shape "RedshiftClusterStorage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (redshift-serverless-source :initarg
                         :redshift-serverless-source :initform common-lisp:nil
                         :type
                         (common-lisp:or redshift-serverless-storage
                                         common-lisp:null)
                         :accessor
                         struct-shape-redshift-storage-redshift-serverless-source
                         :shape "RedshiftServerlessStorage" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redshift-storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'redshift-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redshift-storage 'make-redshift-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redshift-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redshift-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-cluster-source))
      (common-lisp:list
       (common-lisp:cons "redshiftClusterSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-serverless-source))
      (common-lisp:list
       (common-lisp:cons "redshiftServerlessSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redshift-storage))
   common-lisp:nil))
(common-lisp:deftype region-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype regional-parameter () 'common-lisp:hash-table)
 (common-lisp:defun make-regional-parameter
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype regional-parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun make-regional-parameter-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass reject-choice common-lisp:nil
                       ((prediction-choices :initarg :prediction-choices
                         :initform common-lisp:nil :type
                         (common-lisp:or prediction-choices common-lisp:null)
                         :accessor
                         struct-shape-reject-choice-prediction-choices :shape
                         "PredictionChoices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prediction-target :initarg :prediction-target
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reject-choice-prediction-target :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-choice
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reject-choice
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'reject-choice 'make-reject-choice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reject-choice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reject-choice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prediction-choices))
      (common-lisp:list
       (common-lisp:cons "predictionChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prediction-target))
      (common-lisp:list
       (common-lisp:cons "predictionTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reject-choice))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reject-choices ()
   '(trivial-types:proper-list reject-choice))
 (common-lisp:defun make-reject-choices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reject-choice))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reject-predictions-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-reject-predictions-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-reject-predictions-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or asset-identifier common-lisp:null)
                         :accessor
                         struct-shape-reject-predictions-input-identifier
                         :shape "AssetIdentifier" :location "uri"
                         :location-name "identifier")
                        (reject-choices :initarg :reject-choices :initform
                         common-lisp:nil :type
                         (common-lisp:or reject-choices common-lisp:null)
                         :accessor
                         struct-shape-reject-predictions-input-reject-choices
                         :shape "RejectChoices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reject-rule :initarg :reject-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or reject-rule common-lisp:null)
                         :accessor
                         struct-shape-reject-predictions-input-reject-rule
                         :shape "RejectRule" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision :initarg :revision :initform common-lisp:nil
                         :type (common-lisp:or revision common-lisp:null)
                         :accessor
                         struct-shape-reject-predictions-input-revision :shape
                         "Revision" :location "querystring" :location-name
                         "revision"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-predictions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reject-predictions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-predictions-input 'make-reject-predictions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-predictions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-predictions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reject-choices))
      (common-lisp:list
       (common-lisp:cons "rejectChoices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reject-rule))
      (common-lisp:list
       (common-lisp:cons "rejectRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-predictions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-predictions-output common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or asset-id common-lisp:null) :accessor
                         struct-shape-reject-predictions-output-asset-id :shape
                         "AssetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-revision :initarg :asset-revision :initform
                         (common-lisp:error ":assetrevision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-reject-predictions-output-asset-revision
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-reject-predictions-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-predictions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reject-predictions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-predictions-output
                    'make-reject-predictions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-predictions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-predictions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-revision))
      (common-lisp:list
       (common-lisp:cons "assetRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-predictions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-rule common-lisp:nil
                       ((rule :initarg :rule :initform common-lisp:nil :type
                         (common-lisp:or reject-rule-behavior common-lisp:null)
                         :accessor struct-shape-reject-rule-rule :shape
                         "RejectRuleBehavior" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (threshold :initarg :threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-reject-rule-threshold :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reject-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'reject-rule 'make-reject-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reject-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reject-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reject-rule))
   common-lisp:nil))
(common-lisp:deftype reject-rule-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reject-subscription-request-input common-lisp:nil
                       ((decision-comment :initarg :decision-comment :initform
                         common-lisp:nil :type
                         (common-lisp:or decision-comment common-lisp:null)
                         :accessor
                         struct-shape-reject-subscription-request-input-decision-comment
                         :shape "DecisionComment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-reject-subscription-request-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or subscription-request-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-reject-subscription-request-input-identifier
                         :shape "SubscriptionRequestId" :location "uri"
                         :location-name "identifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-subscription-request-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-subscription-request-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-subscription-request-input
                    'make-reject-subscription-request-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-subscription-request-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-subscription-request-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-comment))
      (common-lisp:list
       (common-lisp:cons "decisionComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-subscription-request-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-subscription-request-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-reject-subscription-request-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-reject-subscription-request-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (decision-comment :initarg :decision-comment :initform
                         common-lisp:nil :type
                         (common-lisp:or decision-comment common-lisp:null)
                         :accessor
                         struct-shape-reject-subscription-request-output-decision-comment
                         :shape "DecisionComment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-reject-subscription-request-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-request-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-reject-subscription-request-output-id
                         :shape "SubscriptionRequestId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (request-reason :initarg :request-reason :initform
                         (common-lisp:error ":requestreason is required") :type
                         (common-lisp:or request-reason common-lisp:null)
                         :accessor
                         struct-shape-reject-subscription-request-output-request-reason
                         :shape "RequestReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reviewer-id :initarg :reviewer-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reject-subscription-request-output-reviewer-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-request-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-reject-subscription-request-output-status
                         :shape "SubscriptionRequestStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscribed-listings :initarg :subscribed-listings
                         :initform
                         (common-lisp:error ":subscribedlistings is required")
                         :type
                         (common-lisp:or
                          reject-subscription-request-output-subscribed-listings-list
                          common-lisp:null)
                         :accessor
                         struct-shape-reject-subscription-request-output-subscribed-listings
                         :shape
                         "RejectSubscriptionRequestOutputSubscribedListingsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subscribed-principals :initarg :subscribed-principals
                         :initform
                         (common-lisp:error
                          ":subscribedprincipals is required")
                         :type
                         (common-lisp:or
                          reject-subscription-request-output-subscribed-principals-list
                          common-lisp:null)
                         :accessor
                         struct-shape-reject-subscription-request-output-subscribed-principals
                         :shape
                         "RejectSubscriptionRequestOutputSubscribedPrincipalsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-reject-subscription-request-output-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-reject-subscription-request-output-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-subscription-request-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-subscription-request-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-subscription-request-output
                    'make-reject-subscription-request-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-subscription-request-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-subscription-request-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-comment))
      (common-lisp:list
       (common-lisp:cons "decisionComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-reason))
      (common-lisp:list
       (common-lisp:cons "requestReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewer-id))
      (common-lisp:list
       (common-lisp:cons "reviewerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listings))
      (common-lisp:list
       (common-lisp:cons "subscribedListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principals))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-subscription-request-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reject-subscription-request-output-subscribed-listings-list
                      ()
   '(trivial-types:proper-list subscribed-listing))
 (common-lisp:defun make-reject-subscription-request-output-subscribed-listings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-listing))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype reject-subscription-request-output-subscribed-principals-list
                      ()
   '(trivial-types:proper-list subscribed-principal))
 (common-lisp:defun make-reject-subscription-request-output-subscribed-principals-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass relational-filter-configuration common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or
                          relational-filter-configuration-database-name-string
                          common-lisp:null)
                         :accessor
                         struct-shape-relational-filter-configuration-database-name
                         :shape
                         "RelationalFilterConfigurationDatabaseNameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter-expressions :initarg :filter-expressions
                         :initform common-lisp:nil :type
                         (common-lisp:or filter-expressions common-lisp:null)
                         :accessor
                         struct-shape-relational-filter-configuration-filter-expressions
                         :shape "FilterExpressions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-name :initarg :schema-name :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          relational-filter-configuration-schema-name-string
                          common-lisp:null)
                         :accessor
                         struct-shape-relational-filter-configuration-schema-name
                         :shape "RelationalFilterConfigurationSchemaNameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relational-filter-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'relational-filter-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'relational-filter-configuration
                    'make-relational-filter-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-filter-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-filter-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-expressions))
      (common-lisp:list
       (common-lisp:cons "filterExpressions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "schemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-filter-configuration))
   common-lisp:nil))
(common-lisp:deftype relational-filter-configuration-database-name-string ()
  'common-lisp:string)
(common-lisp:deftype relational-filter-configuration-schema-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype relational-filter-configurations ()
   '(trivial-types:proper-list relational-filter-configuration))
 (common-lisp:defun make-relational-filter-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            relational-filter-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype request-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (provider :initarg :provider :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-resource-provider :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-type :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-value :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-list () '(trivial-types:proper-list resource))
 (common-lisp:defun make-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (datazone-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype revision () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass revoke-subscription-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-revoke-subscription-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or subscription-id common-lisp:null)
                         :accessor
                         struct-shape-revoke-subscription-input-identifier
                         :shape "SubscriptionId" :location "uri" :location-name
                         "identifier")
                        (retain-permissions :initarg :retain-permissions
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-revoke-subscription-input-retain-permissions
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-subscription-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'revoke-subscription-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-subscription-input
                    'make-revoke-subscription-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-subscription-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-subscription-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-permissions))
      (common-lisp:list
       (common-lisp:cons "retainPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-subscription-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-subscription-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-revoke-subscription-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-revoke-subscription-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-revoke-subscription-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-id common-lisp:null)
                         :accessor struct-shape-revoke-subscription-output-id
                         :shape "SubscriptionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retain-permissions :initarg :retain-permissions
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-revoke-subscription-output-retain-permissions
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-status common-lisp:null)
                         :accessor
                         struct-shape-revoke-subscription-output-status :shape
                         "SubscriptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscribed-listing :initarg :subscribed-listing
                         :initform
                         (common-lisp:error ":subscribedlisting is required")
                         :type
                         (common-lisp:or subscribed-listing common-lisp:null)
                         :accessor
                         struct-shape-revoke-subscription-output-subscribed-listing
                         :shape "SubscribedListing" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscribed-principal :initarg :subscribed-principal
                         :initform
                         (common-lisp:error ":subscribedprincipal is required")
                         :type
                         (common-lisp:or subscribed-principal common-lisp:null)
                         :accessor
                         struct-shape-revoke-subscription-output-subscribed-principal
                         :shape "SubscribedPrincipal" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-request-id :initarg
                         :subscription-request-id :initform common-lisp:nil
                         :type
                         (common-lisp:or subscription-request-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-revoke-subscription-output-subscription-request-id
                         :shape "SubscriptionRequestId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-revoke-subscription-output-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-revoke-subscription-output-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-subscription-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'revoke-subscription-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-subscription-output
                    'make-revoke-subscription-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-subscription-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-subscription-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-permissions))
      (common-lisp:list
       (common-lisp:cons "retainPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listing))
      (common-lisp:list
       (common-lisp:cons "subscribedListing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principal))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-request-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-subscription-output))
   common-lisp:nil))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass run-statistics-for-assets common-lisp:nil
                       ((added :initarg :added :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-run-statistics-for-assets-added :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failed :initarg :failed :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-run-statistics-for-assets-failed :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skipped :initarg :skipped :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-run-statistics-for-assets-skipped :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unchanged :initarg :unchanged :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-run-statistics-for-assets-unchanged
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated :initarg :updated :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-run-statistics-for-assets-updated :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-run-statistics-for-assets
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'run-statistics-for-assets
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'run-statistics-for-assets
                    'make-run-statistics-for-assets))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-statistics-for-assets))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-statistics-for-assets))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'added))
      (common-lisp:list
       (common-lisp:cons "added"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skipped))
      (common-lisp:list
       (common-lisp:cons "skipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unchanged))
      (common-lisp:list
       (common-lisp:cons "unchanged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated))
      (common-lisp:list
       (common-lisp:cons "updated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-statistics-for-assets))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule-configuration common-lisp:nil
                       ((schedule :initarg :schedule :initform common-lisp:nil
                         :type (common-lisp:or cron-string common-lisp:null)
                         :accessor struct-shape-schedule-configuration-schedule
                         :shape "CronString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timezone :initarg :timezone :initform common-lisp:nil
                         :type (common-lisp:or timezone common-lisp:null)
                         :accessor struct-shape-schedule-configuration-timezone
                         :shape "Timezone" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schedule-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schedule-configuration 'make-schedule-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-group-profiles-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-search-group-profiles-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (group-type :initarg :group-type :initform
                         (common-lisp:error ":grouptype is required") :type
                         (common-lisp:or group-search-type common-lisp:null)
                         :accessor
                         struct-shape-search-group-profiles-input-group-type
                         :shape "GroupSearchType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-group-profiles-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-search-group-profiles-input-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (search-text :initarg :search-text :initform
                         common-lisp:nil :type
                         (common-lisp:or group-search-text common-lisp:null)
                         :accessor
                         struct-shape-search-group-profiles-input-search-text
                         :shape "GroupSearchText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-group-profiles-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-group-profiles-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-group-profiles-input
                    'make-search-group-profiles-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-group-profiles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-group-profiles-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-type))
      (common-lisp:list
       (common-lisp:cons "groupType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-text))
      (common-lisp:list
       (common-lisp:cons "searchText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-group-profiles-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-group-profiles-output common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or group-profile-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-group-profiles-output-items :shape
                         "GroupProfileSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-search-group-profiles-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-group-profiles-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-group-profiles-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-group-profiles-output
                    'make-search-group-profiles-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-group-profiles-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-group-profiles-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-group-profiles-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-in-item common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or attribute common-lisp:null) :accessor
                         struct-shape-search-in-item-attribute :shape
                         "Attribute" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-in-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-in-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'search-in-item 'make-search-in-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-in-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-in-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-in-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-in-list ()
   '(trivial-types:proper-list search-in-item))
 (common-lisp:defun make-search-in-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-in-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-input common-lisp:nil
                       ((additional-attributes :initarg :additional-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or search-output-additional-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-input-additional-attributes :shape
                         "SearchOutputAdditionalAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor struct-shape-search-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-clause common-lisp:null)
                         :accessor struct-shape-search-input-filters :shape
                         "FilterClause" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-search-input-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-search-input-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owning-project-identifier :initarg
                         :owning-project-identifier :initform common-lisp:nil
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-search-input-owning-project-identifier
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (search-in :initarg :search-in :initform
                         common-lisp:nil :type
                         (common-lisp:or search-in-list common-lisp:null)
                         :accessor struct-shape-search-input-search-in :shape
                         "SearchInList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (search-scope :initarg :search-scope :initform
                         (common-lisp:error ":searchscope is required") :type
                         (common-lisp:or inventory-search-scope
                                         common-lisp:null)
                         :accessor struct-shape-search-input-search-scope
                         :shape "InventorySearchScope" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (search-text :initarg :search-text :initform
                         common-lisp:nil :type
                         (common-lisp:or search-text common-lisp:null)
                         :accessor struct-shape-search-input-search-text :shape
                         "SearchText" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort :initarg :sort :initform common-lisp:nil :type
                         (common-lisp:or search-sort common-lisp:null)
                         :accessor struct-shape-search-input-sort :shape
                         "SearchSort" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'search-input 'make-search-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-attributes))
      (common-lisp:list
       (common-lisp:cons "additionalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'owning-project-identifier))
      (common-lisp:list
       (common-lisp:cons "owningProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-in))
      (common-lisp:list
       (common-lisp:cons "searchIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-scope))
      (common-lisp:list
       (common-lisp:cons "searchScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-text))
      (common-lisp:list
       (common-lisp:cons "searchText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-inventory-result-item common-lisp:nil
                       ((asset-item :initarg :asset-item :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-item common-lisp:null) :accessor
                         struct-shape-search-inventory-result-item-asset-item
                         :shape "AssetItem" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-product-item :initarg :data-product-item
                         :initform common-lisp:nil :type
                         (common-lisp:or data-product-summary common-lisp:null)
                         :accessor
                         struct-shape-search-inventory-result-item-data-product-item
                         :shape "DataProductSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glossary-item :initarg :glossary-item :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-item common-lisp:null)
                         :accessor
                         struct-shape-search-inventory-result-item-glossary-item
                         :shape "GlossaryItem" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glossary-term-item :initarg :glossary-term-item
                         :initform common-lisp:nil :type
                         (common-lisp:or glossary-term-item common-lisp:null)
                         :accessor
                         struct-shape-search-inventory-result-item-glossary-term-item
                         :shape "GlossaryTermItem" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-inventory-result-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-inventory-result-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-inventory-result-item
                    'make-search-inventory-result-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-inventory-result-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-inventory-result-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-item))
      (common-lisp:list
       (common-lisp:cons "assetItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-product-item))
      (common-lisp:list
       (common-lisp:cons "dataProductItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-item))
      (common-lisp:list
       (common-lisp:cons "glossaryItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-term-item))
      (common-lisp:list
       (common-lisp:cons "glossaryTermItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-inventory-result-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-inventory-result-items ()
   '(trivial-types:proper-list search-inventory-result-item))
 (common-lisp:defun make-search-inventory-result-items
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-inventory-result-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-listings-input common-lisp:nil
                       ((additional-attributes :initarg :additional-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or search-output-additional-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-listings-input-additional-attributes
                         :shape "SearchOutputAdditionalAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-search-listings-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-clause common-lisp:null)
                         :accessor struct-shape-search-listings-input-filters
                         :shape "FilterClause" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-listings-input-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-search-listings-input-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (search-in :initarg :search-in :initform
                         common-lisp:nil :type
                         (common-lisp:or search-in-list common-lisp:null)
                         :accessor struct-shape-search-listings-input-search-in
                         :shape "SearchInList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (search-text :initarg :search-text :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-search-listings-input-search-text :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort :initarg :sort :initform common-lisp:nil :type
                         (common-lisp:or search-sort common-lisp:null)
                         :accessor struct-shape-search-listings-input-sort
                         :shape "SearchSort" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-listings-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-listings-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-listings-input 'make-search-listings-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-listings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-listings-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-attributes))
      (common-lisp:list
       (common-lisp:cons "additionalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-in))
      (common-lisp:list
       (common-lisp:cons "searchIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-text))
      (common-lisp:list
       (common-lisp:cons "searchText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-listings-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-listings-output common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or search-result-items common-lisp:null)
                         :accessor struct-shape-search-listings-output-items
                         :shape "SearchResultItems" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-search-listings-output-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-match-count :initarg :total-match-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-search-listings-output-total-match-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-listings-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-listings-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-listings-output 'make-search-listings-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-listings-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-listings-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-match-count))
      (common-lisp:list
       (common-lisp:cons "totalMatchCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-listings-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-output common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or search-inventory-result-items
                                         common-lisp:null)
                         :accessor struct-shape-search-output-items :shape
                         "SearchInventoryResultItems" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-search-output-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-match-count :initarg :total-match-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-search-output-total-match-count :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'search-output 'make-search-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-match-count))
      (common-lisp:list
       (common-lisp:cons "totalMatchCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-output))
   common-lisp:nil))
(common-lisp:deftype search-output-additional-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-output-additional-attributes ()
   '(trivial-types:proper-list search-output-additional-attribute))
 (common-lisp:defun make-search-output-additional-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-output-additional-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-result-item common-lisp:nil
                       ((asset-listing :initarg :asset-listing :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-listing-item common-lisp:null)
                         :accessor
                         struct-shape-search-result-item-asset-listing :shape
                         "AssetListingItem" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-result-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-result-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-result-item 'make-search-result-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-result-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-result-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-listing))
      (common-lisp:list
       (common-lisp:cons "assetListing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-result-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-result-items ()
   '(trivial-types:proper-list search-result-item))
 (common-lisp:defun make-search-result-items
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-result-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-sort common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or attribute common-lisp:null) :accessor
                         struct-shape-search-sort-attribute :shape "Attribute"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (order :initarg :order :initform common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-search-sort-order :shape "SortOrder"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-sort
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-sort
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'search-sort 'make-search-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-sort))
   common-lisp:nil))
(common-lisp:deftype search-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass search-types-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-search-types-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-clause common-lisp:null)
                         :accessor struct-shape-search-types-input-filters
                         :shape "FilterClause" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (managed :initarg :managed :initform
                         (common-lisp:error ":managed is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-search-types-input-managed :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-search-types-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-search-types-input-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (search-in :initarg :search-in :initform
                         common-lisp:nil :type
                         (common-lisp:or search-in-list common-lisp:null)
                         :accessor struct-shape-search-types-input-search-in
                         :shape "SearchInList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (search-scope :initarg :search-scope :initform
                         (common-lisp:error ":searchscope is required") :type
                         (common-lisp:or types-search-scope common-lisp:null)
                         :accessor struct-shape-search-types-input-search-scope
                         :shape "TypesSearchScope" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (search-text :initarg :search-text :initform
                         common-lisp:nil :type
                         (common-lisp:or search-text common-lisp:null)
                         :accessor struct-shape-search-types-input-search-text
                         :shape "SearchText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort :initarg :sort :initform common-lisp:nil :type
                         (common-lisp:or search-sort common-lisp:null)
                         :accessor struct-shape-search-types-input-sort :shape
                         "SearchSort" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-types-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-types-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-types-input 'make-search-types-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-types-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-types-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed))
      (common-lisp:list
       (common-lisp:cons "managed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-in))
      (common-lisp:list
       (common-lisp:cons "searchIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-scope))
      (common-lisp:list
       (common-lisp:cons "searchScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-text))
      (common-lisp:list
       (common-lisp:cons "searchText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-types-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-types-output common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or search-types-result-items
                                         common-lisp:null)
                         :accessor struct-shape-search-types-output-items
                         :shape "SearchTypesResultItems" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-search-types-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-match-count :initarg :total-match-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-search-types-output-total-match-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-types-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-types-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-types-output 'make-search-types-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-types-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-types-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-match-count))
      (common-lisp:list
       (common-lisp:cons "totalMatchCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-types-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-types-result-item common-lisp:nil
                       ((asset-type-item :initarg :asset-type-item :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-type-item common-lisp:null)
                         :accessor
                         struct-shape-search-types-result-item-asset-type-item
                         :shape "AssetTypeItem" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (form-type-item :initarg :form-type-item :initform
                         common-lisp:nil :type
                         (common-lisp:or form-type-data common-lisp:null)
                         :accessor
                         struct-shape-search-types-result-item-form-type-item
                         :shape "FormTypeData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-types-result-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-types-result-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-types-result-item 'make-search-types-result-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-types-result-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-types-result-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-type-item))
      (common-lisp:list
       (common-lisp:cons "assetTypeItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-type-item))
      (common-lisp:list
       (common-lisp:cons "formTypeItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-types-result-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-types-result-items ()
   '(trivial-types:proper-list search-types-result-item))
 (common-lisp:defun make-search-types-result-items
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-types-result-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-user-profiles-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-search-user-profiles-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-user-profiles-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-search-user-profiles-input-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (search-text :initarg :search-text :initform
                         common-lisp:nil :type
                         (common-lisp:or user-search-text common-lisp:null)
                         :accessor
                         struct-shape-search-user-profiles-input-search-text
                         :shape "UserSearchText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-type :initarg :user-type :initform
                         (common-lisp:error ":usertype is required") :type
                         (common-lisp:or user-search-type common-lisp:null)
                         :accessor
                         struct-shape-search-user-profiles-input-user-type
                         :shape "UserSearchType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-user-profiles-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-user-profiles-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-user-profiles-input
                    'make-search-user-profiles-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-user-profiles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-user-profiles-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-text))
      (common-lisp:list
       (common-lisp:cons "searchText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-type))
      (common-lisp:list
       (common-lisp:cons "userType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-user-profiles-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-user-profiles-output common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or user-profile-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-user-profiles-output-items :shape
                         "UserProfileSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-search-user-profiles-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-user-profiles-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-user-profiles-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-user-profiles-output
                    'make-search-user-profiles-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-user-profiles-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-user-profiles-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-user-profiles-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (datazone-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype short-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass single-sign-on common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or auth-type common-lisp:null) :accessor
                         struct-shape-single-sign-on-type :shape "AuthType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-assignment :initarg :user-assignment :initform
                         common-lisp:nil :type
                         (common-lisp:or user-assignment common-lisp:null)
                         :accessor struct-shape-single-sign-on-user-assignment
                         :shape "UserAssignment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-single-sign-on
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'single-sign-on
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'single-sign-on 'make-single-sign-on))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input single-sign-on))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input single-sign-on))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-assignment))
      (common-lisp:list
       (common-lisp:cons "userAssignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input single-sign-on))
   common-lisp:nil))
(common-lisp:deftype smithy () 'common-lisp:string)
(common-lisp:deftype sort-field-project () 'common-lisp:string)
(common-lisp:deftype sort-key () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sso-user-profile-details common-lisp:nil
                       ((first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or first-name common-lisp:null) :accessor
                         struct-shape-sso-user-profile-details-first-name
                         :shape "FirstName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or last-name common-lisp:null) :accessor
                         struct-shape-sso-user-profile-details-last-name :shape
                         "LastName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type
                         (common-lisp:or user-profile-name common-lisp:null)
                         :accessor
                         struct-shape-sso-user-profile-details-username :shape
                         "UserProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sso-user-profile-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sso-user-profile-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sso-user-profile-details 'make-sso-user-profile-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sso-user-profile-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sso-user-profile-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "firstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "lastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sso-user-profile-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-data-source-run-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-data-source-run-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source-identifier :initarg
                         :data-source-identifier :initform
                         (common-lisp:error
                          ":datasourceidentifier is required")
                         :type (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-start-data-source-run-input-data-source-identifier
                         :shape "DataSourceId" :location "uri" :location-name
                         "dataSourceIdentifier")
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-start-data-source-run-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-data-source-run-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-data-source-run-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-data-source-run-input
                    'make-start-data-source-run-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-run-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-run-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-run-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-data-source-run-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-start-data-source-run-output-created-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source-configuration-snapshot :initarg
                         :data-source-configuration-snapshot :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-data-source-run-output-data-source-configuration-snapshot
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source-id :initarg :data-source-id :initform
                         (common-lisp:error ":datasourceid is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-start-data-source-run-output-data-source-id
                         :shape "DataSourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-start-data-source-run-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-error-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-data-source-run-output-error-message
                         :shape "DataSourceErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or data-source-run-id common-lisp:null)
                         :accessor struct-shape-start-data-source-run-output-id
                         :shape "DataSourceRunId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-start-data-source-run-output-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (run-statistics-for-assets :initarg
                         :run-statistics-for-assets :initform common-lisp:nil
                         :type
                         (common-lisp:or run-statistics-for-assets
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-data-source-run-output-run-statistics-for-assets
                         :shape "RunStatisticsForAssets" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (started-at :initarg :started-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-start-data-source-run-output-started-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or data-source-run-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-data-source-run-output-status
                         :shape "DataSourceRunStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stopped-at :initarg :stopped-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-start-data-source-run-output-stopped-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or data-source-run-type common-lisp:null)
                         :accessor
                         struct-shape-start-data-source-run-output-type :shape
                         "DataSourceRunType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-start-data-source-run-output-updated-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-data-source-run-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-data-source-run-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-data-source-run-output
                    'make-start-data-source-run-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-run-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-run-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-configuration-snapshot))
      (common-lisp:list
       (common-lisp:cons "dataSourceConfigurationSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-id))
      (common-lisp:list
       (common-lisp:cons "dataSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-statistics-for-assets))
      (common-lisp:list
       (common-lisp:cons "runStatisticsForAssets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-at))
      (common-lisp:list
       (common-lisp:cons "stoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-source-run-output))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subscribed-asset common-lisp:nil
                       ((asset-id :initarg :asset-id :initform
                         (common-lisp:error ":assetid is required") :type
                         (common-lisp:or asset-id common-lisp:null) :accessor
                         struct-shape-subscribed-asset-asset-id :shape
                         "AssetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-revision :initarg :asset-revision :initform
                         (common-lisp:error ":assetrevision is required") :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-subscribed-asset-asset-revision :shape
                         "Revision" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failure-cause :initarg :failure-cause :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-cause common-lisp:null)
                         :accessor struct-shape-subscribed-asset-failure-cause
                         :shape "FailureCause" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-timestamp :initarg :failure-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-subscribed-asset-failure-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (granted-timestamp :initarg :granted-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-subscribed-asset-granted-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-grant-status
                                         common-lisp:null)
                         :accessor struct-shape-subscribed-asset-status :shape
                         "SubscriptionGrantStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-name :initarg :target-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-subscribed-asset-target-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscribed-asset
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscribed-asset
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscribed-asset 'make-subscribed-asset))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscribed-asset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscribed-asset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-revision))
      (common-lisp:list
       (common-lisp:cons "assetRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-cause))
      (common-lisp:list
       (common-lisp:cons "failureCause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-timestamp))
      (common-lisp:list
       (common-lisp:cons "failureTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granted-timestamp))
      (common-lisp:list
       (common-lisp:cons "grantedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-name))
      (common-lisp:list
       (common-lisp:cons "targetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscribed-asset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subscribed-asset-listing common-lisp:nil
                       ((entity-id :initarg :entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-id common-lisp:null) :accessor
                         struct-shape-subscribed-asset-listing-entity-id :shape
                         "AssetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-revision :initarg :entity-revision :initform
                         common-lisp:nil :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-subscribed-asset-listing-entity-revision
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-type :initarg :entity-type :initform
                         common-lisp:nil :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         struct-shape-subscribed-asset-listing-entity-type
                         :shape "TypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forms :initarg :forms :initform common-lisp:nil :type
                         (common-lisp:or forms common-lisp:null) :accessor
                         struct-shape-subscribed-asset-listing-forms :shape
                         "Forms" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or detailed-glossary-terms
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscribed-asset-listing-glossary-terms
                         :shape "DetailedGlossaryTerms" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscribed-asset-listing
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscribed-asset-listing
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscribed-asset-listing 'make-subscribed-asset-listing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-asset-listing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-asset-listing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-revision))
      (common-lisp:list
       (common-lisp:cons "entityRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "entityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forms))
      (common-lisp:list
       (common-lisp:cons "forms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-asset-listing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscribed-assets ()
   '(trivial-types:proper-list subscribed-asset))
 (common-lisp:defun make-subscribed-assets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-asset))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass subscribed-listing common-lisp:nil
                       ((description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-subscribed-listing-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or listing-id common-lisp:null) :accessor
                         struct-shape-subscribed-listing-id :shape "ListingId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (item :initarg :item :initform
                         (common-lisp:error ":item is required") :type
                         (common-lisp:or subscribed-listing-item
                                         common-lisp:null)
                         :accessor struct-shape-subscribed-listing-item :shape
                         "SubscribedListingItem" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or listing-name common-lisp:null)
                         :accessor struct-shape-subscribed-listing-name :shape
                         "ListingName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owner-project-id :initarg :owner-project-id :initform
                         (common-lisp:error ":ownerprojectid is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-subscribed-listing-owner-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-project-name :initarg :owner-project-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-subscribed-listing-owner-project-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision :initarg :revision :initform common-lisp:nil
                         :type (common-lisp:or revision common-lisp:null)
                         :accessor struct-shape-subscribed-listing-revision
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscribed-listing
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscribed-listing
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscribed-listing 'make-subscribed-listing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscribed-listing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscribed-listing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-project-id))
      (common-lisp:list
       (common-lisp:cons "ownerProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-project-name))
      (common-lisp:list
       (common-lisp:cons "ownerProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscribed-listing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subscribed-listing-input common-lisp:nil
                       ((identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or listing-id common-lisp:null) :accessor
                         struct-shape-subscribed-listing-input-identifier
                         :shape "ListingId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscribed-listing-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscribed-listing-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscribed-listing-input 'make-subscribed-listing-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-listing-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-listing-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-listing-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscribed-listing-inputs ()
   '(trivial-types:proper-list subscribed-listing-input))
 (common-lisp:defun make-subscribed-listing-inputs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subscribed-listing-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass subscribed-listing-item common-lisp:nil
                       ((asset-listing :initarg :asset-listing :initform
                         common-lisp:nil :type
                         (common-lisp:or subscribed-asset-listing
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscribed-listing-item-asset-listing
                         :shape "SubscribedAssetListing" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscribed-listing-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscribed-listing-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscribed-listing-item 'make-subscribed-listing-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-listing-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-listing-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-listing))
      (common-lisp:list
       (common-lisp:cons "assetListing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-listing-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subscribed-principal common-lisp:nil
                       ((project :initarg :project :initform common-lisp:nil
                         :type
                         (common-lisp:or subscribed-project common-lisp:null)
                         :accessor struct-shape-subscribed-principal-project
                         :shape "SubscribedProject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscribed-principal
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscribed-principal
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscribed-principal 'make-subscribed-principal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscribed-principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscribed-principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscribed-principal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subscribed-principal-input common-lisp:nil
                       ((project :initarg :project :initform common-lisp:nil
                         :type
                         (common-lisp:or subscribed-project-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscribed-principal-input-project :shape
                         "SubscribedProjectInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscribed-principal-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscribed-principal-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscribed-principal-input
                    'make-subscribed-principal-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-principal-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-principal-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-principal-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscribed-principal-inputs ()
   '(trivial-types:proper-list subscribed-principal-input))
 (common-lisp:defun make-subscribed-principal-inputs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subscribed-principal-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass subscribed-project common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-subscribed-project-id :shape "ProjectId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor struct-shape-subscribed-project-name :shape
                         "ProjectName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscribed-project
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscribed-project
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscribed-project 'make-subscribed-project))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscribed-project))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscribed-project))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscribed-project))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subscribed-project-input common-lisp:nil
                       ((identifier :initarg :identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-subscribed-project-input-identifier
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscribed-project-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscribed-project-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscribed-project-input 'make-subscribed-project-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-project-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-project-input))
   common-lisp:nil))
(common-lisp:deftype subscription-grant-id () 'common-lisp:string)
(common-lisp:deftype subscription-grant-overall-status () 'common-lisp:string)
(common-lisp:deftype subscription-grant-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subscription-grant-summary common-lisp:nil
                       ((assets :initarg :assets :initform common-lisp:nil
                         :type
                         (common-lisp:or subscribed-assets common-lisp:null)
                         :accessor
                         struct-shape-subscription-grant-summary-assets :shape
                         "SubscribedAssets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-subscription-grant-summary-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-subscription-grant-summary-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-subscription-grant-summary-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (granted-entity :initarg :granted-entity :initform
                         (common-lisp:error ":grantedentity is required") :type
                         (common-lisp:or granted-entity common-lisp:null)
                         :accessor
                         struct-shape-subscription-grant-summary-granted-entity
                         :shape "GrantedEntity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-grant-id
                                         common-lisp:null)
                         :accessor struct-shape-subscription-grant-summary-id
                         :shape "SubscriptionGrantId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-grant-overall-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscription-grant-summary-status :shape
                         "SubscriptionGrantOverallStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscription-id :initarg :subscription-id :initform
                         common-lisp:nil :type
                         (common-lisp:or subscription-id common-lisp:null)
                         :accessor
                         struct-shape-subscription-grant-summary-subscription-id
                         :shape "SubscriptionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-target-id :initarg
                         :subscription-target-id :initform
                         (common-lisp:error
                          ":subscriptiontargetid is required")
                         :type
                         (common-lisp:or subscription-target-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscription-grant-summary-subscription-target-id
                         :shape "SubscriptionTargetId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-subscription-grant-summary-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-subscription-grant-summary-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscription-grant-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscription-grant-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscription-grant-summary
                    'make-subscription-grant-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscription-grant-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscription-grant-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granted-entity))
      (common-lisp:list
       (common-lisp:cons "grantedEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscription-grant-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscription-grants ()
   '(trivial-types:proper-list subscription-grant-summary))
 (common-lisp:defun make-subscription-grants
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subscription-grant-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subscription-id () 'common-lisp:string)
(common-lisp:deftype subscription-request-id () 'common-lisp:string)
(common-lisp:deftype subscription-request-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subscription-request-summary common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-subscription-request-summary-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-subscription-request-summary-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (decision-comment :initarg :decision-comment :initform
                         common-lisp:nil :type
                         (common-lisp:or decision-comment common-lisp:null)
                         :accessor
                         struct-shape-subscription-request-summary-decision-comment
                         :shape "DecisionComment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-subscription-request-summary-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-request-id
                                         common-lisp:null)
                         :accessor struct-shape-subscription-request-summary-id
                         :shape "SubscriptionRequestId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (request-reason :initarg :request-reason :initform
                         (common-lisp:error ":requestreason is required") :type
                         (common-lisp:or request-reason common-lisp:null)
                         :accessor
                         struct-shape-subscription-request-summary-request-reason
                         :shape "RequestReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reviewer-id :initarg :reviewer-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-subscription-request-summary-reviewer-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-request-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscription-request-summary-status
                         :shape "SubscriptionRequestStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscribed-listings :initarg :subscribed-listings
                         :initform
                         (common-lisp:error ":subscribedlistings is required")
                         :type
                         (common-lisp:or
                          subscription-request-summary-subscribed-listings-list
                          common-lisp:null)
                         :accessor
                         struct-shape-subscription-request-summary-subscribed-listings
                         :shape
                         "SubscriptionRequestSummarySubscribedListingsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subscribed-principals :initarg :subscribed-principals
                         :initform
                         (common-lisp:error
                          ":subscribedprincipals is required")
                         :type
                         (common-lisp:or
                          subscription-request-summary-subscribed-principals-list
                          common-lisp:null)
                         :accessor
                         struct-shape-subscription-request-summary-subscribed-principals
                         :shape
                         "SubscriptionRequestSummarySubscribedPrincipalsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-subscription-request-summary-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-subscription-request-summary-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscription-request-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscription-request-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscription-request-summary
                    'make-subscription-request-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscription-request-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscription-request-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-comment))
      (common-lisp:list
       (common-lisp:cons "decisionComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-reason))
      (common-lisp:list
       (common-lisp:cons "requestReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewer-id))
      (common-lisp:list
       (common-lisp:cons "reviewerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listings))
      (common-lisp:list
       (common-lisp:cons "subscribedListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principals))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscription-request-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscription-request-summary-subscribed-listings-list ()
   '(trivial-types:proper-list subscribed-listing))
 (common-lisp:defun make-subscription-request-summary-subscribed-listings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-listing))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subscription-request-summary-subscribed-principals-list
                      ()
   '(trivial-types:proper-list subscribed-principal))
 (common-lisp:defun make-subscription-request-summary-subscribed-principals-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subscription-requests ()
   '(trivial-types:proper-list subscription-request-summary))
 (common-lisp:defun make-subscription-requests
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subscription-request-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subscription-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subscription-summary common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-subscription-summary-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-subscription-summary-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-subscription-summary-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-id common-lisp:null)
                         :accessor struct-shape-subscription-summary-id :shape
                         "SubscriptionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retain-permissions :initarg :retain-permissions
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-subscription-summary-retain-permissions
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-status common-lisp:null)
                         :accessor struct-shape-subscription-summary-status
                         :shape "SubscriptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscribed-listing :initarg :subscribed-listing
                         :initform
                         (common-lisp:error ":subscribedlisting is required")
                         :type
                         (common-lisp:or subscribed-listing common-lisp:null)
                         :accessor
                         struct-shape-subscription-summary-subscribed-listing
                         :shape "SubscribedListing" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscribed-principal :initarg :subscribed-principal
                         :initform
                         (common-lisp:error ":subscribedprincipal is required")
                         :type
                         (common-lisp:or subscribed-principal common-lisp:null)
                         :accessor
                         struct-shape-subscription-summary-subscribed-principal
                         :shape "SubscribedPrincipal" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-request-id :initarg
                         :subscription-request-id :initform common-lisp:nil
                         :type
                         (common-lisp:or subscription-request-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscription-summary-subscription-request-id
                         :shape "SubscriptionRequestId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-subscription-summary-updated-at :shape
                         "UpdatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-subscription-summary-updated-by :shape
                         "UpdatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscription-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscription-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscription-summary 'make-subscription-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscription-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscription-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-permissions))
      (common-lisp:list
       (common-lisp:cons "retainPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listing))
      (common-lisp:list
       (common-lisp:cons "subscribedListing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principal))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-request-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscription-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subscription-target-form common-lisp:nil
                       ((content :initarg :content :initform
                         (common-lisp:error ":content is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-subscription-target-form-content :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (form-name :initarg :form-name :initform
                         (common-lisp:error ":formname is required") :type
                         (common-lisp:or form-name common-lisp:null) :accessor
                         struct-shape-subscription-target-form-form-name :shape
                         "FormName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscription-target-form
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscription-target-form
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscription-target-form 'make-subscription-target-form))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscription-target-form))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscription-target-form))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-name))
      (common-lisp:list
       (common-lisp:cons "formName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscription-target-form))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscription-target-forms ()
   '(trivial-types:proper-list subscription-target-form))
 (common-lisp:defun make-subscription-target-forms
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subscription-target-form))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subscription-target-id () 'common-lisp:string)
(common-lisp:deftype subscription-target-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subscription-target-summary common-lisp:nil
                       ((applicable-asset-types :initarg
                         :applicable-asset-types :initform
                         (common-lisp:error
                          ":applicableassettypes is required")
                         :type
                         (common-lisp:or applicable-asset-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscription-target-summary-applicable-asset-types
                         :shape "ApplicableAssetTypes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authorized-principals :initarg :authorized-principals
                         :initform
                         (common-lisp:error
                          ":authorizedprincipals is required")
                         :type
                         (common-lisp:or authorized-principal-identifiers
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscription-target-summary-authorized-principals
                         :shape "AuthorizedPrincipalIdentifiers" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-subscription-target-summary-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-subscription-target-summary-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-subscription-target-summary-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-subscription-target-summary-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-target-id
                                         common-lisp:null)
                         :accessor struct-shape-subscription-target-summary-id
                         :shape "SubscriptionTargetId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (manage-access-role :initarg :manage-access-role
                         :initform
                         (common-lisp:error ":manageaccessrole is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-subscription-target-summary-manage-access-role
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or subscription-target-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscription-target-summary-name :shape
                         "SubscriptionTargetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-subscription-target-summary-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-subscription-target-summary-provider
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-target-config :initarg
                         :subscription-target-config :initform
                         (common-lisp:error
                          ":subscriptiontargetconfig is required")
                         :type
                         (common-lisp:or subscription-target-forms
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscription-target-summary-subscription-target-config
                         :shape "SubscriptionTargetForms" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-subscription-target-summary-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-subscription-target-summary-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-subscription-target-summary-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscription-target-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscription-target-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscription-target-summary
                    'make-subscription-target-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscription-target-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscription-target-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applicable-asset-types))
      (common-lisp:list
       (common-lisp:cons "applicableAssetTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-principals))
      (common-lisp:list
       (common-lisp:cons "authorizedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manage-access-role))
      (common-lisp:list
       (common-lisp:cons "manageAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-config))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscription-target-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscription-targets ()
   '(trivial-types:proper-list subscription-target-summary))
 (common-lisp:defun make-subscription-targets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subscription-target-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subscriptions ()
   '(trivial-types:proper-list subscription-summary))
 (common-lisp:defun make-subscriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscription-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "String" :location "uri" :location-name "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype task-id () 'common-lisp:string)
(common-lisp:deftype task-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass term-relations common-lisp:nil
                       ((classifies :initarg :classifies :initform
                         common-lisp:nil :type
                         (common-lisp:or term-relations-classifies-list
                                         common-lisp:null)
                         :accessor struct-shape-term-relations-classifies
                         :shape "TermRelationsClassifiesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-a :initarg :is-a :initform common-lisp:nil :type
                         (common-lisp:or term-relations-is-alist
                                         common-lisp:null)
                         :accessor struct-shape-term-relations-is-a :shape
                         "TermRelationsIsAList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-term-relations
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'term-relations
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'term-relations 'make-term-relations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input term-relations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input term-relations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classifies))
      (common-lisp:list
       (common-lisp:cons "classifies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-a))
      (common-lisp:list
       (common-lisp:cons "isA"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input term-relations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype term-relations-classifies-list ()
   '(trivial-types:proper-list glossary-term-id))
 (common-lisp:defun make-term-relations-classifies-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list glossary-term-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype term-relations-is-alist ()
   '(trivial-types:proper-list glossary-term-id))
 (common-lisp:defun make-term-relations-is-alist
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list glossary-term-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (datazone-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype timezone () 'common-lisp:string)
(common-lisp:deftype title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass topic common-lisp:nil
                       ((resource :initarg :resource :initform
                         (common-lisp:error ":resource is required") :type
                         (common-lisp:or notification-resource
                                         common-lisp:null)
                         :accessor struct-shape-topic-resource :shape
                         "NotificationResource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform
                         (common-lisp:error ":role is required") :type
                         (common-lisp:or notification-role common-lisp:null)
                         :accessor struct-shape-topic-role :shape
                         "NotificationRole" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subject :initarg :subject :initform
                         (common-lisp:error ":subject is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-topic-subject :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-topic
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'topic
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'topic 'make-topic))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic))
   common-lisp:nil))
(common-lisp:deftype type-name () 'common-lisp:string)
(common-lisp:deftype types-search-scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (datazone-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-source-input common-lisp:nil
                       ((asset-forms-input :initarg :asset-forms-input
                         :initform common-lisp:nil :type
                         (common-lisp:or form-input-list common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-input-asset-forms-input
                         :shape "FormInputList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-configuration-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-input-configuration
                         :shape "DataSourceConfigurationInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-input-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (enable-setting :initarg :enable-setting :initform
                         common-lisp:nil :type
                         (common-lisp:or enable-setting common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-input-enable-setting
                         :shape "EnableSetting" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-input-identifier
                         :shape "DataSourceId" :location "uri" :location-name
                         "identifier")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-data-source-input-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (publish-on-import :initarg :publish-on-import
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-data-source-input-publish-on-import
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommendation :initarg :recommendation :initform
                         common-lisp:nil :type
                         (common-lisp:or recommendation-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-input-recommendation
                         :shape "RecommendationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type
                         (common-lisp:or schedule-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-input-schedule :shape
                         "ScheduleConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-data-source-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-source-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-data-source-input 'make-update-data-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-forms-input))
      (common-lisp:list
       (common-lisp:cons "assetFormsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-setting))
      (common-lisp:list
       (common-lisp:cons "enableSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-on-import))
      (common-lisp:list
       (common-lisp:cons "publishOnImport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-source-output common-lisp:nil
                       ((asset-forms-output :initarg :asset-forms-output
                         :initform common-lisp:nil :type
                         (common-lisp:or form-output-list common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-output-asset-forms-output
                         :shape "FormOutputList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-configuration-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-output-configuration
                         :shape "DataSourceConfigurationOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-update-data-source-output-created-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-data-source-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-setting :initarg :enable-setting :initform
                         common-lisp:nil :type
                         (common-lisp:or enable-setting common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-output-enable-setting
                         :shape "EnableSetting" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-output-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-error-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-output-error-message
                         :shape "DataSourceErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or data-source-id common-lisp:null)
                         :accessor struct-shape-update-data-source-output-id
                         :shape "DataSourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-run-at :initarg :last-run-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-update-data-source-output-last-run-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-run-error-message :initarg
                         :last-run-error-message :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-error-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-output-last-run-error-message
                         :shape "DataSourceErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-run-status :initarg :last-run-status :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-run-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-output-last-run-status
                         :shape "DataSourceRunStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-data-source-output-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-update-data-source-output-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publish-on-import :initarg :publish-on-import
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-data-source-output-publish-on-import
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommendation :initarg :recommendation :initform
                         common-lisp:nil :type
                         (common-lisp:or recommendation-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-output-recommendation
                         :shape "RecommendationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type
                         (common-lisp:or schedule-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-output-schedule :shape
                         "ScheduleConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-status common-lisp:null)
                         :accessor
                         struct-shape-update-data-source-output-status :shape
                         "DataSourceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor struct-shape-update-data-source-output-type
                         :shape "DataSourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-update-data-source-output-updated-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-data-source-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-source-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-data-source-output
                    'make-update-data-source-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-forms-output))
      (common-lisp:list
       (common-lisp:cons "assetFormsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-setting))
      (common-lisp:list
       (common-lisp:cons "enableSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-at))
      (common-lisp:list
       (common-lisp:cons "lastRunAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-error-message))
      (common-lisp:list
       (common-lisp:cons "lastRunErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-status))
      (common-lisp:list
       (common-lisp:cons "lastRunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-on-import))
      (common-lisp:list
       (common-lisp:cons "publishOnImport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-domain-input-client-token :shape
                         "String" :location "querystring" :location-name
                         "clientToken")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-domain-input-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-execution-role :initarg :domain-execution-role
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-update-domain-input-domain-execution-role
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-domain-input-identifier :shape
                         "DomainId" :location "uri" :location-name
                         "identifier")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-domain-input-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (single-sign-on :initarg :single-sign-on :initform
                         common-lisp:nil :type
                         (common-lisp:or single-sign-on common-lisp:null)
                         :accessor
                         struct-shape-update-domain-input-single-sign-on :shape
                         "SingleSignOn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-domain-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-domain-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-domain-input 'make-update-domain-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-domain-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-domain-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-execution-role))
      (common-lisp:list
       (common-lisp:cons "domainExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'single-sign-on))
      (common-lisp:list
       (common-lisp:cons "singleSignOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-domain-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-output common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-domain-output-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-execution-role :initarg :domain-execution-role
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-update-domain-output-domain-execution-role
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-domain-output-id :shape "DomainId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-update-domain-output-last-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-domain-output-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (single-sign-on :initarg :single-sign-on :initform
                         common-lisp:nil :type
                         (common-lisp:or single-sign-on common-lisp:null)
                         :accessor
                         struct-shape-update-domain-output-single-sign-on
                         :shape "SingleSignOn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-domain-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-domain-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-domain-output 'make-update-domain-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-domain-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-domain-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-execution-role))
      (common-lisp:list
       (common-lisp:cons "domainExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'single-sign-on))
      (common-lisp:list
       (common-lisp:cons "singleSignOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-domain-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-input common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-environment-input-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-glossary-terms
                         :shape "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-identifier
                         :shape "EnvironmentId" :location "uri" :location-name
                         "identifier")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-environment-input-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-environment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-input 'make-update-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-output common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-update-environment-output-aws-account-id
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-account-region :initarg :aws-account-region
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-update-environment-output-aws-account-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-output-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-environment-output-created-by
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-properties :initarg :deployment-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or deployment-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-output-deployment-properties
                         :shape "DeploymentProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-environment-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-environment-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-actions :initarg :environment-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or environment-action-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-output-environment-actions
                         :shape "EnvironmentActionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (environment-blueprint-id :initarg
                         :environment-blueprint-id :initform common-lisp:nil
                         :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-output-environment-blueprint-id
                         :shape "EnvironmentBlueprintId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (environment-profile-id :initarg
                         :environment-profile-id :initform
                         (common-lisp:error
                          ":environmentprofileid is required")
                         :type
                         (common-lisp:or environment-profile-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-output-environment-profile-id
                         :shape "EnvironmentProfileId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor
                         struct-shape-update-environment-output-glossary-terms
                         :shape "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor struct-shape-update-environment-output-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment :initarg :last-deployment :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment common-lisp:null) :accessor
                         struct-shape-update-environment-output-last-deployment
                         :shape "Deployment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor struct-shape-update-environment-output-name
                         :shape "EnvironmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-update-environment-output-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-environment-output-provider :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provisioned-resources :initarg :provisioned-resources
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-list common-lisp:null)
                         :accessor
                         struct-shape-update-environment-output-provisioned-resources
                         :shape "ResourceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioning-properties :initarg
                         :provisioning-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or provisioning-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-output-provisioning-properties
                         :shape "ProvisioningProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or environment-status common-lisp:null)
                         :accessor
                         struct-shape-update-environment-output-status :shape
                         "EnvironmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-output-updated-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-parameters :initarg :user-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-parameter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-output-user-parameters
                         :shape "CustomParameterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-environment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-output
                    'make-update-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-properties))
      (common-lisp:list
       (common-lisp:cons "deploymentProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-actions))
      (common-lisp:list
       (common-lisp:cons "environmentActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-profile-id))
      (common-lisp:list
       (common-lisp:cons "environmentProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-deployment))
      (common-lisp:list
       (common-lisp:cons "lastDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-resources))
      (common-lisp:list
       (common-lisp:cons "provisionedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-properties))
      (common-lisp:list
       (common-lisp:cons "provisioningProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-profile-input common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-update-environment-profile-input-aws-account-id
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-account-region :initarg :aws-account-region
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-update-environment-profile-input-aws-account-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-environment-profile-input-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-update-environment-profile-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or environment-profile-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-profile-input-identifier
                         :shape "EnvironmentProfileId" :location "uri"
                         :location-name "identifier")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or environment-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-profile-input-name
                         :shape "EnvironmentProfileName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-parameters :initarg :user-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-parameters-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-profile-input-user-parameters
                         :shape "EnvironmentParametersList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-profile-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-environment-profile-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-profile-input
                    'make-update-environment-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-profile-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-profile-output common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-update-environment-profile-output-aws-account-id
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-account-region :initarg :aws-account-region
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-update-environment-profile-output-aws-account-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-profile-output-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-environment-profile-output-created-by
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-environment-profile-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-environment-profile-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-blueprint-id :initarg
                         :environment-blueprint-id :initform
                         (common-lisp:error
                          ":environmentblueprintid is required")
                         :type
                         (common-lisp:or environment-blueprint-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-profile-output-environment-blueprint-id
                         :shape "EnvironmentBlueprintId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or environment-profile-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-profile-output-id
                         :shape "EnvironmentProfileId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-profile-output-name
                         :shape "EnvironmentProfileName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-update-environment-profile-output-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-profile-output-updated-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-parameters :initarg :user-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-parameter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-profile-output-user-parameters
                         :shape "CustomParameterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-profile-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-environment-profile-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-profile-output
                    'make-update-environment-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-region))
      (common-lisp:list
       (common-lisp:cons "awsAccountRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "environmentBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-parameters))
      (common-lisp:list
       (common-lisp:cons "userParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-glossary-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-input-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-description common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-input-description :shape
                         "GlossaryDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or glossary-id common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-input-identifier :shape
                         "GlossaryId" :location "uri" :location-name
                         "identifier")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or glossary-name common-lisp:null)
                         :accessor struct-shape-update-glossary-input-name
                         :shape "GlossaryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or glossary-status common-lisp:null)
                         :accessor struct-shape-update-glossary-input-status
                         :shape "GlossaryStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-glossary-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-glossary-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-glossary-input 'make-update-glossary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-glossary-output common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-description common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-output-description :shape
                         "GlossaryDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-glossary-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or glossary-id common-lisp:null)
                         :accessor struct-shape-update-glossary-output-id
                         :shape "GlossaryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or glossary-name common-lisp:null)
                         :accessor struct-shape-update-glossary-output-name
                         :shape "GlossaryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owning-project-id :initarg :owning-project-id
                         :initform
                         (common-lisp:error ":owningprojectid is required")
                         :type (common-lisp:or project-id common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-output-owning-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or glossary-status common-lisp:null)
                         :accessor struct-shape-update-glossary-output-status
                         :shape "GlossaryStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-glossary-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-glossary-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-glossary-output 'make-update-glossary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owning-project-id))
      (common-lisp:list
       (common-lisp:cons "owningProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-glossary-term-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-term-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (glossary-identifier :initarg :glossary-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or glossary-term-id common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-term-input-glossary-identifier
                         :shape "GlossaryTermId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or glossary-term-id common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-term-input-identifier
                         :shape "GlossaryTermId" :location "uri" :location-name
                         "identifier")
                        (long-description :initarg :long-description :initform
                         common-lisp:nil :type
                         (common-lisp:or long-description common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-term-input-long-description
                         :shape "LongDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or glossary-term-name common-lisp:null)
                         :accessor struct-shape-update-glossary-term-input-name
                         :shape "GlossaryTermName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (short-description :initarg :short-description
                         :initform common-lisp:nil :type
                         (common-lisp:or short-description common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-term-input-short-description
                         :shape "ShortDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or glossary-term-status common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-term-input-status :shape
                         "GlossaryTermStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (term-relations :initarg :term-relations :initform
                         common-lisp:nil :type
                         (common-lisp:or term-relations common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-term-input-term-relations
                         :shape "TermRelations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-glossary-term-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-glossary-term-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-glossary-term-input
                    'make-update-glossary-term-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-term-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-term-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-identifier))
      (common-lisp:list
       (common-lisp:cons "glossaryIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "longDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "shortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-relations))
      (common-lisp:list
       (common-lisp:cons "termRelations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-term-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-glossary-term-output common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-glossary-term-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glossary-id :initarg :glossary-id :initform
                         (common-lisp:error ":glossaryid is required") :type
                         (common-lisp:or glossary-id common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-term-output-glossary-id
                         :shape "GlossaryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or glossary-term-id common-lisp:null)
                         :accessor struct-shape-update-glossary-term-output-id
                         :shape "GlossaryTermId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-description :initarg :long-description :initform
                         common-lisp:nil :type
                         (common-lisp:or long-description common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-term-output-long-description
                         :shape "LongDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or glossary-term-name common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-term-output-name :shape
                         "GlossaryTermName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (short-description :initarg :short-description
                         :initform common-lisp:nil :type
                         (common-lisp:or short-description common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-term-output-short-description
                         :shape "ShortDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or glossary-term-status common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-term-output-status :shape
                         "GlossaryTermStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (term-relations :initarg :term-relations :initform
                         common-lisp:nil :type
                         (common-lisp:or term-relations common-lisp:null)
                         :accessor
                         struct-shape-update-glossary-term-output-term-relations
                         :shape "TermRelations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-glossary-term-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-glossary-term-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-glossary-term-output
                    'make-update-glossary-term-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-term-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-term-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-id))
      (common-lisp:list
       (common-lisp:cons "glossaryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "longDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "shortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-relations))
      (common-lisp:list
       (common-lisp:cons "termRelations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-glossary-term-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-group-profile-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-update-group-profile-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (group-identifier :initarg :group-identifier :initform
                         (common-lisp:error ":groupidentifier is required")
                         :type
                         (common-lisp:or group-identifier common-lisp:null)
                         :accessor
                         struct-shape-update-group-profile-input-group-identifier
                         :shape "GroupIdentifier" :location "uri"
                         :location-name "groupIdentifier")
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or group-profile-status common-lisp:null)
                         :accessor
                         struct-shape-update-group-profile-input-status :shape
                         "GroupProfileStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-group-profile-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-group-profile-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-group-profile-input
                    'make-update-group-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-group-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-group-profile-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-group-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-group-profile-output common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-group-profile-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or group-profile-name common-lisp:null)
                         :accessor
                         struct-shape-update-group-profile-output-group-name
                         :shape "GroupProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or group-profile-id common-lisp:null)
                         :accessor struct-shape-update-group-profile-output-id
                         :shape "GroupProfileId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or group-profile-status common-lisp:null)
                         :accessor
                         struct-shape-update-group-profile-output-status :shape
                         "GroupProfileStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-group-profile-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-group-profile-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-group-profile-output
                    'make-update-group-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-group-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-group-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-group-profile-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-project-input common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-project-input-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-update-project-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor
                         struct-shape-update-project-input-glossary-terms
                         :shape "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-update-project-input-identifier :shape
                         "ProjectId" :location "uri" :location-name
                         "identifier")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor struct-shape-update-project-input-name
                         :shape "ProjectName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-project-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-project-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-project-input 'make-update-project-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-project-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-project-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-project-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-project-output-created-at :shape
                         "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-update-project-output-created-by :shape
                         "CreatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-project-output-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-project-output-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-update-project-output-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glossary-terms :initarg :glossary-terms :initform
                         common-lisp:nil :type
                         (common-lisp:or glossary-terms common-lisp:null)
                         :accessor
                         struct-shape-update-project-output-glossary-terms
                         :shape "GlossaryTerms" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-update-project-output-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-project-output-last-updated-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor struct-shape-update-project-output-name
                         :shape "ProjectName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-status :initarg :project-status :initform
                         common-lisp:nil :type
                         (common-lisp:or project-status common-lisp:null)
                         :accessor
                         struct-shape-update-project-output-project-status
                         :shape "ProjectStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-project-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-project-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-project-output 'make-update-project-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glossary-terms))
      (common-lisp:list
       (common-lisp:cons "glossaryTerms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-status))
      (common-lisp:list
       (common-lisp:cons "projectStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-subscription-grant-status-input common-lisp:nil
                       ((asset-identifier :initarg :asset-identifier :initform
                         (common-lisp:error ":assetidentifier is required")
                         :type (common-lisp:or asset-id common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-grant-status-input-asset-identifier
                         :shape "AssetId" :location "uri" :location-name
                         "assetIdentifier")
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-grant-status-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (failure-cause :initarg :failure-cause :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-cause common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-grant-status-input-failure-cause
                         :shape "FailureCause" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or subscription-grant-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-grant-status-input-identifier
                         :shape "SubscriptionGrantId" :location "uri"
                         :location-name "identifier")
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-grant-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-grant-status-input-status
                         :shape "SubscriptionGrantStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-name :initarg :target-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-subscription-grant-status-input-target-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-subscription-grant-status-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-subscription-grant-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-subscription-grant-status-input
                    'make-update-subscription-grant-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-grant-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-grant-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-cause))
      (common-lisp:list
       (common-lisp:cons "failureCause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-name))
      (common-lisp:list
       (common-lisp:cons "targetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-grant-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-subscription-grant-status-output common-lisp:nil
                       ((assets :initarg :assets :initform common-lisp:nil
                         :type
                         (common-lisp:or subscribed-assets common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-grant-status-output-assets
                         :shape "SubscribedAssets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-update-subscription-grant-status-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-update-subscription-grant-status-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-subscription-grant-status-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (granted-entity :initarg :granted-entity :initform
                         (common-lisp:error ":grantedentity is required") :type
                         (common-lisp:or granted-entity common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-grant-status-output-granted-entity
                         :shape "GrantedEntity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-grant-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-grant-status-output-id
                         :shape "SubscriptionGrantId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-grant-overall-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-grant-status-output-status
                         :shape "SubscriptionGrantOverallStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscription-id :initarg :subscription-id :initform
                         common-lisp:nil :type
                         (common-lisp:or subscription-id common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-grant-status-output-subscription-id
                         :shape "SubscriptionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-target-id :initarg
                         :subscription-target-id :initform
                         (common-lisp:error
                          ":subscriptiontargetid is required")
                         :type
                         (common-lisp:or subscription-target-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-grant-status-output-subscription-target-id
                         :shape "SubscriptionTargetId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-update-subscription-grant-status-output-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-update-subscription-grant-status-output-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-subscription-grant-status-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-subscription-grant-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-subscription-grant-status-output
                    'make-update-subscription-grant-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-grant-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-grant-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granted-entity))
      (common-lisp:list
       (common-lisp:cons "grantedEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-grant-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-subscription-request-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-request-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or subscription-request-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-request-input-identifier
                         :shape "SubscriptionRequestId" :location "uri"
                         :location-name "identifier")
                        (request-reason :initarg :request-reason :initform
                         (common-lisp:error ":requestreason is required") :type
                         (common-lisp:or request-reason common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-request-input-request-reason
                         :shape "RequestReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-subscription-request-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-subscription-request-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-subscription-request-input
                    'make-update-subscription-request-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-request-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-request-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-reason))
      (common-lisp:list
       (common-lisp:cons "requestReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-request-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-subscription-request-output common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-update-subscription-request-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-update-subscription-request-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (decision-comment :initarg :decision-comment :initform
                         common-lisp:nil :type
                         (common-lisp:or decision-comment common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-request-output-decision-comment
                         :shape "DecisionComment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-subscription-request-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-request-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-request-output-id
                         :shape "SubscriptionRequestId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (request-reason :initarg :request-reason :initform
                         (common-lisp:error ":requestreason is required") :type
                         (common-lisp:or request-reason common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-request-output-request-reason
                         :shape "RequestReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reviewer-id :initarg :reviewer-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-subscription-request-output-reviewer-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or subscription-request-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-request-output-status
                         :shape "SubscriptionRequestStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscribed-listings :initarg :subscribed-listings
                         :initform
                         (common-lisp:error ":subscribedlistings is required")
                         :type
                         (common-lisp:or
                          update-subscription-request-output-subscribed-listings-list
                          common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-request-output-subscribed-listings
                         :shape
                         "UpdateSubscriptionRequestOutputSubscribedListingsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subscribed-principals :initarg :subscribed-principals
                         :initform
                         (common-lisp:error
                          ":subscribedprincipals is required")
                         :type
                         (common-lisp:or
                          update-subscription-request-output-subscribed-principals-list
                          common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-request-output-subscribed-principals
                         :shape
                         "UpdateSubscriptionRequestOutputSubscribedPrincipalsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-update-subscription-request-output-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-update-subscription-request-output-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-subscription-request-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-subscription-request-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-subscription-request-output
                    'make-update-subscription-request-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-request-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-request-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision-comment))
      (common-lisp:list
       (common-lisp:cons "decisionComment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-reason))
      (common-lisp:list
       (common-lisp:cons "requestReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewer-id))
      (common-lisp:list
       (common-lisp:cons "reviewerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-listings))
      (common-lisp:list
       (common-lisp:cons "subscribedListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-principals))
      (common-lisp:list
       (common-lisp:cons "subscribedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-request-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-subscription-request-output-subscribed-listings-list
                      ()
   '(trivial-types:proper-list subscribed-listing))
 (common-lisp:defun make-update-subscription-request-output-subscribed-listings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-listing))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype update-subscription-request-output-subscribed-principals-list
                      ()
   '(trivial-types:proper-list subscribed-principal))
 (common-lisp:defun make-update-subscription-request-output-subscribed-principals-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-subscription-target-input common-lisp:nil
                       ((applicable-asset-types :initarg
                         :applicable-asset-types :initform common-lisp:nil
                         :type
                         (common-lisp:or applicable-asset-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-target-input-applicable-asset-types
                         :shape "ApplicableAssetTypes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authorized-principals :initarg :authorized-principals
                         :initform common-lisp:nil :type
                         (common-lisp:or authorized-principal-identifiers
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-target-input-authorized-principals
                         :shape "AuthorizedPrincipalIdentifiers" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-target-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (environment-identifier :initarg
                         :environment-identifier :initform
                         (common-lisp:error
                          ":environmentidentifier is required")
                         :type (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-target-input-environment-identifier
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentIdentifier")
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or subscription-target-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-target-input-identifier
                         :shape "SubscriptionTargetId" :location "uri"
                         :location-name "identifier")
                        (manage-access-role :initarg :manage-access-role
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-subscription-target-input-manage-access-role
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or subscription-target-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-target-input-name
                         :shape "SubscriptionTargetName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (provider :initarg :provider :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-target-input-provider
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-target-config :initarg
                         :subscription-target-config :initform common-lisp:nil
                         :type
                         (common-lisp:or subscription-target-forms
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-target-input-subscription-target-config
                         :shape "SubscriptionTargetForms" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-subscription-target-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-subscription-target-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-subscription-target-input
                    'make-update-subscription-target-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-target-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applicable-asset-types))
      (common-lisp:list
       (common-lisp:cons "applicableAssetTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-principals))
      (common-lisp:list
       (common-lisp:cons "authorizedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manage-access-role))
      (common-lisp:list
       (common-lisp:cons "manageAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-config))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-target-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-subscription-target-output common-lisp:nil
                       ((applicable-asset-types :initarg
                         :applicable-asset-types :initform
                         (common-lisp:error
                          ":applicableassettypes is required")
                         :type
                         (common-lisp:or applicable-asset-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-target-output-applicable-asset-types
                         :shape "ApplicableAssetTypes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authorized-principals :initarg :authorized-principals
                         :initform
                         (common-lisp:error
                          ":authorizedprincipals is required")
                         :type
                         (common-lisp:or authorized-principal-identifiers
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-target-output-authorized-principals
                         :shape "AuthorizedPrincipalIdentifiers" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-update-subscription-target-output-created-at
                         :shape "CreatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         struct-shape-update-subscription-target-output-created-by
                         :shape "CreatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domainid is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-subscription-target-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-target-output-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or subscription-target-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-target-output-id
                         :shape "SubscriptionTargetId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (manage-access-role :initarg :manage-access-role
                         :initform
                         (common-lisp:error ":manageaccessrole is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-target-output-manage-access-role
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or subscription-target-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-target-output-name
                         :shape "SubscriptionTargetName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-update-subscription-target-output-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-subscription-target-output-provider
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-target-config :initarg
                         :subscription-target-config :initform
                         (common-lisp:error
                          ":subscriptiontargetconfig is required")
                         :type
                         (common-lisp:or subscription-target-forms
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscription-target-output-subscription-target-config
                         :shape "SubscriptionTargetForms" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-subscription-target-output-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-at common-lisp:null) :accessor
                         struct-shape-update-subscription-target-output-updated-at
                         :shape "UpdatedAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by :initarg :updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-by common-lisp:null) :accessor
                         struct-shape-update-subscription-target-output-updated-by
                         :shape "UpdatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-subscription-target-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-subscription-target-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-subscription-target-output
                    'make-update-subscription-target-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-target-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-target-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applicable-asset-types))
      (common-lisp:list
       (common-lisp:cons "applicableAssetTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-principals))
      (common-lisp:list
       (common-lisp:cons "authorizedPrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manage-access-role))
      (common-lisp:list
       (common-lisp:cons "manageAccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-target-config))
      (common-lisp:list
       (common-lisp:cons "subscriptionTargetConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-target-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-profile-input common-lisp:nil
                       ((domain-identifier :initarg :domain-identifier
                         :initform
                         (common-lisp:error ":domainidentifier is required")
                         :type (common-lisp:or domain-id common-lisp:null)
                         :accessor
                         struct-shape-update-user-profile-input-domain-identifier
                         :shape "DomainId" :location "uri" :location-name
                         "domainIdentifier")
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or user-profile-status common-lisp:null)
                         :accessor
                         struct-shape-update-user-profile-input-status :shape
                         "UserProfileStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or user-profile-type common-lisp:null)
                         :accessor struct-shape-update-user-profile-input-type
                         :shape "UserProfileType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-identifier :initarg :user-identifier :initform
                         (common-lisp:error ":useridentifier is required")
                         :type
                         (common-lisp:or user-identifier common-lisp:null)
                         :accessor
                         struct-shape-update-user-profile-input-user-identifier
                         :shape "UserIdentifier" :location "uri" :location-name
                         "userIdentifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-profile-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-profile-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-profile-input
                    'make-update-user-profile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-profile-output common-lisp:nil
                       ((details :initarg :details :initform common-lisp:nil
                         :type
                         (common-lisp:or user-profile-details common-lisp:null)
                         :accessor
                         struct-shape-update-user-profile-output-details :shape
                         "UserProfileDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-update-user-profile-output-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or user-profile-id common-lisp:null)
                         :accessor struct-shape-update-user-profile-output-id
                         :shape "UserProfileId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or user-profile-status common-lisp:null)
                         :accessor
                         struct-shape-update-user-profile-output-status :shape
                         "UserProfileStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or user-profile-type common-lisp:null)
                         :accessor struct-shape-update-user-profile-output-type
                         :shape "UserProfileType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-profile-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-profile-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-profile-output
                    'make-update-user-profile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-output))
   common-lisp:nil))
(common-lisp:deftype updated-at () 'common-lisp:string)
(common-lisp:deftype updated-by () 'common-lisp:string)
(common-lisp:deftype user-assignment () 'common-lisp:string)
(common-lisp:deftype user-designation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-details common-lisp:nil
                       ((user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-details-user-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user-details 'make-user-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-details))
   common-lisp:nil))
(common-lisp:deftype user-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-profile-details common-lisp:nil
                       ((iam :initarg :iam :initform common-lisp:nil :type
                         (common-lisp:or iam-user-profile-details
                                         common-lisp:null)
                         :accessor struct-shape-user-profile-details-iam :shape
                         "IamUserProfileDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sso :initarg :sso :initform common-lisp:nil :type
                         (common-lisp:or sso-user-profile-details
                                         common-lisp:null)
                         :accessor struct-shape-user-profile-details-sso :shape
                         "SsoUserProfileDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-profile-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-profile-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-profile-details 'make-user-profile-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-profile-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-profile-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam))
      (common-lisp:list
       (common-lisp:cons "iam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sso))
      (common-lisp:list
       (common-lisp:cons "sso"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-profile-details))
   common-lisp:nil))
(common-lisp:deftype user-profile-id () 'common-lisp:string)
(common-lisp:deftype user-profile-name () 'common-lisp:string)
(common-lisp:deftype user-profile-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-profile-summaries ()
   '(trivial-types:proper-list user-profile-summary))
 (common-lisp:defun make-user-profile-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-profile-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass user-profile-summary common-lisp:nil
                       ((details :initarg :details :initform common-lisp:nil
                         :type
                         (common-lisp:or user-profile-details common-lisp:null)
                         :accessor struct-shape-user-profile-summary-details
                         :shape "UserProfileDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-id :initarg :domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-user-profile-summary-domain-id :shape
                         "DomainId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or user-profile-id common-lisp:null)
                         :accessor struct-shape-user-profile-summary-id :shape
                         "UserProfileId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or user-profile-status common-lisp:null)
                         :accessor struct-shape-user-profile-summary-status
                         :shape "UserProfileStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or user-profile-type common-lisp:null)
                         :accessor struct-shape-user-profile-summary-type
                         :shape "UserProfileType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-profile-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-profile-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-profile-summary 'make-user-profile-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-profile-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-profile-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "domainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-profile-summary))
   common-lisp:nil))
(common-lisp:deftype user-profile-type () 'common-lisp:string)
(common-lisp:deftype user-search-text () 'common-lisp:string)
(common-lisp:deftype user-search-type () 'common-lisp:string)
(common-lisp:deftype user-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (datazone-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun accept-predictions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-choices accept-rule client-token
                     domain-identifier identifier revision)
   (common-lisp:declare
    (common-lisp:ignorable accept-choices accept-rule client-token
     domain-identifier identifier revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-predictions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/assets/~A/accept-predictions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "AcceptPredictions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'accept-predictions))
(common-lisp:progn
 (common-lisp:defun accept-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key decision-comment domain-identifier
                     identifier)
   (common-lisp:declare
    (common-lisp:ignorable decision-comment domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-subscription-request-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-requests/~A/accept"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "AcceptSubscriptionRequest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'accept-subscription-request))
(common-lisp:progn
 (common-lisp:defun cancel-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-subscription-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscriptions/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "CancelSubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-subscription))
(common-lisp:progn
 (common-lisp:defun create-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     domain-identifier external-identifier forms-input
                     glossary-terms name owning-project-identifier
                     prediction-configuration type-identifier type-revision)
   (common-lisp:declare
    (common-lisp:ignorable client-token description domain-identifier
     external-identifier forms-input glossary-terms name
     owning-project-identifier prediction-configuration type-identifier
     type-revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-asset-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/assets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateAsset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-asset))
(common-lisp:progn
 (common-lisp:defun create-asset-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     domain-identifier forms-input glossary-terms identifier
                     name prediction-configuration type-revision)
   (common-lisp:declare
    (common-lisp:ignorable client-token description domain-identifier
     forms-input glossary-terms identifier name prediction-configuration
     type-revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-asset-revision-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/assets/~A/revisions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "CreateAssetRevision"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-asset-revision))
(common-lisp:progn
 (common-lisp:defun create-asset-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-identifier forms-input
                     name owning-project-identifier)
   (common-lisp:declare
    (common-lisp:ignorable description domain-identifier forms-input name
     owning-project-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-asset-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/asset-types"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateAssetType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-asset-type))
(common-lisp:progn
 (common-lisp:defun create-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-forms-input client-token
                     configuration description domain-identifier enable-setting
                     environment-identifier name project-identifier
                     publish-on-import recommendation schedule type)
   (common-lisp:declare
    (common-lisp:ignorable asset-forms-input client-token configuration
     description domain-identifier enable-setting environment-identifier name
     project-identifier publish-on-import recommendation schedule type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-sources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateDataSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-data-source))
(common-lisp:progn
 (common-lisp:defun create-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     domain-execution-role kms-key-identifier name
                     single-sign-on tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description domain-execution-role
     kms-key-identifier name single-sign-on tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v2/domains"
                                                        "CreateDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-domain))
(common-lisp:progn
 (common-lisp:defun create-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-identifier
                     environment-profile-identifier glossary-terms name
                     project-identifier user-parameters)
   (common-lisp:declare
    (common-lisp:ignorable description domain-identifier
     environment-profile-identifier glossary-terms name project-identifier
     user-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-environment))
(common-lisp:progn
 (common-lisp:defun create-environment-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id aws-account-region
                     description domain-identifier
                     environment-blueprint-identifier name project-identifier
                     user-parameters)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id aws-account-region description
     domain-identifier environment-blueprint-identifier name project-identifier
     user-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-environment-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateEnvironmentProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-environment-profile))
(common-lisp:progn
 (common-lisp:defun create-form-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-identifier model name
                     owning-project-identifier status)
   (common-lisp:declare
    (common-lisp:ignorable description domain-identifier model name
     owning-project-identifier status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-form-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/form-types"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateFormType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-form-type))
(common-lisp:progn
 (common-lisp:defun create-glossary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     domain-identifier name owning-project-identifier status)
   (common-lisp:declare
    (common-lisp:ignorable client-token description domain-identifier name
     owning-project-identifier status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-glossary-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/glossaries"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateGlossary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-glossary))
(common-lisp:progn
 (common-lisp:defun create-glossary-term
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token domain-identifier
                     glossary-identifier long-description name
                     short-description status term-relations)
   (common-lisp:declare
    (common-lisp:ignorable client-token domain-identifier glossary-identifier
     long-description name short-description status term-relations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-glossary-term-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/glossary-terms"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateGlossaryTerm"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-glossary-term))
(common-lisp:progn
 (common-lisp:defun create-group-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token domain-identifier
                     group-identifier)
   (common-lisp:declare
    (common-lisp:ignorable client-token domain-identifier group-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-group-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/group-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateGroupProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-group-profile))
(common-lisp:progn
 (common-lisp:defun create-listing-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action client-token domain-identifier
                     entity-identifier entity-revision entity-type)
   (common-lisp:declare
    (common-lisp:ignorable action client-token domain-identifier
     entity-identifier entity-revision entity-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-listing-change-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/listings/change-set"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateListingChangeSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-listing-change-set))
(common-lisp:progn
 (common-lisp:defun create-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-identifier
                     glossary-terms name)
   (common-lisp:declare
    (common-lisp:ignorable description domain-identifier glossary-terms name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/projects"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-project))
(common-lisp:progn
 (common-lisp:defun create-project-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key designation domain-identifier member
                     project-identifier)
   (common-lisp:declare
    (common-lisp:ignorable designation domain-identifier member
     project-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-membership-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/projects/~A/createMembership"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-identifier))))
                                                        "CreateProjectMembership"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-project-membership))
(common-lisp:progn
 (common-lisp:defun create-subscription-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-target-names client-token
                     domain-identifier environment-identifier granted-entity
                     subscription-target-identifier)
   (common-lisp:declare
    (common-lisp:ignorable asset-target-names client-token domain-identifier
     environment-identifier granted-entity subscription-target-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-subscription-grant-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-grants"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateSubscriptionGrant"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-subscription-grant))
(common-lisp:progn
 (common-lisp:defun create-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token domain-identifier
                     request-reason subscribed-listings subscribed-principals)
   (common-lisp:declare
    (common-lisp:ignorable client-token domain-identifier request-reason
     subscribed-listings subscribed-principals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-subscription-request-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-requests"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateSubscriptionRequest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-subscription-request))
(common-lisp:progn
 (common-lisp:defun create-subscription-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key applicable-asset-types
                     authorized-principals client-token domain-identifier
                     environment-identifier manage-access-role name provider
                     subscription-target-config type)
   (common-lisp:declare
    (common-lisp:ignorable applicable-asset-types authorized-principals
     client-token domain-identifier environment-identifier manage-access-role
     name provider subscription-target-config type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-subscription-target-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments/~A/subscription-targets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-identifier))))
                                                        "CreateSubscriptionTarget"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-subscription-target))
(common-lisp:progn
 (common-lisp:defun create-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token domain-identifier
                     user-identifier user-type)
   (common-lisp:declare
    (common-lisp:ignorable client-token domain-identifier user-identifier
     user-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/user-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "CreateUserProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-user-profile))
(common-lisp:progn
 (common-lisp:defun delete-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-asset-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/assets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteAsset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-asset))
(common-lisp:progn
 (common-lisp:defun delete-asset-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-asset-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/asset-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteAssetType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-asset-type))
(common-lisp:progn
 (common-lisp:defun delete-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token domain-identifier
                     identifier)
   (common-lisp:declare
    (common-lisp:ignorable client-token domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-sources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteDataSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-data-source))
(common-lisp:progn
 (common-lisp:defun delete-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token identifier
                     skip-deletion-check)
   (common-lisp:declare
    (common-lisp:ignorable client-token identifier skip-deletion-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-domain))
(common-lisp:progn
 (common-lisp:defun delete-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-environment))
(common-lisp:progn
 (common-lisp:defun delete-environment-blueprint-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier
                     environment-blueprint-identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier environment-blueprint-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-environment-blueprint-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-blueprint-configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-blueprint-identifier))))
                                                        "DeleteEnvironmentBlueprintConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-environment-blueprint-configuration))
(common-lisp:progn
 (common-lisp:defun delete-environment-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-environment-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteEnvironmentProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-environment-profile))
(common-lisp:progn
 (common-lisp:defun delete-form-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier form-type-identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier form-type-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-form-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/form-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'form-type-identifier))))
                                                        "DeleteFormType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-form-type))
(common-lisp:progn
 (common-lisp:defun delete-glossary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-glossary-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/glossaries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteGlossary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-glossary))
(common-lisp:progn
 (common-lisp:defun delete-glossary-term
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-glossary-term-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/glossary-terms/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteGlossaryTerm"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-glossary-term))
(common-lisp:progn
 (common-lisp:defun delete-listing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-listing-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/listings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteListing"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-listing))
(common-lisp:progn
 (common-lisp:defun delete-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier
                     skip-deletion-check)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier identifier skip-deletion-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-project-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-project))
(common-lisp:progn
 (common-lisp:defun delete-project-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier member
                     project-identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier member project-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-project-membership-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/projects/~A/deleteMembership"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-identifier))))
                                                        "DeleteProjectMembership"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-project-membership))
(common-lisp:progn
 (common-lisp:defun delete-subscription-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-subscription-grant-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-grants/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteSubscriptionGrant"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-subscription-grant))
(common-lisp:progn
 (common-lisp:defun delete-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-subscription-request-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-requests/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteSubscriptionRequest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-subscription-request))
(common-lisp:progn
 (common-lisp:defun delete-subscription-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier environment-identifier
                     identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier environment-identifier
     identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-subscription-target-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments/~A/subscription-targets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeleteSubscriptionTarget"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-subscription-target))
(common-lisp:progn
 (common-lisp:defun get-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier revision)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier identifier revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-asset-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/assets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetAsset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-asset))
(common-lisp:progn
 (common-lisp:defun get-asset-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier revision)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier identifier revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-asset-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/asset-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetAssetType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-asset-type))
(common-lisp:progn
 (common-lisp:defun get-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-sources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetDataSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-data-source))
(common-lisp:progn
 (common-lisp:defun get-data-source-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-source-run-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-source-runs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetDataSourceRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-data-source-run))
(common-lisp:progn
 (common-lisp:defun get-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier)
   (common-lisp:declare (common-lisp:ignorable identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-domain-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-domain))
(common-lisp:progn
 (common-lisp:defun get-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-environment))
(common-lisp:progn
 (common-lisp:defun get-environment-blueprint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-environment-blueprint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-blueprints/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetEnvironmentBlueprint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-environment-blueprint))
(common-lisp:progn
 (common-lisp:defun get-environment-blueprint-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier
                     environment-blueprint-identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier environment-blueprint-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-environment-blueprint-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-blueprint-configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-blueprint-identifier))))
                                                        "GetEnvironmentBlueprintConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-environment-blueprint-configuration))
(common-lisp:progn
 (common-lisp:defun get-environment-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-environment-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetEnvironmentProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-environment-profile))
(common-lisp:progn
 (common-lisp:defun get-form-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier form-type-identifier
                     revision)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier form-type-identifier revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-form-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/form-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'form-type-identifier))))
                                                        "GetFormType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-form-type))
(common-lisp:progn
 (common-lisp:defun get-glossary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-glossary-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/glossaries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetGlossary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-glossary))
(common-lisp:progn
 (common-lisp:defun get-glossary-term
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-glossary-term-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/glossary-terms/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetGlossaryTerm"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-glossary-term))
(common-lisp:progn
 (common-lisp:defun get-group-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier group-identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier group-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-group-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/group-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-identifier))))
                                                        "GetGroupProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-group-profile))
(common-lisp:progn
 (common-lisp:defun get-iam-portal-login-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-iam-portal-login-url-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/get-portal-login-url"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "GetIamPortalLoginUrl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-iam-portal-login-url))
(common-lisp:progn
 (common-lisp:defun get-listing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier
                     listing-revision)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier identifier listing-revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-listing-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/listings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetListing"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-listing))
(common-lisp:progn
 (common-lisp:defun get-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-project-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-project))
(common-lisp:progn
 (common-lisp:defun get-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-subscription-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscriptions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetSubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-subscription))
(common-lisp:progn
 (common-lisp:defun get-subscription-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-subscription-grant-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-grants/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetSubscriptionGrant"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-subscription-grant))
(common-lisp:progn
 (common-lisp:defun get-subscription-request-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier)
   (common-lisp:declare (common-lisp:ignorable domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-subscription-request-details-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-requests/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetSubscriptionRequestDetails"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-subscription-request-details))
(common-lisp:progn
 (common-lisp:defun get-subscription-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier environment-identifier
                     identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier environment-identifier
     identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-subscription-target-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments/~A/subscription-targets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetSubscriptionTarget"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-subscription-target))
(common-lisp:progn
 (common-lisp:defun get-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier type user-identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier type user-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/user-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-identifier))))
                                                        "GetUserProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-user-profile))
(common-lisp:progn
 (common-lisp:defun list-asset-revisions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier identifier max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-asset-revisions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/assets/~A/revisions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "ListAssetRevisions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-asset-revisions))
(common-lisp:progn
 (common-lisp:defun list-data-source-run-activities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier max-results
                     next-token status)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier identifier max-results next-token
     status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-data-source-run-activities-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-source-runs/~A/activities"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "ListDataSourceRunActivities"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-data-source-run-activities))
(common-lisp:progn
 (common-lisp:defun list-data-source-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source-identifier domain-identifier
                     max-results next-token status)
   (common-lisp:declare
    (common-lisp:ignorable data-source-identifier domain-identifier max-results
     next-token status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-source-runs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-sources/~A/runs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-identifier))))
                                                        "ListDataSourceRuns"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-data-source-runs))
(common-lisp:progn
 (common-lisp:defun list-data-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier environment-identifier
                     max-results name next-token project-identifier status
                     type)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier environment-identifier max-results
     name next-token project-identifier status type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-sources-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-sources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListDataSources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-data-sources))
(common-lisp:progn
 (common-lisp:defun list-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token status)
   (common-lisp:declare (common-lisp:ignorable max-results next-token status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domains-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v2/domains"
                                                        "ListDomains"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-domains))
(common-lisp:progn
 (common-lisp:defun list-environment-blueprint-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-environment-blueprint-configurations-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-blueprint-configurations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListEnvironmentBlueprintConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-environment-blueprint-configurations))
(common-lisp:progn
 (common-lisp:defun list-environment-blueprints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier managed max-results
                     name next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier managed max-results name
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-environment-blueprints-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-blueprints"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListEnvironmentBlueprints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-environment-blueprints))
(common-lisp:progn
 (common-lisp:defun list-environment-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id aws-account-region
                     domain-identifier environment-blueprint-identifier
                     max-results name next-token project-identifier)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id aws-account-region domain-identifier
     environment-blueprint-identifier max-results name next-token
     project-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-environment-profiles-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListEnvironmentProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-environment-profiles))
(common-lisp:progn
 (common-lisp:defun list-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id aws-account-region
                     domain-identifier environment-blueprint-identifier
                     environment-profile-identifier max-results name next-token
                     project-identifier provider status)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id aws-account-region domain-identifier
     environment-blueprint-identifier environment-profile-identifier
     max-results name next-token project-identifier provider status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-environments-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListEnvironments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-environments))
(common-lisp:progn
 (common-lisp:defun list-notifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key after-timestamp before-timestamp
                     domain-identifier max-results next-token subjects
                     task-status type)
   (common-lisp:declare
    (common-lisp:ignorable after-timestamp before-timestamp domain-identifier
     max-results next-token subjects task-status type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-notifications-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/notifications"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListNotifications"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-notifications))
(common-lisp:progn
 (common-lisp:defun list-project-memberships
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier max-results next-token
                     project-identifier sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier max-results next-token
     project-identifier sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-project-memberships-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/projects/~A/memberships"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-identifier))))
                                                        "ListProjectMemberships"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-project-memberships))
(common-lisp:progn
 (common-lisp:defun list-projects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier group-identifier
                     max-results name next-token user-identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier group-identifier max-results name
     next-token user-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-projects-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/projects"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListProjects"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-projects))
(common-lisp:progn
 (common-lisp:defun list-subscription-grants
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier environment-id
                     max-results next-token sort-by sort-order
                     subscribed-listing-id subscription-id
                     subscription-target-id)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier environment-id max-results
     next-token sort-by sort-order subscribed-listing-id subscription-id
     subscription-target-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-subscription-grants-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-grants"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListSubscriptionGrants"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-subscription-grants))
(common-lisp:progn
 (common-lisp:defun list-subscription-requests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key approver-project-id domain-identifier
                     max-results next-token owning-project-id sort-by
                     sort-order status subscribed-listing-id)
   (common-lisp:declare
    (common-lisp:ignorable approver-project-id domain-identifier max-results
     next-token owning-project-id sort-by sort-order status
     subscribed-listing-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-subscription-requests-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-requests"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListSubscriptionRequests"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-subscription-requests))
(common-lisp:progn
 (common-lisp:defun list-subscription-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier environment-identifier
                     max-results next-token sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier environment-identifier max-results
     next-token sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-subscription-targets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments/~A/subscription-targets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-identifier))))
                                                        "ListSubscriptionTargets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-subscription-targets))
(common-lisp:progn
 (common-lisp:defun list-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key approver-project-id domain-identifier
                     max-results next-token owning-project-id sort-by
                     sort-order status subscribed-listing-id
                     subscription-request-identifier)
   (common-lisp:declare
    (common-lisp:ignorable approver-project-id domain-identifier max-results
     next-token owning-project-id sort-by sort-order status
     subscribed-listing-id subscription-request-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-subscriptions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscriptions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "ListSubscriptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-subscriptions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-environment-blueprint-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier enabled-regions
                     environment-blueprint-identifier manage-access-role-arn
                     provisioning-role-arn regional-parameters)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier enabled-regions
     environment-blueprint-identifier manage-access-role-arn
     provisioning-role-arn regional-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-environment-blueprint-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-blueprint-configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-blueprint-identifier))))
                                                        "PutEnvironmentBlueprintConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-environment-blueprint-configuration))
(common-lisp:progn
 (common-lisp:defun reject-predictions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token domain-identifier identifier
                     reject-choices reject-rule revision)
   (common-lisp:declare
    (common-lisp:ignorable client-token domain-identifier identifier
     reject-choices reject-rule revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reject-predictions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/assets/~A/reject-predictions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "RejectPredictions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reject-predictions))
(common-lisp:progn
 (common-lisp:defun reject-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key decision-comment domain-identifier
                     identifier)
   (common-lisp:declare
    (common-lisp:ignorable decision-comment domain-identifier identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-subscription-request-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-requests/~A/reject"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "RejectSubscriptionRequest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reject-subscription-request))
(common-lisp:progn
 (common-lisp:defun revoke-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier
                     retain-permissions)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier identifier retain-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-revoke-subscription-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscriptions/~A/revoke"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "RevokeSubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'revoke-subscription))
(common-lisp:progn
 (common-lisp:defun search
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-attributes domain-identifier
                     filters max-results next-token owning-project-identifier
                     search-in search-scope search-text sort)
   (common-lisp:declare
    (common-lisp:ignorable additional-attributes domain-identifier filters
     max-results next-token owning-project-identifier search-in search-scope
     search-text sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/search"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "Search"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search))
(common-lisp:progn
 (common-lisp:defun search-group-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier group-type max-results
                     next-token search-text)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier group-type max-results next-token
     search-text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-group-profiles-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/search-group-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "SearchGroupProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-group-profiles))
(common-lisp:progn
 (common-lisp:defun search-listings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-attributes domain-identifier
                     filters max-results next-token search-in search-text sort)
   (common-lisp:declare
    (common-lisp:ignorable additional-attributes domain-identifier filters
     max-results next-token search-in search-text sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-listings-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/listings/search"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "SearchListings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-listings))
(common-lisp:progn
 (common-lisp:defun search-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier filters managed
                     max-results next-token search-in search-scope search-text
                     sort)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier filters managed max-results
     next-token search-in search-scope search-text sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-types-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/types-search"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "SearchTypes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-types))
(common-lisp:progn
 (common-lisp:defun search-user-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier max-results next-token
                     search-text user-type)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier max-results next-token search-text
     user-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-user-profiles-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/search-user-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))))
                                                        "SearchUserProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-user-profiles))
(common-lisp:progn
 (common-lisp:defun start-data-source-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token data-source-identifier
                     domain-identifier)
   (common-lisp:declare
    (common-lisp:ignorable client-token data-source-identifier
     domain-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-data-source-run-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-sources/~A/runs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'data-source-identifier))))
                                                        "StartDataSourceRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-data-source-run))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-forms-input configuration
                     description domain-identifier enable-setting identifier
                     name publish-on-import recommendation schedule)
   (common-lisp:declare
    (common-lisp:ignorable asset-forms-input configuration description
     domain-identifier enable-setting identifier name publish-on-import
     recommendation schedule))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/data-sources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateDataSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-data-source))
(common-lisp:progn
 (common-lisp:defun update-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     domain-execution-role identifier name single-sign-on)
   (common-lisp:declare
    (common-lisp:ignorable client-token description domain-execution-role
     identifier name single-sign-on))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-domain-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-domain))
(common-lisp:progn
 (common-lisp:defun update-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-identifier
                     glossary-terms identifier name)
   (common-lisp:declare
    (common-lisp:ignorable description domain-identifier glossary-terms
     identifier name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-environment))
(common-lisp:progn
 (common-lisp:defun update-environment-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key aws-account-id aws-account-region
                     description domain-identifier identifier name
                     user-parameters)
   (common-lisp:declare
    (common-lisp:ignorable aws-account-id aws-account-region description
     domain-identifier identifier name user-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-environment-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environment-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateEnvironmentProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-environment-profile))
(common-lisp:progn
 (common-lisp:defun update-glossary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     domain-identifier identifier name status)
   (common-lisp:declare
    (common-lisp:ignorable client-token description domain-identifier
     identifier name status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-glossary-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/glossaries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateGlossary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-glossary))
(common-lisp:progn
 (common-lisp:defun update-glossary-term
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier glossary-identifier
                     identifier long-description name short-description status
                     term-relations)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier glossary-identifier identifier
     long-description name short-description status term-relations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-glossary-term-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/glossary-terms/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateGlossaryTerm"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-glossary-term))
(common-lisp:progn
 (common-lisp:defun update-group-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier group-identifier
                     status)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier group-identifier status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-group-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/group-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'group-identifier))))
                                                        "UpdateGroupProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-group-profile))
(common-lisp:progn
 (common-lisp:defun update-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-identifier
                     glossary-terms identifier name)
   (common-lisp:declare
    (common-lisp:ignorable description domain-identifier glossary-terms
     identifier name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-project-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-project))
(common-lisp:progn
 (common-lisp:defun update-subscription-grant-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-identifier domain-identifier
                     failure-cause identifier status target-name)
   (common-lisp:declare
    (common-lisp:ignorable asset-identifier domain-identifier failure-cause
     identifier status target-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-subscription-grant-status-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-grants/~A/status/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-identifier))))
                                                        "UpdateSubscriptionGrantStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-subscription-grant-status))
(common-lisp:progn
 (common-lisp:defun update-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier identifier
                     request-reason)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier identifier request-reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-subscription-request-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/subscription-requests/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateSubscriptionRequest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-subscription-request))
(common-lisp:progn
 (common-lisp:defun update-subscription-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key applicable-asset-types
                     authorized-principals domain-identifier
                     environment-identifier identifier manage-access-role name
                     provider subscription-target-config)
   (common-lisp:declare
    (common-lisp:ignorable applicable-asset-types authorized-principals
     domain-identifier environment-identifier identifier manage-access-role
     name provider subscription-target-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-subscription-target-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/environments/~A/subscription-targets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateSubscriptionTarget"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-subscription-target))
(common-lisp:progn
 (common-lisp:defun update-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-identifier status type
                     user-identifier)
   (common-lisp:declare
    (common-lisp:ignorable domain-identifier status type user-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-profile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'datazone-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v2/domains/~A/user-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-identifier))))
                                                        "UpdateUserProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-user-profile))
