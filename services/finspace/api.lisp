;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/finspace/api (:use)
                             (:nicknames #:aws/finspace)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/finspace/api)
(common-lisp:progn
 (common-lisp:define-condition finspace-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'finspace-error))
(common-lisp:progn
 (common-lisp:defclass finspace-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "finspace" :api-version
                        "2021-03-12" :host-prefix "finspace" :signing-name
                        "finspace" :global-host common-lisp:nil))
 (common-lisp:export 'finspace-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (finspace-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:deftype attached-cluster-list ()
   '(trivial-types:proper-list kx-cluster-name))
 (common-lisp:defun make-attached-cluster-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kx-cluster-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype attribute-map () 'common-lisp:hash-table)
 (common-lisp:defun make-attribute-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-configuration common-lisp:nil
                       ((min-node-count :initarg :min-node-count :initform
                         common-lisp:nil :type
                         (common-lisp:or node-count common-lisp:null) :accessor
                         struct-shape-auto-scaling-configuration-min-node-count
                         :shape "NodeCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-node-count :initarg :max-node-count :initform
                         common-lisp:nil :type
                         (common-lisp:or node-count common-lisp:null) :accessor
                         struct-shape-auto-scaling-configuration-max-node-count
                         :shape "NodeCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-scaling-metric :initarg :auto-scaling-metric
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-scaling-metric common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-configuration-auto-scaling-metric
                         :shape "AutoScalingMetric" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-target :initarg :metric-target :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-scaling-metric-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-configuration-metric-target
                         :shape "AutoScalingMetricTarget" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scale-in-cooldown-seconds :initarg
                         :scale-in-cooldown-seconds :initform common-lisp:nil
                         :type (common-lisp:or cooldown-time common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-configuration-scale-in-cooldown-seconds
                         :shape "CooldownTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scale-out-cooldown-seconds :initarg
                         :scale-out-cooldown-seconds :initform common-lisp:nil
                         :type (common-lisp:or cooldown-time common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-configuration-scale-out-cooldown-seconds
                         :shape "CooldownTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-scaling-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-configuration
                    'make-auto-scaling-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-node-count))
      (common-lisp:list
       (common-lisp:cons "minNodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-node-count))
      (common-lisp:list
       (common-lisp:cons "maxNodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-metric))
      (common-lisp:list
       (common-lisp:cons "autoScalingMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-target))
      (common-lisp:list
       (common-lisp:cons "metricTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scale-in-cooldown-seconds))
      (common-lisp:list
       (common-lisp:cons "scaleInCooldownSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scale-out-cooldown-seconds))
      (common-lisp:list
       (common-lisp:cons "scaleOutCooldownSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-configuration))
   common-lisp:nil))
(common-lisp:deftype auto-scaling-metric () 'common-lisp:string)
(common-lisp:deftype auto-scaling-metric-target () 'common-lisp:double-float)
(common-lisp:deftype availability-zone-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype availability-zone-ids ()
   '(trivial-types:proper-list availability-zone-id))
 (common-lisp:defun make-availability-zone-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boxed-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass capacity-configuration common-lisp:nil
                       ((node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or node-type common-lisp:null) :accessor
                         struct-shape-capacity-configuration-node-type :shape
                         "NodeType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (node-count :initarg :node-count :initform
                         common-lisp:nil :type
                         (common-lisp:or node-count common-lisp:null) :accessor
                         struct-shape-capacity-configuration-node-count :shape
                         "NodeCount" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-capacity-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'capacity-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'capacity-configuration 'make-capacity-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          capacity-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          capacity-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "nodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-count))
      (common-lisp:list
       (common-lisp:cons "nodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          capacity-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass change-request common-lisp:nil
                       ((change-type :initarg :change-type :initform
                         (common-lisp:error ":changetype is required") :type
                         (common-lisp:or change-type common-lisp:null)
                         :accessor struct-shape-change-request-change-type
                         :shape "ChangeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3path :initarg :s3path :initform common-lisp:nil
                         :type (common-lisp:or s3path common-lisp:null)
                         :accessor struct-shape-change-request-s3path :shape
                         "S3Path" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (db-path :initarg :db-path :initform
                         (common-lisp:error ":dbpath is required") :type
                         (common-lisp:or db-path common-lisp:null) :accessor
                         struct-shape-change-request-db-path :shape "DbPath"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-change-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'change-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'change-request 'make-change-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "changeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3path))
      (common-lisp:list
       (common-lisp:cons "s3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-path))
      (common-lisp:list
       (common-lisp:cons "dbPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype change-requests ()
   '(trivial-types:proper-list change-request))
 (common-lisp:defun make-change-requests
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype change-type () 'common-lisp:string)
(common-lisp:deftype changeset-id () 'common-lisp:string)
(common-lisp:deftype changeset-status () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype client-token-string () 'common-lisp:string)
(common-lisp:deftype cluster-node-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass code-configuration common-lisp:nil
                       ((s3bucket :initarg :s3bucket :initform common-lisp:nil
                         :type (common-lisp:or s3bucket common-lisp:null)
                         :accessor struct-shape-code-configuration-s3bucket
                         :shape "S3Bucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3key :initarg :s3key :initform common-lisp:nil :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-code-configuration-s3key :shape "S3Key"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3object-version :initarg :s3object-version :initform
                         common-lisp:nil :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor
                         struct-shape-code-configuration-s3object-version
                         :shape "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'code-configuration 'make-code-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "s3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-version))
      (common-lisp:list
       (common-lisp:cons "s3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (finspace-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       conflict-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-reason)))
(common-lisp:deftype cooldown-time () 'common-lisp:double-float)
(common-lisp:deftype cpu-count () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass create-environment-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor struct-shape-create-environment-request-name
                         :shape "EnvironmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-environment-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-create-environment-request-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-environment-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (federation-mode :initarg :federation-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or federation-mode common-lisp:null)
                         :accessor
                         struct-shape-create-environment-request-federation-mode
                         :shape "FederationMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (federation-parameters :initarg :federation-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or federation-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-request-federation-parameters
                         :shape "FederationParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (superuser-parameters :initarg :superuser-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or superuser-parameters common-lisp:null)
                         :accessor
                         struct-shape-create-environment-request-superuser-parameters
                         :shape "SuperuserParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-bundles :initarg :data-bundles :initform
                         common-lisp:nil :type
                         (common-lisp:or data-bundle-arns common-lisp:null)
                         :accessor
                         struct-shape-create-environment-request-data-bundles
                         :shape "DataBundleArns" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-request
                    'make-create-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federation-mode))
      (common-lisp:list
       (common-lisp:cons "federationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'federation-parameters))
      (common-lisp:list
       (common-lisp:cons "federationParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'superuser-parameters))
      (common-lisp:list
       (common-lisp:cons "superuserParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-bundles))
      (common-lisp:list
       (common-lisp:cons "dataBundles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-response common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-create-environment-response-environment-id
                         :shape "IdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-arn :initarg :environment-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor
                         struct-shape-create-environment-response-environment-arn
                         :shape "EnvironmentArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-url :initarg :environment-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |url| common-lisp:null) :accessor
                         struct-shape-create-environment-response-environment-url
                         :shape "url" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-response
                    'make-create-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-arn))
      (common-lisp:list
       (common-lisp:cons "environmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-url))
      (common-lisp:list
       (common-lisp:cons "environmentUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-kx-changeset-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-changeset-request-environment-id
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentId")
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-create-kx-changeset-request-database-name
                         :shape "DatabaseName" :location "uri" :location-name
                         "databaseName")
                        (change-requests :initarg :change-requests :initform
                         (common-lisp:error ":changerequests is required")
                         :type
                         (common-lisp:or change-requests common-lisp:null)
                         :accessor
                         struct-shape-create-kx-changeset-request-change-requests
                         :shape "ChangeRequests" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor
                         struct-shape-create-kx-changeset-request-client-token
                         :shape "ClientTokenString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-kx-changeset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-kx-changeset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-kx-changeset-request
                    'make-create-kx-changeset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-changeset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-changeset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-requests))
      (common-lisp:list
       (common-lisp:cons "changeRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-changeset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-kx-changeset-response common-lisp:nil
                       ((changeset-id :initarg :changeset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-changeset-response-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-create-kx-changeset-response-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-changeset-response-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (change-requests :initarg :change-requests :initform
                         common-lisp:nil :type
                         (common-lisp:or change-requests common-lisp:null)
                         :accessor
                         struct-shape-create-kx-changeset-response-change-requests
                         :shape "ChangeRequests" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-kx-changeset-response-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-create-kx-changeset-response-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or changeset-status common-lisp:null)
                         :accessor
                         struct-shape-create-kx-changeset-response-status
                         :shape "ChangesetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-info :initarg :error-info :initform
                         common-lisp:nil :type
                         (common-lisp:or error-info common-lisp:null) :accessor
                         struct-shape-create-kx-changeset-response-error-info
                         :shape "ErrorInfo" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-kx-changeset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-kx-changeset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-kx-changeset-response
                    'make-create-kx-changeset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-changeset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-changeset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-requests))
      (common-lisp:list
       (common-lisp:cons "changeRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-changeset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-kx-cluster-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-environment-id
                         :shape "KxEnvironmentId" :location "uri"
                         :location-name "environmentId")
                        (cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or kx-cluster-name common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-cluster-name
                         :shape "KxClusterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-type :initarg :cluster-type :initform
                         (common-lisp:error ":clustertype is required") :type
                         (common-lisp:or kx-cluster-type common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-cluster-type
                         :shape "KxClusterType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tickerplant-log-configuration :initarg
                         :tickerplant-log-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or tickerplant-log-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-tickerplant-log-configuration
                         :shape "TickerplantLogConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (databases :initarg :databases :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-database-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-databases
                         :shape "KxDatabaseConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cache-storage-configurations :initarg
                         :cache-storage-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cache-storage-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-cache-storage-configurations
                         :shape "KxCacheStorageConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auto-scaling-configuration :initarg
                         :auto-scaling-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-scaling-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-auto-scaling-configuration
                         :shape "AutoScalingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-description :initarg :cluster-description
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-cluster-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-cluster-description
                         :shape "KxClusterDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (capacity-configuration :initarg
                         :capacity-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-capacity-configuration
                         :shape "CapacityConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (release-label :initarg :release-label :initform
                         (common-lisp:error ":releaselabel is required") :type
                         (common-lisp:or release-label common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-release-label
                         :shape "ReleaseLabel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration
                         :initform
                         (common-lisp:error ":vpcconfiguration is required")
                         :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-vpc-configuration
                         :shape "VpcConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (initialization-script :initarg :initialization-script
                         :initform common-lisp:nil :type
                         (common-lisp:or initialization-script-file-path
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-initialization-script
                         :shape "InitializationScriptFilePath" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (command-line-arguments :initarg
                         :command-line-arguments :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-command-line-arguments
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-command-line-arguments
                         :shape "KxCommandLineArguments" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or code-configuration common-lisp:null)
                         :accessor struct-shape-create-kx-cluster-request-code
                         :shape "CodeConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-role :initarg :execution-role :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-execution-role
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (savedown-storage-configuration :initarg
                         :savedown-storage-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-savedown-storage-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-savedown-storage-configuration
                         :shape "KxSavedownStorageConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (az-mode :initarg :az-mode :initform
                         (common-lisp:error ":azmode is required") :type
                         (common-lisp:or kx-az-mode common-lisp:null) :accessor
                         struct-shape-create-kx-cluster-request-az-mode :shape
                         "KxAzMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-availability-zone-id
                         :shape "AvailabilityZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-kx-cluster-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scaling-group-configuration :initarg
                         :scaling-group-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-scaling-group-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-request-scaling-group-configuration
                         :shape "KxScalingGroupConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-kx-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-kx-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-kx-cluster-request
                    'make-create-kx-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "clusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tickerplant-log-configuration))
      (common-lisp:list
       (common-lisp:cons "tickerplantLogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'databases))
      (common-lisp:list
       (common-lisp:cons "databases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-storage-configurations))
      (common-lisp:list
       (common-lisp:cons "cacheStorageConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "autoScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-description))
      (common-lisp:list
       (common-lisp:cons "clusterDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-configuration))
      (common-lisp:list
       (common-lisp:cons "capacityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "releaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "vpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-script))
      (common-lisp:list
       (common-lisp:cons "initializationScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'command-line-arguments))
      (common-lisp:list
       (common-lisp:cons "commandLineArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "executionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savedown-storage-configuration))
      (common-lisp:list
       (common-lisp:cons "savedownStorageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'az-mode))
      (common-lisp:list
       (common-lisp:cons "azMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-group-configuration))
      (common-lisp:list
       (common-lisp:cons "scalingGroupConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-kx-cluster-response common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-environment-id
                         :shape "KxEnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-cluster-status common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-status :shape
                         "KxClusterStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cluster-status-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-status-reason
                         :shape "KxClusterStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cluster-name common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-cluster-name
                         :shape "KxClusterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-type :initarg :cluster-type :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cluster-type common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-cluster-type
                         :shape "KxClusterType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tickerplant-log-configuration :initarg
                         :tickerplant-log-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or tickerplant-log-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-tickerplant-log-configuration
                         :shape "TickerplantLogConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (volumes :initarg :volumes :initform common-lisp:nil
                         :type (common-lisp:or volumes common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-volumes :shape
                         "Volumes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (databases :initarg :databases :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-database-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-databases
                         :shape "KxDatabaseConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cache-storage-configurations :initarg
                         :cache-storage-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cache-storage-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-cache-storage-configurations
                         :shape "KxCacheStorageConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auto-scaling-configuration :initarg
                         :auto-scaling-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-scaling-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-auto-scaling-configuration
                         :shape "AutoScalingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-description :initarg :cluster-description
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-cluster-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-cluster-description
                         :shape "KxClusterDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (capacity-configuration :initarg
                         :capacity-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-capacity-configuration
                         :shape "CapacityConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (release-label :initarg :release-label :initform
                         common-lisp:nil :type
                         (common-lisp:or release-label common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-release-label
                         :shape "ReleaseLabel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-vpc-configuration
                         :shape "VpcConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (initialization-script :initarg :initialization-script
                         :initform common-lisp:nil :type
                         (common-lisp:or initialization-script-file-path
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-initialization-script
                         :shape "InitializationScriptFilePath" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (command-line-arguments :initarg
                         :command-line-arguments :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-command-line-arguments
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-command-line-arguments
                         :shape "KxCommandLineArguments" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or code-configuration common-lisp:null)
                         :accessor struct-shape-create-kx-cluster-response-code
                         :shape "CodeConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-role :initarg :execution-role :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-execution-role
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (savedown-storage-configuration :initarg
                         :savedown-storage-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-savedown-storage-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-savedown-storage-configuration
                         :shape "KxSavedownStorageConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (az-mode :initarg :az-mode :initform common-lisp:nil
                         :type (common-lisp:or kx-az-mode common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-az-mode :shape
                         "KxAzMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-availability-zone-id
                         :shape "AvailabilityZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-kx-cluster-response-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling-group-configuration :initarg
                         :scaling-group-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-scaling-group-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-cluster-response-scaling-group-configuration
                         :shape "KxScalingGroupConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-kx-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-kx-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-kx-cluster-response
                    'make-create-kx-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "clusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tickerplant-log-configuration))
      (common-lisp:list
       (common-lisp:cons "tickerplantLogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'databases))
      (common-lisp:list
       (common-lisp:cons "databases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-storage-configurations))
      (common-lisp:list
       (common-lisp:cons "cacheStorageConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "autoScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-description))
      (common-lisp:list
       (common-lisp:cons "clusterDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-configuration))
      (common-lisp:list
       (common-lisp:cons "capacityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "releaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "vpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-script))
      (common-lisp:list
       (common-lisp:cons "initializationScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'command-line-arguments))
      (common-lisp:list
       (common-lisp:cons "commandLineArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "executionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savedown-storage-configuration))
      (common-lisp:list
       (common-lisp:cons "savedownStorageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'az-mode))
      (common-lisp:list
       (common-lisp:cons "azMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-group-configuration))
      (common-lisp:list
       (common-lisp:cons "scalingGroupConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-kx-database-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-database-request-environment-id
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentId")
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-create-kx-database-request-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-kx-database-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-kx-database-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor
                         struct-shape-create-kx-database-request-client-token
                         :shape "ClientTokenString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-kx-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-kx-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-kx-database-request
                    'make-create-kx-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-kx-database-response common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-create-kx-database-response-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-arn :initarg :database-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or database-arn common-lisp:null)
                         :accessor
                         struct-shape-create-kx-database-response-database-arn
                         :shape "DatabaseArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-database-response-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-kx-database-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-kx-database-response-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-create-kx-database-response-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-kx-database-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-kx-database-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-kx-database-response
                    'make-create-kx-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-database-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-arn))
      (common-lisp:list
       (common-lisp:cons "databaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-database-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-kx-dataview-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-request-environment-id
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentId")
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-request-database-name
                         :shape "DatabaseName" :location "uri" :location-name
                         "databaseName")
                        (dataview-name :initarg :dataview-name :initform
                         (common-lisp:error ":dataviewname is required") :type
                         (common-lisp:or kx-dataview-name common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-request-dataview-name
                         :shape "KxDataviewName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (az-mode :initarg :az-mode :initform
                         (common-lisp:error ":azmode is required") :type
                         (common-lisp:or kx-az-mode common-lisp:null) :accessor
                         struct-shape-create-kx-dataview-request-az-mode :shape
                         "KxAzMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-request-availability-zone-id
                         :shape "AvailabilityZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (changeset-id :initarg :changeset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-request-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segment-configurations :initarg
                         :segment-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-dataview-segment-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-request-segment-configurations
                         :shape "KxDataviewSegmentConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auto-update :initarg :auto-update :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanValue| common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-request-auto-update
                         :shape "booleanValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-kx-dataview-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-request-client-token
                         :shape "ClientTokenString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-kx-dataview-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-kx-dataview-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-kx-dataview-request
                    'make-create-kx-dataview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-dataview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-dataview-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataview-name))
      (common-lisp:list
       (common-lisp:cons "dataviewName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'az-mode))
      (common-lisp:list
       (common-lisp:cons "azMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segment-configurations))
      (common-lisp:list
       (common-lisp:cons "segmentConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-update))
      (common-lisp:list
       (common-lisp:cons "autoUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-dataview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-kx-dataview-response common-lisp:nil
                       ((dataview-name :initarg :dataview-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-dataview-name common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-response-dataview-name
                         :shape "KxDataviewName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-response-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-response-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (az-mode :initarg :az-mode :initform common-lisp:nil
                         :type (common-lisp:or kx-az-mode common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-response-az-mode
                         :shape "KxAzMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-response-availability-zone-id
                         :shape "AvailabilityZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (changeset-id :initarg :changeset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-response-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segment-configurations :initarg
                         :segment-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-dataview-segment-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-response-segment-configurations
                         :shape "KxDataviewSegmentConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-update :initarg :auto-update :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanValue| common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-response-auto-update
                         :shape "booleanValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-kx-dataview-response-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-response-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-dataview-status common-lisp:null)
                         :accessor
                         struct-shape-create-kx-dataview-response-status :shape
                         "KxDataviewStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-kx-dataview-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-kx-dataview-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-kx-dataview-response
                    'make-create-kx-dataview-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-dataview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-dataview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataview-name))
      (common-lisp:list
       (common-lisp:cons "dataviewName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'az-mode))
      (common-lisp:list
       (common-lisp:cons "azMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segment-configurations))
      (common-lisp:list
       (common-lisp:cons "segmentConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-update))
      (common-lisp:list
       (common-lisp:cons "autoUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-dataview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-kx-environment-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or kx-environment-name common-lisp:null)
                         :accessor
                         struct-shape-create-kx-environment-request-name :shape
                         "KxEnvironmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-kx-environment-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         (common-lisp:error ":kmskeyid is required") :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-create-kx-environment-request-kms-key-id
                         :shape "KmsKeyARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-kx-environment-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-kx-environment-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-kx-environment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-kx-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-kx-environment-request
                    'make-create-kx-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-kx-environment-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or kx-environment-name common-lisp:null)
                         :accessor
                         struct-shape-create-kx-environment-response-name
                         :shape "KxEnvironmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or environment-status common-lisp:null)
                         :accessor
                         struct-shape-create-kx-environment-response-status
                         :shape "EnvironmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-create-kx-environment-response-environment-id
                         :shape "IdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-kx-environment-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-arn :initarg :environment-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor
                         struct-shape-create-kx-environment-response-environment-arn
                         :shape "EnvironmentArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-create-kx-environment-response-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-kx-environment-response-creation-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-kx-environment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-kx-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-kx-environment-response
                    'make-create-kx-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-arn))
      (common-lisp:list
       (common-lisp:cons "environmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "creationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-kx-scaling-group-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-kx-scaling-group-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-scaling-group-request-environment-id
                         :shape "KxEnvironmentId" :location "uri"
                         :location-name "environmentId")
                        (scaling-group-name :initarg :scaling-group-name
                         :initform
                         (common-lisp:error ":scalinggroupname is required")
                         :type
                         (common-lisp:or kx-scaling-group-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-scaling-group-request-scaling-group-name
                         :shape "KxScalingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (host-type :initarg :host-type :initform
                         (common-lisp:error ":hosttype is required") :type
                         (common-lisp:or kx-host-type common-lisp:null)
                         :accessor
                         struct-shape-create-kx-scaling-group-request-host-type
                         :shape "KxHostType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :initform
                         (common-lisp:error ":availabilityzoneid is required")
                         :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-scaling-group-request-availability-zone-id
                         :shape "AvailabilityZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-kx-scaling-group-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-kx-scaling-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-kx-scaling-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-kx-scaling-group-request
                    'make-create-kx-scaling-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-scaling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-scaling-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "scalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-type))
      (common-lisp:list
       (common-lisp:cons "hostType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-scaling-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-kx-scaling-group-response common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-scaling-group-response-environment-id
                         :shape "KxEnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling-group-name :initarg :scaling-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-scaling-group-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-scaling-group-response-scaling-group-name
                         :shape "KxScalingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (host-type :initarg :host-type :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-host-type common-lisp:null)
                         :accessor
                         struct-shape-create-kx-scaling-group-response-host-type
                         :shape "KxHostType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-scaling-group-response-availability-zone-id
                         :shape "AvailabilityZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-scaling-group-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-scaling-group-response-status
                         :shape "KxScalingGroupStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-create-kx-scaling-group-response-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-kx-scaling-group-response-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-kx-scaling-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-kx-scaling-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-kx-scaling-group-response
                    'make-create-kx-scaling-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-scaling-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-scaling-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "scalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-type))
      (common-lisp:list
       (common-lisp:cons "hostType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-scaling-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-kx-user-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-create-kx-user-request-environment-id
                         :shape "IdType" :location "uri" :location-name
                         "environmentId")
                        (user-name :initarg :user-name :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or kx-user-name-string common-lisp:null)
                         :accessor
                         struct-shape-create-kx-user-request-user-name :shape
                         "KxUserNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-role :initarg :iam-role :initform
                         (common-lisp:error ":iamrole is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-kx-user-request-iam-role :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-kx-user-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-kx-user-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-kx-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-kx-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-kx-user-request 'make-create-kx-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "userName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-kx-user-response common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-user-name-string common-lisp:null)
                         :accessor
                         struct-shape-create-kx-user-response-user-name :shape
                         "KxUserNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-arn :initarg :user-arn :initform common-lisp:nil
                         :type (common-lisp:or kx-user-arn common-lisp:null)
                         :accessor
                         struct-shape-create-kx-user-response-user-arn :shape
                         "KxUserArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-create-kx-user-response-environment-id
                         :shape "IdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-role :initarg :iam-role :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-kx-user-response-iam-role :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-kx-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-kx-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-kx-user-response 'make-create-kx-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "userName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-kx-volume-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-request-environment-id
                         :shape "KxEnvironmentId" :location "uri"
                         :location-name "environmentId")
                        (volume-type :initarg :volume-type :initform
                         (common-lisp:error ":volumetype is required") :type
                         (common-lisp:or kx-volume-type common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-request-volume-type
                         :shape "KxVolumeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-name :initarg :volume-name :initform
                         (common-lisp:error ":volumename is required") :type
                         (common-lisp:or kx-volume-name common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-request-volume-name
                         :shape "KxVolumeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nas1configuration :initarg :nas1configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-nas1configuration common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-request-nas1configuration
                         :shape "KxNAS1Configuration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (az-mode :initarg :az-mode :initform
                         (common-lisp:error ":azmode is required") :type
                         (common-lisp:or kx-az-mode common-lisp:null) :accessor
                         struct-shape-create-kx-volume-request-az-mode :shape
                         "KxAzMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone-ids :initarg :availability-zone-ids
                         :initform
                         (common-lisp:error ":availabilityzoneids is required")
                         :type
                         (common-lisp:or availability-zone-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-request-availability-zone-ids
                         :shape "AvailabilityZoneIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-kx-volume-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-kx-volume-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-kx-volume-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-kx-volume-request 'make-create-kx-volume-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-volume-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "volumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-name))
      (common-lisp:list
       (common-lisp:cons "volumeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nas1configuration))
      (common-lisp:list
       (common-lisp:cons "nas1Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'az-mode))
      (common-lisp:list
       (common-lisp:cons "azMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-ids))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-kx-volume-response common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-response-environment-id
                         :shape "KxEnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-name :initarg :volume-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-name common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-response-volume-name
                         :shape "KxVolumeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-type :initarg :volume-type :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-type common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-response-volume-type
                         :shape "KxVolumeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-arn :initarg :volume-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-arn common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-response-volume-arn
                         :shape "KxVolumeArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nas1configuration :initarg :nas1configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-nas1configuration common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-response-nas1configuration
                         :shape "KxNAS1Configuration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-volume-status common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-response-status :shape
                         "KxVolumeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-status-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-response-status-reason
                         :shape "KxVolumeStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (az-mode :initarg :az-mode :initform common-lisp:nil
                         :type (common-lisp:or kx-az-mode common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-response-az-mode :shape
                         "KxAzMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-ids :initarg :availability-zone-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-kx-volume-response-availability-zone-ids
                         :shape "AvailabilityZoneIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-kx-volume-response-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-kx-volume-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-kx-volume-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-kx-volume-response
                    'make-create-kx-volume-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-volume-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-volume-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-name))
      (common-lisp:list
       (common-lisp:cons "volumeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "volumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-arn))
      (common-lisp:list
       (common-lisp:cons "volumeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nas1configuration))
      (common-lisp:list
       (common-lisp:cons "nas1Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'az-mode))
      (common-lisp:list
       (common-lisp:cons "azMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-ids))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-kx-volume-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-dnsconfiguration ()
   '(trivial-types:proper-list custom-dnsserver))
 (common-lisp:defun make-custom-dnsconfiguration
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-dnsserver))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass custom-dnsserver common-lisp:nil
                       ((custom-dnsserver-name :initarg :custom-dnsserver-name
                         :initform
                         (common-lisp:error ":customdnsservername is required")
                         :type (common-lisp:or valid-hostname common-lisp:null)
                         :accessor
                         struct-shape-custom-dnsserver-custom-dnsserver-name
                         :shape "ValidHostname" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-dnsserver-ip :initarg :custom-dnsserver-ip
                         :initform
                         (common-lisp:error ":customdnsserverip is required")
                         :type
                         (common-lisp:or valid-ipaddress common-lisp:null)
                         :accessor
                         struct-shape-custom-dnsserver-custom-dnsserver-ip
                         :shape "ValidIPAddress" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-dnsserver
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-dnsserver
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-dnsserver 'make-custom-dnsserver))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-dnsserver))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-dnsserver))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-dnsserver-name))
      (common-lisp:list
       (common-lisp:cons "customDNSServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-dnsserver-ip))
      (common-lisp:list
       (common-lisp:cons "customDNSServerIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-dnsserver))
   common-lisp:nil))
(common-lisp:deftype data-bundle-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-bundle-arns ()
   '(trivial-types:proper-list data-bundle-arn))
 (common-lisp:defun make-data-bundle-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-bundle-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype database-arn () 'common-lisp:string)
(common-lisp:deftype database-name () 'common-lisp:string)
(common-lisp:deftype db-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype db-paths () '(trivial-types:proper-list db-path))
 (common-lisp:defun make-db-paths
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list db-path))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-environment-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-delete-environment-request-environment-id
                         :shape "IdType" :location "uri" :location-name
                         "environmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-request
                    'make-delete-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-response
                    'make-delete-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-kx-cluster-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-cluster-request-environment-id
                         :shape "KxEnvironmentId" :location "uri"
                         :location-name "environmentId")
                        (cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or kx-cluster-name common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-cluster-request-cluster-name
                         :shape "KxClusterName" :location "uri" :location-name
                         "clusterName")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-cluster-request-client-token
                         :shape "ClientTokenString" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-kx-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-kx-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-kx-cluster-request
                    'make-delete-kx-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-kx-cluster-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-kx-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-kx-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-kx-cluster-response
                    'make-delete-kx-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-kx-database-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-database-request-environment-id
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentId")
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-database-request-database-name
                         :shape "DatabaseName" :location "uri" :location-name
                         "databaseName")
                        (client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-database-request-client-token
                         :shape "ClientTokenString" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-kx-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-kx-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-kx-database-request
                    'make-delete-kx-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-kx-database-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-kx-database-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-kx-database-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-kx-database-response
                    'make-delete-kx-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-database-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-kx-dataview-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-dataview-request-environment-id
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentId")
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-dataview-request-database-name
                         :shape "DatabaseName" :location "uri" :location-name
                         "databaseName")
                        (dataview-name :initarg :dataview-name :initform
                         (common-lisp:error ":dataviewname is required") :type
                         (common-lisp:or kx-dataview-name common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-dataview-request-dataview-name
                         :shape "KxDataviewName" :location "uri" :location-name
                         "dataviewName")
                        (client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-dataview-request-client-token
                         :shape "ClientTokenString" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-kx-dataview-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-kx-dataview-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-kx-dataview-request
                    'make-delete-kx-dataview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-dataview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-dataview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-dataview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-kx-dataview-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-kx-dataview-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-kx-dataview-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-kx-dataview-response
                    'make-delete-kx-dataview-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-dataview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-dataview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-dataview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-kx-environment-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-delete-kx-environment-request-environment-id
                         :shape "IdType" :location "uri" :location-name
                         "environmentId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-environment-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-kx-environment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-kx-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-kx-environment-request
                    'make-delete-kx-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-kx-environment-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-kx-environment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-kx-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-kx-environment-response
                    'make-delete-kx-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-kx-scaling-group-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-scaling-group-request-environment-id
                         :shape "KxEnvironmentId" :location "uri"
                         :location-name "environmentId")
                        (scaling-group-name :initarg :scaling-group-name
                         :initform
                         (common-lisp:error ":scalinggroupname is required")
                         :type
                         (common-lisp:or kx-scaling-group-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-scaling-group-request-scaling-group-name
                         :shape "KxScalingGroupName" :location "uri"
                         :location-name "scalingGroupName")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-scaling-group-request-client-token
                         :shape "ClientTokenString" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-kx-scaling-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-kx-scaling-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-kx-scaling-group-request
                    'make-delete-kx-scaling-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-scaling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-scaling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-scaling-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-kx-scaling-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-kx-scaling-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-kx-scaling-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-kx-scaling-group-response
                    'make-delete-kx-scaling-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-scaling-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-scaling-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-scaling-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-kx-user-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or kx-user-name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-user-request-user-name :shape
                         "KxUserNameString" :location "uri" :location-name
                         "userName")
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-delete-kx-user-request-environment-id
                         :shape "IdType" :location "uri" :location-name
                         "environmentId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-user-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-kx-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-kx-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-kx-user-request 'make-delete-kx-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-kx-user-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-kx-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-kx-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-kx-user-response 'make-delete-kx-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-kx-volume-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-volume-request-environment-id
                         :shape "KxEnvironmentId" :location "uri"
                         :location-name "environmentId")
                        (volume-name :initarg :volume-name :initform
                         (common-lisp:error ":volumename is required") :type
                         (common-lisp:or kx-volume-name common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-volume-request-volume-name
                         :shape "KxVolumeName" :location "uri" :location-name
                         "volumeName")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor
                         struct-shape-delete-kx-volume-request-client-token
                         :shape "ClientTokenString" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-kx-volume-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-kx-volume-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-kx-volume-request 'make-delete-kx-volume-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-kx-volume-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-kx-volume-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-kx-volume-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-kx-volume-response
                    'make-delete-kx-volume-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-volume-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-volume-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-kx-volume-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype email-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass environment common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor struct-shape-environment-name :shape
                         "EnvironmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-environment-environment-id :shape
                         "IdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-environment-aws-account-id :shape
                         "IdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or environment-status common-lisp:null)
                         :accessor struct-shape-environment-status :shape
                         "EnvironmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-url :initarg :environment-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |url| common-lisp:null) :accessor
                         struct-shape-environment-environment-url :shape "url"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-environment-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (environment-arn :initarg :environment-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor struct-shape-environment-environment-arn
                         :shape "EnvironmentArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sage-maker-studio-domain-url :initarg
                         :sage-maker-studio-domain-url :initform
                         common-lisp:nil :type
                         (common-lisp:or sms-domain-url common-lisp:null)
                         :accessor
                         struct-shape-environment-sage-maker-studio-domain-url
                         :shape "SmsDomainUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-environment-kms-key-id :shape "KmsKeyId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dedicated-service-account-id :initarg
                         :dedicated-service-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-environment-dedicated-service-account-id
                         :shape "IdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (federation-mode :initarg :federation-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or federation-mode common-lisp:null)
                         :accessor struct-shape-environment-federation-mode
                         :shape "FederationMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (federation-parameters :initarg :federation-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or federation-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-federation-parameters :shape
                         "FederationParameters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'environment 'make-environment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-url))
      (common-lisp:list
       (common-lisp:cons "environmentUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-arn))
      (common-lisp:list
       (common-lisp:cons "environmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sage-maker-studio-domain-url))
      (common-lisp:list
       (common-lisp:cons "sageMakerStudioDomainUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-service-account-id))
      (common-lisp:list
       (common-lisp:cons "dedicatedServiceAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federation-mode))
      (common-lisp:list
       (common-lisp:cons "federationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'federation-parameters))
      (common-lisp:list
       (common-lisp:cons "federationParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment))
   common-lisp:nil))
(common-lisp:deftype environment-arn () 'common-lisp:string)
(common-lisp:deftype environment-error-message () 'common-lisp:string)
(common-lisp:deftype environment-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-list ()
   '(trivial-types:proper-list environment))
 (common-lisp:defun make-environment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-name () 'common-lisp:string)
(common-lisp:deftype environment-status () 'common-lisp:string)
(common-lisp:deftype error-details () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-info common-lisp:nil
                       ((error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor struct-shape-error-info-error-message :shape
                         "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-type :initarg :error-type :initform
                         common-lisp:nil :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor struct-shape-error-info-error-type :shape
                         "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-info 'make-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "errorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-info))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype execution-role-arn () 'common-lisp:string)
(common-lisp:deftype federation-attribute-key () 'common-lisp:string)
(common-lisp:deftype federation-attribute-value () 'common-lisp:string)
(common-lisp:deftype federation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass federation-parameters common-lisp:nil
                       ((saml-metadata-document :initarg
                         :saml-metadata-document :initform common-lisp:nil
                         :type
                         (common-lisp:or saml-metadata-document
                                         common-lisp:null)
                         :accessor
                         struct-shape-federation-parameters-saml-metadata-document
                         :shape "SamlMetadataDocument" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (saml-metadata-url :initarg :saml-metadata-url
                         :initform common-lisp:nil :type
                         (common-lisp:or |url| common-lisp:null) :accessor
                         struct-shape-federation-parameters-saml-metadata-url
                         :shape "url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (application-call-back-url :initarg
                         :application-call-back-url :initform common-lisp:nil
                         :type (common-lisp:or |url| common-lisp:null)
                         :accessor
                         struct-shape-federation-parameters-application-call-back-url
                         :shape "url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (federation-urn :initarg :federation-urn :initform
                         common-lisp:nil :type
                         (common-lisp:or |urn| common-lisp:null) :accessor
                         struct-shape-federation-parameters-federation-urn
                         :shape "urn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (federation-provider-name :initarg
                         :federation-provider-name :initform common-lisp:nil
                         :type
                         (common-lisp:or federation-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-federation-parameters-federation-provider-name
                         :shape "FederationProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attribute-map :initarg :attribute-map :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-map common-lisp:null)
                         :accessor
                         struct-shape-federation-parameters-attribute-map
                         :shape "AttributeMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-federation-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'federation-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'federation-parameters 'make-federation-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          federation-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          federation-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'saml-metadata-document))
      (common-lisp:list
       (common-lisp:cons "samlMetadataDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'saml-metadata-url))
      (common-lisp:list
       (common-lisp:cons "samlMetadataURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-call-back-url))
      (common-lisp:list
       (common-lisp:cons "applicationCallBackURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federation-urn))
      (common-lisp:list
       (common-lisp:cons "federationURN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'federation-provider-name))
      (common-lisp:list
       (common-lisp:cons "federationProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-map))
      (common-lisp:list
       (common-lisp:cons "attributeMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          federation-parameters))
   common-lisp:nil))
(common-lisp:deftype federation-provider-name () 'common-lisp:string)
(common-lisp:deftype fin-space-taggable-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-environment-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-get-environment-request-environment-id
                         :shape "IdType" :location "uri" :location-name
                         "environmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-request 'make-get-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-response common-lisp:nil
                       ((environment :initarg :environment :initform
                         common-lisp:nil :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         struct-shape-get-environment-response-environment
                         :shape "Environment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-response 'make-get-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-changeset-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-changeset-request-environment-id
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentId")
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-get-kx-changeset-request-database-name
                         :shape "DatabaseName" :location "uri" :location-name
                         "databaseName")
                        (changeset-id :initarg :changeset-id :initform
                         (common-lisp:error ":changesetid is required") :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-changeset-request-changeset-id
                         :shape "ChangesetId" :location "uri" :location-name
                         "changesetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-changeset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-kx-changeset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-changeset-request 'make-get-kx-changeset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-changeset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-changeset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-changeset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-changeset-response common-lisp:nil
                       ((changeset-id :initarg :changeset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-changeset-response-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-get-kx-changeset-response-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-changeset-response-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (change-requests :initarg :change-requests :initform
                         common-lisp:nil :type
                         (common-lisp:or change-requests common-lisp:null)
                         :accessor
                         struct-shape-get-kx-changeset-response-change-requests
                         :shape "ChangeRequests" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-kx-changeset-response-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (active-from-timestamp :initarg :active-from-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-kx-changeset-response-active-from-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-kx-changeset-response-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or changeset-status common-lisp:null)
                         :accessor
                         struct-shape-get-kx-changeset-response-status :shape
                         "ChangesetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-info :initarg :error-info :initform
                         common-lisp:nil :type
                         (common-lisp:or error-info common-lisp:null) :accessor
                         struct-shape-get-kx-changeset-response-error-info
                         :shape "ErrorInfo" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-changeset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-kx-changeset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-changeset-response
                    'make-get-kx-changeset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-changeset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-changeset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-requests))
      (common-lisp:list
       (common-lisp:cons "changeRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-from-timestamp))
      (common-lisp:list
       (common-lisp:cons "activeFromTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-changeset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-cluster-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-request-environment-id
                         :shape "KxEnvironmentId" :location "uri"
                         :location-name "environmentId")
                        (cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or kx-cluster-name common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-request-cluster-name
                         :shape "KxClusterName" :location "uri" :location-name
                         "clusterName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-kx-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-cluster-request 'make-get-kx-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-cluster-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-cluster-status common-lisp:null)
                         :accessor struct-shape-get-kx-cluster-response-status
                         :shape "KxClusterStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cluster-status-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-status-reason
                         :shape "KxClusterStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cluster-name common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-cluster-name
                         :shape "KxClusterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-type :initarg :cluster-type :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cluster-type common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-cluster-type
                         :shape "KxClusterType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tickerplant-log-configuration :initarg
                         :tickerplant-log-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or tickerplant-log-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-tickerplant-log-configuration
                         :shape "TickerplantLogConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (volumes :initarg :volumes :initform common-lisp:nil
                         :type (common-lisp:or volumes common-lisp:null)
                         :accessor struct-shape-get-kx-cluster-response-volumes
                         :shape "Volumes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (databases :initarg :databases :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-database-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-databases :shape
                         "KxDatabaseConfigurations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-storage-configurations :initarg
                         :cache-storage-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cache-storage-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-cache-storage-configurations
                         :shape "KxCacheStorageConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auto-scaling-configuration :initarg
                         :auto-scaling-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-scaling-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-auto-scaling-configuration
                         :shape "AutoScalingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-description :initarg :cluster-description
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-cluster-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-cluster-description
                         :shape "KxClusterDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (capacity-configuration :initarg
                         :capacity-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-capacity-configuration
                         :shape "CapacityConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (release-label :initarg :release-label :initform
                         common-lisp:nil :type
                         (common-lisp:or release-label common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-release-label
                         :shape "ReleaseLabel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-vpc-configuration
                         :shape "VpcConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (initialization-script :initarg :initialization-script
                         :initform common-lisp:nil :type
                         (common-lisp:or initialization-script-file-path
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-initialization-script
                         :shape "InitializationScriptFilePath" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (command-line-arguments :initarg
                         :command-line-arguments :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-command-line-arguments
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-command-line-arguments
                         :shape "KxCommandLineArguments" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or code-configuration common-lisp:null)
                         :accessor struct-shape-get-kx-cluster-response-code
                         :shape "CodeConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-role :initarg :execution-role :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-execution-role
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (savedown-storage-configuration :initarg
                         :savedown-storage-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-savedown-storage-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-savedown-storage-configuration
                         :shape "KxSavedownStorageConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (az-mode :initarg :az-mode :initform common-lisp:nil
                         :type (common-lisp:or kx-az-mode common-lisp:null)
                         :accessor struct-shape-get-kx-cluster-response-az-mode
                         :shape "KxAzMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-availability-zone-id
                         :shape "AvailabilityZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-kx-cluster-response-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling-group-configuration :initarg
                         :scaling-group-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-scaling-group-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-cluster-response-scaling-group-configuration
                         :shape "KxScalingGroupConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-kx-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-cluster-response 'make-get-kx-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "clusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tickerplant-log-configuration))
      (common-lisp:list
       (common-lisp:cons "tickerplantLogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'databases))
      (common-lisp:list
       (common-lisp:cons "databases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-storage-configurations))
      (common-lisp:list
       (common-lisp:cons "cacheStorageConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "autoScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-description))
      (common-lisp:list
       (common-lisp:cons "clusterDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-configuration))
      (common-lisp:list
       (common-lisp:cons "capacityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "releaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "vpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-script))
      (common-lisp:list
       (common-lisp:cons "initializationScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'command-line-arguments))
      (common-lisp:list
       (common-lisp:cons "commandLineArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "executionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savedown-storage-configuration))
      (common-lisp:list
       (common-lisp:cons "savedownStorageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'az-mode))
      (common-lisp:list
       (common-lisp:cons "azMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-group-configuration))
      (common-lisp:list
       (common-lisp:cons "scalingGroupConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-connection-string-request common-lisp:nil
                       ((user-arn :initarg :user-arn :initform
                         (common-lisp:error ":userarn is required") :type
                         (common-lisp:or kx-user-arn common-lisp:null)
                         :accessor
                         struct-shape-get-kx-connection-string-request-user-arn
                         :shape "KxUserArn" :location "querystring"
                         :location-name "userArn")
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-get-kx-connection-string-request-environment-id
                         :shape "IdType" :location "uri" :location-name
                         "environmentId")
                        (cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or kx-cluster-name common-lisp:null)
                         :accessor
                         struct-shape-get-kx-connection-string-request-cluster-name
                         :shape "KxClusterName" :location "querystring"
                         :location-name "clusterName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-connection-string-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-kx-connection-string-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-connection-string-request
                    'make-get-kx-connection-string-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-connection-string-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-connection-string-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-connection-string-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-connection-string-response common-lisp:nil
                       ((signed-connection-string :initarg
                         :signed-connection-string :initform common-lisp:nil
                         :type
                         (common-lisp:or signed-kx-connection-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-connection-string-response-signed-connection-string
                         :shape "SignedKxConnectionString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-connection-string-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-kx-connection-string-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-connection-string-response
                    'make-get-kx-connection-string-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-connection-string-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-connection-string-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signed-connection-string))
      (common-lisp:list
       (common-lisp:cons "signedConnectionString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-connection-string-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-database-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-database-request-environment-id
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentId")
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-get-kx-database-request-database-name
                         :shape "DatabaseName" :location "uri" :location-name
                         "databaseName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-kx-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-database-request 'make-get-kx-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-database-response common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-get-kx-database-response-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-arn :initarg :database-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or database-arn common-lisp:null)
                         :accessor
                         struct-shape-get-kx-database-response-database-arn
                         :shape "DatabaseArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-database-response-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-get-kx-database-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-kx-database-response-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-kx-database-response-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-completed-changeset-id :initarg
                         :last-completed-changeset-id :initform common-lisp:nil
                         :type (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-database-response-last-completed-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-bytes :initarg :num-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or |numBytes| common-lisp:null) :accessor
                         struct-shape-get-kx-database-response-num-bytes :shape
                         "numBytes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (num-changesets :initarg :num-changesets :initform
                         common-lisp:nil :type
                         (common-lisp:or |numChangesets| common-lisp:null)
                         :accessor
                         struct-shape-get-kx-database-response-num-changesets
                         :shape "numChangesets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-files :initarg :num-files :initform
                         common-lisp:nil :type
                         (common-lisp:or |numFiles| common-lisp:null) :accessor
                         struct-shape-get-kx-database-response-num-files :shape
                         "numFiles" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-database-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-kx-database-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-database-response 'make-get-kx-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-database-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-arn))
      (common-lisp:list
       (common-lisp:cons "databaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-completed-changeset-id))
      (common-lisp:list
       (common-lisp:cons "lastCompletedChangesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-bytes))
      (common-lisp:list
       (common-lisp:cons "numBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-changesets))
      (common-lisp:list
       (common-lisp:cons "numChangesets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-files))
      (common-lisp:list
       (common-lisp:cons "numFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-database-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-dataview-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-dataview-request-environment-id
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentId")
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-get-kx-dataview-request-database-name
                         :shape "DatabaseName" :location "uri" :location-name
                         "databaseName")
                        (dataview-name :initarg :dataview-name :initform
                         (common-lisp:error ":dataviewname is required") :type
                         (common-lisp:or kx-dataview-name common-lisp:null)
                         :accessor
                         struct-shape-get-kx-dataview-request-dataview-name
                         :shape "KxDataviewName" :location "uri" :location-name
                         "dataviewName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-dataview-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-kx-dataview-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-dataview-request 'make-get-kx-dataview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-dataview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-dataview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-dataview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-dataview-response common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-get-kx-dataview-response-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataview-name :initarg :dataview-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-dataview-name common-lisp:null)
                         :accessor
                         struct-shape-get-kx-dataview-response-dataview-name
                         :shape "KxDataviewName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (az-mode :initarg :az-mode :initform common-lisp:nil
                         :type (common-lisp:or kx-az-mode common-lisp:null)
                         :accessor
                         struct-shape-get-kx-dataview-response-az-mode :shape
                         "KxAzMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-dataview-response-availability-zone-id
                         :shape "AvailabilityZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (changeset-id :initarg :changeset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-dataview-response-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segment-configurations :initarg
                         :segment-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-dataview-segment-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-dataview-response-segment-configurations
                         :shape "KxDataviewSegmentConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (active-versions :initarg :active-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-dataview-active-version-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-dataview-response-active-versions
                         :shape "KxDataviewActiveVersionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-get-kx-dataview-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-update :initarg :auto-update :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanValue| common-lisp:null)
                         :accessor
                         struct-shape-get-kx-dataview-response-auto-update
                         :shape "booleanValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-dataview-response-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-kx-dataview-response-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-kx-dataview-response-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-dataview-status common-lisp:null)
                         :accessor struct-shape-get-kx-dataview-response-status
                         :shape "KxDataviewStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-dataview-status-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-dataview-response-status-reason
                         :shape "KxDataviewStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-dataview-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-kx-dataview-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-dataview-response 'make-get-kx-dataview-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-dataview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-dataview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataview-name))
      (common-lisp:list
       (common-lisp:cons "dataviewName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'az-mode))
      (common-lisp:list
       (common-lisp:cons "azMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segment-configurations))
      (common-lisp:list
       (common-lisp:cons "segmentConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-versions))
      (common-lisp:list
       (common-lisp:cons "activeVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-update))
      (common-lisp:list
       (common-lisp:cons "autoUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-dataview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-environment-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-get-kx-environment-request-environment-id
                         :shape "IdType" :location "uri" :location-name
                         "environmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-environment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-kx-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-environment-request
                    'make-get-kx-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-environment-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or kx-environment-name common-lisp:null)
                         :accessor
                         struct-shape-get-kx-environment-response-name :shape
                         "KxEnvironmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-get-kx-environment-response-environment-id
                         :shape "IdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-get-kx-environment-response-aws-account-id
                         :shape "IdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or environment-status common-lisp:null)
                         :accessor
                         struct-shape-get-kx-environment-response-status :shape
                         "EnvironmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tgw-status :initarg :tgw-status :initform
                         common-lisp:nil :type
                         (common-lisp:or |tgwStatus| common-lisp:null)
                         :accessor
                         struct-shape-get-kx-environment-response-tgw-status
                         :shape "tgwStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dns-status :initarg :dns-status :initform
                         common-lisp:nil :type
                         (common-lisp:or |dnsStatus| common-lisp:null)
                         :accessor
                         struct-shape-get-kx-environment-response-dns-status
                         :shape "dnsStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-error-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-environment-response-error-message
                         :shape "EnvironmentErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-get-kx-environment-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-arn :initarg :environment-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor
                         struct-shape-get-kx-environment-response-environment-arn
                         :shape "EnvironmentArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-get-kx-environment-response-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dedicated-service-account-id :initarg
                         :dedicated-service-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-get-kx-environment-response-dedicated-service-account-id
                         :shape "IdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-gateway-configuration :initarg
                         :transit-gateway-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-environment-response-transit-gateway-configuration
                         :shape "TransitGatewayConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-dnsconfiguration :initarg
                         :custom-dnsconfiguration :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-dnsconfiguration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-environment-response-custom-dnsconfiguration
                         :shape "CustomDNSConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-kx-environment-response-creation-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-timestamp :initarg :update-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-kx-environment-response-update-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-ids :initarg :availability-zone-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-environment-response-availability-zone-ids
                         :shape "AvailabilityZoneIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-authority-arn :initarg
                         :certificate-authority-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or |stringValueLength1to255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-environment-response-certificate-authority-arn
                         :shape "stringValueLength1to255" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-environment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-kx-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-environment-response
                    'make-get-kx-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tgw-status))
      (common-lisp:list
       (common-lisp:cons "tgwStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-status))
      (common-lisp:list
       (common-lisp:cons "dnsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-arn))
      (common-lisp:list
       (common-lisp:cons "environmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-service-account-id))
      (common-lisp:list
       (common-lisp:cons "dedicatedServiceAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-configuration))
      (common-lisp:list
       (common-lisp:cons "transitGatewayConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-dnsconfiguration))
      (common-lisp:list
       (common-lisp:cons "customDNSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "creationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-timestamp))
      (common-lisp:list
       (common-lisp:cons "updateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-ids))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "certificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-scaling-group-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-scaling-group-request-environment-id
                         :shape "KxEnvironmentId" :location "uri"
                         :location-name "environmentId")
                        (scaling-group-name :initarg :scaling-group-name
                         :initform
                         (common-lisp:error ":scalinggroupname is required")
                         :type
                         (common-lisp:or kx-scaling-group-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-scaling-group-request-scaling-group-name
                         :shape "KxScalingGroupName" :location "uri"
                         :location-name "scalingGroupName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-scaling-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-kx-scaling-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-scaling-group-request
                    'make-get-kx-scaling-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-scaling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-scaling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-scaling-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-scaling-group-response common-lisp:nil
                       ((scaling-group-name :initarg :scaling-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-scaling-group-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-scaling-group-response-scaling-group-name
                         :shape "KxScalingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling-group-arn :initarg :scaling-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-get-kx-scaling-group-response-scaling-group-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (host-type :initarg :host-type :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-host-type common-lisp:null)
                         :accessor
                         struct-shape-get-kx-scaling-group-response-host-type
                         :shape "KxHostType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (clusters :initarg :clusters :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-cluster-name-list common-lisp:null)
                         :accessor
                         struct-shape-get-kx-scaling-group-response-clusters
                         :shape "KxClusterNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-scaling-group-response-availability-zone-id
                         :shape "AvailabilityZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-scaling-group-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-scaling-group-response-status
                         :shape "KxScalingGroupStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cluster-status-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-scaling-group-response-status-reason
                         :shape "KxClusterStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-kx-scaling-group-response-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-kx-scaling-group-response-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-scaling-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-kx-scaling-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-scaling-group-response
                    'make-get-kx-scaling-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-scaling-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-scaling-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "scalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-group-arn))
      (common-lisp:list
       (common-lisp:cons "scalingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-type))
      (common-lisp:list
       (common-lisp:cons "hostType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-scaling-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-user-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or kx-user-name-string common-lisp:null)
                         :accessor struct-shape-get-kx-user-request-user-name
                         :shape "KxUserNameString" :location "uri"
                         :location-name "userName")
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-get-kx-user-request-environment-id :shape
                         "IdType" :location "uri" :location-name
                         "environmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-kx-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-user-request 'make-get-kx-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-kx-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-kx-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-kx-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-user-response common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-get-kx-user-response-user-name :shape
                         "IdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-arn :initarg :user-arn :initform common-lisp:nil
                         :type (common-lisp:or kx-user-arn common-lisp:null)
                         :accessor struct-shape-get-kx-user-response-user-arn
                         :shape "KxUserArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-get-kx-user-response-environment-id
                         :shape "IdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-role :initarg :iam-role :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-get-kx-user-response-iam-role
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-kx-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-user-response 'make-get-kx-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-kx-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-kx-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "userName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-kx-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-volume-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-volume-request-environment-id
                         :shape "KxEnvironmentId" :location "uri"
                         :location-name "environmentId")
                        (volume-name :initarg :volume-name :initform
                         (common-lisp:error ":volumename is required") :type
                         (common-lisp:or kx-volume-name common-lisp:null)
                         :accessor
                         struct-shape-get-kx-volume-request-volume-name :shape
                         "KxVolumeName" :location "uri" :location-name
                         "volumeName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-volume-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-kx-volume-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-volume-request 'make-get-kx-volume-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-kx-volume-response common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-get-kx-volume-response-environment-id
                         :shape "KxEnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-name :initarg :volume-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-name common-lisp:null)
                         :accessor
                         struct-shape-get-kx-volume-response-volume-name :shape
                         "KxVolumeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-type :initarg :volume-type :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-type common-lisp:null)
                         :accessor
                         struct-shape-get-kx-volume-response-volume-type :shape
                         "KxVolumeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-arn :initarg :volume-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-arn common-lisp:null)
                         :accessor
                         struct-shape-get-kx-volume-response-volume-arn :shape
                         "KxVolumeArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (nas1configuration :initarg :nas1configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-nas1configuration common-lisp:null)
                         :accessor
                         struct-shape-get-kx-volume-response-nas1configuration
                         :shape "KxNAS1Configuration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-volume-status common-lisp:null)
                         :accessor struct-shape-get-kx-volume-response-status
                         :shape "KxVolumeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-status-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-volume-response-status-reason
                         :shape "KxVolumeStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-kx-volume-response-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-get-kx-volume-response-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (az-mode :initarg :az-mode :initform common-lisp:nil
                         :type (common-lisp:or kx-az-mode common-lisp:null)
                         :accessor struct-shape-get-kx-volume-response-az-mode
                         :shape "KxAzMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-ids :initarg :availability-zone-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-kx-volume-response-availability-zone-ids
                         :shape "AvailabilityZoneIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-kx-volume-response-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attached-clusters :initarg :attached-clusters
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-attached-clusters common-lisp:null)
                         :accessor
                         struct-shape-get-kx-volume-response-attached-clusters
                         :shape "KxAttachedClusters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-kx-volume-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-kx-volume-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-kx-volume-response 'make-get-kx-volume-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-volume-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-volume-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-name))
      (common-lisp:list
       (common-lisp:cons "volumeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "volumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-arn))
      (common-lisp:list
       (common-lisp:cons "volumeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nas1configuration))
      (common-lisp:list
       (common-lisp:cons "nas1Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'az-mode))
      (common-lisp:list
       (common-lisp:cons "azMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-ids))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-clusters))
      (common-lisp:list
       (common-lisp:cons "attachedClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-kx-volume-response))
   common-lisp:nil))
(common-lisp:deftype ipaddress-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass icmp-type-code common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or icmp-type-or-code common-lisp:null)
                         :accessor struct-shape-icmp-type-code-type :shape
                         "IcmpTypeOrCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or icmp-type-or-code common-lisp:null)
                         :accessor struct-shape-icmp-type-code-code :shape
                         "IcmpTypeOrCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-icmp-type-code
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'icmp-type-code
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'icmp-type-code 'make-icmp-type-code))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input icmp-type-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input icmp-type-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input icmp-type-code))
   common-lisp:nil))
(common-lisp:deftype icmp-type-or-code () 'common-lisp:integer)
(common-lisp:deftype id-type () 'common-lisp:string)
(common-lisp:deftype initialization-script-file-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (finspace-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (finspace-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kx-attached-cluster common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cluster-name common-lisp:null)
                         :accessor
                         struct-shape-kx-attached-cluster-cluster-name :shape
                         "KxClusterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-type :initarg :cluster-type :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cluster-type common-lisp:null)
                         :accessor
                         struct-shape-kx-attached-cluster-cluster-type :shape
                         "KxClusterType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-status :initarg :cluster-status :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cluster-status common-lisp:null)
                         :accessor
                         struct-shape-kx-attached-cluster-cluster-status :shape
                         "KxClusterStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-attached-cluster
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kx-attached-cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-attached-cluster 'make-kx-attached-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kx-attached-cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kx-attached-cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "clusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-status))
      (common-lisp:list
       (common-lisp:cons "clusterStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kx-attached-cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kx-attached-clusters ()
   '(trivial-types:proper-list kx-attached-cluster))
 (common-lisp:defun make-kx-attached-clusters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kx-attached-cluster))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kx-az-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kx-cache-storage-configuration common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or kx-cache-storage-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-cache-storage-configuration-type
                         :shape "KxCacheStorageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size :initarg :size :initform
                         (common-lisp:error ":size is required") :type
                         (common-lisp:or kx-cache-storage-size
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-cache-storage-configuration-size
                         :shape "KxCacheStorageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-cache-storage-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kx-cache-storage-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-cache-storage-configuration
                    'make-kx-cache-storage-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kx-cache-storage-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kx-cache-storage-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kx-cache-storage-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kx-cache-storage-configurations ()
   '(trivial-types:proper-list kx-cache-storage-configuration))
 (common-lisp:defun make-kx-cache-storage-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            kx-cache-storage-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kx-cache-storage-size () 'common-lisp:integer)
(common-lisp:deftype kx-cache-storage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kx-changeset-list-entry common-lisp:nil
                       ((changeset-id :initarg :changeset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-kx-changeset-list-entry-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-kx-changeset-list-entry-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (active-from-timestamp :initarg :active-from-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-kx-changeset-list-entry-active-from-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-kx-changeset-list-entry-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or changeset-status common-lisp:null)
                         :accessor struct-shape-kx-changeset-list-entry-status
                         :shape "ChangesetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-changeset-list-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kx-changeset-list-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-changeset-list-entry 'make-kx-changeset-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kx-changeset-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kx-changeset-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-from-timestamp))
      (common-lisp:list
       (common-lisp:cons "activeFromTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kx-changeset-list-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kx-changesets ()
   '(trivial-types:proper-list kx-changeset-list-entry))
 (common-lisp:defun make-kx-changesets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kx-changeset-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kx-cluster common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-cluster-status common-lisp:null)
                         :accessor struct-shape-kx-cluster-status :shape
                         "KxClusterStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cluster-status-reason
                                         common-lisp:null)
                         :accessor struct-shape-kx-cluster-status-reason :shape
                         "KxClusterStatusReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cluster-name common-lisp:null)
                         :accessor struct-shape-kx-cluster-cluster-name :shape
                         "KxClusterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-type :initarg :cluster-type :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cluster-type common-lisp:null)
                         :accessor struct-shape-kx-cluster-cluster-type :shape
                         "KxClusterType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-description :initarg :cluster-description
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-cluster-description
                                         common-lisp:null)
                         :accessor struct-shape-kx-cluster-cluster-description
                         :shape "KxClusterDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (release-label :initarg :release-label :initform
                         common-lisp:nil :type
                         (common-lisp:or release-label common-lisp:null)
                         :accessor struct-shape-kx-cluster-release-label :shape
                         "ReleaseLabel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volumes :initarg :volumes :initform common-lisp:nil
                         :type (common-lisp:or volumes common-lisp:null)
                         :accessor struct-shape-kx-cluster-volumes :shape
                         "Volumes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (initialization-script :initarg :initialization-script
                         :initform common-lisp:nil :type
                         (common-lisp:or initialization-script-file-path
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-cluster-initialization-script :shape
                         "InitializationScriptFilePath" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-role :initarg :execution-role :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor struct-shape-kx-cluster-execution-role
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (az-mode :initarg :az-mode :initform common-lisp:nil
                         :type (common-lisp:or kx-az-mode common-lisp:null)
                         :accessor struct-shape-kx-cluster-az-mode :shape
                         "KxAzMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor struct-shape-kx-cluster-availability-zone-id
                         :shape "AvailabilityZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-kx-cluster-last-modified-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-kx-cluster-created-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-cluster
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kx-cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'kx-cluster 'make-kx-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kx-cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kx-cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "clusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-description))
      (common-lisp:list
       (common-lisp:cons "clusterDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-label))
      (common-lisp:list
       (common-lisp:cons "releaseLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-script))
      (common-lisp:list
       (common-lisp:cons "initializationScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "executionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'az-mode))
      (common-lisp:list
       (common-lisp:cons "azMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kx-cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kx-cluster-code-deployment-configuration common-lisp:nil
                       ((deployment-strategy :initarg :deployment-strategy
                         :initform
                         (common-lisp:error ":deploymentstrategy is required")
                         :type
                         (common-lisp:or kx-cluster-code-deployment-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-cluster-code-deployment-configuration-deployment-strategy
                         :shape "KxClusterCodeDeploymentStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-cluster-code-deployment-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kx-cluster-code-deployment-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-cluster-code-deployment-configuration
                    'make-kx-cluster-code-deployment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kx-cluster-code-deployment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kx-cluster-code-deployment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-strategy))
      (common-lisp:list
       (common-lisp:cons "deploymentStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kx-cluster-code-deployment-configuration))
   common-lisp:nil))
(common-lisp:deftype kx-cluster-code-deployment-strategy () 'common-lisp:string)
(common-lisp:deftype kx-cluster-description () 'common-lisp:string)
(common-lisp:deftype kx-cluster-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype kx-cluster-name-list ()
   '(trivial-types:proper-list kx-cluster-name))
 (common-lisp:defun make-kx-cluster-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kx-cluster-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kx-cluster-node-id-string () 'common-lisp:string)
(common-lisp:deftype kx-cluster-status () 'common-lisp:string)
(common-lisp:deftype kx-cluster-status-reason () 'common-lisp:string)
(common-lisp:deftype kx-cluster-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype kx-clusters () '(trivial-types:proper-list kx-cluster))
 (common-lisp:defun make-kx-clusters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kx-cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kx-command-line-argument common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or kx-command-line-argument-key
                                         common-lisp:null)
                         :accessor struct-shape-kx-command-line-argument-key
                         :shape "KxCommandLineArgumentKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or kx-command-line-argument-value
                                         common-lisp:null)
                         :accessor struct-shape-kx-command-line-argument-value
                         :shape "KxCommandLineArgumentValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-command-line-argument
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kx-command-line-argument
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-command-line-argument 'make-kx-command-line-argument))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kx-command-line-argument))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kx-command-line-argument))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kx-command-line-argument))
   common-lisp:nil))
(common-lisp:deftype kx-command-line-argument-key () 'common-lisp:string)
(common-lisp:deftype kx-command-line-argument-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype kx-command-line-arguments ()
   '(trivial-types:proper-list kx-command-line-argument))
 (common-lisp:defun make-kx-command-line-arguments
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            kx-command-line-argument))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kx-database-cache-configuration common-lisp:nil
                       ((cache-type :initarg :cache-type :initform
                         (common-lisp:error ":cachetype is required") :type
                         (common-lisp:or kx-cache-storage-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-database-cache-configuration-cache-type
                         :shape "KxCacheStorageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (db-paths :initarg :db-paths :initform
                         (common-lisp:error ":dbpaths is required") :type
                         (common-lisp:or db-paths common-lisp:null) :accessor
                         struct-shape-kx-database-cache-configuration-db-paths
                         :shape "DbPaths" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataview-name :initarg :dataview-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-dataview-name common-lisp:null)
                         :accessor
                         struct-shape-kx-database-cache-configuration-dataview-name
                         :shape "KxDataviewName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-database-cache-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kx-database-cache-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-database-cache-configuration
                    'make-kx-database-cache-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kx-database-cache-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kx-database-cache-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-type))
      (common-lisp:list
       (common-lisp:cons "cacheType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-paths))
      (common-lisp:list
       (common-lisp:cons "dbPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataview-name))
      (common-lisp:list
       (common-lisp:cons "dataviewName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kx-database-cache-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kx-database-cache-configurations ()
   '(trivial-types:proper-list kx-database-cache-configuration))
 (common-lisp:defun make-kx-database-cache-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            kx-database-cache-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kx-database-configuration common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-kx-database-configuration-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cache-configurations :initarg :cache-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-database-cache-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-database-configuration-cache-configurations
                         :shape "KxDatabaseCacheConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (changeset-id :initarg :changeset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-kx-database-configuration-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataview-name :initarg :dataview-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-dataview-name common-lisp:null)
                         :accessor
                         struct-shape-kx-database-configuration-dataview-name
                         :shape "KxDataviewName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataview-configuration :initarg
                         :dataview-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-dataview-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-database-configuration-dataview-configuration
                         :shape "KxDataviewConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-database-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kx-database-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-database-configuration
                    'make-kx-database-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kx-database-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kx-database-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-configurations))
      (common-lisp:list
       (common-lisp:cons "cacheConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataview-name))
      (common-lisp:list
       (common-lisp:cons "dataviewName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataview-configuration))
      (common-lisp:list
       (common-lisp:cons "dataviewConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kx-database-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kx-database-configurations ()
   '(trivial-types:proper-list kx-database-configuration))
 (common-lisp:defun make-kx-database-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            kx-database-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kx-database-list-entry common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-kx-database-list-entry-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-kx-database-list-entry-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-kx-database-list-entry-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-database-list-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kx-database-list-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-database-list-entry 'make-kx-database-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kx-database-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kx-database-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kx-database-list-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kx-databases ()
   '(trivial-types:proper-list kx-database-list-entry))
 (common-lisp:defun make-kx-databases
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kx-database-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kx-dataview-active-version common-lisp:nil
                       ((changeset-id :initarg :changeset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-active-version-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segment-configurations :initarg
                         :segment-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-dataview-segment-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-active-version-segment-configurations
                         :shape "KxDataviewSegmentConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attached-clusters :initarg :attached-clusters
                         :initform common-lisp:nil :type
                         (common-lisp:or attached-cluster-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-active-version-attached-clusters
                         :shape "AttachedClusterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-kx-dataview-active-version-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or version-id common-lisp:null) :accessor
                         struct-shape-kx-dataview-active-version-version-id
                         :shape "VersionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-dataview-active-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kx-dataview-active-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-dataview-active-version
                    'make-kx-dataview-active-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kx-dataview-active-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kx-dataview-active-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segment-configurations))
      (common-lisp:list
       (common-lisp:cons "segmentConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-clusters))
      (common-lisp:list
       (common-lisp:cons "attachedClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kx-dataview-active-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kx-dataview-active-version-list ()
   '(trivial-types:proper-list kx-dataview-active-version))
 (common-lisp:defun make-kx-dataview-active-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            kx-dataview-active-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kx-dataview-configuration common-lisp:nil
                       ((dataview-name :initarg :dataview-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-dataview-name common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-configuration-dataview-name
                         :shape "KxDataviewName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataview-version-id :initarg :dataview-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or version-id common-lisp:null) :accessor
                         struct-shape-kx-dataview-configuration-dataview-version-id
                         :shape "VersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (changeset-id :initarg :changeset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-configuration-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segment-configurations :initarg
                         :segment-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-dataview-segment-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-configuration-segment-configurations
                         :shape "KxDataviewSegmentConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-dataview-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kx-dataview-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-dataview-configuration
                    'make-kx-dataview-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kx-dataview-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kx-dataview-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataview-name))
      (common-lisp:list
       (common-lisp:cons "dataviewName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataview-version-id))
      (common-lisp:list
       (common-lisp:cons "dataviewVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segment-configurations))
      (common-lisp:list
       (common-lisp:cons "segmentConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kx-dataview-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kx-dataview-list-entry common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-list-entry-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-list-entry-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataview-name :initarg :dataview-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-dataview-name common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-list-entry-dataview-name
                         :shape "KxDataviewName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (az-mode :initarg :az-mode :initform common-lisp:nil
                         :type (common-lisp:or kx-az-mode common-lisp:null)
                         :accessor struct-shape-kx-dataview-list-entry-az-mode
                         :shape "KxAzMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-list-entry-availability-zone-id
                         :shape "AvailabilityZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (changeset-id :initarg :changeset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-list-entry-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segment-configurations :initarg
                         :segment-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-dataview-segment-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-list-entry-segment-configurations
                         :shape "KxDataviewSegmentConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (active-versions :initarg :active-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-dataview-active-version-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-list-entry-active-versions
                         :shape "KxDataviewActiveVersionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-dataview-status common-lisp:null)
                         :accessor struct-shape-kx-dataview-list-entry-status
                         :shape "KxDataviewStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-list-entry-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-update :initarg :auto-update :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanValue| common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-list-entry-auto-update :shape
                         "booleanValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-kx-dataview-list-entry-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-list-entry-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-dataview-status-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-list-entry-status-reason
                         :shape "KxDataviewStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-dataview-list-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kx-dataview-list-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-dataview-list-entry 'make-kx-dataview-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kx-dataview-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kx-dataview-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataview-name))
      (common-lisp:list
       (common-lisp:cons "dataviewName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'az-mode))
      (common-lisp:list
       (common-lisp:cons "azMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segment-configurations))
      (common-lisp:list
       (common-lisp:cons "segmentConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-versions))
      (common-lisp:list
       (common-lisp:cons "activeVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-update))
      (common-lisp:list
       (common-lisp:cons "autoUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kx-dataview-list-entry))
   common-lisp:nil))
(common-lisp:deftype kx-dataview-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kx-dataview-segment-configuration common-lisp:nil
                       ((db-paths :initarg :db-paths :initform
                         (common-lisp:error ":dbpaths is required") :type
                         (common-lisp:or segment-configuration-db-path-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-segment-configuration-db-paths
                         :shape "SegmentConfigurationDbPathList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (volume-name :initarg :volume-name :initform
                         (common-lisp:error ":volumename is required") :type
                         (common-lisp:or kx-volume-name common-lisp:null)
                         :accessor
                         struct-shape-kx-dataview-segment-configuration-volume-name
                         :shape "KxVolumeName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-dataview-segment-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kx-dataview-segment-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-dataview-segment-configuration
                    'make-kx-dataview-segment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kx-dataview-segment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kx-dataview-segment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-paths))
      (common-lisp:list
       (common-lisp:cons "dbPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-name))
      (common-lisp:list
       (common-lisp:cons "volumeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kx-dataview-segment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kx-dataview-segment-configuration-list ()
   '(trivial-types:proper-list kx-dataview-segment-configuration))
 (common-lisp:defun make-kx-dataview-segment-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            kx-dataview-segment-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kx-dataview-status () 'common-lisp:string)
(common-lisp:deftype kx-dataview-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype kx-dataviews ()
   '(trivial-types:proper-list kx-dataview-list-entry))
 (common-lisp:defun make-kx-dataviews
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kx-dataview-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kx-deployment-configuration common-lisp:nil
                       ((deployment-strategy :initarg :deployment-strategy
                         :initform
                         (common-lisp:error ":deploymentstrategy is required")
                         :type
                         (common-lisp:or kx-deployment-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-deployment-configuration-deployment-strategy
                         :shape "KxDeploymentStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-deployment-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kx-deployment-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-deployment-configuration
                    'make-kx-deployment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kx-deployment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kx-deployment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-strategy))
      (common-lisp:list
       (common-lisp:cons "deploymentStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kx-deployment-configuration))
   common-lisp:nil))
(common-lisp:deftype kx-deployment-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kx-environment common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or kx-environment-name common-lisp:null)
                         :accessor struct-shape-kx-environment-name :shape
                         "KxEnvironmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-kx-environment-environment-id :shape
                         "IdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-kx-environment-aws-account-id :shape
                         "IdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or environment-status common-lisp:null)
                         :accessor struct-shape-kx-environment-status :shape
                         "EnvironmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tgw-status :initarg :tgw-status :initform
                         common-lisp:nil :type
                         (common-lisp:or |tgwStatus| common-lisp:null)
                         :accessor struct-shape-kx-environment-tgw-status
                         :shape "tgwStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dns-status :initarg :dns-status :initform
                         common-lisp:nil :type
                         (common-lisp:or |dnsStatus| common-lisp:null)
                         :accessor struct-shape-kx-environment-dns-status
                         :shape "dnsStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-error-message
                                         common-lisp:null)
                         :accessor struct-shape-kx-environment-error-message
                         :shape "EnvironmentErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-kx-environment-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-arn :initarg :environment-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor struct-shape-kx-environment-environment-arn
                         :shape "EnvironmentArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-kx-environment-kms-key-id :shape
                         "KmsKeyId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dedicated-service-account-id :initarg
                         :dedicated-service-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-kx-environment-dedicated-service-account-id
                         :shape "IdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-gateway-configuration :initarg
                         :transit-gateway-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-environment-transit-gateway-configuration
                         :shape "TransitGatewayConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-dnsconfiguration :initarg
                         :custom-dnsconfiguration :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-dnsconfiguration
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-environment-custom-dnsconfiguration
                         :shape "CustomDNSConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-kx-environment-creation-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-timestamp :initarg :update-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-kx-environment-update-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone-ids :initarg :availability-zone-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-environment-availability-zone-ids
                         :shape "AvailabilityZoneIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-authority-arn :initarg
                         :certificate-authority-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or |stringValueLength1to255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-environment-certificate-authority-arn
                         :shape "stringValueLength1to255" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-environment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kx-environment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'kx-environment 'make-kx-environment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kx-environment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kx-environment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tgw-status))
      (common-lisp:list
       (common-lisp:cons "tgwStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-status))
      (common-lisp:list
       (common-lisp:cons "dnsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-arn))
      (common-lisp:list
       (common-lisp:cons "environmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-service-account-id))
      (common-lisp:list
       (common-lisp:cons "dedicatedServiceAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-configuration))
      (common-lisp:list
       (common-lisp:cons "transitGatewayConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-dnsconfiguration))
      (common-lisp:list
       (common-lisp:cons "customDNSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "creationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-timestamp))
      (common-lisp:list
       (common-lisp:cons "updateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-ids))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "certificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kx-environment))
   common-lisp:nil))
(common-lisp:deftype kx-environment-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype kx-environment-list ()
   '(trivial-types:proper-list kx-environment))
 (common-lisp:defun make-kx-environment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kx-environment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kx-environment-name () 'common-lisp:string)
(common-lisp:deftype kx-host-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kx-nas1configuration common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or kx-nas1type common-lisp:null)
                         :accessor struct-shape-kx-nas1configuration-type
                         :shape "KxNAS1Type" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size :initarg :size :initform common-lisp:nil :type
                         (common-lisp:or kx-nas1size common-lisp:null)
                         :accessor struct-shape-kx-nas1configuration-size
                         :shape "KxNAS1Size" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-nas1configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kx-nas1configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-nas1configuration 'make-kx-nas1configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kx-nas1configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kx-nas1configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kx-nas1configuration))
   common-lisp:nil))
(common-lisp:deftype kx-nas1size () 'common-lisp:integer)
(common-lisp:deftype kx-nas1type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kx-node common-lisp:nil
                       ((node-id :initarg :node-id :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-cluster-node-id-string
                                         common-lisp:null)
                         :accessor struct-shape-kx-node-node-id :shape
                         "KxClusterNodeIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor struct-shape-kx-node-availability-zone-id
                         :shape "AvailabilityZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-time :initarg :launch-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-kx-node-launch-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-node
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kx-node
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'kx-node 'make-kx-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kx-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kx-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "nodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-time))
      (common-lisp:list
       (common-lisp:cons "launchTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kx-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kx-node-summaries ()
   '(trivial-types:proper-list kx-node))
 (common-lisp:defun make-kx-node-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kx-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kx-savedown-storage-configuration common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or kx-savedown-storage-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-savedown-storage-configuration-type
                         :shape "KxSavedownStorageType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (size :initarg :size :initform common-lisp:nil :type
                         (common-lisp:or kx-savedown-storage-size
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-savedown-storage-configuration-size
                         :shape "KxSavedownStorageSize" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (volume-name :initarg :volume-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-name common-lisp:null)
                         :accessor
                         struct-shape-kx-savedown-storage-configuration-volume-name
                         :shape "KxVolumeName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-savedown-storage-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kx-savedown-storage-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-savedown-storage-configuration
                    'make-kx-savedown-storage-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kx-savedown-storage-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kx-savedown-storage-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-name))
      (common-lisp:list
       (common-lisp:cons "volumeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kx-savedown-storage-configuration))
   common-lisp:nil))
(common-lisp:deftype kx-savedown-storage-size () 'common-lisp:integer)
(common-lisp:deftype kx-savedown-storage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kx-scaling-group common-lisp:nil
                       ((scaling-group-name :initarg :scaling-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-scaling-group-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-scaling-group-scaling-group-name
                         :shape "KxScalingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (host-type :initarg :host-type :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-host-type common-lisp:null)
                         :accessor struct-shape-kx-scaling-group-host-type
                         :shape "KxHostType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (clusters :initarg :clusters :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-cluster-name-list common-lisp:null)
                         :accessor struct-shape-kx-scaling-group-clusters
                         :shape "KxClusterNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor
                         struct-shape-kx-scaling-group-availability-zone-id
                         :shape "AvailabilityZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-scaling-group-status
                                         common-lisp:null)
                         :accessor struct-shape-kx-scaling-group-status :shape
                         "KxScalingGroupStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cluster-status-reason
                                         common-lisp:null)
                         :accessor struct-shape-kx-scaling-group-status-reason
                         :shape "KxClusterStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-kx-scaling-group-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-kx-scaling-group-created-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-scaling-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kx-scaling-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-scaling-group 'make-kx-scaling-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kx-scaling-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kx-scaling-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "scalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-type))
      (common-lisp:list
       (common-lisp:cons "hostType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kx-scaling-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kx-scaling-group-configuration common-lisp:nil
                       ((scaling-group-name :initarg :scaling-group-name
                         :initform
                         (common-lisp:error ":scalinggroupname is required")
                         :type
                         (common-lisp:or kx-scaling-group-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-kx-scaling-group-configuration-scaling-group-name
                         :shape "KxScalingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (memory-limit :initarg :memory-limit :initform
                         common-lisp:nil :type
                         (common-lisp:or memory-mib common-lisp:null) :accessor
                         struct-shape-kx-scaling-group-configuration-memory-limit
                         :shape "MemoryMib" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (memory-reservation :initarg :memory-reservation
                         :initform
                         (common-lisp:error ":memoryreservation is required")
                         :type (common-lisp:or memory-mib common-lisp:null)
                         :accessor
                         struct-shape-kx-scaling-group-configuration-memory-reservation
                         :shape "MemoryMib" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-count :initarg :node-count :initform
                         (common-lisp:error ":nodecount is required") :type
                         (common-lisp:or cluster-node-count common-lisp:null)
                         :accessor
                         struct-shape-kx-scaling-group-configuration-node-count
                         :shape "ClusterNodeCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cpu :initarg :cpu :initform common-lisp:nil :type
                         (common-lisp:or cpu-count common-lisp:null) :accessor
                         struct-shape-kx-scaling-group-configuration-cpu :shape
                         "CpuCount" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-scaling-group-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kx-scaling-group-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kx-scaling-group-configuration
                    'make-kx-scaling-group-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kx-scaling-group-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kx-scaling-group-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "scalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-limit))
      (common-lisp:list
       (common-lisp:cons "memoryLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-reservation))
      (common-lisp:list
       (common-lisp:cons "memoryReservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-count))
      (common-lisp:list
       (common-lisp:cons "nodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kx-scaling-group-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kx-scaling-group-list ()
   '(trivial-types:proper-list kx-scaling-group))
 (common-lisp:defun make-kx-scaling-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kx-scaling-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kx-scaling-group-name () 'common-lisp:string)
(common-lisp:deftype kx-scaling-group-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kx-user common-lisp:nil
                       ((user-arn :initarg :user-arn :initform common-lisp:nil
                         :type (common-lisp:or kx-user-arn common-lisp:null)
                         :accessor struct-shape-kx-user-user-arn :shape
                         "KxUserArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-user-name-string common-lisp:null)
                         :accessor struct-shape-kx-user-user-name :shape
                         "KxUserNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-role :initarg :iam-role :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-kx-user-iam-role :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-timestamp :initarg :create-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-kx-user-create-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-timestamp :initarg :update-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-kx-user-update-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-user
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kx-user
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'kx-user 'make-kx-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kx-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kx-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "userName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-timestamp))
      (common-lisp:list
       (common-lisp:cons "createTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-timestamp))
      (common-lisp:list
       (common-lisp:cons "updateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kx-user))
   common-lisp:nil))
(common-lisp:deftype kx-user-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype kx-user-list () '(trivial-types:proper-list kx-user))
 (common-lisp:defun make-kx-user-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kx-user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kx-user-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kx-volume common-lisp:nil
                       ((volume-name :initarg :volume-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-name common-lisp:null)
                         :accessor struct-shape-kx-volume-volume-name :shape
                         "KxVolumeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-type :initarg :volume-type :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-type common-lisp:null)
                         :accessor struct-shape-kx-volume-volume-type :shape
                         "KxVolumeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-volume-status common-lisp:null)
                         :accessor struct-shape-kx-volume-status :shape
                         "KxVolumeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-kx-volume-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-status-reason
                                         common-lisp:null)
                         :accessor struct-shape-kx-volume-status-reason :shape
                         "KxVolumeStatusReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (az-mode :initarg :az-mode :initform common-lisp:nil
                         :type (common-lisp:or kx-az-mode common-lisp:null)
                         :accessor struct-shape-kx-volume-az-mode :shape
                         "KxAzMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone-ids :initarg :availability-zone-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-ids
                                         common-lisp:null)
                         :accessor struct-shape-kx-volume-availability-zone-ids
                         :shape "AvailabilityZoneIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-kx-volume-created-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-kx-volume-last-modified-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kx-volume
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kx-volume
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'kx-volume 'make-kx-volume))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kx-volume))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kx-volume))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-name))
      (common-lisp:list
       (common-lisp:cons "volumeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "volumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'az-mode))
      (common-lisp:list
       (common-lisp:cons "azMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-ids))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kx-volume))
   common-lisp:nil))
(common-lisp:deftype kx-volume-arn () 'common-lisp:string)
(common-lisp:deftype kx-volume-name () 'common-lisp:string)
(common-lisp:deftype kx-volume-status () 'common-lisp:string)
(common-lisp:deftype kx-volume-status-reason () 'common-lisp:string)
(common-lisp:deftype kx-volume-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype kx-volumes () '(trivial-types:proper-list kx-volume))
 (common-lisp:defun make-kx-volumes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kx-volume))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (finspace-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-environments-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-environments-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-limit common-lisp:null)
                         :accessor
                         struct-shape-list-environments-request-max-results
                         :shape "ResultLimit" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environments-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-environments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environments-request
                    'make-list-environments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environments-response common-lisp:nil
                       ((environments :initarg :environments :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-list common-lisp:null)
                         :accessor
                         struct-shape-list-environments-response-environments
                         :shape "EnvironmentList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-environments-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environments-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-environments-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environments-response
                    'make-list-environments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environments))
      (common-lisp:list
       (common-lisp:cons "environments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-changesets-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-list-kx-changesets-request-environment-id
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentId")
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-list-kx-changesets-request-database-name
                         :shape "DatabaseName" :location "uri" :location-name
                         "databaseName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-changesets-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-kx-changesets-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-changesets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-kx-changesets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-changesets-request
                    'make-list-kx-changesets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-changesets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-changesets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-changesets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-changesets-response common-lisp:nil
                       ((kx-changesets :initarg :kx-changesets :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-changesets common-lisp:null)
                         :accessor
                         struct-shape-list-kx-changesets-response-kx-changesets
                         :shape "KxChangesets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-changesets-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-changesets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-kx-changesets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-changesets-response
                    'make-list-kx-changesets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-changesets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-changesets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kx-changesets))
      (common-lisp:list
       (common-lisp:cons "kxChangesets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-changesets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-cluster-nodes-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-list-kx-cluster-nodes-request-environment-id
                         :shape "KxEnvironmentId" :location "uri"
                         :location-name "environmentId")
                        (cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or kx-cluster-name common-lisp:null)
                         :accessor
                         struct-shape-list-kx-cluster-nodes-request-cluster-name
                         :shape "KxClusterName" :location "uri" :location-name
                         "clusterName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-cluster-nodes-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-limit common-lisp:null)
                         :accessor
                         struct-shape-list-kx-cluster-nodes-request-max-results
                         :shape "ResultLimit" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-cluster-nodes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-kx-cluster-nodes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-cluster-nodes-request
                    'make-list-kx-cluster-nodes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-cluster-nodes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-cluster-nodes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-cluster-nodes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-cluster-nodes-response common-lisp:nil
                       ((nodes :initarg :nodes :initform common-lisp:nil :type
                         (common-lisp:or kx-node-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-kx-cluster-nodes-response-nodes
                         :shape "KxNodeSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-cluster-nodes-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-cluster-nodes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-kx-cluster-nodes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-cluster-nodes-response
                    'make-list-kx-cluster-nodes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-cluster-nodes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-cluster-nodes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-cluster-nodes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-clusters-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-list-kx-clusters-request-environment-id
                         :shape "KxEnvironmentId" :location "uri"
                         :location-name "environmentId")
                        (cluster-type :initarg :cluster-type :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-cluster-type common-lisp:null)
                         :accessor
                         struct-shape-list-kx-clusters-request-cluster-type
                         :shape "KxClusterType" :location "querystring"
                         :location-name "clusterType")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-kx-clusters-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-clusters-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-clusters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-kx-clusters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-clusters-request 'make-list-kx-clusters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-clusters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-clusters-response common-lisp:nil
                       ((kx-cluster-summaries :initarg :kx-cluster-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-clusters common-lisp:null)
                         :accessor
                         struct-shape-list-kx-clusters-response-kx-cluster-summaries
                         :shape "KxClusters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-clusters-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-clusters-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-kx-clusters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-clusters-response
                    'make-list-kx-clusters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-clusters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-clusters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kx-cluster-summaries))
      (common-lisp:list
       (common-lisp:cons "kxClusterSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-clusters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-databases-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-list-kx-databases-request-environment-id
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-databases-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-kx-databases-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-databases-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-kx-databases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-databases-request
                    'make-list-kx-databases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-databases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-databases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-databases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-databases-response common-lisp:nil
                       ((kx-databases :initarg :kx-databases :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-databases common-lisp:null)
                         :accessor
                         struct-shape-list-kx-databases-response-kx-databases
                         :shape "KxDatabases" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-databases-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-databases-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-kx-databases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-databases-response
                    'make-list-kx-databases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-databases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-databases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kx-databases))
      (common-lisp:list
       (common-lisp:cons "kxDatabases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-databases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-dataviews-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-list-kx-dataviews-request-environment-id
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentId")
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-list-kx-dataviews-request-database-name
                         :shape "DatabaseName" :location "uri" :location-name
                         "databaseName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-dataviews-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-kx-dataviews-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-dataviews-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-kx-dataviews-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-dataviews-request
                    'make-list-kx-dataviews-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-dataviews-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-dataviews-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-dataviews-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-dataviews-response common-lisp:nil
                       ((kx-dataviews :initarg :kx-dataviews :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-dataviews common-lisp:null)
                         :accessor
                         struct-shape-list-kx-dataviews-response-kx-dataviews
                         :shape "KxDataviews" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-dataviews-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-dataviews-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-kx-dataviews-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-dataviews-response
                    'make-list-kx-dataviews-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-dataviews-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-dataviews-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kx-dataviews))
      (common-lisp:list
       (common-lisp:cons "kxDataviews"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-dataviews-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-environments-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-environments-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-list-kx-environments-request-max-results
                         :shape "BoxedInteger" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-environments-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-kx-environments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-environments-request
                    'make-list-kx-environments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-environments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-environments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-environments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-environments-response common-lisp:nil
                       ((environments :initarg :environments :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-environment-list common-lisp:null)
                         :accessor
                         struct-shape-list-kx-environments-response-environments
                         :shape "KxEnvironmentList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-environments-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-environments-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-kx-environments-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-environments-response
                    'make-list-kx-environments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-environments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-environments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environments))
      (common-lisp:list
       (common-lisp:cons "environments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-environments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-scaling-groups-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-list-kx-scaling-groups-request-environment-id
                         :shape "KxEnvironmentId" :location "uri"
                         :location-name "environmentId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-kx-scaling-groups-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-scaling-groups-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-scaling-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-kx-scaling-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-scaling-groups-request
                    'make-list-kx-scaling-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-scaling-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-scaling-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-scaling-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-scaling-groups-response common-lisp:nil
                       ((scaling-groups :initarg :scaling-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-scaling-group-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-kx-scaling-groups-response-scaling-groups
                         :shape "KxScalingGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-scaling-groups-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-scaling-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-kx-scaling-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-scaling-groups-response
                    'make-list-kx-scaling-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-scaling-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-scaling-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-groups))
      (common-lisp:list
       (common-lisp:cons "scalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-scaling-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-users-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-list-kx-users-request-environment-id
                         :shape "IdType" :location "uri" :location-name
                         "environmentId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-users-request-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-limit common-lisp:null)
                         :accessor
                         struct-shape-list-kx-users-request-max-results :shape
                         "ResultLimit" :location "querystring" :location-name
                         "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-users-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-kx-users-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-users-request 'make-list-kx-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-users-response common-lisp:nil
                       ((users :initarg :users :initform common-lisp:nil :type
                         (common-lisp:or kx-user-list common-lisp:null)
                         :accessor struct-shape-list-kx-users-response-users
                         :shape "KxUserList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-users-response-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-users-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-kx-users-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-users-response 'make-list-kx-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-users-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-volumes-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-list-kx-volumes-request-environment-id
                         :shape "KxEnvironmentId" :location "uri"
                         :location-name "environmentId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-kx-volumes-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-volumes-request-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (volume-type :initarg :volume-type :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-type common-lisp:null)
                         :accessor
                         struct-shape-list-kx-volumes-request-volume-type
                         :shape "KxVolumeType" :location "querystring"
                         :location-name "volumeType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-volumes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-kx-volumes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-volumes-request 'make-list-kx-volumes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-volumes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-volumes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-volumes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-kx-volumes-response common-lisp:nil
                       ((kx-volume-summaries :initarg :kx-volume-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-volumes common-lisp:null) :accessor
                         struct-shape-list-kx-volumes-response-kx-volume-summaries
                         :shape "KxVolumes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-kx-volumes-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-kx-volumes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-kx-volumes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-kx-volumes-response 'make-list-kx-volumes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-volumes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-volumes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kx-volume-summaries))
      (common-lisp:list
       (common-lisp:cons "kxVolumeSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-kx-volumes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or fin-space-taggable-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "FinSpaceTaggableArn" :location "uri"
                         :location-name "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype memory-mib () 'common-lisp:integer)
(common-lisp:deftype name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype network-aclconfiguration ()
   '(trivial-types:proper-list network-aclentry))
 (common-lisp:defun make-network-aclconfiguration
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-aclentry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass network-aclentry common-lisp:nil
                       ((rule-number :initarg :rule-number :initform
                         (common-lisp:error ":rulenumber is required") :type
                         (common-lisp:or rule-number common-lisp:null)
                         :accessor struct-shape-network-aclentry-rule-number
                         :shape "RuleNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform
                         (common-lisp:error ":protocol is required") :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         struct-shape-network-aclentry-protocol :shape
                         "Protocol" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rule-action :initarg :rule-action :initform
                         (common-lisp:error ":ruleaction is required") :type
                         (common-lisp:or rule-action common-lisp:null)
                         :accessor struct-shape-network-aclentry-rule-action
                         :shape "RuleAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port-range :initarg :port-range :initform
                         common-lisp:nil :type
                         (common-lisp:or port-range common-lisp:null) :accessor
                         struct-shape-network-aclentry-port-range :shape
                         "PortRange" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (icmp-type-code :initarg :icmp-type-code :initform
                         common-lisp:nil :type
                         (common-lisp:or icmp-type-code common-lisp:null)
                         :accessor struct-shape-network-aclentry-icmp-type-code
                         :shape "IcmpTypeCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cidr-block :initarg :cidr-block :initform
                         (common-lisp:error ":cidrblock is required") :type
                         (common-lisp:or valid-cidrblock common-lisp:null)
                         :accessor struct-shape-network-aclentry-cidr-block
                         :shape "ValidCIDRBlock" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-aclentry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-aclentry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-aclentry 'make-network-aclentry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-aclentry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-aclentry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-number))
      (common-lisp:list
       (common-lisp:cons "ruleNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-action))
      (common-lisp:list
       (common-lisp:cons "ruleAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-range))
      (common-lisp:list
       (common-lisp:cons "portRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icmp-type-code))
      (common-lisp:list
       (common-lisp:cons "icmpTypeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "cidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-aclentry))
   common-lisp:nil))
(common-lisp:deftype node-count () 'common-lisp:integer)
(common-lisp:deftype node-type () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass port-range common-lisp:nil
                       ((from :initarg :from :initform
                         (common-lisp:error ":from is required") :type
                         (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-port-range-from :shape "Port" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (to :initarg :to :initform
                         (common-lisp:error ":to is required") :type
                         (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-port-range-to :shape "Port" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-port-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'port-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'port-range 'make-port-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "from"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "to"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-range))
   common-lisp:nil))
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:deftype release-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (finspace-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (finspace-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype result-limit () 'common-lisp:integer)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype rule-action () 'common-lisp:string)
(common-lisp:deftype rule-number () 'common-lisp:integer)
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:deftype s3object-version () 'common-lisp:string)
(common-lisp:deftype s3path () 'common-lisp:string)
(common-lisp:deftype saml-metadata-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-id-list ()
   '(trivial-types:proper-list security-group-id-string))
 (common-lisp:defun make-security-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-group-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-group-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype segment-configuration-db-path-list ()
   '(trivial-types:proper-list db-path))
 (common-lisp:defun make-segment-configuration-db-path-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list db-path))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (finspace-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype signed-kx-connection-string () 'common-lisp:string)
(common-lisp:deftype sms-domain-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-id-list ()
   '(trivial-types:proper-list subnet-id-string))
 (common-lisp:defun make-subnet-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subnet-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass superuser-parameters common-lisp:nil
                       ((email-address :initarg :email-address :initform
                         (common-lisp:error ":emailaddress is required") :type
                         (common-lisp:or email-id common-lisp:null) :accessor
                         struct-shape-superuser-parameters-email-address :shape
                         "EmailId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         (common-lisp:error ":firstname is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-superuser-parameters-first-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         (common-lisp:error ":lastname is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-superuser-parameters-last-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-superuser-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'superuser-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'superuser-parameters 'make-superuser-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input superuser-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input superuser-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "firstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "lastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input superuser-parameters))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or fin-space-taggable-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "FinSpaceTaggableArn" :location "uri" :location-name
                         "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (finspace-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defclass tickerplant-log-configuration common-lisp:nil
                       ((tickerplant-log-volumes :initarg
                         :tickerplant-log-volumes :initform common-lisp:nil
                         :type
                         (common-lisp:or tickerplant-log-volumes
                                         common-lisp:null)
                         :accessor
                         struct-shape-tickerplant-log-configuration-tickerplant-log-volumes
                         :shape "TickerplantLogVolumes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tickerplant-log-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'tickerplant-log-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tickerplant-log-configuration
                    'make-tickerplant-log-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tickerplant-log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tickerplant-log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tickerplant-log-volumes))
      (common-lisp:list
       (common-lisp:cons "tickerplantLogVolumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tickerplant-log-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tickerplant-log-volumes ()
   '(trivial-types:proper-list volume-name))
 (common-lisp:defun make-tickerplant-log-volumes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass transit-gateway-configuration common-lisp:nil
                       ((transit-gateway-id :initarg :transit-gateway-id
                         :initform
                         (common-lisp:error ":transitgatewayid is required")
                         :type
                         (common-lisp:or transit-gateway-id common-lisp:null)
                         :accessor
                         struct-shape-transit-gateway-configuration-transit-gateway-id
                         :shape "TransitGatewayID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (routable-cidrspace :initarg :routable-cidrspace
                         :initform
                         (common-lisp:error ":routablecidrspace is required")
                         :type
                         (common-lisp:or valid-cidrspace common-lisp:null)
                         :accessor
                         struct-shape-transit-gateway-configuration-routable-cidrspace
                         :shape "ValidCIDRSpace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attachment-network-acl-configuration :initarg
                         :attachment-network-acl-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or network-aclconfiguration
                                         common-lisp:null)
                         :accessor
                         struct-shape-transit-gateway-configuration-attachment-network-acl-configuration
                         :shape "NetworkACLConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transit-gateway-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'transit-gateway-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transit-gateway-configuration
                    'make-transit-gateway-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transit-gateway-id))
      (common-lisp:list
       (common-lisp:cons "transitGatewayID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routable-cidrspace))
      (common-lisp:list
       (common-lisp:cons "routableCIDRSpace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachment-network-acl-configuration))
      (common-lisp:list
       (common-lisp:cons "attachmentNetworkAclConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-configuration))
   common-lisp:nil))
(common-lisp:deftype transit-gateway-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or fin-space-taggable-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "FinSpaceTaggableArn" :location "uri"
                         :location-name "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-update-environment-request-environment-id
                         :shape "IdType" :location "uri" :location-name
                         "environmentId")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor struct-shape-update-environment-request-name
                         :shape "EnvironmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-environment-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (federation-mode :initarg :federation-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or federation-mode common-lisp:null)
                         :accessor
                         struct-shape-update-environment-request-federation-mode
                         :shape "FederationMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (federation-parameters :initarg :federation-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or federation-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-request-federation-parameters
                         :shape "FederationParameters" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-request
                    'make-update-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federation-mode))
      (common-lisp:list
       (common-lisp:cons "federationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'federation-parameters))
      (common-lisp:list
       (common-lisp:cons "federationParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-response common-lisp:nil
                       ((environment :initarg :environment :initform
                         common-lisp:nil :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         struct-shape-update-environment-response-environment
                         :shape "Environment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-response
                    'make-update-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-kx-cluster-code-configuration-request
                       common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-update-kx-cluster-code-configuration-request-environment-id
                         :shape "KxEnvironmentId" :location "uri"
                         :location-name "environmentId")
                        (cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or kx-cluster-name common-lisp:null)
                         :accessor
                         struct-shape-update-kx-cluster-code-configuration-request-cluster-name
                         :shape "KxClusterName" :location "uri" :location-name
                         "clusterName")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor
                         struct-shape-update-kx-cluster-code-configuration-request-client-token
                         :shape "ClientTokenString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or code-configuration common-lisp:null)
                         :accessor
                         struct-shape-update-kx-cluster-code-configuration-request-code
                         :shape "CodeConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (initialization-script :initarg :initialization-script
                         :initform common-lisp:nil :type
                         (common-lisp:or initialization-script-file-path
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-cluster-code-configuration-request-initialization-script
                         :shape "InitializationScriptFilePath" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (command-line-arguments :initarg
                         :command-line-arguments :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-command-line-arguments
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-cluster-code-configuration-request-command-line-arguments
                         :shape "KxCommandLineArguments" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (deployment-configuration :initarg
                         :deployment-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          kx-cluster-code-deployment-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-update-kx-cluster-code-configuration-request-deployment-configuration
                         :shape "KxClusterCodeDeploymentConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-kx-cluster-code-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-kx-cluster-code-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-kx-cluster-code-configuration-request
                    'make-update-kx-cluster-code-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-cluster-code-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-cluster-code-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-script))
      (common-lisp:list
       (common-lisp:cons "initializationScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'command-line-arguments))
      (common-lisp:list
       (common-lisp:cons "commandLineArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "deploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-cluster-code-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-kx-cluster-code-configuration-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-kx-cluster-code-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-kx-cluster-code-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-kx-cluster-code-configuration-response
                    'make-update-kx-cluster-code-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-cluster-code-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-cluster-code-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-cluster-code-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-kx-cluster-databases-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-update-kx-cluster-databases-request-environment-id
                         :shape "KxEnvironmentId" :location "uri"
                         :location-name "environmentId")
                        (cluster-name :initarg :cluster-name :initform
                         (common-lisp:error ":clustername is required") :type
                         (common-lisp:or kx-cluster-name common-lisp:null)
                         :accessor
                         struct-shape-update-kx-cluster-databases-request-cluster-name
                         :shape "KxClusterName" :location "uri" :location-name
                         "clusterName")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor
                         struct-shape-update-kx-cluster-databases-request-client-token
                         :shape "ClientTokenString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (databases :initarg :databases :initform
                         (common-lisp:error ":databases is required") :type
                         (common-lisp:or kx-database-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-cluster-databases-request-databases
                         :shape "KxDatabaseConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (deployment-configuration :initarg
                         :deployment-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-deployment-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-cluster-databases-request-deployment-configuration
                         :shape "KxDeploymentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-kx-cluster-databases-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-kx-cluster-databases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-kx-cluster-databases-request
                    'make-update-kx-cluster-databases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-cluster-databases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-cluster-databases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'databases))
      (common-lisp:list
       (common-lisp:cons "databases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "deploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-cluster-databases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-kx-cluster-databases-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-kx-cluster-databases-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-kx-cluster-databases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-kx-cluster-databases-response
                    'make-update-kx-cluster-databases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-cluster-databases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-cluster-databases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-cluster-databases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-kx-database-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-update-kx-database-request-environment-id
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentId")
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-update-kx-database-request-database-name
                         :shape "DatabaseName" :location "uri" :location-name
                         "databaseName")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-kx-database-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor
                         struct-shape-update-kx-database-request-client-token
                         :shape "ClientTokenString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-kx-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-kx-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-kx-database-request
                    'make-update-kx-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-kx-database-response common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-update-kx-database-response-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-update-kx-database-response-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-kx-database-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-kx-database-response-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-kx-database-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-kx-database-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-kx-database-response
                    'make-update-kx-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-database-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-database-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-kx-dataview-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-request-environment-id
                         :shape "EnvironmentId" :location "uri" :location-name
                         "environmentId")
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-request-database-name
                         :shape "DatabaseName" :location "uri" :location-name
                         "databaseName")
                        (dataview-name :initarg :dataview-name :initform
                         (common-lisp:error ":dataviewname is required") :type
                         (common-lisp:or kx-dataview-name common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-request-dataview-name
                         :shape "KxDataviewName" :location "uri" :location-name
                         "dataviewName")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (changeset-id :initarg :changeset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-request-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segment-configurations :initarg
                         :segment-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-dataview-segment-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-request-segment-configurations
                         :shape "KxDataviewSegmentConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-request-client-token
                         :shape "ClientTokenString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-kx-dataview-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-kx-dataview-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-kx-dataview-request
                    'make-update-kx-dataview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-dataview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-dataview-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segment-configurations))
      (common-lisp:list
       (common-lisp:cons "segmentConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-dataview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-kx-dataview-response common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-response-environment-id
                         :shape "EnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-response-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataview-name :initarg :dataview-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-dataview-name common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-response-dataview-name
                         :shape "KxDataviewName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (az-mode :initarg :az-mode :initform common-lisp:nil
                         :type (common-lisp:or kx-az-mode common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-response-az-mode
                         :shape "KxAzMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-response-availability-zone-id
                         :shape "AvailabilityZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (changeset-id :initarg :changeset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-response-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segment-configurations :initarg
                         :segment-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-dataview-segment-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-response-segment-configurations
                         :shape "KxDataviewSegmentConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (active-versions :initarg :active-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-dataview-active-version-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-response-active-versions
                         :shape "KxDataviewActiveVersionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-dataview-status common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-response-status :shape
                         "KxDataviewStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-update :initarg :auto-update :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanValue| common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-response-auto-update
                         :shape "booleanValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-kx-dataview-response-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-kx-dataview-response-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-kx-dataview-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-kx-dataview-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-kx-dataview-response
                    'make-update-kx-dataview-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-dataview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-dataview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataview-name))
      (common-lisp:list
       (common-lisp:cons "dataviewName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'az-mode))
      (common-lisp:list
       (common-lisp:cons "azMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segment-configurations))
      (common-lisp:list
       (common-lisp:cons "segmentConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-versions))
      (common-lisp:list
       (common-lisp:cons "activeVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-update))
      (common-lisp:list
       (common-lisp:cons "autoUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-dataview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-kx-environment-network-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-update-kx-environment-network-request-environment-id
                         :shape "IdType" :location "uri" :location-name
                         "environmentId")
                        (transit-gateway-configuration :initarg
                         :transit-gateway-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-network-request-transit-gateway-configuration
                         :shape "TransitGatewayConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-dnsconfiguration :initarg
                         :custom-dnsconfiguration :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-dnsconfiguration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-network-request-custom-dnsconfiguration
                         :shape "CustomDNSConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-network-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-kx-environment-network-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-kx-environment-network-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-kx-environment-network-request
                    'make-update-kx-environment-network-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-environment-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-environment-network-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-configuration))
      (common-lisp:list
       (common-lisp:cons "transitGatewayConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-dnsconfiguration))
      (common-lisp:list
       (common-lisp:cons "customDNSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-environment-network-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-kx-environment-network-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or kx-environment-name common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-network-response-name
                         :shape "KxEnvironmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-update-kx-environment-network-response-environment-id
                         :shape "IdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-update-kx-environment-network-response-aws-account-id
                         :shape "IdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or environment-status common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-network-response-status
                         :shape "EnvironmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tgw-status :initarg :tgw-status :initform
                         common-lisp:nil :type
                         (common-lisp:or |tgwStatus| common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-network-response-tgw-status
                         :shape "tgwStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dns-status :initarg :dns-status :initform
                         common-lisp:nil :type
                         (common-lisp:or |dnsStatus| common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-network-response-dns-status
                         :shape "dnsStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-error-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-network-response-error-message
                         :shape "EnvironmentErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-network-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-arn :initarg :environment-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-network-response-environment-arn
                         :shape "EnvironmentArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-update-kx-environment-network-response-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dedicated-service-account-id :initarg
                         :dedicated-service-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-update-kx-environment-network-response-dedicated-service-account-id
                         :shape "IdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-gateway-configuration :initarg
                         :transit-gateway-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-network-response-transit-gateway-configuration
                         :shape "TransitGatewayConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-dnsconfiguration :initarg
                         :custom-dnsconfiguration :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-dnsconfiguration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-network-response-custom-dnsconfiguration
                         :shape "CustomDNSConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-kx-environment-network-response-creation-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-timestamp :initarg :update-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-kx-environment-network-response-update-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-ids :initarg :availability-zone-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-network-response-availability-zone-ids
                         :shape "AvailabilityZoneIds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-kx-environment-network-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-kx-environment-network-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-kx-environment-network-response
                    'make-update-kx-environment-network-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-environment-network-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-environment-network-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tgw-status))
      (common-lisp:list
       (common-lisp:cons "tgwStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-status))
      (common-lisp:list
       (common-lisp:cons "dnsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-arn))
      (common-lisp:list
       (common-lisp:cons "environmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-service-account-id))
      (common-lisp:list
       (common-lisp:cons "dedicatedServiceAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-configuration))
      (common-lisp:list
       (common-lisp:cons "transitGatewayConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-dnsconfiguration))
      (common-lisp:list
       (common-lisp:cons "customDNSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "creationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-timestamp))
      (common-lisp:list
       (common-lisp:cons "updateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-ids))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-environment-network-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-kx-environment-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-update-kx-environment-request-environment-id
                         :shape "IdType" :location "uri" :location-name
                         "environmentId")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or kx-environment-name common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-request-name :shape
                         "KxEnvironmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-kx-environment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-kx-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-kx-environment-request
                    'make-update-kx-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-kx-environment-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or kx-environment-name common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-response-name
                         :shape "KxEnvironmentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-update-kx-environment-response-environment-id
                         :shape "IdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-update-kx-environment-response-aws-account-id
                         :shape "IdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or environment-status common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-response-status
                         :shape "EnvironmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tgw-status :initarg :tgw-status :initform
                         common-lisp:nil :type
                         (common-lisp:or |tgwStatus| common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-response-tgw-status
                         :shape "tgwStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dns-status :initarg :dns-status :initform
                         common-lisp:nil :type
                         (common-lisp:or |dnsStatus| common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-response-dns-status
                         :shape "dnsStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-error-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-response-error-message
                         :shape "EnvironmentErrorMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-arn :initarg :environment-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-response-environment-arn
                         :shape "EnvironmentArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-update-kx-environment-response-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dedicated-service-account-id :initarg
                         :dedicated-service-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-update-kx-environment-response-dedicated-service-account-id
                         :shape "IdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-gateway-configuration :initarg
                         :transit-gateway-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-response-transit-gateway-configuration
                         :shape "TransitGatewayConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-dnsconfiguration :initarg
                         :custom-dnsconfiguration :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-dnsconfiguration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-response-custom-dnsconfiguration
                         :shape "CustomDNSConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-kx-environment-response-creation-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-timestamp :initarg :update-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-kx-environment-response-update-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-ids :initarg :availability-zone-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-environment-response-availability-zone-ids
                         :shape "AvailabilityZoneIds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-kx-environment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-kx-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-kx-environment-response
                    'make-update-kx-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tgw-status))
      (common-lisp:list
       (common-lisp:cons "tgwStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-status))
      (common-lisp:list
       (common-lisp:cons "dnsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-arn))
      (common-lisp:list
       (common-lisp:cons "environmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-service-account-id))
      (common-lisp:list
       (common-lisp:cons "dedicatedServiceAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-configuration))
      (common-lisp:list
       (common-lisp:cons "transitGatewayConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-dnsconfiguration))
      (common-lisp:list
       (common-lisp:cons "customDNSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "creationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-timestamp))
      (common-lisp:list
       (common-lisp:cons "updateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-ids))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-kx-user-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-update-kx-user-request-environment-id
                         :shape "IdType" :location "uri" :location-name
                         "environmentId")
                        (user-name :initarg :user-name :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or kx-user-name-string common-lisp:null)
                         :accessor
                         struct-shape-update-kx-user-request-user-name :shape
                         "KxUserNameString" :location "uri" :location-name
                         "userName")
                        (iam-role :initarg :iam-role :initform
                         (common-lisp:error ":iamrole is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-update-kx-user-request-iam-role :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-kx-user-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-kx-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-kx-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-kx-user-request 'make-update-kx-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-kx-user-response common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-user-name-string common-lisp:null)
                         :accessor
                         struct-shape-update-kx-user-response-user-name :shape
                         "KxUserNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-arn :initarg :user-arn :initform common-lisp:nil
                         :type (common-lisp:or kx-user-arn common-lisp:null)
                         :accessor
                         struct-shape-update-kx-user-response-user-arn :shape
                         "KxUserArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-update-kx-user-response-environment-id
                         :shape "IdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-role :initarg :iam-role :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-kx-user-response-iam-role :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-kx-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-kx-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-kx-user-response 'make-update-kx-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "userName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-kx-volume-request common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-request-environment-id
                         :shape "KxEnvironmentId" :location "uri"
                         :location-name "environmentId")
                        (volume-name :initarg :volume-name :initform
                         (common-lisp:error ":volumename is required") :type
                         (common-lisp:or kx-volume-name common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-request-volume-name
                         :shape "KxVolumeName" :location "uri" :location-name
                         "volumeName")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-request-client-token
                         :shape "ClientTokenString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nas1configuration :initarg :nas1configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-nas1configuration common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-request-nas1configuration
                         :shape "KxNAS1Configuration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-kx-volume-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-kx-volume-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-kx-volume-request 'make-update-kx-volume-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-volume-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nas1configuration))
      (common-lisp:list
       (common-lisp:cons "nas1Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-kx-volume-response common-lisp:nil
                       ((environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-environment-id common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-response-environment-id
                         :shape "KxEnvironmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-name :initarg :volume-name :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-name common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-response-volume-name
                         :shape "KxVolumeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-type :initarg :volume-type :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-type common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-response-volume-type
                         :shape "KxVolumeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-arn :initarg :volume-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-arn common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-response-volume-arn
                         :shape "KxVolumeArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nas1configuration :initarg :nas1configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-nas1configuration common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-response-nas1configuration
                         :shape "KxNAS1Configuration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or kx-volume-status common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-response-status :shape
                         "KxVolumeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or kx-volume-status-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-response-status-reason
                         :shape "KxVolumeStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-kx-volume-response-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (az-mode :initarg :az-mode :initform common-lisp:nil
                         :type (common-lisp:or kx-az-mode common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-response-az-mode :shape
                         "KxAzMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone-ids :initarg :availability-zone-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-response-availability-zone-ids
                         :shape "AvailabilityZoneIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-response-last-modified-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attached-clusters :initarg :attached-clusters
                         :initform common-lisp:nil :type
                         (common-lisp:or kx-attached-clusters common-lisp:null)
                         :accessor
                         struct-shape-update-kx-volume-response-attached-clusters
                         :shape "KxAttachedClusters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-kx-volume-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-kx-volume-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-kx-volume-response
                    'make-update-kx-volume-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-volume-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-volume-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-name))
      (common-lisp:list
       (common-lisp:cons "volumeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "volumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-arn))
      (common-lisp:list
       (common-lisp:cons "volumeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nas1configuration))
      (common-lisp:list
       (common-lisp:cons "nas1Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'az-mode))
      (common-lisp:list
       (common-lisp:cons "azMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-ids))
      (common-lisp:list
       (common-lisp:cons "availabilityZoneIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-clusters))
      (common-lisp:list
       (common-lisp:cons "attachedClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-kx-volume-response))
   common-lisp:nil))
(common-lisp:deftype valid-cidrblock () 'common-lisp:string)
(common-lisp:deftype valid-cidrspace () 'common-lisp:string)
(common-lisp:deftype valid-hostname () 'common-lisp:string)
(common-lisp:deftype valid-ipaddress () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (finspace-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass volume common-lisp:nil
                       ((volume-name :initarg :volume-name :initform
                         common-lisp:nil :type
                         (common-lisp:or volume-name common-lisp:null)
                         :accessor struct-shape-volume-volume-name :shape
                         "VolumeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (volume-type :initarg :volume-type :initform
                         common-lisp:nil :type
                         (common-lisp:or volume-type common-lisp:null)
                         :accessor struct-shape-volume-volume-type :shape
                         "VolumeType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-volume
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'volume
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'volume 'make-volume))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-name))
      (common-lisp:list
       (common-lisp:cons "volumeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "volumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume))
   common-lisp:nil))
(common-lisp:deftype volume-name () 'common-lisp:string)
(common-lisp:deftype volume-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype volumes () '(trivial-types:proper-list volume))
 (common-lisp:defun make-volumes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpc-configuration common-lisp:nil
                       ((vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or vpc-id-string common-lisp:null)
                         :accessor struct-shape-vpc-configuration-vpc-id :shape
                         "VpcIdString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-vpc-configuration-security-group-ids
                         :shape "SecurityGroupIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-id-list common-lisp:null)
                         :accessor struct-shape-vpc-configuration-subnet-ids
                         :shape "SubnetIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ipaddress-type common-lisp:null)
                         :accessor
                         struct-shape-vpc-configuration-ip-address-type :shape
                         "IPAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-configuration 'make-vpc-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-configuration))
   common-lisp:nil))
(common-lisp:deftype vpc-id-string () 'common-lisp:string)
(common-lisp:deftype |arn| () 'common-lisp:string)
(common-lisp:deftype |booleanValue| () 'common-lisp:boolean)
(common-lisp:deftype |dnsStatus| () 'common-lisp:string)
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:deftype |numBytes| () 'common-lisp:integer)
(common-lisp:deftype |numChangesets| () 'common-lisp:integer)
(common-lisp:deftype |numFiles| () 'common-lisp:integer)
(common-lisp:deftype |stringValueLength1to255| () 'common-lisp:string)
(common-lisp:deftype |tgwStatus| () 'common-lisp:string)
(common-lisp:deftype |url| () 'common-lisp:string)
(common-lisp:deftype |urn| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description kms-key-id tags
                     federation-mode federation-parameters superuser-parameters
                     data-bundles)
   (common-lisp:declare
    (common-lisp:ignorable name description kms-key-id tags federation-mode
     federation-parameters superuser-parameters data-bundles))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/environment"
                                                        "CreateEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-environment))
(common-lisp:progn
 (common-lisp:defun create-kx-changeset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id database-name
                     change-requests client-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id database-name change-requests
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-kx-changeset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/databases/~A/changesets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'database-name))))
                                                        "CreateKxChangeset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-kx-changeset))
(common-lisp:progn
 (common-lisp:defun create-kx-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token environment-id cluster-name
                     cluster-type tickerplant-log-configuration databases
                     cache-storage-configurations auto-scaling-configuration
                     cluster-description capacity-configuration release-label
                     vpc-configuration initialization-script
                     command-line-arguments code execution-role
                     savedown-storage-configuration az-mode
                     availability-zone-id tags scaling-group-configuration)
   (common-lisp:declare
    (common-lisp:ignorable client-token environment-id cluster-name
     cluster-type tickerplant-log-configuration databases
     cache-storage-configurations auto-scaling-configuration
     cluster-description capacity-configuration release-label vpc-configuration
     initialization-script command-line-arguments code execution-role
     savedown-storage-configuration az-mode availability-zone-id tags
     scaling-group-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-kx-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/clusters"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "CreateKxCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-kx-cluster))
(common-lisp:progn
 (common-lisp:defun create-kx-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id database-name description
                     tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id database-name description tags
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-kx-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/databases"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "CreateKxDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-kx-database))
(common-lisp:progn
 (common-lisp:defun create-kx-dataview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id database-name
                     dataview-name az-mode availability-zone-id changeset-id
                     segment-configurations auto-update description tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id database-name dataview-name az-mode
     availability-zone-id changeset-id segment-configurations auto-update
     description tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-kx-dataview-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/databases/~A/dataviews"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'database-name))))
                                                        "CreateKxDataview"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-kx-dataview))
(common-lisp:progn
 (common-lisp:defun create-kx-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description kms-key-id tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable name description kms-key-id tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-kx-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/kx/environments"
                                                        "CreateKxEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-kx-environment))
(common-lisp:progn
 (common-lisp:defun create-kx-scaling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token environment-id
                     scaling-group-name host-type availability-zone-id tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token environment-id scaling-group-name
     host-type availability-zone-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-kx-scaling-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/scalingGroups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "CreateKxScalingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-kx-scaling-group))
(common-lisp:progn
 (common-lisp:defun create-kx-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id user-name iam-role tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id user-name iam-role tags
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-kx-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/users"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "CreateKxUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-kx-user))
(common-lisp:progn
 (common-lisp:defun create-kx-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token environment-id volume-type
                     volume-name description nas1configuration az-mode
                     availability-zone-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token environment-id volume-type volume-name
     description nas1configuration az-mode availability-zone-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-kx-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/kxvolumes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "CreateKxVolume"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-kx-volume))
(common-lisp:progn
 (common-lisp:defun delete-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id)
   (common-lisp:declare (common-lisp:ignorable environment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/environment/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "DeleteEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-environment))
(common-lisp:progn
 (common-lisp:defun delete-kx-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id cluster-name client-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id cluster-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-kx-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/clusters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-name))))
                                                        "DeleteKxCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-kx-cluster))
(common-lisp:progn
 (common-lisp:defun delete-kx-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id database-name
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id database-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-kx-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/databases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'database-name))))
                                                        "DeleteKxDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-kx-database))
(common-lisp:progn
 (common-lisp:defun delete-kx-dataview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id database-name
                     dataview-name client-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id database-name dataview-name
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-kx-dataview-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/databases/~A/dataviews/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'database-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataview-name))))
                                                        "DeleteKxDataview"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-kx-dataview))
(common-lisp:progn
 (common-lisp:defun delete-kx-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id client-token)
   (common-lisp:declare (common-lisp:ignorable environment-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-kx-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "DeleteKxEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-kx-environment))
(common-lisp:progn
 (common-lisp:defun delete-kx-scaling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id scaling-group-name
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id scaling-group-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-kx-scaling-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/scalingGroups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scaling-group-name))))
                                                        "DeleteKxScalingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-kx-scaling-group))
(common-lisp:progn
 (common-lisp:defun delete-kx-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name environment-id client-token)
   (common-lisp:declare
    (common-lisp:ignorable user-name environment-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-kx-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-name))))
                                                        "DeleteKxUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-kx-user))
(common-lisp:progn
 (common-lisp:defun delete-kx-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id volume-name client-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id volume-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-kx-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/kxvolumes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'volume-name))))
                                                        "DeleteKxVolume"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-kx-volume))
(common-lisp:progn
 (common-lisp:defun get-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id)
   (common-lisp:declare (common-lisp:ignorable environment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/environment/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "GetEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-environment))
(common-lisp:progn
 (common-lisp:defun get-kx-changeset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id database-name
                     changeset-id)
   (common-lisp:declare
    (common-lisp:ignorable environment-id database-name changeset-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-kx-changeset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/databases/~A/changesets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'database-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'changeset-id))))
                                                        "GetKxChangeset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-kx-changeset))
(common-lisp:progn
 (common-lisp:defun get-kx-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id cluster-name)
   (common-lisp:declare (common-lisp:ignorable environment-id cluster-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-kx-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/clusters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-name))))
                                                        "GetKxCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-kx-cluster))
(common-lisp:progn
 (common-lisp:defun get-kx-connection-string
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-arn environment-id cluster-name)
   (common-lisp:declare
    (common-lisp:ignorable user-arn environment-id cluster-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-kx-connection-string-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/connectionString"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "GetKxConnectionString"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-kx-connection-string))
(common-lisp:progn
 (common-lisp:defun get-kx-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id database-name)
   (common-lisp:declare (common-lisp:ignorable environment-id database-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-kx-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/databases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'database-name))))
                                                        "GetKxDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-kx-database))
(common-lisp:progn
 (common-lisp:defun get-kx-dataview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id database-name
                     dataview-name)
   (common-lisp:declare
    (common-lisp:ignorable environment-id database-name dataview-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-kx-dataview-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/databases/~A/dataviews/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'database-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataview-name))))
                                                        "GetKxDataview"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-kx-dataview))
(common-lisp:progn
 (common-lisp:defun get-kx-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id)
   (common-lisp:declare (common-lisp:ignorable environment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-kx-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "GetKxEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-kx-environment))
(common-lisp:progn
 (common-lisp:defun get-kx-scaling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id scaling-group-name)
   (common-lisp:declare
    (common-lisp:ignorable environment-id scaling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-kx-scaling-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/scalingGroups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scaling-group-name))))
                                                        "GetKxScalingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-kx-scaling-group))
(common-lisp:progn
 (common-lisp:defun get-kx-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name environment-id)
   (common-lisp:declare (common-lisp:ignorable user-name environment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-kx-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-name))))
                                                        "GetKxUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-kx-user))
(common-lisp:progn
 (common-lisp:defun get-kx-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id volume-name)
   (common-lisp:declare (common-lisp:ignorable environment-id volume-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-kx-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/kxvolumes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'volume-name))))
                                                        "GetKxVolume"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-kx-volume))
(common-lisp:progn
 (common-lisp:defun list-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-environments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/environment"
                                                        "ListEnvironments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-environments))
(common-lisp:progn
 (common-lisp:defun list-kx-changesets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id database-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable environment-id database-name next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-kx-changesets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/databases/~A/changesets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'database-name))))
                                                        "ListKxChangesets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-kx-changesets))
(common-lisp:progn
 (common-lisp:defun list-kx-cluster-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id cluster-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable environment-id cluster-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-kx-cluster-nodes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/clusters/~A/nodes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-name))))
                                                        "ListKxClusterNodes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-kx-cluster-nodes))
(common-lisp:progn
 (common-lisp:defun list-kx-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id cluster-type max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id cluster-type max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-kx-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/clusters"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "ListKxClusters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-kx-clusters))
(common-lisp:progn
 (common-lisp:defun list-kx-databases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable environment-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-kx-databases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/databases"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "ListKxDatabases"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-kx-databases))
(common-lisp:progn
 (common-lisp:defun list-kx-dataviews
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id database-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable environment-id database-name next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-kx-dataviews-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/databases/~A/dataviews"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'database-name))))
                                                        "ListKxDataviews"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-kx-dataviews))
(common-lisp:progn
 (common-lisp:defun list-kx-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-kx-environments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/kx/environments"
                                                        "ListKxEnvironments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-kx-environments))
(common-lisp:progn
 (common-lisp:defun list-kx-scaling-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-kx-scaling-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/scalingGroups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "ListKxScalingGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-kx-scaling-groups))
(common-lisp:progn
 (common-lisp:defun list-kx-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable environment-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-kx-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/users"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "ListKxUsers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-kx-users))
(common-lisp:progn
 (common-lisp:defun list-kx-volumes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id max-results next-token
                     volume-type)
   (common-lisp:declare
    (common-lisp:ignorable environment-id max-results next-token volume-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-kx-volumes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/kxvolumes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "ListKxVolumes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-kx-volumes))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id name description
                     federation-mode federation-parameters)
   (common-lisp:declare
    (common-lisp:ignorable environment-id name description federation-mode
     federation-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/environment/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "UpdateEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-environment))
(common-lisp:progn
 (common-lisp:defun update-kx-cluster-code-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id cluster-name client-token
                     code initialization-script command-line-arguments
                     deployment-configuration)
   (common-lisp:declare
    (common-lisp:ignorable environment-id cluster-name client-token code
     initialization-script command-line-arguments deployment-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-kx-cluster-code-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/clusters/~A/configuration/code"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-name))))
                                                        "UpdateKxClusterCodeConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-kx-cluster-code-configuration))
(common-lisp:progn
 (common-lisp:defun update-kx-cluster-databases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id cluster-name client-token
                     databases deployment-configuration)
   (common-lisp:declare
    (common-lisp:ignorable environment-id cluster-name client-token databases
     deployment-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-kx-cluster-databases-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/clusters/~A/configuration/databases"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-name))))
                                                        "UpdateKxClusterDatabases"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-kx-cluster-databases))
(common-lisp:progn
 (common-lisp:defun update-kx-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id database-name description
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id database-name description
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-kx-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/databases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'database-name))))
                                                        "UpdateKxDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-kx-database))
(common-lisp:progn
 (common-lisp:defun update-kx-dataview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id database-name
                     dataview-name description changeset-id
                     segment-configurations client-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id database-name dataview-name
     description changeset-id segment-configurations client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-kx-dataview-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/databases/~A/dataviews/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'database-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataview-name))))
                                                        "UpdateKxDataview"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-kx-dataview))
(common-lisp:progn
 (common-lisp:defun update-kx-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id name description
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id name description client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-kx-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "UpdateKxEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-kx-environment))
(common-lisp:progn
 (common-lisp:defun update-kx-environment-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id
                     transit-gateway-configuration custom-dnsconfiguration
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id transit-gateway-configuration
     custom-dnsconfiguration client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-kx-environment-network-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/network"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "UpdateKxEnvironmentNetwork"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-kx-environment-network))
(common-lisp:progn
 (common-lisp:defun update-kx-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id user-name iam-role
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-id user-name iam-role client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-kx-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-name))))
                                                        "UpdateKxUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-kx-user))
(common-lisp:progn
 (common-lisp:defun update-kx-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id volume-name description
                     client-token nas1configuration)
   (common-lisp:declare
    (common-lisp:ignorable environment-id volume-name description client-token
     nas1configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-kx-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/kx/environments/~A/kxvolumes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'volume-name))))
                                                        "UpdateKxVolume"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-kx-volume))
