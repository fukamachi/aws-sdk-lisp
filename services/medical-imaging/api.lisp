;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/medical-imaging/api
  (:use)
  (:nicknames #:aws/medical-imaging)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/medical-imaging/api)
(common-lisp:progn
 (common-lisp:define-condition medical-imaging-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'medical-imaging-error))
(common-lisp:progn
 (common-lisp:defclass medical-imaging-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "medical-imaging"
                        :api-version "2023-07-19" :host-prefix
                        "medical-imaging" :signing-name "medical-imaging"
                        :global-host common-lisp:nil))
 (common-lisp:export 'medical-imaging-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (medical-imaging-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (medical-imaging-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass copy-destination-image-set common-lisp:nil
                       ((image-set-id :initarg :image-set-id :initform
                         (common-lisp:error ":imagesetid is required") :type
                         (common-lisp:or image-set-id common-lisp:null)
                         :accessor
                         struct-shape-copy-destination-image-set-image-set-id
                         :shape "ImageSetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-version-id :initarg :latest-version-id
                         :initform
                         (common-lisp:error ":latestversionid is required")
                         :type
                         (common-lisp:or image-set-external-version-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-destination-image-set-latest-version-id
                         :shape "ImageSetExternalVersionId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-destination-image-set
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-destination-image-set
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-destination-image-set
                    'make-copy-destination-image-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-destination-image-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-destination-image-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-id))
      (common-lisp:list
       (common-lisp:cons "imageSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version-id))
      (common-lisp:list
       (common-lisp:cons "latestVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-destination-image-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-destination-image-set-properties common-lisp:nil
                       ((image-set-id :initarg :image-set-id :initform
                         (common-lisp:error ":imagesetid is required") :type
                         (common-lisp:or image-set-id common-lisp:null)
                         :accessor
                         struct-shape-copy-destination-image-set-properties-image-set-id
                         :shape "ImageSetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-version-id :initarg :latest-version-id
                         :initform
                         (common-lisp:error ":latestversionid is required")
                         :type
                         (common-lisp:or image-set-external-version-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-destination-image-set-properties-latest-version-id
                         :shape "ImageSetExternalVersionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (image-set-state :initarg :image-set-state :initform
                         common-lisp:nil :type
                         (common-lisp:or image-set-state common-lisp:null)
                         :accessor
                         struct-shape-copy-destination-image-set-properties-image-set-state
                         :shape "ImageSetState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-set-workflow-status :initarg
                         :image-set-workflow-status :initform common-lisp:nil
                         :type
                         (common-lisp:or image-set-workflow-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-destination-image-set-properties-image-set-workflow-status
                         :shape "ImageSetWorkflowStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-copy-destination-image-set-properties-created-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-copy-destination-image-set-properties-updated-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (image-set-arn :initarg :image-set-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-copy-destination-image-set-properties-image-set-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-destination-image-set-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-destination-image-set-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-destination-image-set-properties
                    'make-copy-destination-image-set-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-destination-image-set-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-destination-image-set-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-id))
      (common-lisp:list
       (common-lisp:cons "imageSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version-id))
      (common-lisp:list
       (common-lisp:cons "latestVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-state))
      (common-lisp:list
       (common-lisp:cons "imageSetState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-set-workflow-status))
      (common-lisp:list
       (common-lisp:cons "imageSetWorkflowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-arn))
      (common-lisp:list
       (common-lisp:cons "imageSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-destination-image-set-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-image-set-information common-lisp:nil
                       ((source-image-set :initarg :source-image-set :initform
                         (common-lisp:error ":sourceimageset is required")
                         :type
                         (common-lisp:or copy-source-image-set-information
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-image-set-information-source-image-set
                         :shape "CopySourceImageSetInformation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination-image-set :initarg :destination-image-set
                         :initform common-lisp:nil :type
                         (common-lisp:or copy-destination-image-set
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-image-set-information-destination-image-set
                         :shape "CopyDestinationImageSet" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-image-set-information
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-image-set-information
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-image-set-information
                    'make-copy-image-set-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-image-set))
      (common-lisp:list
       (common-lisp:cons "sourceImageSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-image-set))
      (common-lisp:list
       (common-lisp:cons "destinationImageSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-image-set-request common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-copy-image-set-request-datastore-id
                         :shape "DatastoreId" :location "uri" :location-name
                         "datastoreId")
                        (source-image-set-id :initarg :source-image-set-id
                         :initform
                         (common-lisp:error ":sourceimagesetid is required")
                         :type (common-lisp:or image-set-id common-lisp:null)
                         :accessor
                         struct-shape-copy-image-set-request-source-image-set-id
                         :shape "ImageSetId" :location "uri" :location-name
                         "sourceImageSetId")
                        (copy-image-set-information :initarg
                         :copy-image-set-information :initform
                         (common-lisp:error
                          ":copyimagesetinformation is required")
                         :type
                         (common-lisp:or copy-image-set-information
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-image-set-request-copy-image-set-information
                         :shape "CopyImageSetInformation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-image-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-image-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-image-set-request 'make-copy-image-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-image-set-information))
      (common-lisp:list
       (common-lisp:cons "copyImageSetInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'copy-image-set-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass copy-image-set-response common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-copy-image-set-response-datastore-id
                         :shape "DatastoreId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-image-set-properties :initarg
                         :source-image-set-properties :initform
                         (common-lisp:error
                          ":sourceimagesetproperties is required")
                         :type
                         (common-lisp:or copy-source-image-set-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-image-set-response-source-image-set-properties
                         :shape "CopySourceImageSetProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination-image-set-properties :initarg
                         :destination-image-set-properties :initform
                         (common-lisp:error
                          ":destinationimagesetproperties is required")
                         :type
                         (common-lisp:or copy-destination-image-set-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-image-set-response-destination-image-set-properties
                         :shape "CopyDestinationImageSetProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-image-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-image-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-image-set-response 'make-copy-image-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-image-set-properties))
      (common-lisp:list
       (common-lisp:cons "sourceImageSetProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-image-set-properties))
      (common-lisp:list
       (common-lisp:cons "destinationImageSetProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-source-image-set-information common-lisp:nil
                       ((latest-version-id :initarg :latest-version-id
                         :initform
                         (common-lisp:error ":latestversionid is required")
                         :type
                         (common-lisp:or image-set-external-version-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-source-image-set-information-latest-version-id
                         :shape "ImageSetExternalVersionId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-source-image-set-information
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-source-image-set-information
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-source-image-set-information
                    'make-copy-source-image-set-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-source-image-set-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-source-image-set-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version-id))
      (common-lisp:list
       (common-lisp:cons "latestVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-source-image-set-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-source-image-set-properties common-lisp:nil
                       ((image-set-id :initarg :image-set-id :initform
                         (common-lisp:error ":imagesetid is required") :type
                         (common-lisp:or image-set-id common-lisp:null)
                         :accessor
                         struct-shape-copy-source-image-set-properties-image-set-id
                         :shape "ImageSetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-version-id :initarg :latest-version-id
                         :initform
                         (common-lisp:error ":latestversionid is required")
                         :type
                         (common-lisp:or image-set-external-version-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-source-image-set-properties-latest-version-id
                         :shape "ImageSetExternalVersionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (image-set-state :initarg :image-set-state :initform
                         common-lisp:nil :type
                         (common-lisp:or image-set-state common-lisp:null)
                         :accessor
                         struct-shape-copy-source-image-set-properties-image-set-state
                         :shape "ImageSetState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-set-workflow-status :initarg
                         :image-set-workflow-status :initform common-lisp:nil
                         :type
                         (common-lisp:or image-set-workflow-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-source-image-set-properties-image-set-workflow-status
                         :shape "ImageSetWorkflowStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-copy-source-image-set-properties-created-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-copy-source-image-set-properties-updated-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (image-set-arn :initarg :image-set-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-copy-source-image-set-properties-image-set-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-source-image-set-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-source-image-set-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-source-image-set-properties
                    'make-copy-source-image-set-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-source-image-set-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-source-image-set-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-id))
      (common-lisp:list
       (common-lisp:cons "imageSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version-id))
      (common-lisp:list
       (common-lisp:cons "latestVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-state))
      (common-lisp:list
       (common-lisp:cons "imageSetState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-set-workflow-status))
      (common-lisp:list
       (common-lisp:cons "imageSetWorkflowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-arn))
      (common-lisp:list
       (common-lisp:cons "imageSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-source-image-set-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-datastore-request common-lisp:nil
                       ((datastore-name :initarg :datastore-name :initform
                         common-lisp:nil :type
                         (common-lisp:or datastore-name common-lisp:null)
                         :accessor
                         struct-shape-create-datastore-request-datastore-name
                         :shape "DatastoreName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-datastore-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-datastore-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-create-datastore-request-kms-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-datastore-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-datastore-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-datastore-request 'make-create-datastore-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-name))
      (common-lisp:list
       (common-lisp:cons "datastoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-datastore-response common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-create-datastore-response-datastore-id
                         :shape "DatastoreId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datastore-status :initarg :datastore-status :initform
                         (common-lisp:error ":datastorestatus is required")
                         :type
                         (common-lisp:or datastore-status common-lisp:null)
                         :accessor
                         struct-shape-create-datastore-response-datastore-status
                         :shape "DatastoreStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-datastore-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-datastore-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-datastore-response
                    'make-create-datastore-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-status))
      (common-lisp:list
       (common-lisp:cons "datastoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-response))
   common-lisp:nil))
(common-lisp:deftype dicomaccession-number () 'common-lisp:string)
(common-lisp:deftype dicomattribute ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass dicomimport-job-properties common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-dicomimport-job-properties-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-name :initarg :job-name :initform
                         (common-lisp:error ":jobname is required") :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         struct-shape-dicomimport-job-properties-job-name
                         :shape "JobName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-status :initarg :job-status :initform
                         (common-lisp:error ":jobstatus is required") :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         struct-shape-dicomimport-job-properties-job-status
                         :shape "JobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-dicomimport-job-properties-datastore-id
                         :shape "DatastoreId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform
                         (common-lisp:error ":dataaccessrolearn is required")
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-dicomimport-job-properties-data-access-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ended-at :initarg :ended-at :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-dicomimport-job-properties-ended-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (submitted-at :initarg :submitted-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-dicomimport-job-properties-submitted-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (input-s3uri :initarg :input-s3uri :initform
                         (common-lisp:error ":inputs3uri is required") :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         struct-shape-dicomimport-job-properties-input-s3uri
                         :shape "S3Uri" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-s3uri :initarg :output-s3uri :initform
                         (common-lisp:error ":outputs3uri is required") :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         struct-shape-dicomimport-job-properties-output-s3uri
                         :shape "S3Uri" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor
                         struct-shape-dicomimport-job-properties-message :shape
                         "Message" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dicomimport-job-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dicomimport-job-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dicomimport-job-properties
                    'make-dicomimport-job-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dicomimport-job-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dicomimport-job-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "dataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "endedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-at))
      (common-lisp:list
       (common-lisp:cons "submittedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-s3uri))
      (common-lisp:list
       (common-lisp:cons "inputS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3uri))
      (common-lisp:list
       (common-lisp:cons "outputS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dicomimport-job-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dicomimport-job-summaries ()
   '(trivial-types:proper-list dicomimport-job-summary))
 (common-lisp:defun make-dicomimport-job-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dicomimport-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dicomimport-job-summary common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-dicomimport-job-summary-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-name :initarg :job-name :initform
                         (common-lisp:error ":jobname is required") :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         struct-shape-dicomimport-job-summary-job-name :shape
                         "JobName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-status :initarg :job-status :initform
                         (common-lisp:error ":jobstatus is required") :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         struct-shape-dicomimport-job-summary-job-status :shape
                         "JobStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-dicomimport-job-summary-datastore-id
                         :shape "DatastoreId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-dicomimport-job-summary-data-access-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ended-at :initarg :ended-at :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-dicomimport-job-summary-ended-at :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (submitted-at :initarg :submitted-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-dicomimport-job-summary-submitted-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-dicomimport-job-summary-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dicomimport-job-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dicomimport-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dicomimport-job-summary 'make-dicomimport-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dicomimport-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dicomimport-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "dataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "endedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-at))
      (common-lisp:list
       (common-lisp:cons "submittedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dicomimport-job-summary))
   common-lisp:nil))
(common-lisp:deftype dicomnumber-of-study-related-instances ()
  'common-lisp:integer)
(common-lisp:deftype dicomnumber-of-study-related-series ()
  'common-lisp:integer)
(common-lisp:deftype dicompatient-birth-date () 'common-lisp:string)
(common-lisp:deftype dicompatient-id () 'common-lisp:string)
(common-lisp:deftype dicompatient-name () 'common-lisp:string)
(common-lisp:deftype dicompatient-sex () 'common-lisp:string)
(common-lisp:deftype dicomstudy-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dicomstudy-date-and-time common-lisp:nil
                       ((dicomstudy-date :initarg :dicomstudy-date :initform
                         (common-lisp:error ":dicomstudy-date is required")
                         :type
                         (common-lisp:or dicomstudy-date common-lisp:null)
                         :accessor
                         struct-shape-dicomstudy-date-and-time-dicomstudy-date
                         :shape "DICOMStudyDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dicomstudy-time :initarg :dicomstudy-time :initform
                         common-lisp:nil :type
                         (common-lisp:or dicomstudy-time common-lisp:null)
                         :accessor
                         struct-shape-dicomstudy-date-and-time-dicomstudy-time
                         :shape "DICOMStudyTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dicomstudy-date-and-time
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dicomstudy-date-and-time
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dicomstudy-date-and-time 'make-dicomstudy-date-and-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dicomstudy-date-and-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dicomstudy-date-and-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicomstudy-date))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicomstudy-time))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dicomstudy-date-and-time))
   common-lisp:nil))
(common-lisp:deftype dicomstudy-description () 'common-lisp:string)
(common-lisp:deftype dicomstudy-id () 'common-lisp:string)
(common-lisp:deftype dicomstudy-instance-uid () 'common-lisp:string)
(common-lisp:deftype dicomstudy-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dicomtags common-lisp:nil
                       ((dicompatient-id :initarg :dicompatient-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dicompatient-id common-lisp:null)
                         :accessor struct-shape-dicomtags-dicompatient-id
                         :shape "DICOMPatientId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dicompatient-name :initarg :dicompatient-name
                         :initform common-lisp:nil :type
                         (common-lisp:or dicompatient-name common-lisp:null)
                         :accessor struct-shape-dicomtags-dicompatient-name
                         :shape "DICOMPatientName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dicompatient-birth-date :initarg
                         :dicompatient-birth-date :initform common-lisp:nil
                         :type
                         (common-lisp:or dicompatient-birth-date
                                         common-lisp:null)
                         :accessor
                         struct-shape-dicomtags-dicompatient-birth-date :shape
                         "DICOMPatientBirthDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dicompatient-sex :initarg :dicompatient-sex :initform
                         common-lisp:nil :type
                         (common-lisp:or dicompatient-sex common-lisp:null)
                         :accessor struct-shape-dicomtags-dicompatient-sex
                         :shape "DICOMPatientSex" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dicomstudy-instance-uid :initarg
                         :dicomstudy-instance-uid :initform common-lisp:nil
                         :type
                         (common-lisp:or dicomstudy-instance-uid
                                         common-lisp:null)
                         :accessor
                         struct-shape-dicomtags-dicomstudy-instance-uid :shape
                         "DICOMStudyInstanceUID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dicomstudy-id :initarg :dicomstudy-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dicomstudy-id common-lisp:null)
                         :accessor struct-shape-dicomtags-dicomstudy-id :shape
                         "DICOMStudyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dicomstudy-description :initarg
                         :dicomstudy-description :initform common-lisp:nil
                         :type
                         (common-lisp:or dicomstudy-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-dicomtags-dicomstudy-description :shape
                         "DICOMStudyDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dicomnumber-of-study-related-series :initarg
                         :dicomnumber-of-study-related-series :initform
                         common-lisp:nil :type
                         (common-lisp:or dicomnumber-of-study-related-series
                                         common-lisp:null)
                         :accessor
                         struct-shape-dicomtags-dicomnumber-of-study-related-series
                         :shape "DICOMNumberOfStudyRelatedSeries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dicomnumber-of-study-related-instances :initarg
                         :dicomnumber-of-study-related-instances :initform
                         common-lisp:nil :type
                         (common-lisp:or dicomnumber-of-study-related-instances
                                         common-lisp:null)
                         :accessor
                         struct-shape-dicomtags-dicomnumber-of-study-related-instances
                         :shape "DICOMNumberOfStudyRelatedInstances" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dicomaccession-number :initarg :dicomaccession-number
                         :initform common-lisp:nil :type
                         (common-lisp:or dicomaccession-number
                                         common-lisp:null)
                         :accessor struct-shape-dicomtags-dicomaccession-number
                         :shape "DICOMAccessionNumber" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dicomstudy-date :initarg :dicomstudy-date :initform
                         common-lisp:nil :type
                         (common-lisp:or dicomstudy-date common-lisp:null)
                         :accessor struct-shape-dicomtags-dicomstudy-date
                         :shape "DICOMStudyDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dicomstudy-time :initarg :dicomstudy-time :initform
                         common-lisp:nil :type
                         (common-lisp:or dicomstudy-time common-lisp:null)
                         :accessor struct-shape-dicomtags-dicomstudy-time
                         :shape "DICOMStudyTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dicomtags
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dicomtags
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dicomtags 'make-dicomtags))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dicomtags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dicomtags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicompatient-id))
      (common-lisp:list
       (common-lisp:cons "DICOMPatientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicompatient-name))
      (common-lisp:list
       (common-lisp:cons "DICOMPatientName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicompatient-birth-date))
      (common-lisp:list
       (common-lisp:cons "DICOMPatientBirthDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicompatient-sex))
      (common-lisp:list
       (common-lisp:cons "DICOMPatientSex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicomstudy-instance-uid))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyInstanceUID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicomstudy-id))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicomstudy-description))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicomnumber-of-study-related-series))
      (common-lisp:list
       (common-lisp:cons "DICOMNumberOfStudyRelatedSeries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicomnumber-of-study-related-instances))
      (common-lisp:list
       (common-lisp:cons "DICOMNumberOfStudyRelatedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicomaccession-number))
      (common-lisp:list
       (common-lisp:cons "DICOMAccessionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicomstudy-date))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicomstudy-time))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dicomtags))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dicomupdates common-lisp:nil
                       ((removable-attributes :initarg :removable-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or dicomattribute common-lisp:null)
                         :accessor
                         struct-shape-dicomupdates-removable-attributes :shape
                         "DICOMAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updatable-attributes :initarg :updatable-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or dicomattribute common-lisp:null)
                         :accessor
                         struct-shape-dicomupdates-updatable-attributes :shape
                         "DICOMAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dicomupdates
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dicomupdates
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dicomupdates 'make-dicomupdates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dicomupdates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dicomupdates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'removable-attributes))
      (common-lisp:list
       (common-lisp:cons "removableAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'updatable-attributes))
      (common-lisp:list
       (common-lisp:cons "updatableAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dicomupdates))
   common-lisp:nil))
(common-lisp:deftype datastore-id () 'common-lisp:string)
(common-lisp:deftype datastore-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass datastore-properties common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-datastore-properties-datastore-id :shape
                         "DatastoreId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (datastore-name :initarg :datastore-name :initform
                         (common-lisp:error ":datastorename is required") :type
                         (common-lisp:or datastore-name common-lisp:null)
                         :accessor
                         struct-shape-datastore-properties-datastore-name
                         :shape "DatastoreName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datastore-status :initarg :datastore-status :initform
                         (common-lisp:error ":datastorestatus is required")
                         :type
                         (common-lisp:or datastore-status common-lisp:null)
                         :accessor
                         struct-shape-datastore-properties-datastore-status
                         :shape "DatastoreStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-datastore-properties-kms-key-arn :shape
                         "KmsKeyArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (datastore-arn :initarg :datastore-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-datastore-properties-datastore-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-datastore-properties-created-at :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-datastore-properties-updated-at :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datastore-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'datastore-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'datastore-properties 'make-datastore-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datastore-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datastore-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-name))
      (common-lisp:list
       (common-lisp:cons "datastoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-status))
      (common-lisp:list
       (common-lisp:cons "datastoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-arn))
      (common-lisp:list
       (common-lisp:cons "datastoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datastore-properties))
   common-lisp:nil))
(common-lisp:deftype datastore-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype datastore-summaries ()
   '(trivial-types:proper-list datastore-summary))
 (common-lisp:defun make-datastore-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list datastore-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass datastore-summary common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor struct-shape-datastore-summary-datastore-id
                         :shape "DatastoreId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datastore-name :initarg :datastore-name :initform
                         (common-lisp:error ":datastorename is required") :type
                         (common-lisp:or datastore-name common-lisp:null)
                         :accessor
                         struct-shape-datastore-summary-datastore-name :shape
                         "DatastoreName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datastore-status :initarg :datastore-status :initform
                         (common-lisp:error ":datastorestatus is required")
                         :type
                         (common-lisp:or datastore-status common-lisp:null)
                         :accessor
                         struct-shape-datastore-summary-datastore-status :shape
                         "DatastoreStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datastore-arn :initarg :datastore-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-datastore-summary-datastore-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-datastore-summary-created-at :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-datastore-summary-updated-at :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datastore-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'datastore-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'datastore-summary 'make-datastore-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datastore-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datastore-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-name))
      (common-lisp:list
       (common-lisp:cons "datastoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-status))
      (common-lisp:list
       (common-lisp:cons "datastoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-arn))
      (common-lisp:list
       (common-lisp:cons "datastoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datastore-summary))
   common-lisp:nil))
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-datastore-request common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-delete-datastore-request-datastore-id
                         :shape "DatastoreId" :location "uri" :location-name
                         "datastoreId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-datastore-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-datastore-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-datastore-request 'make-delete-datastore-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datastore-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-datastore-response common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-delete-datastore-response-datastore-id
                         :shape "DatastoreId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datastore-status :initarg :datastore-status :initform
                         (common-lisp:error ":datastorestatus is required")
                         :type
                         (common-lisp:or datastore-status common-lisp:null)
                         :accessor
                         struct-shape-delete-datastore-response-datastore-status
                         :shape "DatastoreStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-datastore-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-datastore-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-datastore-response
                    'make-delete-datastore-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datastore-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datastore-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-status))
      (common-lisp:list
       (common-lisp:cons "datastoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datastore-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-image-set-request common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-delete-image-set-request-datastore-id
                         :shape "DatastoreId" :location "uri" :location-name
                         "datastoreId")
                        (image-set-id :initarg :image-set-id :initform
                         (common-lisp:error ":imagesetid is required") :type
                         (common-lisp:or image-set-id common-lisp:null)
                         :accessor
                         struct-shape-delete-image-set-request-image-set-id
                         :shape "ImageSetId" :location "uri" :location-name
                         "imageSetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-image-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-image-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-image-set-request 'make-delete-image-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-image-set-response common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-delete-image-set-response-datastore-id
                         :shape "DatastoreId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-set-id :initarg :image-set-id :initform
                         (common-lisp:error ":imagesetid is required") :type
                         (common-lisp:or image-set-id common-lisp:null)
                         :accessor
                         struct-shape-delete-image-set-response-image-set-id
                         :shape "ImageSetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-set-state :initarg :image-set-state :initform
                         (common-lisp:error ":imagesetstate is required") :type
                         (common-lisp:or image-set-state common-lisp:null)
                         :accessor
                         struct-shape-delete-image-set-response-image-set-state
                         :shape "ImageSetState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-set-workflow-status :initarg
                         :image-set-workflow-status :initform
                         (common-lisp:error
                          ":imagesetworkflowstatus is required")
                         :type
                         (common-lisp:or image-set-workflow-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-image-set-response-image-set-workflow-status
                         :shape "ImageSetWorkflowStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-image-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-image-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-image-set-response
                    'make-delete-image-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-id))
      (common-lisp:list
       (common-lisp:cons "imageSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-state))
      (common-lisp:list
       (common-lisp:cons "imageSetState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-set-workflow-status))
      (common-lisp:list
       (common-lisp:cons "imageSetWorkflowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dicomimport-job-request common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-get-dicomimport-job-request-datastore-id
                         :shape "DatastoreId" :location "uri" :location-name
                         "datastoreId")
                        (job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-get-dicomimport-job-request-job-id :shape
                         "JobId" :location "uri" :location-name "jobId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-dicomimport-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-dicomimport-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-dicomimport-job-request
                    'make-get-dicomimport-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dicomimport-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dicomimport-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dicomimport-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dicomimport-job-response common-lisp:nil
                       ((job-properties :initarg :job-properties :initform
                         (common-lisp:error ":jobproperties is required") :type
                         (common-lisp:or dicomimport-job-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-dicomimport-job-response-job-properties
                         :shape "DICOMImportJobProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-dicomimport-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-dicomimport-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-dicomimport-job-response
                    'make-get-dicomimport-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dicomimport-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dicomimport-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-properties))
      (common-lisp:list
       (common-lisp:cons "jobProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dicomimport-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-datastore-request common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-get-datastore-request-datastore-id :shape
                         "DatastoreId" :location "uri" :location-name
                         "datastoreId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-datastore-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-datastore-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-datastore-request 'make-get-datastore-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datastore-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-datastore-response common-lisp:nil
                       ((datastore-properties :initarg :datastore-properties
                         :initform
                         (common-lisp:error ":datastoreproperties is required")
                         :type
                         (common-lisp:or datastore-properties common-lisp:null)
                         :accessor
                         struct-shape-get-datastore-response-datastore-properties
                         :shape "DatastoreProperties" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-datastore-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-datastore-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-datastore-response 'make-get-datastore-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datastore-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datastore-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datastore-properties))
      (common-lisp:list
       (common-lisp:cons "datastoreProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datastore-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-image-frame-request common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-get-image-frame-request-datastore-id
                         :shape "DatastoreId" :location "uri" :location-name
                         "datastoreId")
                        (image-set-id :initarg :image-set-id :initform
                         (common-lisp:error ":imagesetid is required") :type
                         (common-lisp:or image-set-id common-lisp:null)
                         :accessor
                         struct-shape-get-image-frame-request-image-set-id
                         :shape "ImageSetId" :location "uri" :location-name
                         "imageSetId")
                        (image-frame-information :initarg
                         :image-frame-information :initform
                         (common-lisp:error
                          ":imageframeinformation is required")
                         :type
                         (common-lisp:or image-frame-information
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-image-frame-request-image-frame-information
                         :shape "ImageFrameInformation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-image-frame-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-image-frame-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-image-frame-request 'make-get-image-frame-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-frame-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-frame-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-frame-information))
      (common-lisp:list
       (common-lisp:cons "imageFrameInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-frame-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'image-frame-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-image-frame-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-image-frame-response common-lisp:nil
                       ((image-frame-blob :initarg :image-frame-blob :initform
                         (common-lisp:error ":imageframeblob is required")
                         :type (common-lisp:or payload-blob common-lisp:null)
                         :accessor
                         struct-shape-get-image-frame-response-image-frame-blob
                         :shape "PayloadBlob" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-image-frame-response-content-type
                         :shape "String" :location "header" :location-name
                         "Content-Type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-image-frame-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-image-frame-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-image-frame-response 'make-get-image-frame-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-frame-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-frame-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-frame-blob))
      (common-lisp:list
       (common-lisp:cons "imageFrameBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-frame-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'image-frame-blob))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-image-frame-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-image-set-metadata-request common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-get-image-set-metadata-request-datastore-id
                         :shape "DatastoreId" :location "uri" :location-name
                         "datastoreId")
                        (image-set-id :initarg :image-set-id :initform
                         (common-lisp:error ":imagesetid is required") :type
                         (common-lisp:or image-set-id common-lisp:null)
                         :accessor
                         struct-shape-get-image-set-metadata-request-image-set-id
                         :shape "ImageSetId" :location "uri" :location-name
                         "imageSetId")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or image-set-external-version-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-image-set-metadata-request-version-id
                         :shape "ImageSetExternalVersionId" :location
                         "querystring" :location-name "version"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-image-set-metadata-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-image-set-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-image-set-metadata-request
                    'make-get-image-set-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-image-set-metadata-response common-lisp:nil
                       ((image-set-metadata-blob :initarg
                         :image-set-metadata-blob :initform
                         (common-lisp:error
                          ":imagesetmetadatablob is required")
                         :type
                         (common-lisp:or image-set-metadata-blob
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-image-set-metadata-response-image-set-metadata-blob
                         :shape "ImageSetMetadataBlob" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-image-set-metadata-response-content-type
                         :shape "String" :location "header" :location-name
                         "Content-Type")
                        (content-encoding :initarg :content-encoding :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-image-set-metadata-response-content-encoding
                         :shape "String" :location "header" :location-name
                         "Content-Encoding"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-image-set-metadata-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-image-set-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-image-set-metadata-response
                    'make-get-image-set-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-set-metadata-blob))
      (common-lisp:list
       (common-lisp:cons "imageSetMetadataBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-metadata-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'image-set-metadata-blob))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-metadata-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-image-set-request common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-get-image-set-request-datastore-id :shape
                         "DatastoreId" :location "uri" :location-name
                         "datastoreId")
                        (image-set-id :initarg :image-set-id :initform
                         (common-lisp:error ":imagesetid is required") :type
                         (common-lisp:or image-set-id common-lisp:null)
                         :accessor
                         struct-shape-get-image-set-request-image-set-id :shape
                         "ImageSetId" :location "uri" :location-name
                         "imageSetId")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or image-set-external-version-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-image-set-request-version-id :shape
                         "ImageSetExternalVersionId" :location "querystring"
                         :location-name "version"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-image-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-image-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-image-set-request 'make-get-image-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-image-set-response common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-get-image-set-response-datastore-id
                         :shape "DatastoreId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-set-id :initarg :image-set-id :initform
                         (common-lisp:error ":imagesetid is required") :type
                         (common-lisp:or image-set-id common-lisp:null)
                         :accessor
                         struct-shape-get-image-set-response-image-set-id
                         :shape "ImageSetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         (common-lisp:error ":versionid is required") :type
                         (common-lisp:or image-set-external-version-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-image-set-response-version-id :shape
                         "ImageSetExternalVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-set-state :initarg :image-set-state :initform
                         (common-lisp:error ":imagesetstate is required") :type
                         (common-lisp:or image-set-state common-lisp:null)
                         :accessor
                         struct-shape-get-image-set-response-image-set-state
                         :shape "ImageSetState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-set-workflow-status :initarg
                         :image-set-workflow-status :initform common-lisp:nil
                         :type
                         (common-lisp:or image-set-workflow-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-image-set-response-image-set-workflow-status
                         :shape "ImageSetWorkflowStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-get-image-set-response-created-at :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-get-image-set-response-updated-at :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deleted-at :initarg :deleted-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-get-image-set-response-deleted-at :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-get-image-set-response-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-set-arn :initarg :image-set-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-image-set-response-image-set-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-image-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-image-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-image-set-response 'make-get-image-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-id))
      (common-lisp:list
       (common-lisp:cons "imageSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-state))
      (common-lisp:list
       (common-lisp:cons "imageSetState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-set-workflow-status))
      (common-lisp:list
       (common-lisp:cons "imageSetWorkflowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-at))
      (common-lisp:list
       (common-lisp:cons "deletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-arn))
      (common-lisp:list
       (common-lisp:cons "imageSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-response))
   common-lisp:nil))
(common-lisp:deftype image-frame-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-frame-information common-lisp:nil
                       ((image-frame-id :initarg :image-frame-id :initform
                         (common-lisp:error ":imageframeid is required") :type
                         (common-lisp:or image-frame-id common-lisp:null)
                         :accessor
                         struct-shape-image-frame-information-image-frame-id
                         :shape "ImageFrameId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-frame-information
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-frame-information
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'image-frame-information 'make-image-frame-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-frame-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-frame-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-frame-id))
      (common-lisp:list
       (common-lisp:cons "imageFrameId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-frame-information))
   common-lisp:nil))
(common-lisp:deftype image-set-external-version-id () 'common-lisp:string)
(common-lisp:deftype image-set-id () 'common-lisp:string)
(common-lisp:deftype image-set-metadata-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass image-set-properties common-lisp:nil
                       ((image-set-id :initarg :image-set-id :initform
                         (common-lisp:error ":imagesetid is required") :type
                         (common-lisp:or image-set-id common-lisp:null)
                         :accessor
                         struct-shape-image-set-properties-image-set-id :shape
                         "ImageSetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         (common-lisp:error ":versionid is required") :type
                         (common-lisp:or image-set-external-version-id
                                         common-lisp:null)
                         :accessor struct-shape-image-set-properties-version-id
                         :shape "ImageSetExternalVersionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (image-set-state :initarg :image-set-state :initform
                         (common-lisp:error ":imagesetstate is required") :type
                         (common-lisp:or image-set-state common-lisp:null)
                         :accessor
                         struct-shape-image-set-properties-image-set-state
                         :shape "ImageSetState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-set-workflow-status :initarg
                         :image-set-workflow-status :initform common-lisp:nil
                         :type
                         (common-lisp:or image-set-workflow-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-image-set-properties-image-set-workflow-status
                         :shape "ImageSetWorkflowStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-image-set-properties-created-at :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-image-set-properties-updated-at :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deleted-at :initarg :deleted-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-image-set-properties-deleted-at :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-image-set-properties-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-set-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-set-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'image-set-properties 'make-image-set-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-set-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-set-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-id))
      (common-lisp:list
       (common-lisp:cons "imageSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-state))
      (common-lisp:list
       (common-lisp:cons "imageSetState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-set-workflow-status))
      (common-lisp:list
       (common-lisp:cons "ImageSetWorkflowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-at))
      (common-lisp:list
       (common-lisp:cons "deletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-set-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-set-properties-list ()
   '(trivial-types:proper-list image-set-properties))
 (common-lisp:defun make-image-set-properties-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-set-properties))
   aws-sdk/generator/shape::members))
(common-lisp:deftype image-set-state () 'common-lisp:string)
(common-lisp:deftype image-set-workflow-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype image-sets-metadata-summaries ()
   '(trivial-types:proper-list image-sets-metadata-summary))
 (common-lisp:defun make-image-sets-metadata-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            image-sets-metadata-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass image-sets-metadata-summary common-lisp:nil
                       ((image-set-id :initarg :image-set-id :initform
                         (common-lisp:error ":imagesetid is required") :type
                         (common-lisp:or image-set-id common-lisp:null)
                         :accessor
                         struct-shape-image-sets-metadata-summary-image-set-id
                         :shape "ImageSetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-image-sets-metadata-summary-version
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-image-sets-metadata-summary-created-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-image-sets-metadata-summary-updated-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dicomtags :initarg :dicomtags :initform
                         common-lisp:nil :type
                         (common-lisp:or dicomtags common-lisp:null) :accessor
                         struct-shape-image-sets-metadata-summary-dicomtags
                         :shape "DICOMTags" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-sets-metadata-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-sets-metadata-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'image-sets-metadata-summary
                    'make-image-sets-metadata-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-sets-metadata-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-sets-metadata-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-id))
      (common-lisp:list
       (common-lisp:cons "imageSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicomtags))
      (common-lisp:list
       (common-lisp:cons "DICOMTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-sets-metadata-summary))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (medical-imaging-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:deftype job-name () 'common-lisp:string)
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-dicomimport-jobs-request common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-list-dicomimport-jobs-request-datastore-id
                         :shape "DatastoreId" :location "uri" :location-name
                         "datastoreId")
                        (job-status :initarg :job-status :initform
                         common-lisp:nil :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         struct-shape-list-dicomimport-jobs-request-job-status
                         :shape "JobStatus" :location "querystring"
                         :location-name "jobStatus")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-dicomimport-jobs-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-dicomimport-jobs-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-dicomimport-jobs-request-max-results
                         :shape "ListDICOMImportJobsRequestMaxResultsInteger"
                         :location "querystring" :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dicomimport-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-dicomimport-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dicomimport-jobs-request
                    'make-list-dicomimport-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dicomimport-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dicomimport-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dicomimport-jobs-request))
   common-lisp:nil))
(common-lisp:deftype list-dicomimport-jobs-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-dicomimport-jobs-response common-lisp:nil
                       ((job-summaries :initarg :job-summaries :initform
                         (common-lisp:error ":jobsummaries is required") :type
                         (common-lisp:or dicomimport-job-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-dicomimport-jobs-response-job-summaries
                         :shape "DICOMImportJobSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-dicomimport-jobs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dicomimport-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-dicomimport-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dicomimport-jobs-response
                    'make-list-dicomimport-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dicomimport-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dicomimport-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-summaries))
      (common-lisp:list
       (common-lisp:cons "jobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dicomimport-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-datastores-request common-lisp:nil
                       ((datastore-status :initarg :datastore-status :initform
                         common-lisp:nil :type
                         (common-lisp:or datastore-status common-lisp:null)
                         :accessor
                         struct-shape-list-datastores-request-datastore-status
                         :shape "DatastoreStatus" :location "querystring"
                         :location-name "datastoreStatus")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-datastores-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-datastores-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-datastores-request-max-results
                         :shape "ListDatastoresRequestMaxResultsInteger"
                         :location "querystring" :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-datastores-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-datastores-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-datastores-request 'make-list-datastores-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-request))
   common-lisp:nil))
(common-lisp:deftype list-datastores-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-datastores-response common-lisp:nil
                       ((datastore-summaries :initarg :datastore-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or datastore-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-datastores-response-datastore-summaries
                         :shape "DatastoreSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-datastores-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-datastores-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-datastores-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-datastores-response 'make-list-datastores-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-summaries))
      (common-lisp:list
       (common-lisp:cons "datastoreSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-image-set-versions-request common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-list-image-set-versions-request-datastore-id
                         :shape "DatastoreId" :location "uri" :location-name
                         "datastoreId")
                        (image-set-id :initarg :image-set-id :initform
                         (common-lisp:error ":imagesetid is required") :type
                         (common-lisp:or image-set-id common-lisp:null)
                         :accessor
                         struct-shape-list-image-set-versions-request-image-set-id
                         :shape "ImageSetId" :location "uri" :location-name
                         "imageSetId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-image-set-versions-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-image-set-versions-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-image-set-versions-request-max-results
                         :shape "ListImageSetVersionsRequestMaxResultsInteger"
                         :location "querystring" :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-image-set-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-image-set-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-image-set-versions-request
                    'make-list-image-set-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-set-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-set-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-set-versions-request))
   common-lisp:nil))
(common-lisp:deftype list-image-set-versions-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-image-set-versions-response common-lisp:nil
                       ((image-set-properties-list :initarg
                         :image-set-properties-list :initform
                         (common-lisp:error
                          ":imagesetpropertieslist is required")
                         :type
                         (common-lisp:or image-set-properties-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-image-set-versions-response-image-set-properties-list
                         :shape "ImageSetPropertiesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-image-set-versions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-image-set-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-image-set-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-image-set-versions-response
                    'make-list-image-set-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-set-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-set-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-set-properties-list))
      (common-lisp:list
       (common-lisp:cons "imageSetPropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-set-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "Arn" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metadata-updates common-lisp:nil
                       ((dicomupdates :initarg :dicomupdates :initform
                         common-lisp:nil :type
                         (common-lisp:or dicomupdates common-lisp:null)
                         :accessor struct-shape-metadata-updates-dicomupdates
                         :shape "DICOMUpdates" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metadata-updates
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metadata-updates
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metadata-updates 'make-metadata-updates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metadata-updates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metadata-updates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicomupdates))
      (common-lisp:list
       (common-lisp:cons "DICOMUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metadata-updates))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype operator () 'common-lisp:string)
(common-lisp:deftype payload-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (medical-imaging-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass search-by-attribute-value common-lisp:nil
                       ((dicompatient-id :initarg :dicompatient-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dicompatient-id common-lisp:null)
                         :accessor
                         struct-shape-search-by-attribute-value-dicompatient-id
                         :shape "DICOMPatientId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dicomaccession-number :initarg :dicomaccession-number
                         :initform common-lisp:nil :type
                         (common-lisp:or dicomaccession-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-by-attribute-value-dicomaccession-number
                         :shape "DICOMAccessionNumber" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dicomstudy-id :initarg :dicomstudy-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dicomstudy-id common-lisp:null)
                         :accessor
                         struct-shape-search-by-attribute-value-dicomstudy-id
                         :shape "DICOMStudyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dicomstudy-instance-uid :initarg
                         :dicomstudy-instance-uid :initform common-lisp:nil
                         :type
                         (common-lisp:or dicomstudy-instance-uid
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-by-attribute-value-dicomstudy-instance-uid
                         :shape "DICOMStudyInstanceUID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-search-by-attribute-value-created-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dicomstudy-date-and-time :initarg
                         :dicomstudy-date-and-time :initform common-lisp:nil
                         :type
                         (common-lisp:or dicomstudy-date-and-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-by-attribute-value-dicomstudy-date-and-time
                         :shape "DICOMStudyDateAndTime" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-by-attribute-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-by-attribute-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-by-attribute-value
                    'make-search-by-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-by-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-by-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicompatient-id))
      (common-lisp:list
       (common-lisp:cons "DICOMPatientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicomaccession-number))
      (common-lisp:list
       (common-lisp:cons "DICOMAccessionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicomstudy-id))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicomstudy-instance-uid))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyInstanceUID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicomstudy-date-and-time))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyDateAndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-by-attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-criteria common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or search-criteria-filters-list
                                         common-lisp:null)
                         :accessor struct-shape-search-criteria-filters :shape
                         "SearchCriteriaFiltersList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'search-criteria 'make-search-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-criteria-filters-list ()
   '(trivial-types:proper-list search-filter))
 (common-lisp:defun make-search-criteria-filters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-filter common-lisp:nil
                       ((values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or search-filter-values-list
                                         common-lisp:null)
                         :accessor struct-shape-search-filter-values :shape
                         "SearchFilterValuesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or operator common-lisp:null) :accessor
                         struct-shape-search-filter-operator :shape "Operator"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'search-filter 'make-search-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-filter-values-list ()
   '(trivial-types:proper-list search-by-attribute-value))
 (common-lisp:defun make-search-filter-values-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-by-attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-image-sets-request common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-search-image-sets-request-datastore-id
                         :shape "DatastoreId" :location "uri" :location-name
                         "datastoreId")
                        (search-criteria :initarg :search-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or search-criteria common-lisp:null)
                         :accessor
                         struct-shape-search-image-sets-request-search-criteria
                         :shape "SearchCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          search-image-sets-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-search-image-sets-request-max-results
                         :shape "SearchImageSetsRequestMaxResultsInteger"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-image-sets-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-image-sets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-image-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-image-sets-request
                    'make-search-image-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-image-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-image-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-criteria))
      (common-lisp:list
       (common-lisp:cons "searchCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-image-sets-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'search-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          search-image-sets-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:deftype search-image-sets-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass search-image-sets-response common-lisp:nil
                       ((image-sets-metadata-summaries :initarg
                         :image-sets-metadata-summaries :initform
                         (common-lisp:error
                          ":imagesetsmetadatasummaries is required")
                         :type
                         (common-lisp:or image-sets-metadata-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-image-sets-response-image-sets-metadata-summaries
                         :shape "ImageSetsMetadataSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-image-sets-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-image-sets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-image-sets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-image-sets-response
                    'make-search-image-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-image-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-image-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-sets-metadata-summaries))
      (common-lisp:list
       (common-lisp:cons "imageSetsMetadataSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-image-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (medical-imaging-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass start-dicomimport-job-request common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or job-name common-lisp:null)
                         :accessor
                         struct-shape-start-dicomimport-job-request-job-name
                         :shape "JobName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform
                         (common-lisp:error ":dataaccessrolearn is required")
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-start-dicomimport-job-request-data-access-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-start-dicomimport-job-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-start-dicomimport-job-request-datastore-id
                         :shape "DatastoreId" :location "uri" :location-name
                         "datastoreId")
                        (input-s3uri :initarg :input-s3uri :initform
                         (common-lisp:error ":inputs3uri is required") :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         struct-shape-start-dicomimport-job-request-input-s3uri
                         :shape "S3Uri" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-s3uri :initarg :output-s3uri :initform
                         (common-lisp:error ":outputs3uri is required") :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         struct-shape-start-dicomimport-job-request-output-s3uri
                         :shape "S3Uri" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-dicomimport-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-dicomimport-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-dicomimport-job-request
                    'make-start-dicomimport-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dicomimport-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dicomimport-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "dataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-s3uri))
      (common-lisp:list
       (common-lisp:cons "inputS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3uri))
      (common-lisp:list
       (common-lisp:cons "outputS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dicomimport-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-dicomimport-job-response common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-start-dicomimport-job-response-datastore-id
                         :shape "DatastoreId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-start-dicomimport-job-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-status :initarg :job-status :initform
                         (common-lisp:error ":jobstatus is required") :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         struct-shape-start-dicomimport-job-response-job-status
                         :shape "JobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (submitted-at :initarg :submitted-at :initform
                         (common-lisp:error ":submittedat is required") :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-start-dicomimport-job-response-submitted-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-dicomimport-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-dicomimport-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-dicomimport-job-response
                    'make-start-dicomimport-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dicomimport-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dicomimport-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-at))
      (common-lisp:list
       (common-lisp:cons "submittedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dicomimport-job-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "Arn" :location "uri" :location-name "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (medical-imaging-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "Arn" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-image-set-metadata-request common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-update-image-set-metadata-request-datastore-id
                         :shape "DatastoreId" :location "uri" :location-name
                         "datastoreId")
                        (image-set-id :initarg :image-set-id :initform
                         (common-lisp:error ":imagesetid is required") :type
                         (common-lisp:or image-set-id common-lisp:null)
                         :accessor
                         struct-shape-update-image-set-metadata-request-image-set-id
                         :shape "ImageSetId" :location "uri" :location-name
                         "imageSetId")
                        (latest-version-id :initarg :latest-version-id
                         :initform
                         (common-lisp:error ":latestversionid is required")
                         :type
                         (common-lisp:or image-set-external-version-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-image-set-metadata-request-latest-version-id
                         :shape "ImageSetExternalVersionId" :location
                         "querystring" :location-name "latestVersion")
                        (update-image-set-metadata-updates :initarg
                         :update-image-set-metadata-updates :initform
                         (common-lisp:error
                          ":updateimagesetmetadataupdates is required")
                         :type
                         (common-lisp:or metadata-updates common-lisp:null)
                         :accessor
                         struct-shape-update-image-set-metadata-request-update-image-set-metadata-updates
                         :shape "MetadataUpdates" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-image-set-metadata-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-image-set-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-image-set-metadata-request
                    'make-update-image-set-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-image-set-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-image-set-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-image-set-metadata-updates))
      (common-lisp:list
       (common-lisp:cons "updateImageSetMetadataUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-image-set-metadata-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'update-image-set-metadata-updates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          update-image-set-metadata-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass update-image-set-metadata-response common-lisp:nil
                       ((datastore-id :initarg :datastore-id :initform
                         (common-lisp:error ":datastoreid is required") :type
                         (common-lisp:or datastore-id common-lisp:null)
                         :accessor
                         struct-shape-update-image-set-metadata-response-datastore-id
                         :shape "DatastoreId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-set-id :initarg :image-set-id :initform
                         (common-lisp:error ":imagesetid is required") :type
                         (common-lisp:or image-set-id common-lisp:null)
                         :accessor
                         struct-shape-update-image-set-metadata-response-image-set-id
                         :shape "ImageSetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-version-id :initarg :latest-version-id
                         :initform
                         (common-lisp:error ":latestversionid is required")
                         :type
                         (common-lisp:or image-set-external-version-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-image-set-metadata-response-latest-version-id
                         :shape "ImageSetExternalVersionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (image-set-state :initarg :image-set-state :initform
                         (common-lisp:error ":imagesetstate is required") :type
                         (common-lisp:or image-set-state common-lisp:null)
                         :accessor
                         struct-shape-update-image-set-metadata-response-image-set-state
                         :shape "ImageSetState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-set-workflow-status :initarg
                         :image-set-workflow-status :initform common-lisp:nil
                         :type
                         (common-lisp:or image-set-workflow-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-image-set-metadata-response-image-set-workflow-status
                         :shape "ImageSetWorkflowStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-update-image-set-metadata-response-created-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-update-image-set-metadata-response-updated-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor
                         struct-shape-update-image-set-metadata-response-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-image-set-metadata-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-image-set-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-image-set-metadata-response
                    'make-update-image-set-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-image-set-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-image-set-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-id))
      (common-lisp:list
       (common-lisp:cons "imageSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version-id))
      (common-lisp:list
       (common-lisp:cons "latestVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-state))
      (common-lisp:list
       (common-lisp:cons "imageSetState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-set-workflow-status))
      (common-lisp:list
       (common-lisp:cons "imageSetWorkflowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-image-set-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (medical-imaging-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun copy-image-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id source-image-set-id
                     copy-image-set-information)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id source-image-set-id
     copy-image-set-information))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-image-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/datastore/~A/imageSet/~A/copyImageSet"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'source-image-set-id))))
        "CopyImageSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'copy-image-set))
(common-lisp:progn
 (common-lisp:defun create-datastore
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-name client-token tags
                     kms-key-arn)
   (common-lisp:declare
    (common-lisp:ignorable datastore-name client-token tags kms-key-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-datastore-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        "/datastore" "CreateDatastore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-datastore))
(common-lisp:progn
 (common-lisp:defun delete-datastore
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id)
   (common-lisp:declare (common-lisp:ignorable datastore-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-datastore-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/datastore/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))))
        "DeleteDatastore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-datastore))
(common-lisp:progn
 (common-lisp:defun delete-image-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id image-set-id)
   (common-lisp:declare (common-lisp:ignorable datastore-id image-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-image-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/datastore/~A/imageSet/~A/deleteImageSet"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'image-set-id))))
        "DeleteImageSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-image-set))
(common-lisp:progn
 (common-lisp:defun get-dicomimport-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id job-id)
   (common-lisp:declare (common-lisp:ignorable datastore-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dicomimport-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/getDICOMImportJob/datastore/~A/job/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'job-id))))
        "GetDICOMImportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-dicomimport-job))
(common-lisp:progn
 (common-lisp:defun get-datastore
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id)
   (common-lisp:declare (common-lisp:ignorable datastore-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-datastore-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/datastore/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))))
        "GetDatastore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-datastore))
(common-lisp:progn
 (common-lisp:defun get-image-frame
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id image-set-id
                     image-frame-information)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id image-set-id image-frame-information))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-image-frame-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/datastore/~A/imageSet/~A/getImageFrame"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'image-set-id))))
        "GetImageFrame")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-image-frame))
(common-lisp:progn
 (common-lisp:defun get-image-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id image-set-id version-id)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id image-set-id version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-image-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/datastore/~A/imageSet/~A/getImageSet"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'image-set-id))))
        "GetImageSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-image-set))
(common-lisp:progn
 (common-lisp:defun get-image-set-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id image-set-id version-id)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id image-set-id version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-image-set-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/datastore/~A/imageSet/~A/getImageSetMetadata"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'image-set-id))))
        "GetImageSetMetadata")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-image-set-metadata))
(common-lisp:progn
 (common-lisp:defun list-dicomimport-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id job-status next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id job-status next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dicomimport-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/listDICOMImportJobs/datastore/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))))
        "ListDICOMImportJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-dicomimport-jobs))
(common-lisp:progn
 (common-lisp:defun list-datastores
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-status next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable datastore-status next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-datastores-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "GET"
        "/datastore" "ListDatastores"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-datastores))
(common-lisp:progn
 (common-lisp:defun list-image-set-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id image-set-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id image-set-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-image-set-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/datastore/~A/imageSet/~A/listImageSetVersions"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'image-set-id))))
        "ListImageSetVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-image-set-versions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun search-image-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id search-criteria max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id search-criteria max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-image-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/datastore/~A/searchImageSets"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))))
        "SearchImageSets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-image-sets))
(common-lisp:progn
 (common-lisp:defun start-dicomimport-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name data-access-role-arn
                     client-token datastore-id input-s3uri output-s3uri)
   (common-lisp:declare
    (common-lisp:ignorable job-name data-access-role-arn client-token
     datastore-id input-s3uri output-s3uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-dicomimport-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/startDICOMImportJob/datastore/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))))
        "StartDICOMImportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-dicomimport-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-image-set-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id image-set-id
                     latest-version-id update-image-set-metadata-updates)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id image-set-id latest-version-id
     update-image-set-metadata-updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-image-set-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/datastore/~A/imageSet/~A/updateImageSetMetadata"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'image-set-id))))
        "UpdateImageSetMetadata"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-image-set-metadata))
