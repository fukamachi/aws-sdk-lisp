;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/iottwinmaker/api (:use)
                             (:nicknames #:aws/iottwinmaker)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/iottwinmaker/api)
(common-lisp:progn
 (common-lisp:define-condition iottwinmaker-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'iottwinmaker-error))
(common-lisp:progn
 (common-lisp:defclass iottwinmaker-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "iottwinmaker" :api-version
                        "2021-11-29" :host-prefix "iottwinmaker" :signing-name
                        "iottwinmaker" :global-host common-lisp:nil))
 (common-lisp:export 'iottwinmaker-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("ConnectorFailureException" . connector-failure-exception)
    ("ConnectorTimeoutException" . connector-timeout-exception)
    ("InternalServerException" . internal-server-exception)
    ("QueryTimeoutException" . query-timeout-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (iottwinmaker-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass batch-put-property-error common-lisp:nil
                       ((entry :initarg :entry :initform
                         (common-lisp:error ":entry is required") :type
                         (common-lisp:or property-value-entry common-lisp:null)
                         :accessor struct-shape-batch-put-property-error-entry
                         :shape "PropertyValueEntry" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         (common-lisp:error ":errorcode is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-batch-put-property-error-error-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         (common-lisp:error ":errormessage is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-batch-put-property-error-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-put-property-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-put-property-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-put-property-error 'make-batch-put-property-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry))
      (common-lisp:list
       (common-lisp:cons "entry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-put-property-error-entry common-lisp:nil
                       ((errors :initarg :errors :initform
                         (common-lisp:error ":errors is required") :type
                         (common-lisp:or errors common-lisp:null) :accessor
                         struct-shape-batch-put-property-error-entry-errors
                         :shape "Errors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-put-property-error-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-put-property-error-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-put-property-error-entry
                    'make-batch-put-property-error-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-error-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-error-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-error-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-put-property-values-request common-lisp:nil
                       ((entries :initarg :entries :initform
                         (common-lisp:error ":entries is required") :type
                         (common-lisp:or entries common-lisp:null) :accessor
                         struct-shape-batch-put-property-values-request-entries
                         :shape "Entries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-batch-put-property-values-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-put-property-values-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-put-property-values-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-put-property-values-request
                    'make-batch-put-property-values-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-values-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-values-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-values-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-put-property-values-response common-lisp:nil
                       ((error-entries :initarg :error-entries :initform
                         (common-lisp:error ":errorentries is required") :type
                         (common-lisp:or error-entries common-lisp:null)
                         :accessor
                         struct-shape-batch-put-property-values-response-error-entries
                         :shape "ErrorEntries" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-put-property-values-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-put-property-values-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-put-property-values-response
                    'make-batch-put-property-values-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-values-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-values-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-entries))
      (common-lisp:list
       (common-lisp:cons "errorEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-values-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass bundle-information common-lisp:nil
                       ((bundle-names :initarg :bundle-names :initform
                         (common-lisp:error ":bundlenames is required") :type
                         (common-lisp:or pricing-bundles common-lisp:null)
                         :accessor struct-shape-bundle-information-bundle-names
                         :shape "PricingBundles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pricing-tier :initarg :pricing-tier :initform
                         common-lisp:nil :type
                         (common-lisp:or pricing-tier common-lisp:null)
                         :accessor struct-shape-bundle-information-pricing-tier
                         :shape "PricingTier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bundle-information
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bundle-information
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bundle-information 'make-bundle-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bundle-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bundle-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-names))
      (common-lisp:list
       (common-lisp:cons "bundleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-tier))
      (common-lisp:list
       (common-lisp:cons "pricingTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bundle-information))
   common-lisp:nil))
(common-lisp:deftype bundle-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cancel-metadata-transfer-job-request common-lisp:nil
                       ((metadata-transfer-job-id :initarg
                         :metadata-transfer-job-id :initform
                         (common-lisp:error
                          ":metadatatransferjobid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-cancel-metadata-transfer-job-request-metadata-transfer-job-id
                         :shape "Id" :location "uri" :location-name
                         "metadataTransferJobId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-metadata-transfer-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-metadata-transfer-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-metadata-transfer-job-request
                    'make-cancel-metadata-transfer-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-metadata-transfer-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-metadata-transfer-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-metadata-transfer-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-metadata-transfer-job-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor
                         struct-shape-cancel-metadata-transfer-job-response-arn
                         :shape "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata-transfer-job-id :initarg
                         :metadata-transfer-job-id :initform
                         (common-lisp:error
                          ":metadatatransferjobid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-cancel-metadata-transfer-job-response-metadata-transfer-job-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (progress :initarg :progress :initform common-lisp:nil
                         :type
                         (common-lisp:or metadata-transfer-job-progress
                                         common-lisp:null)
                         :accessor
                         struct-shape-cancel-metadata-transfer-job-response-progress
                         :shape "MetadataTransferJobProgress" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or metadata-transfer-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-cancel-metadata-transfer-job-response-status
                         :shape "MetadataTransferJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (update-date-time :initarg :update-date-time :initform
                         (common-lisp:error ":updatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-cancel-metadata-transfer-job-response-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-metadata-transfer-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-metadata-transfer-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-metadata-transfer-job-response
                    'make-cancel-metadata-transfer-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-metadata-transfer-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-metadata-transfer-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metadata-transfer-job-id))
      (common-lisp:list
       (common-lisp:cons "metadataTransferJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-metadata-transfer-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass column-description common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor struct-shape-column-description-name :shape
                         "ColumnName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or column-type common-lisp:null)
                         :accessor struct-shape-column-description-type :shape
                         "ColumnType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'column-description 'make-column-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-descriptions ()
   '(trivial-types:proper-list column-description))
 (common-lisp:defun make-column-descriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-name () 'common-lisp:string)
(common-lisp:deftype column-type () 'common-lisp:string)
(common-lisp:deftype component-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass component-property-group-request common-lisp:nil
                       ((group-type :initarg :group-type :initform
                         common-lisp:nil :type
                         (common-lisp:or group-type common-lisp:null) :accessor
                         struct-shape-component-property-group-request-group-type
                         :shape "GroupType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-names :initarg :property-names :initform
                         common-lisp:nil :type
                         (common-lisp:or property-names common-lisp:null)
                         :accessor
                         struct-shape-component-property-group-request-property-names
                         :shape "PropertyNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-type :initarg :update-type :initform
                         common-lisp:nil :type
                         (common-lisp:or property-group-update-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-component-property-group-request-update-type
                         :shape "PropertyGroupUpdateType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-component-property-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'component-property-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'component-property-group-request
                    'make-component-property-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-property-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-property-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-type))
      (common-lisp:list
       (common-lisp:cons "groupType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-names))
      (common-lisp:list
       (common-lisp:cons "propertyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-type))
      (common-lisp:list
       (common-lisp:cons "updateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-property-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-property-group-requests ()
   'common-lisp:hash-table)
 (common-lisp:defun make-component-property-group-requests
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass component-property-group-response common-lisp:nil
                       ((group-type :initarg :group-type :initform
                         (common-lisp:error ":grouptype is required") :type
                         (common-lisp:or group-type common-lisp:null) :accessor
                         struct-shape-component-property-group-response-group-type
                         :shape "GroupType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-inherited :initarg :is-inherited :initform
                         (common-lisp:error ":isinherited is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-component-property-group-response-is-inherited
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-names :initarg :property-names :initform
                         (common-lisp:error ":propertynames is required") :type
                         (common-lisp:or property-names common-lisp:null)
                         :accessor
                         struct-shape-component-property-group-response-property-names
                         :shape "PropertyNames" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-component-property-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'component-property-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'component-property-group-response
                    'make-component-property-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-property-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-property-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-type))
      (common-lisp:list
       (common-lisp:cons "groupType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-inherited))
      (common-lisp:list
       (common-lisp:cons "isInherited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-names))
      (common-lisp:list
       (common-lisp:cons "propertyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-property-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-property-group-responses ()
   'common-lisp:hash-table)
 (common-lisp:defun make-component-property-group-responses
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass component-request common-lisp:nil
                       ((component-type-id :initarg :component-type-id
                         :initform common-lisp:nil :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-component-request-component-type-id
                         :shape "ComponentTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-component-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (properties :initarg :properties :initform
                         common-lisp:nil :type
                         (common-lisp:or property-requests common-lisp:null)
                         :accessor struct-shape-component-request-properties
                         :shape "PropertyRequests" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-groups :initarg :property-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or component-property-group-requests
                                         common-lisp:null)
                         :accessor
                         struct-shape-component-request-property-groups :shape
                         "ComponentPropertyGroupRequests" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-component-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'component-request 'make-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-groups))
      (common-lisp:list
       (common-lisp:cons "propertyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass component-response common-lisp:nil
                       ((are-all-composite-components-returned :initarg
                         :are-all-composite-components-returned :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-component-response-are-all-composite-components-returned
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (are-all-properties-returned :initarg
                         :are-all-properties-returned :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-component-response-are-all-properties-returned
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-name :initarg :component-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-component-response-component-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (component-type-id :initarg :component-type-id
                         :initform common-lisp:nil :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-component-response-component-type-id
                         :shape "ComponentTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (composite-components :initarg :composite-components
                         :initform common-lisp:nil :type
                         (common-lisp:or composite-component-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-component-response-composite-components
                         :shape "CompositeComponentResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (defined-in :initarg :defined-in :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-component-response-defined-in :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-component-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (properties :initarg :properties :initform
                         common-lisp:nil :type
                         (common-lisp:or property-responses common-lisp:null)
                         :accessor struct-shape-component-response-properties
                         :shape "PropertyResponses" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-groups :initarg :property-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or component-property-group-responses
                                         common-lisp:null)
                         :accessor
                         struct-shape-component-response-property-groups :shape
                         "ComponentPropertyGroupResponses" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-component-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-source :initarg :sync-source :initform
                         common-lisp:nil :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor struct-shape-component-response-sync-source
                         :shape "SyncSource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-component-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'component-response 'make-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'are-all-composite-components-returned))
      (common-lisp:list
       (common-lisp:cons "areAllCompositeComponentsReturned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'are-all-properties-returned))
      (common-lisp:list
       (common-lisp:cons "areAllPropertiesReturned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-components))
      (common-lisp:list
       (common-lisp:cons "compositeComponents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'defined-in))
      (common-lisp:list
       (common-lisp:cons "definedIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-groups))
      (common-lisp:list
       (common-lisp:cons "propertyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-source))
      (common-lisp:list
       (common-lisp:cons "syncSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-summaries ()
   '(trivial-types:proper-list component-summary))
 (common-lisp:defun make-component-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass component-summary common-lisp:nil
                       ((component-name :initarg :component-name :initform
                         (common-lisp:error ":componentname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-component-summary-component-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (component-path :initarg :component-path :initform
                         common-lisp:nil :type
                         (common-lisp:or component-path common-lisp:null)
                         :accessor
                         struct-shape-component-summary-component-path :shape
                         "ComponentPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-type-id :initarg :component-type-id
                         :initform
                         (common-lisp:error ":componenttypeid is required")
                         :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-component-summary-component-type-id
                         :shape "ComponentTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (defined-in :initarg :defined-in :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-component-summary-defined-in :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-component-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-groups :initarg :property-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or component-property-group-responses
                                         common-lisp:null)
                         :accessor
                         struct-shape-component-summary-property-groups :shape
                         "ComponentPropertyGroupResponses" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or status common-lisp:null) :accessor
                         struct-shape-component-summary-status :shape "Status"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sync-source :initarg :sync-source :initform
                         common-lisp:nil :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor struct-shape-component-summary-sync-source
                         :shape "SyncSource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-component-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'component-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'component-summary 'make-component-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-path))
      (common-lisp:list
       (common-lisp:cons "componentPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'defined-in))
      (common-lisp:list
       (common-lisp:cons "definedIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-groups))
      (common-lisp:list
       (common-lisp:cons "propertyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-source))
      (common-lisp:list
       (common-lisp:cons "syncSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-summary))
   common-lisp:nil))
(common-lisp:deftype component-type-id () 'common-lisp:string)
(common-lisp:deftype component-type-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype component-type-summaries ()
   '(trivial-types:proper-list component-type-summary))
 (common-lisp:defun make-component-type-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-type-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass component-type-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor struct-shape-component-type-summary-arn
                         :shape "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-type-id :initarg :component-type-id
                         :initform
                         (common-lisp:error ":componenttypeid is required")
                         :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-component-type-summary-component-type-id
                         :shape "ComponentTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-type-name :initarg :component-type-name
                         :initform common-lisp:nil :type
                         (common-lisp:or component-type-name common-lisp:null)
                         :accessor
                         struct-shape-component-type-summary-component-type-name
                         :shape "ComponentTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-component-type-summary-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-component-type-summary-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-component-type-summary-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-date-time :initarg :update-date-time :initform
                         (common-lisp:error ":updatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-component-type-summary-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-component-type-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'component-type-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'component-type-summary 'make-component-type-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-type-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-type-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-name))
      (common-lisp:list
       (common-lisp:cons "componentTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-type-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass component-update-request common-lisp:nil
                       ((component-type-id :initarg :component-type-id
                         :initform common-lisp:nil :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-component-update-request-component-type-id
                         :shape "ComponentTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-component-update-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-group-updates :initarg
                         :property-group-updates :initform common-lisp:nil
                         :type
                         (common-lisp:or component-property-group-requests
                                         common-lisp:null)
                         :accessor
                         struct-shape-component-update-request-property-group-updates
                         :shape "ComponentPropertyGroupRequests" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (property-updates :initarg :property-updates :initform
                         common-lisp:nil :type
                         (common-lisp:or property-requests common-lisp:null)
                         :accessor
                         struct-shape-component-update-request-property-updates
                         :shape "PropertyRequests" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-type :initarg :update-type :initform
                         common-lisp:nil :type
                         (common-lisp:or component-update-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-component-update-request-update-type
                         :shape "ComponentUpdateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-component-update-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'component-update-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'component-update-request 'make-component-update-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-update-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'property-group-updates))
      (common-lisp:list
       (common-lisp:cons "propertyGroupUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-updates))
      (common-lisp:list
       (common-lisp:cons "propertyUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-type))
      (common-lisp:list
       (common-lisp:cons "updateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-update-request))
   common-lisp:nil))
(common-lisp:deftype component-update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype component-updates-map-request () 'common-lisp:hash-table)
 (common-lisp:defun make-component-updates-map-request
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype components-map () 'common-lisp:hash-table)
 (common-lisp:defun make-components-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype components-map-request () 'common-lisp:hash-table)
 (common-lisp:defun make-components-map-request
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass composite-component-request common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-composite-component-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (properties :initarg :properties :initform
                         common-lisp:nil :type
                         (common-lisp:or property-requests common-lisp:null)
                         :accessor
                         struct-shape-composite-component-request-properties
                         :shape "PropertyRequests" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-groups :initarg :property-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or component-property-group-requests
                                         common-lisp:null)
                         :accessor
                         struct-shape-composite-component-request-property-groups
                         :shape "ComponentPropertyGroupRequests" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-composite-component-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'composite-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'composite-component-request
                    'make-composite-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          composite-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          composite-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-groups))
      (common-lisp:list
       (common-lisp:cons "propertyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          composite-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype composite-component-response () 'common-lisp:hash-table)
 (common-lisp:defun make-composite-component-response
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass composite-component-type-request common-lisp:nil
                       ((component-type-id :initarg :component-type-id
                         :initform common-lisp:nil :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-composite-component-type-request-component-type-id
                         :shape "ComponentTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-composite-component-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'composite-component-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'composite-component-type-request
                    'make-composite-component-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          composite-component-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          composite-component-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          composite-component-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass composite-component-type-response common-lisp:nil
                       ((component-type-id :initarg :component-type-id
                         :initform common-lisp:nil :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-composite-component-type-response-component-type-id
                         :shape "ComponentTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-inherited :initarg :is-inherited :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-composite-component-type-response-is-inherited
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-composite-component-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'composite-component-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'composite-component-type-response
                    'make-composite-component-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          composite-component-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          composite-component-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-inherited))
      (common-lisp:list
       (common-lisp:cons "isInherited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          composite-component-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype composite-component-types-request ()
   'common-lisp:hash-table)
 (common-lisp:defun make-composite-component-types-request
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype composite-component-types-response ()
   'common-lisp:hash-table)
 (common-lisp:defun make-composite-component-types-response
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass composite-component-update-request common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-composite-component-update-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-group-updates :initarg
                         :property-group-updates :initform common-lisp:nil
                         :type
                         (common-lisp:or component-property-group-requests
                                         common-lisp:null)
                         :accessor
                         struct-shape-composite-component-update-request-property-group-updates
                         :shape "ComponentPropertyGroupRequests" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (property-updates :initarg :property-updates :initform
                         common-lisp:nil :type
                         (common-lisp:or property-requests common-lisp:null)
                         :accessor
                         struct-shape-composite-component-update-request-property-updates
                         :shape "PropertyRequests" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-type :initarg :update-type :initform
                         common-lisp:nil :type
                         (common-lisp:or component-update-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-composite-component-update-request-update-type
                         :shape "ComponentUpdateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-composite-component-update-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'composite-component-update-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'composite-component-update-request
                    'make-composite-component-update-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          composite-component-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          composite-component-update-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'property-group-updates))
      (common-lisp:list
       (common-lisp:cons "propertyGroupUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-updates))
      (common-lisp:list
       (common-lisp:cons "propertyUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-type))
      (common-lisp:list
       (common-lisp:cons "updateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          composite-component-update-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype composite-component-updates-map-request ()
   'common-lisp:hash-table)
 (common-lisp:defun make-composite-component-updates-map-request
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype composite-components-map-request ()
   'common-lisp:hash-table)
 (common-lisp:defun make-composite-components-map-request
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype configuration () 'common-lisp:hash-table)
 (common-lisp:defun make-configuration (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (iottwinmaker-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition connector-failure-exception
     (iottwinmaker-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       connector-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'connector-failure-exception
                    'connector-failure-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition connector-timeout-exception
     (iottwinmaker-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       connector-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'connector-timeout-exception
                    'connector-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-component-type-request common-lisp:nil
                       ((component-type-id :initarg :component-type-id
                         :initform
                         (common-lisp:error ":componenttypeid is required")
                         :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-create-component-type-request-component-type-id
                         :shape "ComponentTypeId" :location "uri"
                         :location-name "componentTypeId")
                        (component-type-name :initarg :component-type-name
                         :initform common-lisp:nil :type
                         (common-lisp:or component-type-name common-lisp:null)
                         :accessor
                         struct-shape-create-component-type-request-component-type-name
                         :shape "ComponentTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (composite-component-types :initarg
                         :composite-component-types :initform common-lisp:nil
                         :type
                         (common-lisp:or composite-component-types-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-component-type-request-composite-component-types
                         :shape "CompositeComponentTypesRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-component-type-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extends-from :initarg :extends-from :initform
                         common-lisp:nil :type
                         (common-lisp:or extends-from common-lisp:null)
                         :accessor
                         struct-shape-create-component-type-request-extends-from
                         :shape "ExtendsFrom" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (functions :initarg :functions :initform
                         common-lisp:nil :type
                         (common-lisp:or functions-request common-lisp:null)
                         :accessor
                         struct-shape-create-component-type-request-functions
                         :shape "FunctionsRequest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-singleton :initarg :is-singleton :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-component-type-request-is-singleton
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-definitions :initarg :property-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or property-definitions-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-component-type-request-property-definitions
                         :shape "PropertyDefinitionsRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (property-groups :initarg :property-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or property-groups-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-component-type-request-property-groups
                         :shape "PropertyGroupsRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-component-type-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-component-type-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-component-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-component-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-component-type-request
                    'make-create-component-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-name))
      (common-lisp:list
       (common-lisp:cons "componentTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-component-types))
      (common-lisp:list
       (common-lisp:cons "compositeComponentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extends-from))
      (common-lisp:list
       (common-lisp:cons "extendsFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'functions))
      (common-lisp:list
       (common-lisp:cons "functions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-singleton))
      (common-lisp:list
       (common-lisp:cons "isSingleton"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'property-definitions))
      (common-lisp:list
       (common-lisp:cons "propertyDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-groups))
      (common-lisp:list
       (common-lisp:cons "propertyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-component-type-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor
                         struct-shape-create-component-type-response-arn :shape
                         "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-create-component-type-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-create-component-type-response-state
                         :shape "State" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-component-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-component-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-component-type-response
                    'make-create-component-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-entity-request common-lisp:nil
                       ((components :initarg :components :initform
                         common-lisp:nil :type
                         (common-lisp:or components-map-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-entity-request-components :shape
                         "ComponentsMapRequest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (composite-components :initarg :composite-components
                         :initform common-lisp:nil :type
                         (common-lisp:or composite-components-map-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-entity-request-composite-components
                         :shape "CompositeComponentsMapRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-entity-request-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-create-entity-request-entity-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-name :initarg :entity-name :initform
                         (common-lisp:error ":entityname is required") :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor
                         struct-shape-create-entity-request-entity-name :shape
                         "EntityName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parent-entity-id :initarg :parent-entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or parent-entity-id common-lisp:null)
                         :accessor
                         struct-shape-create-entity-request-parent-entity-id
                         :shape "ParentEntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-entity-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-entity-request-workspace-id :shape
                         "Id" :location "uri" :location-name "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-entity-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-entity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-entity-request 'make-create-entity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-entity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-components))
      (common-lisp:list
       (common-lisp:cons "compositeComponents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-name))
      (common-lisp:list
       (common-lisp:cons "entityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-entity-id))
      (common-lisp:list
       (common-lisp:cons "parentEntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-entity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-entity-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor struct-shape-create-entity-response-arn
                         :shape "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-create-entity-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entityid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-create-entity-response-entity-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-create-entity-response-state :shape
                         "State" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-entity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-entity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-entity-response 'make-create-entity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-entity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-entity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-entity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-metadata-transfer-job-request common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-metadata-transfer-job-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or destination-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-metadata-transfer-job-request-destination
                         :shape "DestinationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metadata-transfer-job-id :initarg
                         :metadata-transfer-job-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-metadata-transfer-job-request-metadata-transfer-job-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sources :initarg :sources :initform
                         (common-lisp:error ":sources is required") :type
                         (common-lisp:or source-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-metadata-transfer-job-request-sources
                         :shape "SourceConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-metadata-transfer-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-metadata-transfer-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-metadata-transfer-job-request
                    'make-create-metadata-transfer-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-metadata-transfer-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-metadata-transfer-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metadata-transfer-job-id))
      (common-lisp:list
       (common-lisp:cons "metadataTransferJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-metadata-transfer-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-metadata-transfer-job-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor
                         struct-shape-create-metadata-transfer-job-response-arn
                         :shape "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-create-metadata-transfer-job-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata-transfer-job-id :initarg
                         :metadata-transfer-job-id :initform
                         (common-lisp:error
                          ":metadatatransferjobid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-metadata-transfer-job-response-metadata-transfer-job-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or metadata-transfer-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-metadata-transfer-job-response-status
                         :shape "MetadataTransferJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-metadata-transfer-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-metadata-transfer-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-metadata-transfer-job-response
                    'make-create-metadata-transfer-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-metadata-transfer-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-metadata-transfer-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metadata-transfer-job-id))
      (common-lisp:list
       (common-lisp:cons "metadataTransferJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-metadata-transfer-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-scene-request common-lisp:nil
                       ((capabilities :initarg :capabilities :initform
                         common-lisp:nil :type
                         (common-lisp:or scene-capabilities common-lisp:null)
                         :accessor
                         struct-shape-create-scene-request-capabilities :shape
                         "SceneCapabilities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-location :initarg :content-location :initform
                         (common-lisp:error ":contentlocation is required")
                         :type (common-lisp:or s3url common-lisp:null)
                         :accessor
                         struct-shape-create-scene-request-content-location
                         :shape "S3Url" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-scene-request-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scene-id :initarg :scene-id :initform
                         (common-lisp:error ":sceneid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-scene-request-scene-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scene-metadata :initarg :scene-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or scene-metadata-map common-lisp:null)
                         :accessor
                         struct-shape-create-scene-request-scene-metadata
                         :shape "SceneMetadataMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-scene-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-scene-request-workspace-id :shape
                         "Id" :location "uri" :location-name "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-scene-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-scene-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-scene-request 'make-create-scene-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-scene-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-scene-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-location))
      (common-lisp:list
       (common-lisp:cons "contentLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-id))
      (common-lisp:list
       (common-lisp:cons "sceneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-metadata))
      (common-lisp:list
       (common-lisp:cons "sceneMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-scene-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-scene-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor struct-shape-create-scene-response-arn
                         :shape "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-create-scene-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-scene-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-scene-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-scene-response 'make-create-scene-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-scene-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-scene-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-scene-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sync-job-request common-lisp:nil
                       ((sync-role :initarg :sync-role :initform
                         (common-lisp:error ":syncrole is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-sync-job-request-sync-role :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sync-source :initarg :sync-source :initform
                         (common-lisp:error ":syncsource is required") :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor
                         struct-shape-create-sync-job-request-sync-source
                         :shape "SyncSource" :location "uri" :location-name
                         "syncSource")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-sync-job-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-sync-job-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-sync-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-sync-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-sync-job-request 'make-create-sync-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-role))
      (common-lisp:list
       (common-lisp:cons "syncRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sync-job-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor struct-shape-create-sync-job-response-arn
                         :shape "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-create-sync-job-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or sync-job-state common-lisp:null)
                         :accessor struct-shape-create-sync-job-response-state
                         :shape "SyncJobState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-sync-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-sync-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-sync-job-response 'make-create-sync-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workspace-request common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-workspace-request-role :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3location :initarg :s3location :initform
                         common-lisp:nil :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         struct-shape-create-workspace-request-s3location
                         :shape "S3Location" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-workspace-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-workspace-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-workspace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-workspace-request 'make-create-workspace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workspace-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor struct-shape-create-workspace-response-arn
                         :shape "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-workspace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-workspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-workspace-response
                    'make-create-workspace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-connector common-lisp:nil
                       ((is-native :initarg :is-native :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-data-connector-is-native :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lambda :initarg :lambda :initform common-lisp:nil
                         :type
                         (common-lisp:or lambda-function common-lisp:null)
                         :accessor struct-shape-data-connector-lambda :shape
                         "LambdaFunction" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-connector
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-connector
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-connector 'make-data-connector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-connector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-connector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-native))
      (common-lisp:list
       (common-lisp:cons "isNative"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda))
      (common-lisp:list
       (common-lisp:cons "lambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-connector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-type common-lisp:nil
                       ((allowed-values :initarg :allowed-values :initform
                         common-lisp:nil :type
                         (common-lisp:or data-value-list common-lisp:null)
                         :accessor struct-shape-data-type-allowed-values :shape
                         "DataValueList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nested-type :initarg :nested-type :initform
                         common-lisp:nil :type
                         (common-lisp:or data-type common-lisp:null) :accessor
                         struct-shape-data-type-nested-type :shape "DataType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (relationship :initarg :relationship :initform
                         common-lisp:nil :type
                         (common-lisp:or relationship common-lisp:null)
                         :accessor struct-shape-data-type-relationship :shape
                         "Relationship" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-data-type-type :shape "Type" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unit-of-measure :initarg :unit-of-measure :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-type-unit-of-measure :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-type 'make-data-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "allowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nested-type))
      (common-lisp:list
       (common-lisp:cons "nestedType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship))
      (common-lisp:list
       (common-lisp:cons "relationship"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit-of-measure))
      (common-lisp:list
       (common-lisp:cons "unitOfMeasure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-value common-lisp:nil
                       ((boolean-value :initarg :boolean-value :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-data-value-boolean-value :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (double-value :initarg :double-value :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-data-value-double-value :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expression :initarg :expression :initform
                         common-lisp:nil :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         struct-shape-data-value-expression :shape "Expression"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (integer-value :initarg :integer-value :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-data-value-integer-value :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (list-value :initarg :list-value :initform
                         common-lisp:nil :type
                         (common-lisp:or data-value-list common-lisp:null)
                         :accessor struct-shape-data-value-list-value :shape
                         "DataValueList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-value :initarg :long-value :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-data-value-long-value :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (map-value :initarg :map-value :initform
                         common-lisp:nil :type
                         (common-lisp:or data-value-map common-lisp:null)
                         :accessor struct-shape-data-value-map-value :shape
                         "DataValueMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relationship-value :initarg :relationship-value
                         :initform common-lisp:nil :type
                         (common-lisp:or relationship-value common-lisp:null)
                         :accessor struct-shape-data-value-relationship-value
                         :shape "RelationshipValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (string-value :initarg :string-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-value-string-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-value 'make-data-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean-value))
      (common-lisp:list
       (common-lisp:cons "booleanValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-value))
      (common-lisp:list
       (common-lisp:cons "integerValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-value))
      (common-lisp:list
       (common-lisp:cons "listValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-value))
      (common-lisp:list
       (common-lisp:cons "longValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-value))
      (common-lisp:list
       (common-lisp:cons "mapValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-value))
      (common-lisp:list
       (common-lisp:cons "relationshipValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-value-list ()
   '(trivial-types:proper-list data-value))
 (common-lisp:defun make-data-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-value-map () 'common-lisp:hash-table)
 (common-lisp:defun make-data-value-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass delete-component-type-request common-lisp:nil
                       ((component-type-id :initarg :component-type-id
                         :initform
                         (common-lisp:error ":componenttypeid is required")
                         :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-delete-component-type-request-component-type-id
                         :shape "ComponentTypeId" :location "uri"
                         :location-name "componentTypeId")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-component-type-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-component-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-component-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-component-type-request
                    'make-delete-component-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-component-type-response common-lisp:nil
                       ((state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-delete-component-type-response-state
                         :shape "State" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-component-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-component-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-component-type-response
                    'make-delete-component-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-entity-request common-lisp:nil
                       ((entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entityid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-delete-entity-request-entity-id :shape
                         "EntityId" :location "uri" :location-name "entityId")
                        (is-recursive :initarg :is-recursive :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-delete-entity-request-is-recursive :shape
                         "Boolean" :location "querystring" :location-name
                         "isRecursive")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-entity-request-workspace-id :shape
                         "Id" :location "uri" :location-name "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-entity-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-entity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-entity-request 'make-delete-entity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-entity-response common-lisp:nil
                       ((state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-delete-entity-response-state :shape
                         "State" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-entity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-entity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-entity-response 'make-delete-entity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-scene-request common-lisp:nil
                       ((scene-id :initarg :scene-id :initform
                         (common-lisp:error ":sceneid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-scene-request-scene-id :shape "Id"
                         :location "uri" :location-name "sceneId")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-scene-request-workspace-id :shape
                         "Id" :location "uri" :location-name "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-scene-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-scene-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-scene-request 'make-delete-scene-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-scene-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-scene-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-scene-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-scene-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-scene-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-scene-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-scene-response 'make-delete-scene-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scene-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scene-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scene-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-sync-job-request common-lisp:nil
                       ((sync-source :initarg :sync-source :initform
                         (common-lisp:error ":syncsource is required") :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor
                         struct-shape-delete-sync-job-request-sync-source
                         :shape "SyncSource" :location "uri" :location-name
                         "syncSource")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-sync-job-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-sync-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-sync-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-sync-job-request 'make-delete-sync-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-sync-job-response common-lisp:nil
                       ((state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or sync-job-state common-lisp:null)
                         :accessor struct-shape-delete-sync-job-response-state
                         :shape "SyncJobState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-sync-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-sync-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-sync-job-response 'make-delete-sync-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workspace-request common-lisp:nil
                       ((workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-workspace-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-workspace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-workspace-request 'make-delete-workspace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workspace-response common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or workspace-delete-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-workspace-response-message :shape
                         "WorkspaceDeleteMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-workspace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-workspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-workspace-response
                    'make-delete-workspace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass destination-configuration common-lisp:nil
                       ((iot-twin-maker-configuration :initarg
                         :iot-twin-maker-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          iot-twin-maker-destination-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-destination-configuration-iot-twin-maker-configuration
                         :shape "IotTwinMakerDestinationConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3configuration :initarg :s3configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or s3destination-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-destination-configuration-s3configuration
                         :shape "S3DestinationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or destination-type common-lisp:null)
                         :accessor struct-shape-destination-configuration-type
                         :shape "DestinationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-destination-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'destination-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'destination-configuration
                    'make-destination-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          destination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          destination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iot-twin-maker-configuration))
      (common-lisp:list
       (common-lisp:cons "iotTwinMakerConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "s3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          destination-configuration))
   common-lisp:nil))
(common-lisp:deftype destination-type () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype entity-id () 'common-lisp:string)
(common-lisp:deftype entity-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass entity-property-reference common-lisp:nil
                       ((component-name :initarg :component-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-entity-property-reference-component-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (component-path :initarg :component-path :initform
                         common-lisp:nil :type
                         (common-lisp:or component-path common-lisp:null)
                         :accessor
                         struct-shape-entity-property-reference-component-path
                         :shape "ComponentPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-entity-property-reference-entity-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-id-property :initarg :external-id-property
                         :initform common-lisp:nil :type
                         (common-lisp:or external-id-property common-lisp:null)
                         :accessor
                         struct-shape-entity-property-reference-external-id-property
                         :shape "ExternalIdProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-name :initarg :property-name :initform
                         (common-lisp:error ":propertyname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-entity-property-reference-property-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-entity-property-reference
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'entity-property-reference
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'entity-property-reference
                    'make-entity-property-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          entity-property-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          entity-property-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-path))
      (common-lisp:list
       (common-lisp:cons "componentPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-id-property))
      (common-lisp:list
       (common-lisp:cons "externalIdProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-name))
      (common-lisp:list
       (common-lisp:cons "propertyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          entity-property-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-summaries ()
   '(trivial-types:proper-list entity-summary))
 (common-lisp:defun make-entity-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass entity-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor struct-shape-entity-summary-arn :shape
                         "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-entity-summary-creation-date-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-entity-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entityid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-entity-summary-entity-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-name :initarg :entity-name :initform
                         (common-lisp:error ":entityname is required") :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor struct-shape-entity-summary-entity-name
                         :shape "EntityName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (has-child-entities :initarg :has-child-entities
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-entity-summary-has-child-entities :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parent-entity-id :initarg :parent-entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or parent-entity-id common-lisp:null)
                         :accessor struct-shape-entity-summary-parent-entity-id
                         :shape "ParentEntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or status common-lisp:null) :accessor
                         struct-shape-entity-summary-status :shape "Status"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-date-time :initarg :update-date-time :initform
                         (common-lisp:error ":updatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-entity-summary-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-entity-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'entity-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'entity-summary 'make-entity-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-name))
      (common-lisp:list
       (common-lisp:cons "entityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-child-entities))
      (common-lisp:list
       (common-lisp:cons "hasChildEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-entity-id))
      (common-lisp:list
       (common-lisp:cons "parentEntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entries ()
   '(trivial-types:proper-list property-value-entry))
 (common-lisp:defun make-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-value-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-details common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-error-details-code :shape "ErrorCode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor struct-shape-error-details-message :shape
                         "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-details 'make-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype error-entries ()
   '(trivial-types:proper-list batch-put-property-error-entry))
 (common-lisp:defun make-error-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-put-property-error-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype errors ()
   '(trivial-types:proper-list batch-put-property-error))
 (common-lisp:defun make-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-put-property-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execute-query-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or query-service-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-execute-query-request-max-results :shape
                         "QueryServiceMaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-execute-query-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-statement :initarg :query-statement :initform
                         (common-lisp:error ":querystatement is required")
                         :type
                         (common-lisp:or query-statement common-lisp:null)
                         :accessor
                         struct-shape-execute-query-request-query-statement
                         :shape "QueryStatement" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-execute-query-request-workspace-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-query-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-query-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-query-request 'make-execute-query-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-statement))
      (common-lisp:list
       (common-lisp:cons "queryStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-query-response common-lisp:nil
                       ((column-descriptions :initarg :column-descriptions
                         :initform common-lisp:nil :type
                         (common-lisp:or column-descriptions common-lisp:null)
                         :accessor
                         struct-shape-execute-query-response-column-descriptions
                         :shape "ColumnDescriptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-execute-query-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rows :initarg :rows :initform common-lisp:nil :type
                         (common-lisp:or rows common-lisp:null) :accessor
                         struct-shape-execute-query-response-rows :shape "Rows"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-query-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-query-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-query-response 'make-execute-query-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-descriptions))
      (common-lisp:list
       (common-lisp:cons "columnDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-response))
   common-lisp:nil))
(common-lisp:deftype expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype extends-from ()
   '(trivial-types:proper-list component-type-id))
 (common-lisp:defun make-extends-from
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-type-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype external-id-property () 'common-lisp:hash-table)
 (common-lisp:defun make-external-id-property
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass filter-by-asset common-lisp:nil
                       ((asset-external-id :initarg :asset-external-id
                         :initform common-lisp:nil :type
                         (common-lisp:or site-wise-external-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-filter-by-asset-asset-external-id :shape
                         "SiteWiseExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-filter-by-asset-asset-id :shape "Uuid"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (include-asset-model :initarg :include-asset-model
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-filter-by-asset-include-asset-model
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-offspring :initarg :include-offspring
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-filter-by-asset-include-offspring :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-by-asset
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-by-asset
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter-by-asset 'make-filter-by-asset))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-by-asset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-by-asset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-external-id))
      (common-lisp:list
       (common-lisp:cons "assetExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-asset-model))
      (common-lisp:list
       (common-lisp:cons "includeAssetModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-offspring))
      (common-lisp:list
       (common-lisp:cons "includeOffspring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-by-asset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-by-asset-model common-lisp:nil
                       ((asset-model-external-id :initarg
                         :asset-model-external-id :initform common-lisp:nil
                         :type
                         (common-lisp:or site-wise-external-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-filter-by-asset-model-asset-model-external-id
                         :shape "SiteWiseExternalId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-model-id :initarg :asset-model-id :initform
                         common-lisp:nil :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-filter-by-asset-model-asset-model-id
                         :shape "Uuid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (include-assets :initarg :include-assets :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-filter-by-asset-model-include-assets
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-offspring :initarg :include-offspring
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-filter-by-asset-model-include-offspring
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-by-asset-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-by-asset-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'filter-by-asset-model 'make-filter-by-asset-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-by-asset-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-by-asset-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-external-id))
      (common-lisp:list
       (common-lisp:cons "assetModelExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-assets))
      (common-lisp:list
       (common-lisp:cons "includeAssets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-offspring))
      (common-lisp:list
       (common-lisp:cons "includeOffspring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-by-asset-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-by-component-type common-lisp:nil
                       ((component-type-id :initarg :component-type-id
                         :initform
                         (common-lisp:error ":componenttypeid is required")
                         :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-filter-by-component-type-component-type-id
                         :shape "ComponentTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-by-component-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-by-component-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'filter-by-component-type 'make-filter-by-component-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-by-component-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-by-component-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-by-component-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-by-entity common-lisp:nil
                       ((entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entityid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-filter-by-entity-entity-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-by-entity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-by-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'filter-by-entity 'make-filter-by-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-by-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-by-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-by-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass function-request common-lisp:nil
                       ((implemented-by :initarg :implemented-by :initform
                         common-lisp:nil :type
                         (common-lisp:or data-connector common-lisp:null)
                         :accessor struct-shape-function-request-implemented-by
                         :shape "DataConnector" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (required-properties :initarg :required-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or required-properties common-lisp:null)
                         :accessor
                         struct-shape-function-request-required-properties
                         :shape "RequiredProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scope :initarg :scope :initform common-lisp:nil :type
                         (common-lisp:or scope common-lisp:null) :accessor
                         struct-shape-function-request-scope :shape "Scope"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-function-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'function-request 'make-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'implemented-by))
      (common-lisp:list
       (common-lisp:cons "implementedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-properties))
      (common-lisp:list
       (common-lisp:cons "requiredProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass function-response common-lisp:nil
                       ((implemented-by :initarg :implemented-by :initform
                         common-lisp:nil :type
                         (common-lisp:or data-connector common-lisp:null)
                         :accessor
                         struct-shape-function-response-implemented-by :shape
                         "DataConnector" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-inherited :initarg :is-inherited :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-function-response-is-inherited :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (required-properties :initarg :required-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or required-properties common-lisp:null)
                         :accessor
                         struct-shape-function-response-required-properties
                         :shape "RequiredProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scope :initarg :scope :initform common-lisp:nil :type
                         (common-lisp:or scope common-lisp:null) :accessor
                         struct-shape-function-response-scope :shape "Scope"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-function-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'function-response 'make-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input function-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'implemented-by))
      (common-lisp:list
       (common-lisp:cons "implementedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-inherited))
      (common-lisp:list
       (common-lisp:cons "isInherited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-properties))
      (common-lisp:list
       (common-lisp:cons "requiredProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype functions-request () 'common-lisp:hash-table)
 (common-lisp:defun make-functions-request
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype functions-response () 'common-lisp:hash-table)
 (common-lisp:defun make-functions-response
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype generated-scene-metadata-map () 'common-lisp:hash-table)
 (common-lisp:defun make-generated-scene-metadata-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass get-component-type-request common-lisp:nil
                       ((component-type-id :initarg :component-type-id
                         :initform
                         (common-lisp:error ":componenttypeid is required")
                         :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-get-component-type-request-component-type-id
                         :shape "ComponentTypeId" :location "uri"
                         :location-name "componentTypeId")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-component-type-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-component-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-component-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-component-type-request
                    'make-get-component-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-component-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-component-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-component-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-component-type-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor struct-shape-get-component-type-response-arn
                         :shape "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-type-id :initarg :component-type-id
                         :initform
                         (common-lisp:error ":componenttypeid is required")
                         :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-get-component-type-response-component-type-id
                         :shape "ComponentTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-type-name :initarg :component-type-name
                         :initform common-lisp:nil :type
                         (common-lisp:or component-type-name common-lisp:null)
                         :accessor
                         struct-shape-get-component-type-response-component-type-name
                         :shape "ComponentTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (composite-component-types :initarg
                         :composite-component-types :initform common-lisp:nil
                         :type
                         (common-lisp:or composite-component-types-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-component-type-response-composite-component-types
                         :shape "CompositeComponentTypesResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-component-type-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-get-component-type-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extends-from :initarg :extends-from :initform
                         common-lisp:nil :type
                         (common-lisp:or extends-from common-lisp:null)
                         :accessor
                         struct-shape-get-component-type-response-extends-from
                         :shape "ExtendsFrom" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (functions :initarg :functions :initform
                         common-lisp:nil :type
                         (common-lisp:or functions-response common-lisp:null)
                         :accessor
                         struct-shape-get-component-type-response-functions
                         :shape "FunctionsResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-abstract :initarg :is-abstract :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-component-type-response-is-abstract
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-schema-initialized :initarg :is-schema-initialized
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-component-type-response-is-schema-initialized
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-singleton :initarg :is-singleton :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-component-type-response-is-singleton
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-definitions :initarg :property-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or property-definitions-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-component-type-response-property-definitions
                         :shape "PropertyDefinitionsResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (property-groups :initarg :property-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or property-groups-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-component-type-response-property-groups
                         :shape "PropertyGroupsResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-get-component-type-response-status :shape
                         "Status" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sync-source :initarg :sync-source :initform
                         common-lisp:nil :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor
                         struct-shape-get-component-type-response-sync-source
                         :shape "SyncSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-date-time :initarg :update-date-time :initform
                         (common-lisp:error ":updatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-component-type-response-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-component-type-response-workspace-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-component-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-component-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-component-type-response
                    'make-get-component-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-component-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-component-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-name))
      (common-lisp:list
       (common-lisp:cons "componentTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-component-types))
      (common-lisp:list
       (common-lisp:cons "compositeComponentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extends-from))
      (common-lisp:list
       (common-lisp:cons "extendsFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'functions))
      (common-lisp:list
       (common-lisp:cons "functions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-abstract))
      (common-lisp:list
       (common-lisp:cons "isAbstract"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-schema-initialized))
      (common-lisp:list
       (common-lisp:cons "isSchemaInitialized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-singleton))
      (common-lisp:list
       (common-lisp:cons "isSingleton"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'property-definitions))
      (common-lisp:list
       (common-lisp:cons "propertyDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-groups))
      (common-lisp:list
       (common-lisp:cons "propertyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-source))
      (common-lisp:list
       (common-lisp:cons "syncSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-component-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-entity-request common-lisp:nil
                       ((entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entityid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-get-entity-request-entity-id :shape
                         "EntityId" :location "uri" :location-name "entityId")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-entity-request-workspace-id :shape
                         "Id" :location "uri" :location-name "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-entity-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-entity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-entity-request 'make-get-entity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-entity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-entity-response common-lisp:nil
                       ((are-all-components-returned :initarg
                         :are-all-components-returned :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-get-entity-response-are-all-components-returned
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor struct-shape-get-entity-response-arn :shape
                         "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (components :initarg :components :initform
                         common-lisp:nil :type
                         (common-lisp:or components-map common-lisp:null)
                         :accessor struct-shape-get-entity-response-components
                         :shape "ComponentsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-entity-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-get-entity-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entityid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-get-entity-response-entity-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-name :initarg :entity-name :initform
                         (common-lisp:error ":entityname is required") :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor struct-shape-get-entity-response-entity-name
                         :shape "EntityName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (has-child-entities :initarg :has-child-entities
                         :initform
                         (common-lisp:error ":haschildentities is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-get-entity-response-has-child-entities
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parent-entity-id :initarg :parent-entity-id :initform
                         (common-lisp:error ":parententityid is required")
                         :type
                         (common-lisp:or parent-entity-id common-lisp:null)
                         :accessor
                         struct-shape-get-entity-response-parent-entity-id
                         :shape "ParentEntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or status common-lisp:null) :accessor
                         struct-shape-get-entity-response-status :shape
                         "Status" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sync-source :initarg :sync-source :initform
                         common-lisp:nil :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor struct-shape-get-entity-response-sync-source
                         :shape "SyncSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-date-time :initarg :update-date-time :initform
                         (common-lisp:error ":updatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-entity-response-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-entity-response-workspace-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-entity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-entity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-entity-response 'make-get-entity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-entity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-entity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'are-all-components-returned))
      (common-lisp:list
       (common-lisp:cons "areAllComponentsReturned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-name))
      (common-lisp:list
       (common-lisp:cons "entityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-child-entities))
      (common-lisp:list
       (common-lisp:cons "hasChildEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-entity-id))
      (common-lisp:list
       (common-lisp:cons "parentEntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-source))
      (common-lisp:list
       (common-lisp:cons "syncSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-entity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-metadata-transfer-job-request common-lisp:nil
                       ((metadata-transfer-job-id :initarg
                         :metadata-transfer-job-id :initform
                         (common-lisp:error
                          ":metadatatransferjobid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-metadata-transfer-job-request-metadata-transfer-job-id
                         :shape "Id" :location "uri" :location-name
                         "metadataTransferJobId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-metadata-transfer-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-metadata-transfer-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-metadata-transfer-job-request
                    'make-get-metadata-transfer-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-metadata-transfer-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-metadata-transfer-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-metadata-transfer-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-metadata-transfer-job-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor
                         struct-shape-get-metadata-transfer-job-response-arn
                         :shape "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-metadata-transfer-job-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-get-metadata-transfer-job-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or destination-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-metadata-transfer-job-response-destination
                         :shape "DestinationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metadata-transfer-job-id :initarg
                         :metadata-transfer-job-id :initform
                         (common-lisp:error
                          ":metadatatransferjobid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-metadata-transfer-job-response-metadata-transfer-job-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metadata-transfer-job-role :initarg
                         :metadata-transfer-job-role :initform
                         (common-lisp:error
                          ":metadatatransferjobrole is required")
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-get-metadata-transfer-job-response-metadata-transfer-job-role
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (progress :initarg :progress :initform common-lisp:nil
                         :type
                         (common-lisp:or metadata-transfer-job-progress
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-metadata-transfer-job-response-progress
                         :shape "MetadataTransferJobProgress" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (report-url :initarg :report-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-metadata-transfer-job-response-report-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sources :initarg :sources :initform
                         (common-lisp:error ":sources is required") :type
                         (common-lisp:or source-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-metadata-transfer-job-response-sources
                         :shape "SourceConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or metadata-transfer-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-metadata-transfer-job-response-status
                         :shape "MetadataTransferJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (update-date-time :initarg :update-date-time :initform
                         (common-lisp:error ":updatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-metadata-transfer-job-response-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-metadata-transfer-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-metadata-transfer-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-metadata-transfer-job-response
                    'make-get-metadata-transfer-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-metadata-transfer-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-metadata-transfer-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metadata-transfer-job-id))
      (common-lisp:list
       (common-lisp:cons "metadataTransferJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metadata-transfer-job-role))
      (common-lisp:list
       (common-lisp:cons "metadataTransferJobRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-url))
      (common-lisp:list
       (common-lisp:cons "reportUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-metadata-transfer-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-pricing-plan-request common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-pricing-plan-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-pricing-plan-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-pricing-plan-request 'make-get-pricing-plan-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-pricing-plan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-pricing-plan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-pricing-plan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-pricing-plan-response common-lisp:nil
                       ((current-pricing-plan :initarg :current-pricing-plan
                         :initform
                         (common-lisp:error ":currentpricingplan is required")
                         :type (common-lisp:or pricing-plan common-lisp:null)
                         :accessor
                         struct-shape-get-pricing-plan-response-current-pricing-plan
                         :shape "PricingPlan" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-pricing-plan :initarg :pending-pricing-plan
                         :initform common-lisp:nil :type
                         (common-lisp:or pricing-plan common-lisp:null)
                         :accessor
                         struct-shape-get-pricing-plan-response-pending-pricing-plan
                         :shape "PricingPlan" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-pricing-plan-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-pricing-plan-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-pricing-plan-response
                    'make-get-pricing-plan-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-pricing-plan-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-pricing-plan-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-pricing-plan))
      (common-lisp:list
       (common-lisp:cons "currentPricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-pricing-plan))
      (common-lisp:list
       (common-lisp:cons "pendingPricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-pricing-plan-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-property-value-history-request common-lisp:nil
                       ((component-name :initarg :component-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-get-property-value-history-request-component-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (component-path :initarg :component-path :initform
                         common-lisp:nil :type
                         (common-lisp:or component-path common-lisp:null)
                         :accessor
                         struct-shape-get-property-value-history-request-component-path
                         :shape "ComponentPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-type-id :initarg :component-type-id
                         :initform common-lisp:nil :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-get-property-value-history-request-component-type-id
                         :shape "ComponentTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-property-value-history-request-end-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or time common-lisp:null) :accessor
                         struct-shape-get-property-value-history-request-end-time
                         :shape "Time" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-get-property-value-history-request-entity-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interpolation :initarg :interpolation :initform
                         common-lisp:nil :type
                         (common-lisp:or interpolation-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-property-value-history-request-interpolation
                         :shape "InterpolationParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-property-value-history-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-property-value-history-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order-by-time :initarg :order-by-time :initform
                         common-lisp:nil :type
                         (common-lisp:or order-by-time common-lisp:null)
                         :accessor
                         struct-shape-get-property-value-history-request-order-by-time
                         :shape "OrderByTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-filters :initarg :property-filters :initform
                         common-lisp:nil :type
                         (common-lisp:or property-filters common-lisp:null)
                         :accessor
                         struct-shape-get-property-value-history-request-property-filters
                         :shape "PropertyFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selected-properties :initarg :selected-properties
                         :initform
                         (common-lisp:error ":selectedproperties is required")
                         :type
                         (common-lisp:or selected-property-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-property-value-history-request-selected-properties
                         :shape "SelectedPropertyList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-date-time :initarg :start-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-property-value-history-request-start-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or time common-lisp:null) :accessor
                         struct-shape-get-property-value-history-request-start-time
                         :shape "Time" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-property-value-history-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-property-value-history-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-property-value-history-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-property-value-history-request
                    'make-get-property-value-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-path))
      (common-lisp:list
       (common-lisp:cons "componentPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "endDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interpolation))
      (common-lisp:list
       (common-lisp:cons "interpolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by-time))
      (common-lisp:list
       (common-lisp:cons "orderByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-filters))
      (common-lisp:list
       (common-lisp:cons "propertyFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-properties))
      (common-lisp:list
       (common-lisp:cons "selectedProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "startDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-property-value-history-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-property-value-history-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-values :initarg :property-values :initform
                         (common-lisp:error ":propertyvalues is required")
                         :type
                         (common-lisp:or property-value-list common-lisp:null)
                         :accessor
                         struct-shape-get-property-value-history-response-property-values
                         :shape "PropertyValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-property-value-history-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-property-value-history-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-property-value-history-response
                    'make-get-property-value-history-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-values))
      (common-lisp:list
       (common-lisp:cons "propertyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-property-value-request common-lisp:nil
                       ((component-name :initarg :component-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-get-property-value-request-component-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (component-path :initarg :component-path :initform
                         common-lisp:nil :type
                         (common-lisp:or component-path common-lisp:null)
                         :accessor
                         struct-shape-get-property-value-request-component-path
                         :shape "ComponentPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-type-id :initarg :component-type-id
                         :initform common-lisp:nil :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-get-property-value-request-component-type-id
                         :shape "ComponentTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-get-property-value-request-entity-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-property-value-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-property-value-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-group-name :initarg :property-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-get-property-value-request-property-group-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (selected-properties :initarg :selected-properties
                         :initform
                         (common-lisp:error ":selectedproperties is required")
                         :type
                         (common-lisp:or selected-property-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-property-value-request-selected-properties
                         :shape "SelectedPropertyList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tabular-conditions :initarg :tabular-conditions
                         :initform common-lisp:nil :type
                         (common-lisp:or tabular-conditions common-lisp:null)
                         :accessor
                         struct-shape-get-property-value-request-tabular-conditions
                         :shape "TabularConditions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-property-value-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-property-value-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-property-value-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-property-value-request
                    'make-get-property-value-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-path))
      (common-lisp:list
       (common-lisp:cons "componentPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-group-name))
      (common-lisp:list
       (common-lisp:cons "propertyGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-properties))
      (common-lisp:list
       (common-lisp:cons "selectedProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tabular-conditions))
      (common-lisp:list
       (common-lisp:cons "tabularConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-property-value-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-property-value-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-values :initarg :property-values :initform
                         common-lisp:nil :type
                         (common-lisp:or property-latest-value-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-property-value-response-property-values
                         :shape "PropertyLatestValueMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tabular-property-values :initarg
                         :tabular-property-values :initform common-lisp:nil
                         :type
                         (common-lisp:or tabular-property-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-property-value-response-tabular-property-values
                         :shape "TabularPropertyValues" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-property-value-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-property-value-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-property-value-response
                    'make-get-property-value-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-values))
      (common-lisp:list
       (common-lisp:cons "propertyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tabular-property-values))
      (common-lisp:list
       (common-lisp:cons "tabularPropertyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-scene-request common-lisp:nil
                       ((scene-id :initarg :scene-id :initform
                         (common-lisp:error ":sceneid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-scene-request-scene-id :shape "Id"
                         :location "uri" :location-name "sceneId")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-scene-request-workspace-id :shape
                         "Id" :location "uri" :location-name "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-scene-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-scene-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-scene-request 'make-get-scene-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-scene-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-scene-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-scene-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-scene-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor struct-shape-get-scene-response-arn :shape
                         "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capabilities :initarg :capabilities :initform
                         common-lisp:nil :type
                         (common-lisp:or scene-capabilities common-lisp:null)
                         :accessor struct-shape-get-scene-response-capabilities
                         :shape "SceneCapabilities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-location :initarg :content-location :initform
                         (common-lisp:error ":contentlocation is required")
                         :type (common-lisp:or s3url common-lisp:null)
                         :accessor
                         struct-shape-get-scene-response-content-location
                         :shape "S3Url" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-scene-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-get-scene-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or scene-error common-lisp:null)
                         :accessor struct-shape-get-scene-response-error :shape
                         "SceneError" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (generated-scene-metadata :initarg
                         :generated-scene-metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or generated-scene-metadata-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-scene-response-generated-scene-metadata
                         :shape "GeneratedSceneMetadataMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scene-id :initarg :scene-id :initform
                         (common-lisp:error ":sceneid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-scene-response-scene-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scene-metadata :initarg :scene-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or scene-metadata-map common-lisp:null)
                         :accessor
                         struct-shape-get-scene-response-scene-metadata :shape
                         "SceneMetadataMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-date-time :initarg :update-date-time :initform
                         (common-lisp:error ":updatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-scene-response-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-scene-response-workspace-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-scene-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-scene-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-scene-response 'make-get-scene-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-scene-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-scene-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-location))
      (common-lisp:list
       (common-lisp:cons "contentLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-scene-metadata))
      (common-lisp:list
       (common-lisp:cons "generatedSceneMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-id))
      (common-lisp:list
       (common-lisp:cons "sceneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-metadata))
      (common-lisp:list
       (common-lisp:cons "sceneMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-scene-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sync-job-request common-lisp:nil
                       ((sync-source :initarg :sync-source :initform
                         (common-lisp:error ":syncsource is required") :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor
                         struct-shape-get-sync-job-request-sync-source :shape
                         "SyncSource" :location "uri" :location-name
                         "syncSource")
                        (workspace-id :initarg :workspace-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-sync-job-request-workspace-id :shape
                         "Id" :location "querystring" :location-name
                         "workspace"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sync-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-sync-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sync-job-request 'make-get-sync-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-sync-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sync-job-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor struct-shape-get-sync-job-response-arn
                         :shape "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-sync-job-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or sync-job-status common-lisp:null)
                         :accessor struct-shape-get-sync-job-response-status
                         :shape "SyncJobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-role :initarg :sync-role :initform
                         (common-lisp:error ":syncrole is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-get-sync-job-response-sync-role :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sync-source :initarg :sync-source :initform
                         (common-lisp:error ":syncsource is required") :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor
                         struct-shape-get-sync-job-response-sync-source :shape
                         "SyncSource" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-date-time :initarg :update-date-time :initform
                         (common-lisp:error ":updatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-sync-job-response-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-sync-job-response-workspace-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sync-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-sync-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sync-job-response 'make-get-sync-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-role))
      (common-lisp:list
       (common-lisp:cons "syncRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-source))
      (common-lisp:list
       (common-lisp:cons "syncSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workspace-request common-lisp:nil
                       ((workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id-or-arn common-lisp:null) :accessor
                         struct-shape-get-workspace-request-workspace-id :shape
                         "IdOrArn" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workspace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workspace-request 'make-get-workspace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workspace-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor struct-shape-get-workspace-response-arn
                         :shape "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-workspace-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-get-workspace-response-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (linked-services :initarg :linked-services :initform
                         common-lisp:nil :type
                         (common-lisp:or linked-services common-lisp:null)
                         :accessor
                         struct-shape-get-workspace-response-linked-services
                         :shape "LinkedServices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-get-workspace-response-role :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3location :initarg :s3location :initform
                         common-lisp:nil :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         struct-shape-get-workspace-response-s3location :shape
                         "S3Location" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-date-time :initarg :update-date-time :initform
                         (common-lisp:error ":updatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-workspace-response-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-workspace-response-workspace-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workspace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-workspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workspace-response 'make-get-workspace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workspace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linked-services))
      (common-lisp:list
       (common-lisp:cons "linkedServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workspace-response))
   common-lisp:nil))
(common-lisp:deftype group-type () 'common-lisp:string)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:deftype id-or-arn () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (iottwinmaker-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass interpolation-parameters common-lisp:nil
                       ((interpolation-type :initarg :interpolation-type
                         :initform common-lisp:nil :type
                         (common-lisp:or interpolation-type common-lisp:null)
                         :accessor
                         struct-shape-interpolation-parameters-interpolation-type
                         :shape "InterpolationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interval-in-seconds :initarg :interval-in-seconds
                         :initform common-lisp:nil :type
                         (common-lisp:or interval-in-seconds common-lisp:null)
                         :accessor
                         struct-shape-interpolation-parameters-interval-in-seconds
                         :shape "IntervalInSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-interpolation-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'interpolation-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'interpolation-parameters 'make-interpolation-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          interpolation-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          interpolation-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interpolation-type))
      (common-lisp:list
       (common-lisp:cons "interpolationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-in-seconds))
      (common-lisp:list
       (common-lisp:cons "intervalInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          interpolation-parameters))
   common-lisp:nil))
(common-lisp:deftype interpolation-type () 'common-lisp:string)
(common-lisp:deftype interval-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass iot-site-wise-source-configuration common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          iot-site-wise-source-configuration-filters
                          common-lisp:null)
                         :accessor
                         struct-shape-iot-site-wise-source-configuration-filters
                         :shape "IotSiteWiseSourceConfigurationFilters"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iot-site-wise-source-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'iot-site-wise-source-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iot-site-wise-source-configuration
                    'make-iot-site-wise-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iot-site-wise-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iot-site-wise-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iot-site-wise-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iot-site-wise-source-configuration-filter
                       common-lisp:nil
                       ((filter-by-asset :initarg :filter-by-asset :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-by-asset common-lisp:null)
                         :accessor
                         struct-shape-iot-site-wise-source-configuration-filter-filter-by-asset
                         :shape "FilterByAsset" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-by-asset-model :initarg :filter-by-asset-model
                         :initform common-lisp:nil :type
                         (common-lisp:or filter-by-asset-model
                                         common-lisp:null)
                         :accessor
                         struct-shape-iot-site-wise-source-configuration-filter-filter-by-asset-model
                         :shape "FilterByAssetModel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iot-site-wise-source-configuration-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'iot-site-wise-source-configuration-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iot-site-wise-source-configuration-filter
                    'make-iot-site-wise-source-configuration-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iot-site-wise-source-configuration-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iot-site-wise-source-configuration-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-by-asset))
      (common-lisp:list
       (common-lisp:cons "filterByAsset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filter-by-asset-model))
      (common-lisp:list
       (common-lisp:cons "filterByAssetModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iot-site-wise-source-configuration-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype iot-site-wise-source-configuration-filters ()
   '(trivial-types:proper-list iot-site-wise-source-configuration-filter))
 (common-lisp:defun make-iot-site-wise-source-configuration-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            iot-site-wise-source-configuration-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass iot-twin-maker-destination-configuration common-lisp:nil
                       ((workspace :initarg :workspace :initform
                         (common-lisp:error ":workspace is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor
                         struct-shape-iot-twin-maker-destination-configuration-workspace
                         :shape "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iot-twin-maker-destination-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'iot-twin-maker-destination-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iot-twin-maker-destination-configuration
                    'make-iot-twin-maker-destination-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iot-twin-maker-destination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iot-twin-maker-destination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace))
      (common-lisp:list
       (common-lisp:cons "workspace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iot-twin-maker-destination-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iot-twin-maker-source-configuration common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          iot-twin-maker-source-configuration-filters
                          common-lisp:null)
                         :accessor
                         struct-shape-iot-twin-maker-source-configuration-filters
                         :shape "IotTwinMakerSourceConfigurationFilters"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace :initarg :workspace :initform
                         (common-lisp:error ":workspace is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor
                         struct-shape-iot-twin-maker-source-configuration-workspace
                         :shape "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iot-twin-maker-source-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'iot-twin-maker-source-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iot-twin-maker-source-configuration
                    'make-iot-twin-maker-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iot-twin-maker-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iot-twin-maker-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace))
      (common-lisp:list
       (common-lisp:cons "workspace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iot-twin-maker-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iot-twin-maker-source-configuration-filter
                       common-lisp:nil
                       ((filter-by-component-type :initarg
                         :filter-by-component-type :initform common-lisp:nil
                         :type
                         (common-lisp:or filter-by-component-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-iot-twin-maker-source-configuration-filter-filter-by-component-type
                         :shape "FilterByComponentType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filter-by-entity :initarg :filter-by-entity :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-by-entity common-lisp:null)
                         :accessor
                         struct-shape-iot-twin-maker-source-configuration-filter-filter-by-entity
                         :shape "FilterByEntity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iot-twin-maker-source-configuration-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'iot-twin-maker-source-configuration-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iot-twin-maker-source-configuration-filter
                    'make-iot-twin-maker-source-configuration-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iot-twin-maker-source-configuration-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iot-twin-maker-source-configuration-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filter-by-component-type))
      (common-lisp:list
       (common-lisp:cons "filterByComponentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-by-entity))
      (common-lisp:list
       (common-lisp:cons "filterByEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iot-twin-maker-source-configuration-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype iot-twin-maker-source-configuration-filters ()
   '(trivial-types:proper-list iot-twin-maker-source-configuration-filter))
 (common-lisp:defun make-iot-twin-maker-source-configuration-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            iot-twin-maker-source-configuration-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lambda-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lambda-function common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or lambda-arn common-lisp:null) :accessor
                         struct-shape-lambda-function-arn :shape "LambdaArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-function
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-function
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lambda-function 'make-lambda-function))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-function))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-function))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-function))
   common-lisp:nil))
(common-lisp:deftype linked-service () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype linked-services ()
   '(trivial-types:proper-list linked-service))
 (common-lisp:defun make-linked-services
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list linked-service))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-component-types-filter common-lisp:nil
                       ((extends-from :initarg :extends-from :initform
                         common-lisp:nil :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-list-component-types-filter-extends-from
                         :shape "ComponentTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-abstract :initarg :is-abstract :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-list-component-types-filter-is-abstract
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (namespace :initarg :namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-component-types-filter-namespace
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-component-types-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-component-types-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-component-types-filter
                    'make-list-component-types-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extends-from))
      (common-lisp:list
       (common-lisp:cons "extendsFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-abstract))
      (common-lisp:list
       (common-lisp:cons "isAbstract"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-component-types-filters ()
   '(trivial-types:proper-list list-component-types-filter))
 (common-lisp:defun make-list-component-types-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-component-types-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-component-types-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or list-component-types-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-component-types-request-filters
                         :shape "ListComponentTypesFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-component-types-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-component-types-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-component-types-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-component-types-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-component-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-component-types-request
                    'make-list-component-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-component-types-response common-lisp:nil
                       ((component-type-summaries :initarg
                         :component-type-summaries :initform
                         (common-lisp:error
                          ":componenttypesummaries is required")
                         :type
                         (common-lisp:or component-type-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-component-types-response-component-type-summaries
                         :shape "ComponentTypeSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-component-types-response-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-component-types-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-component-types-response-workspace-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-component-types-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-component-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-component-types-response
                    'make-list-component-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-type-summaries))
      (common-lisp:list
       (common-lisp:cons "componentTypeSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-components-request common-lisp:nil
                       ((component-path :initarg :component-path :initform
                         common-lisp:nil :type
                         (common-lisp:or component-path common-lisp:null)
                         :accessor
                         struct-shape-list-components-request-component-path
                         :shape "ComponentPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entityid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-list-components-request-entity-id :shape
                         "EntityId" :location "uri" :location-name "entityId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-components-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-components-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-components-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-components-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-components-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-components-request 'make-list-components-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-path))
      (common-lisp:list
       (common-lisp:cons "componentPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-components-response common-lisp:nil
                       ((component-summaries :initarg :component-summaries
                         :initform
                         (common-lisp:error ":componentsummaries is required")
                         :type
                         (common-lisp:or component-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-components-response-component-summaries
                         :shape "ComponentSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-components-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-components-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-components-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-components-response 'make-list-components-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-summaries))
      (common-lisp:list
       (common-lisp:cons "componentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-entities-filter common-lisp:nil
                       ((component-type-id :initarg :component-type-id
                         :initform common-lisp:nil :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-list-entities-filter-component-type-id
                         :shape "ComponentTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-entities-filter-external-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parent-entity-id :initarg :parent-entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or parent-entity-id common-lisp:null)
                         :accessor
                         struct-shape-list-entities-filter-parent-entity-id
                         :shape "ParentEntityId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-entities-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-entities-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-entities-filter 'make-list-entities-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-entities-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-entities-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-entity-id))
      (common-lisp:list
       (common-lisp:cons "parentEntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-entities-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-entities-filters ()
   '(trivial-types:proper-list list-entities-filter))
 (common-lisp:defun make-list-entities-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list list-entities-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-entities-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or list-entities-filters
                                         common-lisp:null)
                         :accessor struct-shape-list-entities-request-filters
                         :shape "ListEntitiesFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-entities-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-entities-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-entities-request-workspace-id :shape
                         "Id" :location "uri" :location-name "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-entities-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-entities-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-entities-request 'make-list-entities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-entities-response common-lisp:nil
                       ((entity-summaries :initarg :entity-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-entities-response-entity-summaries
                         :shape "EntitySummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-entities-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-entities-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-entities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-entities-response 'make-list-entities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-summaries))
      (common-lisp:list
       (common-lisp:cons "entitySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-metadata-transfer-jobs-filter common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or metadata-transfer-job-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-metadata-transfer-jobs-filter-state
                         :shape "MetadataTransferJobState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-metadata-transfer-jobs-filter-workspace-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-metadata-transfer-jobs-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-metadata-transfer-jobs-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-metadata-transfer-jobs-filter
                    'make-list-metadata-transfer-jobs-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-metadata-transfer-jobs-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-metadata-transfer-jobs-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-metadata-transfer-jobs-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-metadata-transfer-jobs-filters ()
   '(trivial-types:proper-list list-metadata-transfer-jobs-filter))
 (common-lisp:defun make-list-metadata-transfer-jobs-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-metadata-transfer-jobs-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-metadata-transfer-jobs-request common-lisp:nil
                       ((destination-type :initarg :destination-type :initform
                         (common-lisp:error ":destinationtype is required")
                         :type
                         (common-lisp:or destination-type common-lisp:null)
                         :accessor
                         struct-shape-list-metadata-transfer-jobs-request-destination-type
                         :shape "DestinationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or list-metadata-transfer-jobs-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-metadata-transfer-jobs-request-filters
                         :shape "ListMetadataTransferJobsFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-metadata-transfer-jobs-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-metadata-transfer-jobs-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         (common-lisp:error ":sourcetype is required") :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor
                         struct-shape-list-metadata-transfer-jobs-request-source-type
                         :shape "SourceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-metadata-transfer-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-metadata-transfer-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-metadata-transfer-jobs-request
                    'make-list-metadata-transfer-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-metadata-transfer-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-metadata-transfer-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "destinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "sourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-metadata-transfer-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-metadata-transfer-jobs-response common-lisp:nil
                       ((metadata-transfer-job-summaries :initarg
                         :metadata-transfer-job-summaries :initform
                         (common-lisp:error
                          ":metadatatransferjobsummaries is required")
                         :type
                         (common-lisp:or metadata-transfer-job-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-metadata-transfer-jobs-response-metadata-transfer-job-summaries
                         :shape "MetadataTransferJobSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-metadata-transfer-jobs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-metadata-transfer-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-metadata-transfer-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-metadata-transfer-jobs-response
                    'make-list-metadata-transfer-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-metadata-transfer-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-metadata-transfer-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metadata-transfer-job-summaries))
      (common-lisp:list
       (common-lisp:cons "metadataTransferJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-metadata-transfer-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-properties-request common-lisp:nil
                       ((component-name :initarg :component-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-list-properties-request-component-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (component-path :initarg :component-path :initform
                         common-lisp:nil :type
                         (common-lisp:or component-path common-lisp:null)
                         :accessor
                         struct-shape-list-properties-request-component-path
                         :shape "ComponentPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entityid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-list-properties-request-entity-id :shape
                         "EntityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-properties-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-properties-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-properties-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-properties-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-properties-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-properties-request 'make-list-properties-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-properties-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-path))
      (common-lisp:list
       (common-lisp:cons "componentPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-properties-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-properties-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-summaries :initarg :property-summaries
                         :initform
                         (common-lisp:error ":propertysummaries is required")
                         :type
                         (common-lisp:or property-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-properties-response-property-summaries
                         :shape "PropertySummaries" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-properties-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-properties-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-properties-response 'make-list-properties-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-properties-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-properties-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-summaries))
      (common-lisp:list
       (common-lisp:cons "propertySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-properties-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-scenes-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-scenes-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-scenes-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-scenes-request-workspace-id :shape
                         "Id" :location "uri" :location-name "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-scenes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-scenes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-scenes-request 'make-list-scenes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-scenes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-scenes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-scenes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-scenes-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-scenes-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scene-summaries :initarg :scene-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or scene-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-scenes-response-scene-summaries
                         :shape "SceneSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-scenes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-scenes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-scenes-response 'make-list-scenes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-scenes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-scenes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-summaries))
      (common-lisp:list
       (common-lisp:cons "sceneSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-scenes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sync-jobs-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-sync-jobs-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-sync-jobs-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-sync-jobs-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sync-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-sync-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sync-jobs-request 'make-list-sync-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sync-jobs-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-sync-jobs-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sync-job-summaries :initarg :sync-job-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or sync-job-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-sync-jobs-response-sync-job-summaries
                         :shape "SyncJobSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sync-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-sync-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sync-jobs-response 'make-list-sync-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-job-summaries))
      (common-lisp:list
       (common-lisp:cons "syncJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sync-resources-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or sync-resource-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sync-resources-request-filters
                         :shape "SyncResourceFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-sync-resources-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-sync-resources-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-source :initarg :sync-source :initform
                         (common-lisp:error ":syncsource is required") :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor
                         struct-shape-list-sync-resources-request-sync-source
                         :shape "SyncSource" :location "uri" :location-name
                         "syncSource")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-sync-resources-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sync-resources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-sync-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sync-resources-request
                    'make-list-sync-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sync-resources-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-sync-resources-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-resources :initarg :sync-resources :initform
                         common-lisp:nil :type
                         (common-lisp:or sync-resource-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sync-resources-response-sync-resources
                         :shape "SyncResourceSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sync-resources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-sync-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sync-resources-response
                    'make-list-sync-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-resources))
      (common-lisp:list
       (common-lisp:cons "syncResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workspaces-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-workspaces-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-workspaces-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workspaces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workspaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workspaces-request 'make-list-workspaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workspaces-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-workspaces-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-summaries :initarg :workspace-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or workspace-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-workspaces-response-workspace-summaries
                         :shape "WorkspaceSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workspaces-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workspaces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workspaces-response 'make-list-workspaces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-summaries))
      (common-lisp:list
       (common-lisp:cons "workspaceSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass metadata-transfer-job-progress common-lisp:nil
                       ((failed-count :initarg :failed-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-metadata-transfer-job-progress-failed-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skipped-count :initarg :skipped-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-metadata-transfer-job-progress-skipped-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (succeeded-count :initarg :succeeded-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-metadata-transfer-job-progress-succeeded-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-metadata-transfer-job-progress-total-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metadata-transfer-job-progress
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'metadata-transfer-job-progress
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metadata-transfer-job-progress
                    'make-metadata-transfer-job-progress))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metadata-transfer-job-progress))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metadata-transfer-job-progress))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-count))
      (common-lisp:list
       (common-lisp:cons "failedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skipped-count))
      (common-lisp:list
       (common-lisp:cons "skippedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'succeeded-count))
      (common-lisp:list
       (common-lisp:cons "succeededCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "totalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metadata-transfer-job-progress))
   common-lisp:nil))
(common-lisp:deftype metadata-transfer-job-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metadata-transfer-job-status common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor
                         struct-shape-metadata-transfer-job-status-error :shape
                         "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (queued-position :initarg :queued-position :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-metadata-transfer-job-status-queued-position
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or metadata-transfer-job-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-metadata-transfer-job-status-state :shape
                         "MetadataTransferJobState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metadata-transfer-job-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metadata-transfer-job-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metadata-transfer-job-status
                    'make-metadata-transfer-job-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metadata-transfer-job-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metadata-transfer-job-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queued-position))
      (common-lisp:list
       (common-lisp:cons "queuedPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metadata-transfer-job-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metadata-transfer-job-summaries ()
   '(trivial-types:proper-list metadata-transfer-job-summary))
 (common-lisp:defun make-metadata-transfer-job-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            metadata-transfer-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass metadata-transfer-job-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor
                         struct-shape-metadata-transfer-job-summary-arn :shape
                         "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-metadata-transfer-job-summary-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata-transfer-job-id :initarg
                         :metadata-transfer-job-id :initform
                         (common-lisp:error
                          ":metadatatransferjobid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-metadata-transfer-job-summary-metadata-transfer-job-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (progress :initarg :progress :initform common-lisp:nil
                         :type
                         (common-lisp:or metadata-transfer-job-progress
                                         common-lisp:null)
                         :accessor
                         struct-shape-metadata-transfer-job-summary-progress
                         :shape "MetadataTransferJobProgress" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or metadata-transfer-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-metadata-transfer-job-summary-status
                         :shape "MetadataTransferJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (update-date-time :initarg :update-date-time :initform
                         (common-lisp:error ":updatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-metadata-transfer-job-summary-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metadata-transfer-job-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'metadata-transfer-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metadata-transfer-job-summary
                    'make-metadata-transfer-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metadata-transfer-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metadata-transfer-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metadata-transfer-job-id))
      (common-lisp:list
       (common-lisp:cons "metadataTransferJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metadata-transfer-job-summary))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass order-by common-lisp:nil
                       ((order :initarg :order :initform common-lisp:nil :type
                         (common-lisp:or order common-lisp:null) :accessor
                         struct-shape-order-by-order :shape "Order" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (property-name :initarg :property-name :initform
                         (common-lisp:error ":propertyname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-order-by-property-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-order-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'order-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'order-by 'make-order-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input order-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input order-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-name))
      (common-lisp:list
       (common-lisp:cons "propertyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input order-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype order-by-list () '(trivial-types:proper-list order-by))
 (common-lisp:defun make-order-by-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list order-by))
   aws-sdk/generator/shape::members))
(common-lisp:deftype order-by-time () 'common-lisp:string)
(common-lisp:deftype parent-entity-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass parent-entity-update-request common-lisp:nil
                       ((parent-entity-id :initarg :parent-entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or parent-entity-id common-lisp:null)
                         :accessor
                         struct-shape-parent-entity-update-request-parent-entity-id
                         :shape "ParentEntityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-type :initarg :update-type :initform
                         (common-lisp:error ":updatetype is required") :type
                         (common-lisp:or parent-entity-update-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-parent-entity-update-request-update-type
                         :shape "ParentEntityUpdateType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parent-entity-update-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parent-entity-update-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'parent-entity-update-request
                    'make-parent-entity-update-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parent-entity-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parent-entity-update-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-entity-id))
      (common-lisp:list
       (common-lisp:cons "parentEntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-type))
      (common-lisp:list
       (common-lisp:cons "updateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parent-entity-update-request))
   common-lisp:nil))
(common-lisp:deftype parent-entity-update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype pricing-bundles ()
   '(trivial-types:proper-list bundle-name))
 (common-lisp:defun make-pricing-bundles
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bundle-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pricing-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pricing-plan common-lisp:nil
                       ((billable-entity-count :initarg :billable-entity-count
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-pricing-plan-billable-entity-count :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bundle-information :initarg :bundle-information
                         :initform common-lisp:nil :type
                         (common-lisp:or bundle-information common-lisp:null)
                         :accessor struct-shape-pricing-plan-bundle-information
                         :shape "BundleInformation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (effective-date-time :initarg :effective-date-time
                         :initform
                         (common-lisp:error ":effectivedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-pricing-plan-effective-date-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pricing-mode :initarg :pricing-mode :initform
                         (common-lisp:error ":pricingmode is required") :type
                         (common-lisp:or pricing-mode common-lisp:null)
                         :accessor struct-shape-pricing-plan-pricing-mode
                         :shape "PricingMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-date-time :initarg :update-date-time :initform
                         (common-lisp:error ":updatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-pricing-plan-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-reason :initarg :update-reason :initform
                         (common-lisp:error ":updatereason is required") :type
                         (common-lisp:or update-reason common-lisp:null)
                         :accessor struct-shape-pricing-plan-update-reason
                         :shape "UpdateReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pricing-plan
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pricing-plan
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'pricing-plan 'make-pricing-plan))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pricing-plan))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pricing-plan))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billable-entity-count))
      (common-lisp:list
       (common-lisp:cons "billableEntityCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-information))
      (common-lisp:list
       (common-lisp:cons "bundleInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-date-time))
      (common-lisp:list
       (common-lisp:cons "effectiveDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-mode))
      (common-lisp:list
       (common-lisp:cons "pricingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-reason))
      (common-lisp:list
       (common-lisp:cons "updateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pricing-plan))
   common-lisp:nil))
(common-lisp:deftype pricing-tier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass property-definition-request common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration common-lisp:null)
                         :accessor
                         struct-shape-property-definition-request-configuration
                         :shape "Configuration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         common-lisp:nil :type
                         (common-lisp:or data-type common-lisp:null) :accessor
                         struct-shape-property-definition-request-data-type
                         :shape "DataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or data-value common-lisp:null) :accessor
                         struct-shape-property-definition-request-default-value
                         :shape "DataValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or property-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-property-definition-request-display-name
                         :shape "PropertyDisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-external-id :initarg :is-external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-property-definition-request-is-external-id
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-required-in-entity :initarg :is-required-in-entity
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-property-definition-request-is-required-in-entity
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-stored-externally :initarg :is-stored-externally
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-property-definition-request-is-stored-externally
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-time-series :initarg :is-time-series :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-property-definition-request-is-time-series
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'property-definition-request
                    'make-property-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          property-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          property-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-external-id))
      (common-lisp:list
       (common-lisp:cons "isExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-required-in-entity))
      (common-lisp:list
       (common-lisp:cons "isRequiredInEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-stored-externally))
      (common-lisp:list
       (common-lisp:cons "isStoredExternally"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-time-series))
      (common-lisp:list
       (common-lisp:cons "isTimeSeries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          property-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass property-definition-response common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration common-lisp:null)
                         :accessor
                         struct-shape-property-definition-response-configuration
                         :shape "Configuration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         (common-lisp:error ":datatype is required") :type
                         (common-lisp:or data-type common-lisp:null) :accessor
                         struct-shape-property-definition-response-data-type
                         :shape "DataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or data-value common-lisp:null) :accessor
                         struct-shape-property-definition-response-default-value
                         :shape "DataValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or property-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-property-definition-response-display-name
                         :shape "PropertyDisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-external-id :initarg :is-external-id :initform
                         (common-lisp:error ":isexternalid is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-property-definition-response-is-external-id
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-final :initarg :is-final :initform
                         (common-lisp:error ":isfinal is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-property-definition-response-is-final
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-imported :initarg :is-imported :initform
                         (common-lisp:error ":isimported is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-property-definition-response-is-imported
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-inherited :initarg :is-inherited :initform
                         (common-lisp:error ":isinherited is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-property-definition-response-is-inherited
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-required-in-entity :initarg :is-required-in-entity
                         :initform
                         (common-lisp:error ":isrequiredinentity is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-property-definition-response-is-required-in-entity
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-stored-externally :initarg :is-stored-externally
                         :initform
                         (common-lisp:error ":isstoredexternally is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-property-definition-response-is-stored-externally
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-time-series :initarg :is-time-series :initform
                         (common-lisp:error ":istimeseries is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-property-definition-response-is-time-series
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'property-definition-response
                    'make-property-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          property-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          property-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-external-id))
      (common-lisp:list
       (common-lisp:cons "isExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-final))
      (common-lisp:list
       (common-lisp:cons "isFinal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-imported))
      (common-lisp:list
       (common-lisp:cons "isImported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-inherited))
      (common-lisp:list
       (common-lisp:cons "isInherited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-required-in-entity))
      (common-lisp:list
       (common-lisp:cons "isRequiredInEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-stored-externally))
      (common-lisp:list
       (common-lisp:cons "isStoredExternally"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-time-series))
      (common-lisp:list
       (common-lisp:cons "isTimeSeries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          property-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-definitions-request () 'common-lisp:hash-table)
 (common-lisp:defun make-property-definitions-request
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype property-definitions-response () 'common-lisp:hash-table)
 (common-lisp:defun make-property-definitions-response
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype property-display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass property-filter common-lisp:nil
                       ((operator :initarg :operator :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-property-filter-operator :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (property-name :initarg :property-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-property-filter-property-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or data-value common-lisp:null) :accessor
                         struct-shape-property-filter-value :shape "DataValue"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'property-filter 'make-property-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-name))
      (common-lisp:list
       (common-lisp:cons "propertyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-filters ()
   '(trivial-types:proper-list property-filter))
 (common-lisp:defun make-property-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass property-group-request common-lisp:nil
                       ((group-type :initarg :group-type :initform
                         common-lisp:nil :type
                         (common-lisp:or group-type common-lisp:null) :accessor
                         struct-shape-property-group-request-group-type :shape
                         "GroupType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (property-names :initarg :property-names :initform
                         common-lisp:nil :type
                         (common-lisp:or property-names common-lisp:null)
                         :accessor
                         struct-shape-property-group-request-property-names
                         :shape "PropertyNames" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'property-group-request 'make-property-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          property-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          property-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-type))
      (common-lisp:list
       (common-lisp:cons "groupType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-names))
      (common-lisp:list
       (common-lisp:cons "propertyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          property-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass property-group-response common-lisp:nil
                       ((group-type :initarg :group-type :initform
                         (common-lisp:error ":grouptype is required") :type
                         (common-lisp:or group-type common-lisp:null) :accessor
                         struct-shape-property-group-response-group-type :shape
                         "GroupType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-inherited :initarg :is-inherited :initform
                         (common-lisp:error ":isinherited is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-property-group-response-is-inherited
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-names :initarg :property-names :initform
                         (common-lisp:error ":propertynames is required") :type
                         (common-lisp:or property-names common-lisp:null)
                         :accessor
                         struct-shape-property-group-response-property-names
                         :shape "PropertyNames" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'property-group-response 'make-property-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          property-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          property-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-type))
      (common-lisp:list
       (common-lisp:cons "groupType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-inherited))
      (common-lisp:list
       (common-lisp:cons "isInherited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-names))
      (common-lisp:list
       (common-lisp:cons "propertyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          property-group-response))
   common-lisp:nil))
(common-lisp:deftype property-group-update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype property-groups-request () 'common-lisp:hash-table)
 (common-lisp:defun make-property-groups-request
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype property-groups-response () 'common-lisp:hash-table)
 (common-lisp:defun make-property-groups-response
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass property-latest-value common-lisp:nil
                       ((property-reference :initarg :property-reference
                         :initform
                         (common-lisp:error ":propertyreference is required")
                         :type
                         (common-lisp:or entity-property-reference
                                         common-lisp:null)
                         :accessor
                         struct-shape-property-latest-value-property-reference
                         :shape "EntityPropertyReference" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (property-value :initarg :property-value :initform
                         common-lisp:nil :type
                         (common-lisp:or data-value common-lisp:null) :accessor
                         struct-shape-property-latest-value-property-value
                         :shape "DataValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-latest-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-latest-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'property-latest-value 'make-property-latest-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          property-latest-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          property-latest-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-reference))
      (common-lisp:list
       (common-lisp:cons "propertyReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-value))
      (common-lisp:list
       (common-lisp:cons "propertyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          property-latest-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-latest-value-map () 'common-lisp:hash-table)
 (common-lisp:defun make-property-latest-value-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype property-names () '(trivial-types:proper-list name))
 (common-lisp:defun make-property-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass property-request common-lisp:nil
                       ((definition :initarg :definition :initform
                         common-lisp:nil :type
                         (common-lisp:or property-definition-request
                                         common-lisp:null)
                         :accessor struct-shape-property-request-definition
                         :shape "PropertyDefinitionRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (update-type :initarg :update-type :initform
                         common-lisp:nil :type
                         (common-lisp:or property-update-type common-lisp:null)
                         :accessor struct-shape-property-request-update-type
                         :shape "PropertyUpdateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or data-value common-lisp:null) :accessor
                         struct-shape-property-request-value :shape "DataValue"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'property-request 'make-property-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-type))
      (common-lisp:list
       (common-lisp:cons "updateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-requests () 'common-lisp:hash-table)
 (common-lisp:defun make-property-requests
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass property-response common-lisp:nil
                       ((are-all-property-values-returned :initarg
                         :are-all-property-values-returned :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-property-response-are-all-property-values-returned
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (definition :initarg :definition :initform
                         common-lisp:nil :type
                         (common-lisp:or property-definition-response
                                         common-lisp:null)
                         :accessor struct-shape-property-response-definition
                         :shape "PropertyDefinitionResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or data-value common-lisp:null) :accessor
                         struct-shape-property-response-value :shape
                         "DataValue" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'property-response 'make-property-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'are-all-property-values-returned))
      (common-lisp:list
       (common-lisp:cons "areAllPropertyValuesReturned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-responses () 'common-lisp:hash-table)
 (common-lisp:defun make-property-responses
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype property-summaries ()
   '(trivial-types:proper-list property-summary))
 (common-lisp:defun make-property-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass property-summary common-lisp:nil
                       ((are-all-property-values-returned :initarg
                         :are-all-property-values-returned :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-property-summary-are-all-property-values-returned
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (definition :initarg :definition :initform
                         common-lisp:nil :type
                         (common-lisp:or property-definition-response
                                         common-lisp:null)
                         :accessor struct-shape-property-summary-definition
                         :shape "PropertyDefinitionResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (property-name :initarg :property-name :initform
                         (common-lisp:error ":propertyname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-property-summary-property-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or data-value common-lisp:null) :accessor
                         struct-shape-property-summary-value :shape "DataValue"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'property-summary 'make-property-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'are-all-property-values-returned))
      (common-lisp:list
       (common-lisp:cons "areAllPropertyValuesReturned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-name))
      (common-lisp:list
       (common-lisp:cons "propertyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-table-value () 'common-lisp:hash-table)
 (common-lisp:defun make-property-table-value
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype property-update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass property-value common-lisp:nil
                       ((time :initarg :time :initform common-lisp:nil :type
                         (common-lisp:or time common-lisp:null) :accessor
                         struct-shape-property-value-time :shape "Time"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-property-value-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or data-value common-lisp:null) :accessor
                         struct-shape-property-value-value :shape "DataValue"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'property-value 'make-property-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass property-value-entry common-lisp:nil
                       ((entity-property-reference :initarg
                         :entity-property-reference :initform
                         (common-lisp:error
                          ":entitypropertyreference is required")
                         :type
                         (common-lisp:or entity-property-reference
                                         common-lisp:null)
                         :accessor
                         struct-shape-property-value-entry-entity-property-reference
                         :shape "EntityPropertyReference" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (property-values :initarg :property-values :initform
                         common-lisp:nil :type
                         (common-lisp:or property-values common-lisp:null)
                         :accessor
                         struct-shape-property-value-entry-property-values
                         :shape "PropertyValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-value-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-value-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'property-value-entry 'make-property-value-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-value-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-value-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'entity-property-reference))
      (common-lisp:list
       (common-lisp:cons "entityPropertyReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-values))
      (common-lisp:list
       (common-lisp:cons "propertyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-value-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass property-value-history common-lisp:nil
                       ((entity-property-reference :initarg
                         :entity-property-reference :initform
                         (common-lisp:error
                          ":entitypropertyreference is required")
                         :type
                         (common-lisp:or entity-property-reference
                                         common-lisp:null)
                         :accessor
                         struct-shape-property-value-history-entity-property-reference
                         :shape "EntityPropertyReference" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or values common-lisp:null)
                         :accessor struct-shape-property-value-history-values
                         :shape "Values" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-value-history
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-value-history
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'property-value-history 'make-property-value-history))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          property-value-history))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          property-value-history))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'entity-property-reference))
      (common-lisp:list
       (common-lisp:cons "entityPropertyReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          property-value-history))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-value-list ()
   '(trivial-types:proper-list property-value-history))
 (common-lisp:defun make-property-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-value-history))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype property-values ()
   '(trivial-types:proper-list property-value))
 (common-lisp:defun make-property-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-service-max-results () 'common-lisp:integer)
(common-lisp:deftype query-statement () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition query-timeout-exception
     (iottwinmaker-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       query-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'query-timeout-exception 'query-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:defclass relationship common-lisp:nil
                       ((relationship-type :initarg :relationship-type
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-relationship-relationship-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-component-type-id :initarg
                         :target-component-type-id :initform common-lisp:nil
                         :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-relationship-target-component-type-id
                         :shape "ComponentTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relationship
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'relationship
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'relationship 'make-relationship))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input relationship))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input relationship))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-type))
      (common-lisp:list
       (common-lisp:cons "relationshipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-component-type-id))
      (common-lisp:list
       (common-lisp:cons "targetComponentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input relationship))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass relationship-value common-lisp:nil
                       ((target-component-name :initarg :target-component-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-relationship-value-target-component-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-entity-id :initarg :target-entity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-relationship-value-target-entity-id
                         :shape "EntityId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relationship-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'relationship-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'relationship-value 'make-relationship-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input relationship-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input relationship-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-component-name))
      (common-lisp:list
       (common-lisp:cons "targetComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-entity-id))
      (common-lisp:list
       (common-lisp:cons "targetEntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input relationship-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype required-properties () '(trivial-types:proper-list name))
 (common-lisp:defun make-required-properties
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (iottwinmaker-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass row common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-row (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'row
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'row 'make-row))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input row))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input row))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input row))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rows () '(trivial-types:proper-list row))
 (common-lisp:defun make-rows
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list row))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass s3destination-configuration common-lisp:nil
                       ((location :initarg :location :initform
                         (common-lisp:error ":location is required") :type
                         (common-lisp:or s3destination-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3destination-configuration-location
                         :shape "S3DestinationLocation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3destination-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3destination-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3destination-configuration
                    'make-s3destination-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3destination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3destination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3destination-configuration))
   common-lisp:nil))
(common-lisp:deftype s3destination-location () 'common-lisp:string)
(common-lisp:deftype s3location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3source-configuration common-lisp:nil
                       ((location :initarg :location :initform
                         (common-lisp:error ":location is required") :type
                         (common-lisp:or s3source-location common-lisp:null)
                         :accessor struct-shape-s3source-configuration-location
                         :shape "S3SourceLocation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3source-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3source-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3source-configuration 'make-s3source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3source-configuration))
   common-lisp:nil))
(common-lisp:deftype s3source-location () 'common-lisp:string)
(common-lisp:deftype s3url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scene-capabilities ()
   '(trivial-types:proper-list scene-capability))
 (common-lisp:defun make-scene-capabilities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scene-capability))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scene-capability () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scene-error common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or scene-error-code common-lisp:null)
                         :accessor struct-shape-scene-error-code :shape
                         "SceneErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor struct-shape-scene-error-message :shape
                         "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scene-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scene-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scene-error 'make-scene-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scene-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scene-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scene-error))
   common-lisp:nil))
(common-lisp:deftype scene-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scene-metadata-map () 'common-lisp:hash-table)
 (common-lisp:defun make-scene-metadata-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype scene-metadata-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scene-summaries ()
   '(trivial-types:proper-list scene-summary))
 (common-lisp:defun make-scene-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scene-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass scene-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor struct-shape-scene-summary-arn :shape
                         "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-location :initarg :content-location :initform
                         (common-lisp:error ":contentlocation is required")
                         :type (common-lisp:or s3url common-lisp:null)
                         :accessor struct-shape-scene-summary-content-location
                         :shape "S3Url" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-scene-summary-creation-date-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-scene-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scene-id :initarg :scene-id :initform
                         (common-lisp:error ":sceneid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-scene-summary-scene-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-date-time :initarg :update-date-time :initform
                         (common-lisp:error ":updatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-scene-summary-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scene-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scene-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scene-summary 'make-scene-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scene-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scene-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-location))
      (common-lisp:list
       (common-lisp:cons "contentLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-id))
      (common-lisp:list
       (common-lisp:cons "sceneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scene-summary))
   common-lisp:nil))
(common-lisp:deftype scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype selected-property-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-selected-property-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (iottwinmaker-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype site-wise-external-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass source-configuration common-lisp:nil
                       ((iot-site-wise-configuration :initarg
                         :iot-site-wise-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or iot-site-wise-source-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-configuration-iot-site-wise-configuration
                         :shape "IotSiteWiseSourceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (iot-twin-maker-configuration :initarg
                         :iot-twin-maker-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or iot-twin-maker-source-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-configuration-iot-twin-maker-configuration
                         :shape "IotTwinMakerSourceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3configuration :initarg :s3configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or s3source-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-configuration-s3configuration
                         :shape "S3SourceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor struct-shape-source-configuration-type
                         :shape "SourceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-configuration 'make-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iot-site-wise-configuration))
      (common-lisp:list
       (common-lisp:cons "iotSiteWiseConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iot-twin-maker-configuration))
      (common-lisp:list
       (common-lisp:cons "iotTwinMakerConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "s3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-configurations ()
   '(trivial-types:proper-list source-configuration))
 (common-lisp:defun make-source-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass status common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor struct-shape-status-error :shape
                         "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-status-state :shape "State" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'status 'make-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input status))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype sync-job-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sync-job-status common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor struct-shape-sync-job-status-error :shape
                         "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or sync-job-state common-lisp:null)
                         :accessor struct-shape-sync-job-status-state :shape
                         "SyncJobState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sync-job-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sync-job-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sync-job-status 'make-sync-job-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-job-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-job-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-job-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sync-job-summaries ()
   '(trivial-types:proper-list sync-job-summary))
 (common-lisp:defun make-sync-job-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sync-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sync-job-summary common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor struct-shape-sync-job-summary-arn :shape
                         "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-sync-job-summary-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or sync-job-status common-lisp:null)
                         :accessor struct-shape-sync-job-summary-status :shape
                         "SyncJobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-source :initarg :sync-source :initform
                         common-lisp:nil :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor struct-shape-sync-job-summary-sync-source
                         :shape "SyncSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-date-time :initarg :update-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-sync-job-summary-update-date-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-sync-job-summary-workspace-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sync-job-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sync-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sync-job-summary 'make-sync-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-source))
      (common-lisp:list
       (common-lisp:cons "syncSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sync-resource-filter common-lisp:nil
                       ((external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-sync-resource-filter-external-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-sync-resource-filter-resource-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or sync-resource-type common-lisp:null)
                         :accessor
                         struct-shape-sync-resource-filter-resource-type :shape
                         "SyncResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or sync-resource-state common-lisp:null)
                         :accessor struct-shape-sync-resource-filter-state
                         :shape "SyncResourceState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sync-resource-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sync-resource-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sync-resource-filter 'make-sync-resource-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-resource-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-resource-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-resource-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sync-resource-filters ()
   '(trivial-types:proper-list sync-resource-filter))
 (common-lisp:defun make-sync-resource-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sync-resource-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sync-resource-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sync-resource-status common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor struct-shape-sync-resource-status-error
                         :shape "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or sync-resource-state common-lisp:null)
                         :accessor struct-shape-sync-resource-status-state
                         :shape "SyncResourceState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sync-resource-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sync-resource-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sync-resource-status 'make-sync-resource-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-resource-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-resource-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-resource-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sync-resource-summaries ()
   '(trivial-types:proper-list sync-resource-summary))
 (common-lisp:defun make-sync-resource-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sync-resource-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sync-resource-summary common-lisp:nil
                       ((external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-sync-resource-summary-external-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-sync-resource-summary-resource-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or sync-resource-type common-lisp:null)
                         :accessor
                         struct-shape-sync-resource-summary-resource-type
                         :shape "SyncResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or sync-resource-status common-lisp:null)
                         :accessor struct-shape-sync-resource-summary-status
                         :shape "SyncResourceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-date-time :initarg :update-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-sync-resource-summary-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sync-resource-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sync-resource-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sync-resource-summary 'make-sync-resource-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sync-resource-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sync-resource-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sync-resource-summary))
   common-lisp:nil))
(common-lisp:deftype sync-resource-type () 'common-lisp:string)
(common-lisp:deftype sync-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tabular-conditions common-lisp:nil
                       ((order-by :initarg :order-by :initform common-lisp:nil
                         :type (common-lisp:or order-by-list common-lisp:null)
                         :accessor struct-shape-tabular-conditions-order-by
                         :shape "OrderByList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-filters :initarg :property-filters :initform
                         common-lisp:nil :type
                         (common-lisp:or property-filters common-lisp:null)
                         :accessor
                         struct-shape-tabular-conditions-property-filters
                         :shape "PropertyFilters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tabular-conditions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tabular-conditions
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tabular-conditions 'make-tabular-conditions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tabular-conditions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tabular-conditions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-filters))
      (common-lisp:list
       (common-lisp:cons "propertyFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tabular-conditions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tabular-property-value ()
   '(trivial-types:proper-list property-table-value))
 (common-lisp:defun make-tabular-property-value
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-table-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tabular-property-values ()
   '(trivial-types:proper-list tabular-property-value))
 (common-lisp:defun make-tabular-property-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tabular-property-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (iottwinmaker-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype time () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (iottwinmaker-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:deftype twin-maker-arn () 'common-lisp:string)
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "TwinMakerArn" :location "querystring"
                         :location-name "resourceARN")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-component-type-request common-lisp:nil
                       ((component-type-id :initarg :component-type-id
                         :initform
                         (common-lisp:error ":componenttypeid is required")
                         :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-update-component-type-request-component-type-id
                         :shape "ComponentTypeId" :location "uri"
                         :location-name "componentTypeId")
                        (component-type-name :initarg :component-type-name
                         :initform common-lisp:nil :type
                         (common-lisp:or component-type-name common-lisp:null)
                         :accessor
                         struct-shape-update-component-type-request-component-type-name
                         :shape "ComponentTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (composite-component-types :initarg
                         :composite-component-types :initform common-lisp:nil
                         :type
                         (common-lisp:or composite-component-types-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-component-type-request-composite-component-types
                         :shape "CompositeComponentTypesRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-component-type-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extends-from :initarg :extends-from :initform
                         common-lisp:nil :type
                         (common-lisp:or extends-from common-lisp:null)
                         :accessor
                         struct-shape-update-component-type-request-extends-from
                         :shape "ExtendsFrom" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (functions :initarg :functions :initform
                         common-lisp:nil :type
                         (common-lisp:or functions-request common-lisp:null)
                         :accessor
                         struct-shape-update-component-type-request-functions
                         :shape "FunctionsRequest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-singleton :initarg :is-singleton :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-component-type-request-is-singleton
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-definitions :initarg :property-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or property-definitions-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-component-type-request-property-definitions
                         :shape "PropertyDefinitionsRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (property-groups :initarg :property-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or property-groups-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-component-type-request-property-groups
                         :shape "PropertyGroupsRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-component-type-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-component-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-component-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-component-type-request
                    'make-update-component-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-name))
      (common-lisp:list
       (common-lisp:cons "componentTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-component-types))
      (common-lisp:list
       (common-lisp:cons "compositeComponentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extends-from))
      (common-lisp:list
       (common-lisp:cons "extendsFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'functions))
      (common-lisp:list
       (common-lisp:cons "functions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-singleton))
      (common-lisp:list
       (common-lisp:cons "isSingleton"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'property-definitions))
      (common-lisp:list
       (common-lisp:cons "propertyDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-groups))
      (common-lisp:list
       (common-lisp:cons "propertyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-component-type-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor
                         struct-shape-update-component-type-response-arn :shape
                         "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-type-id :initarg :component-type-id
                         :initform
                         (common-lisp:error ":componenttypeid is required")
                         :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         struct-shape-update-component-type-response-component-type-id
                         :shape "ComponentTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-update-component-type-response-state
                         :shape "State" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-component-type-response-workspace-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-component-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-component-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-component-type-response
                    'make-update-component-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-entity-request common-lisp:nil
                       ((component-updates :initarg :component-updates
                         :initform common-lisp:nil :type
                         (common-lisp:or component-updates-map-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-entity-request-component-updates
                         :shape "ComponentUpdatesMapRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (composite-component-updates :initarg
                         :composite-component-updates :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          composite-component-updates-map-request
                          common-lisp:null)
                         :accessor
                         struct-shape-update-entity-request-composite-component-updates
                         :shape "CompositeComponentUpdatesMapRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-entity-request-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entityid is required") :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         struct-shape-update-entity-request-entity-id :shape
                         "EntityId" :location "uri" :location-name "entityId")
                        (entity-name :initarg :entity-name :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor
                         struct-shape-update-entity-request-entity-name :shape
                         "EntityName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parent-entity-update :initarg :parent-entity-update
                         :initform common-lisp:nil :type
                         (common-lisp:or parent-entity-update-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-entity-request-parent-entity-update
                         :shape "ParentEntityUpdateRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-entity-request-workspace-id :shape
                         "Id" :location "uri" :location-name "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-entity-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-entity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-entity-request 'make-update-entity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-entity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-updates))
      (common-lisp:list
       (common-lisp:cons "componentUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-component-updates))
      (common-lisp:list
       (common-lisp:cons "compositeComponentUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-name))
      (common-lisp:list
       (common-lisp:cons "entityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-entity-update))
      (common-lisp:list
       (common-lisp:cons "parentEntityUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-entity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-entity-response common-lisp:nil
                       ((state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-update-entity-response-state :shape
                         "State" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-date-time :initarg :update-date-time :initform
                         (common-lisp:error ":updatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-entity-response-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-entity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-entity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-entity-response 'make-update-entity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-entity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-entity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-entity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pricing-plan-request common-lisp:nil
                       ((bundle-names :initarg :bundle-names :initform
                         common-lisp:nil :type
                         (common-lisp:or pricing-bundles common-lisp:null)
                         :accessor
                         struct-shape-update-pricing-plan-request-bundle-names
                         :shape "PricingBundles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pricing-mode :initarg :pricing-mode :initform
                         (common-lisp:error ":pricingmode is required") :type
                         (common-lisp:or pricing-mode common-lisp:null)
                         :accessor
                         struct-shape-update-pricing-plan-request-pricing-mode
                         :shape "PricingMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-pricing-plan-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-pricing-plan-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-pricing-plan-request
                    'make-update-pricing-plan-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pricing-plan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pricing-plan-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-names))
      (common-lisp:list
       (common-lisp:cons "bundleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-mode))
      (common-lisp:list
       (common-lisp:cons "pricingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pricing-plan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pricing-plan-response common-lisp:nil
                       ((current-pricing-plan :initarg :current-pricing-plan
                         :initform
                         (common-lisp:error ":currentpricingplan is required")
                         :type (common-lisp:or pricing-plan common-lisp:null)
                         :accessor
                         struct-shape-update-pricing-plan-response-current-pricing-plan
                         :shape "PricingPlan" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-pricing-plan :initarg :pending-pricing-plan
                         :initform common-lisp:nil :type
                         (common-lisp:or pricing-plan common-lisp:null)
                         :accessor
                         struct-shape-update-pricing-plan-response-pending-pricing-plan
                         :shape "PricingPlan" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-pricing-plan-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-pricing-plan-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-pricing-plan-response
                    'make-update-pricing-plan-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pricing-plan-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pricing-plan-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-pricing-plan))
      (common-lisp:list
       (common-lisp:cons "currentPricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-pricing-plan))
      (common-lisp:list
       (common-lisp:cons "pendingPricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pricing-plan-response))
   common-lisp:nil))
(common-lisp:deftype update-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-scene-request common-lisp:nil
                       ((capabilities :initarg :capabilities :initform
                         common-lisp:nil :type
                         (common-lisp:or scene-capabilities common-lisp:null)
                         :accessor
                         struct-shape-update-scene-request-capabilities :shape
                         "SceneCapabilities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-location :initarg :content-location :initform
                         common-lisp:nil :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         struct-shape-update-scene-request-content-location
                         :shape "S3Url" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-scene-request-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scene-id :initarg :scene-id :initform
                         (common-lisp:error ":sceneid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-scene-request-scene-id :shape "Id"
                         :location "uri" :location-name "sceneId")
                        (scene-metadata :initarg :scene-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or scene-metadata-map common-lisp:null)
                         :accessor
                         struct-shape-update-scene-request-scene-metadata
                         :shape "SceneMetadataMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-scene-request-workspace-id :shape
                         "Id" :location "uri" :location-name "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-scene-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-scene-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-scene-request 'make-update-scene-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-scene-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-scene-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-location))
      (common-lisp:list
       (common-lisp:cons "contentLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-metadata))
      (common-lisp:list
       (common-lisp:cons "sceneMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-scene-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-scene-response common-lisp:nil
                       ((update-date-time :initarg :update-date-time :initform
                         (common-lisp:error ":updatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-scene-response-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-scene-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-scene-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-scene-response 'make-update-scene-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-scene-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-scene-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-scene-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workspace-request common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-update-workspace-request-role :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3location :initarg :s3location :initform
                         common-lisp:nil :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         struct-shape-update-workspace-request-s3location
                         :shape "S3Location" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-workspace-request-workspace-id
                         :shape "Id" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-workspace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-workspace-request 'make-update-workspace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workspace-response common-lisp:nil
                       ((update-date-time :initarg :update-date-time :initform
                         (common-lisp:error ":updatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-response-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-workspace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-workspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-workspace-response
                    'make-update-workspace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-response))
   common-lisp:nil))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (iottwinmaker-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype values () '(trivial-types:proper-list property-value))
 (common-lisp:defun make-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workspace-delete-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workspace-summaries ()
   '(trivial-types:proper-list workspace-summary))
 (common-lisp:defun make-workspace-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspace-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass workspace-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor struct-shape-workspace-summary-arn :shape
                         "TwinMakerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-workspace-summary-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-workspace-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (linked-services :initarg :linked-services :initform
                         common-lisp:nil :type
                         (common-lisp:or linked-services common-lisp:null)
                         :accessor
                         struct-shape-workspace-summary-linked-services :shape
                         "LinkedServices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-date-time :initarg :update-date-time :initform
                         (common-lisp:error ":updatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-workspace-summary-update-date-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-workspace-summary-workspace-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workspace-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workspace-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'workspace-summary 'make-workspace-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspace-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspace-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linked-services))
      (common-lisp:list
       (common-lisp:cons "linkedServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspace-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun batch-put-property-values
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entries workspace-id)
   (common-lisp:declare (common-lisp:ignorable entries workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-put-property-values-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entity-properties"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "BatchPutPropertyValues"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-put-property-values))
(common-lisp:progn
 (common-lisp:defun cancel-metadata-transfer-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metadata-transfer-job-id)
   (common-lisp:declare (common-lisp:ignorable metadata-transfer-job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-metadata-transfer-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/metadata-transfer-jobs/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metadata-transfer-job-id))))
                                                        "CancelMetadataTransferJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-metadata-transfer-job))
(common-lisp:progn
 (common-lisp:defun create-component-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-type-id component-type-name
                     composite-component-types description extends-from
                     functions is-singleton property-definitions
                     property-groups tags workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable component-type-id component-type-name
     composite-component-types description extends-from functions is-singleton
     property-definitions property-groups tags workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-component-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/component-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'component-type-id))))
                                                        "CreateComponentType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-component-type))
(common-lisp:progn
 (common-lisp:defun create-entity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key components composite-components
                     description entity-id entity-name parent-entity-id tags
                     workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable components composite-components description
     entity-id entity-name parent-entity-id tags workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-entity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entities"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "CreateEntity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-entity))
(common-lisp:progn
 (common-lisp:defun create-metadata-transfer-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description destination
                     metadata-transfer-job-id sources)
   (common-lisp:declare
    (common-lisp:ignorable description destination metadata-transfer-job-id
     sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-metadata-transfer-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/metadata-transfer-jobs"
                                                        "CreateMetadataTransferJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-metadata-transfer-job))
(common-lisp:progn
 (common-lisp:defun create-scene
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key capabilities content-location description
                     scene-id scene-metadata tags workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable capabilities content-location description scene-id
     scene-metadata tags workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-scene-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/scenes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "CreateScene"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-scene))
(common-lisp:progn
 (common-lisp:defun create-sync-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sync-role sync-source tags workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable sync-role sync-source tags workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-sync-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/sync-jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sync-source))))
                                                        "CreateSyncJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-sync-job))
(common-lisp:progn
 (common-lisp:defun create-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description role s3location tags
                     workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable description role s3location tags workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "CreateWorkspace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-workspace))
(common-lisp:progn
 (common-lisp:defun delete-component-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-type-id workspace-id)
   (common-lisp:declare (common-lisp:ignorable component-type-id workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-component-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/component-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'component-type-id))))
                                                        "DeleteComponentType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-component-type))
(common-lisp:progn
 (common-lisp:defun delete-entity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entity-id is-recursive workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable entity-id is-recursive workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-entity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entities/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'entity-id))))
                                                        "DeleteEntity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-entity))
(common-lisp:progn
 (common-lisp:defun delete-scene
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scene-id workspace-id)
   (common-lisp:declare (common-lisp:ignorable scene-id workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-scene-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/scenes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scene-id))))
                                                        "DeleteScene"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-scene))
(common-lisp:progn
 (common-lisp:defun delete-sync-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sync-source workspace-id)
   (common-lisp:declare (common-lisp:ignorable sync-source workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-sync-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/sync-jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sync-source))))
                                                        "DeleteSyncJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-sync-job))
(common-lisp:progn
 (common-lisp:defun delete-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "DeleteWorkspace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-workspace))
(common-lisp:progn
 (common-lisp:defun execute-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token query-statement
                     workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token query-statement
     workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/queries/execution"
                                                        "ExecuteQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'execute-query))
(common-lisp:progn
 (common-lisp:defun get-component-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-type-id workspace-id)
   (common-lisp:declare (common-lisp:ignorable component-type-id workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-component-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/component-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'component-type-id))))
                                                        "GetComponentType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-component-type))
(common-lisp:progn
 (common-lisp:defun get-entity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entity-id workspace-id)
   (common-lisp:declare (common-lisp:ignorable entity-id workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-entity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entities/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'entity-id))))
                                                        "GetEntity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-entity))
(common-lisp:progn
 (common-lisp:defun get-metadata-transfer-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metadata-transfer-job-id)
   (common-lisp:declare (common-lisp:ignorable metadata-transfer-job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-metadata-transfer-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/metadata-transfer-jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metadata-transfer-job-id))))
                                                        "GetMetadataTransferJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-metadata-transfer-job))
(common-lisp:progn
 (common-lisp:defun get-pricing-plan ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iottwinmaker-request :method "GET" :path
                                "/pricingplan" :operation "GetPricingPlan"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-pricing-plan))
(common-lisp:progn
 (common-lisp:defun get-property-value
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-name component-path
                     component-type-id entity-id max-results next-token
                     property-group-name selected-properties tabular-conditions
                     workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable component-name component-path component-type-id
     entity-id max-results next-token property-group-name selected-properties
     tabular-conditions workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-property-value-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entity-properties/value"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "GetPropertyValue"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-property-value))
(common-lisp:progn
 (common-lisp:defun get-property-value-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-name component-path
                     component-type-id end-date-time end-time entity-id
                     interpolation max-results next-token order-by-time
                     property-filters selected-properties start-date-time
                     start-time workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable component-name component-path component-type-id
     end-date-time end-time entity-id interpolation max-results next-token
     order-by-time property-filters selected-properties start-date-time
     start-time workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-property-value-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entity-properties/history"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "GetPropertyValueHistory"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-property-value-history))
(common-lisp:progn
 (common-lisp:defun get-scene
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scene-id workspace-id)
   (common-lisp:declare (common-lisp:ignorable scene-id workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-scene-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/scenes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scene-id))))
                                                        "GetScene"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-scene))
(common-lisp:progn
 (common-lisp:defun get-sync-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sync-source workspace-id)
   (common-lisp:declare (common-lisp:ignorable sync-source workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sync-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sync-jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sync-source))))
                                                        "GetSyncJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sync-job))
(common-lisp:progn
 (common-lisp:defun get-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "GetWorkspace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-workspace))
(common-lisp:progn
 (common-lisp:defun list-component-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token
                     workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable filters max-results next-token workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-component-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/component-types-list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "ListComponentTypes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-component-types))
(common-lisp:progn
 (common-lisp:defun list-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-path entity-id max-results
                     next-token workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable component-path entity-id max-results next-token
     workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-components-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entities/~A/components-list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'entity-id))))
                                                        "ListComponents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-components))
(common-lisp:progn
 (common-lisp:defun list-entities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token
                     workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable filters max-results next-token workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-entities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entities-list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "ListEntities"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-entities))
(common-lisp:progn
 (common-lisp:defun list-metadata-transfer-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-type filters max-results
                     next-token source-type)
   (common-lisp:declare
    (common-lisp:ignorable destination-type filters max-results next-token
     source-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-metadata-transfer-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/metadata-transfer-jobs-list"
                                                        "ListMetadataTransferJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-metadata-transfer-jobs))
(common-lisp:progn
 (common-lisp:defun list-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-name component-path entity-id
                     max-results next-token workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable component-name component-path entity-id max-results
     next-token workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-properties-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/properties-list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "ListProperties"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-properties))
(common-lisp:progn
 (common-lisp:defun list-scenes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-scenes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/scenes-list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "ListScenes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-scenes))
(common-lisp:progn
 (common-lisp:defun list-sync-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sync-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/sync-jobs-list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "ListSyncJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-sync-jobs))
(common-lisp:progn
 (common-lisp:defun list-sync-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token
                     sync-source workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable filters max-results next-token sync-source
     workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sync-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/sync-jobs/~A/resources-list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sync-source))))
                                                        "ListSyncResources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-sync-resources))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token resource-arn)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/tags-list"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/workspaces-list"
                                                        "ListWorkspaces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-workspaces))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/tags"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" "/tags"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-component-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-type-id component-type-name
                     composite-component-types description extends-from
                     functions is-singleton property-definitions
                     property-groups workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable component-type-id component-type-name
     composite-component-types description extends-from functions is-singleton
     property-definitions property-groups workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-component-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/component-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'component-type-id))))
                                                        "UpdateComponentType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-component-type))
(common-lisp:progn
 (common-lisp:defun update-entity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-updates
                     composite-component-updates description entity-id
                     entity-name parent-entity-update workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable component-updates composite-component-updates
     description entity-id entity-name parent-entity-update workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-entity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entities/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'entity-id))))
                                                        "UpdateEntity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-entity))
(common-lisp:progn
 (common-lisp:defun update-pricing-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bundle-names pricing-mode)
   (common-lisp:declare (common-lisp:ignorable bundle-names pricing-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-pricing-plan-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/pricingplan"
                                                        "UpdatePricingPlan"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-pricing-plan))
(common-lisp:progn
 (common-lisp:defun update-scene
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key capabilities content-location description
                     scene-id scene-metadata workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable capabilities content-location description scene-id
     scene-metadata workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-scene-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/scenes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scene-id))))
                                                        "UpdateScene"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-scene))
(common-lisp:progn
 (common-lisp:defun update-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description role s3location workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable description role s3location workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "UpdateWorkspace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-workspace))
